<?php

namespace App\Models;

use Aft\DataModel\AftDataModel;
use Illuminate\Database\Eloquent\SoftDeletes;
{% if table.meta.hasTrait %}
use App\Models\Traits\{{ table.name }} as {{ table.name }}Trait;
{% endif %}
use Illuminate\Support\Str;

class {{ table.name }} extends AftDataModel{% if table.meta.interfaces|length > 0 %} implements {{ table.meta.interfaces|join(', ') }}{% endif %}

{
    use {% if table.meta.hasTrait %}{{ table.name }}Trait, {% endif %}SoftDeletes;

    const CREATED_AT = 'CreatedAt';
    const UPDATED_AT = 'UpdatedAt';
    const DELETED_AT = 'DeletedAt';

    protected $connection = 'aftdb';
    protected $table = '{{ table.name }}';
    protected $primaryKey = '{{ table.meta.primary_key_name }}';
    public $incrementing = {{ (table.meta.primary_key_type == 'integer') ? 'true' : 'false' }};
    protected $keyType = '{{ table.meta.primary_key_type }}';
    public $timestamps = true;
    protected $dateFormat = 'Y-m-d H:i:s';

    /**
    * To be able to auto-save and fill prperties, guarded will be empty for now.
    * @TODO: once basic things are settled, find an autogenerated solution for this.
    */
    protected $guarded = [];

    protected $hidden = [
{% for row in table.rows %}{% if row.relationship or row.relationship_type %}
        '{{ row.name }}',
{% endif %}{% endfor %}
    ];

    protected $appends = [
        'label',
        'label_plural',
        'display_name',
    ];

    protected $casts = [
{% for row in table.rows %}
{% set fieldType = row.type|split(':')[0] %}
{% if fieldType == 'integer' or fieldType == 'boolean' or fieldType == 'dateTime' %}
        '{{ row.name }}' => '{{ fieldType|lower }}',
{% endif %}
{% endfor %}
        'CreatedAt' => 'datetime',
        'UpdatedAt' => 'datetime',
        'DeletedAt' => 'datetime',
    ];

    // TODO: remove all this once datetime is no longer different across tables
    protected function asDateTime($value) {
        $value = preg_replace('/\.[0-9]+$/', '', $value);
        return parent::asDateTime($value);
    }
{% for parent in table.meta.parents %}{% set rel = parent.relationship|split(':') %}

    /**
    * Get the direct parent relationship the entity IF $parentClassName is null
    * OR: Search up the hierarchy for a matching $parentClassName
    *
    * @param null $parentClassName
    * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
    * @throws \ErrorException
    */
    public function parent($parentClassName = null) {
        if(is_null($parentClassName)) {
            return $this->belongsTo('App\Models\{{ rel[0] }}', '{{ parent.row.name }}', '{{ rel[1] }}');
        } else if ($parentClassName == 'App\Models\{{ rel[0] }}') {
            return $this->parent()->first();
        }
        if (method_exists('App\Models\{{ rel[0] }}', 'parent') && $this->parent) {
            return $this->parent->parent($parentClassName)->first();
        }
        throw new \ErrorException('Cannot resolve parent of ' . class_basename($this));
    }

{% endfor %}
{% if table.meta.children %}
{% for child in table.meta.children %}
    // TODO: child = {{ child }} this _has_ to be useful somewhere
{% endfor %}

{% endif %}
{% for row in table.rows %}{% if row.relationship %}{% set rel = row.relationship|split(':') %}{% set rowName = row.nameNice ?? row.name %}
{% if not row.relationship_type %}
    // TODO: update CSV to validate or correct this relationship!
    public function {{ rowName }}() {
        return $this->hasOne('App\Models\{{ rel[0] }}', '{{ rel[1] }}', '{{ row.name }}');
    }

{% elseif row.relationship_type == "belongsTo" %}
    public function {{ rowName }}() {
        return $this->belongsTo('App\Models\{{ rel[0] }}', '{{ row.name }}', '{{ rel[1] }}'){% if row.self_reference %}

            ->where('{{ rel[1] }}', '!=', $this->{{ rel[1] }}){% endif %};
    }

{% elseif row.relationship_type == "hasOne" or row.relationship_type == "hasOne:child" or row.relationship_type == "hasOne:reference" %}
    public function {{ rowName }}() {
        return $this->hasOne('App\Models\{{ rel[0] }}', '{{ rel[1] }}', '{{ row.name }}');
    }

{% elseif row.relationship_type == "hasMany" %}
    public function {{ rowName }}() {
        return $this->hasMany('App\Models\{{ rel[0] }}', '{{ rel[1] }}'){% if row.self_reference %}

            ->where('{{ rel[1] }}', '!=', $this->{{ rel[1] }}){% endif %};
    }

{% endif %}{% endif %}
{% endfor %}

    public function getLabelAttribute() {
        return $this->getLabel();
    }

    public function getLabelPluralAttribute() {
        return $this->getLabel(true);
    }

    public function getLabel(bool $plural = false) {
        $label = '{{ table.meta.label ?: table.name }}';
        return ($plural) ? Str::plural($label) : $label;
    }

    public function getDisplayNameAttribute() {
        return $this->getDisplayName();
    }

    public function getDisplayName($length = 'default') {
{% if table.meta.display %}
        switch ($length) {
{% for name, group in table.meta.display %}{% if name != 'default' %}
            case '{{ name }}':
                $name = {% for source in group %}{% if loop.first %}$this->{{ source }}{% else %} . ' ' . $this->{{ source }}{% endif %}{% endfor %};
                break;
{% endif %}{% endfor %}
            default:
                $name = {% if table.meta.display.default %} {% for source in table.meta.display.default %}{% if loop.first %} $this->{{ source }} {% else %} . ' ' . $this->{{ source }}{% endif %}{% endfor %} {% else %} '' {% endif %};
        }
{% endif %}
        return $name ?? '{{ table.meta.label ?: table.name }}';
    }

    public static function fields() {
        return [
{% for row in table.rows %}
            '{{ row.name }}' => [
                'displayName' => '{{ row.display_name ? row.display_name : row.name }}',
                // TODO: more options to come...
            ],
{% endfor %}
        ];
    }

    public static function rules() {
        return [
{% for row in table.rows %}{% if row.rules and not row.system_column %}
            '{{ row.name }}' => '{{ row.rules }}',
{% endif %}{% endfor %}
        ];
    }

}
