<?php
/**
 * DBConnection
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DBConnection Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DBConnection implements ModelInterface, ArrayAccess, \JsonSerializable, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DBConnection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can' => 'array<string,bool>',
        'name' => 'string',
        'dialect' => \OpenAPI\Client\Model\Dialect::class,
        'snippets' => '\OpenAPI\Client\Model\Snippet[]',
        'pdts_enabled' => 'bool',
        'host' => 'string',
        'port' => 'string',
        'username' => 'string',
        'password' => 'string',
        'uses_oauth' => 'bool',
        'certificate' => 'string',
        'file_type' => 'string',
        'database' => 'string',
        'db_timezone' => 'string',
        'query_timezone' => 'string',
        'schema' => 'string',
        'max_connections' => 'int',
        'max_billing_gigabytes' => 'string',
        'ssl' => 'bool',
        'verify_ssl' => 'bool',
        'tmp_db_name' => 'string',
        'jdbc_additional_params' => 'string',
        'pool_timeout' => 'int',
        'dialect_name' => 'string',
        'supports_data_studio_link' => 'bool',
        'created_at' => 'string',
        'user_id' => 'string',
        'example' => 'bool',
        'user_db_credentials' => 'bool',
        'user_attribute_fields' => 'string[]',
        'maintenance_cron' => 'string',
        'last_regen_at' => 'string',
        'last_reap_at' => 'string',
        'sql_runner_precache_tables' => 'bool',
        'sql_writing_with_info_schema' => 'bool',
        'after_connect_statements' => 'string',
        'pdt_context_override' => \OpenAPI\Client\Model\DBConnectionOverride::class,
        'managed' => 'bool',
        'custom_local_port' => 'int',
        'tunnel_id' => 'string',
        'uses_tns' => 'bool',
        'pdt_concurrency' => 'int',
        'disable_context_comment' => 'bool',
        'oauth_application_id' => 'string',
        'always_retry_failed_builds' => 'bool',
        'cost_estimate_enabled' => 'bool',
        'pdt_api_control_enabled' => 'bool',
        'connection_pooling' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can' => null,
        'name' => null,
        'dialect' => null,
        'snippets' => null,
        'pdts_enabled' => null,
        'host' => null,
        'port' => null,
        'username' => null,
        'password' => null,
        'uses_oauth' => null,
        'certificate' => null,
        'file_type' => null,
        'database' => null,
        'db_timezone' => null,
        'query_timezone' => null,
        'schema' => null,
        'max_connections' => 'int64',
        'max_billing_gigabytes' => null,
        'ssl' => null,
        'verify_ssl' => null,
        'tmp_db_name' => null,
        'jdbc_additional_params' => null,
        'pool_timeout' => 'int64',
        'dialect_name' => null,
        'supports_data_studio_link' => null,
        'created_at' => null,
        'user_id' => null,
        'example' => null,
        'user_db_credentials' => null,
        'user_attribute_fields' => null,
        'maintenance_cron' => null,
        'last_regen_at' => null,
        'last_reap_at' => null,
        'sql_runner_precache_tables' => null,
        'sql_writing_with_info_schema' => null,
        'after_connect_statements' => null,
        'pdt_context_override' => null,
        'managed' => null,
        'custom_local_port' => 'int64',
        'tunnel_id' => null,
        'uses_tns' => null,
        'pdt_concurrency' => 'int64',
        'disable_context_comment' => null,
        'oauth_application_id' => null,
        'always_retry_failed_builds' => null,
        'cost_estimate_enabled' => null,
        'pdt_api_control_enabled' => null,
        'connection_pooling' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'can' => false,
        'name' => false,
        'dialect' => false,
        'snippets' => false,
        'pdts_enabled' => false,
        'host' => true,
        'port' => true,
        'username' => true,
        'password' => true,
        'uses_oauth' => false,
        'certificate' => true,
        'file_type' => true,
        'database' => true,
        'db_timezone' => true,
        'query_timezone' => true,
        'schema' => true,
        'max_connections' => true,
        'max_billing_gigabytes' => true,
        'ssl' => false,
        'verify_ssl' => false,
        'tmp_db_name' => true,
        'jdbc_additional_params' => true,
        'pool_timeout' => true,
        'dialect_name' => true,
        'supports_data_studio_link' => false,
        'created_at' => true,
        'user_id' => true,
        'example' => false,
        'user_db_credentials' => true,
        'user_attribute_fields' => true,
        'maintenance_cron' => true,
        'last_regen_at' => true,
        'last_reap_at' => true,
        'sql_runner_precache_tables' => false,
        'sql_writing_with_info_schema' => false,
        'after_connect_statements' => true,
        'pdt_context_override' => false,
        'managed' => false,
        'custom_local_port' => true,
        'tunnel_id' => true,
        'uses_tns' => true,
        'pdt_concurrency' => true,
        'disable_context_comment' => true,
        'oauth_application_id' => true,
        'always_retry_failed_builds' => true,
        'cost_estimate_enabled' => true,
        'pdt_api_control_enabled' => true,
        'connection_pooling' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'name' => 'name',
        'dialect' => 'dialect',
        'snippets' => 'snippets',
        'pdts_enabled' => 'pdts_enabled',
        'host' => 'host',
        'port' => 'port',
        'username' => 'username',
        'password' => 'password',
        'uses_oauth' => 'uses_oauth',
        'certificate' => 'certificate',
        'file_type' => 'file_type',
        'database' => 'database',
        'db_timezone' => 'db_timezone',
        'query_timezone' => 'query_timezone',
        'schema' => 'schema',
        'max_connections' => 'max_connections',
        'max_billing_gigabytes' => 'max_billing_gigabytes',
        'ssl' => 'ssl',
        'verify_ssl' => 'verify_ssl',
        'tmp_db_name' => 'tmp_db_name',
        'jdbc_additional_params' => 'jdbc_additional_params',
        'pool_timeout' => 'pool_timeout',
        'dialect_name' => 'dialect_name',
        'supports_data_studio_link' => 'supports_data_studio_link',
        'created_at' => 'created_at',
        'user_id' => 'user_id',
        'example' => 'example',
        'user_db_credentials' => 'user_db_credentials',
        'user_attribute_fields' => 'user_attribute_fields',
        'maintenance_cron' => 'maintenance_cron',
        'last_regen_at' => 'last_regen_at',
        'last_reap_at' => 'last_reap_at',
        'sql_runner_precache_tables' => 'sql_runner_precache_tables',
        'sql_writing_with_info_schema' => 'sql_writing_with_info_schema',
        'after_connect_statements' => 'after_connect_statements',
        'pdt_context_override' => 'pdt_context_override',
        'managed' => 'managed',
        'custom_local_port' => 'custom_local_port',
        'tunnel_id' => 'tunnel_id',
        'uses_tns' => 'uses_tns',
        'pdt_concurrency' => 'pdt_concurrency',
        'disable_context_comment' => 'disable_context_comment',
        'oauth_application_id' => 'oauth_application_id',
        'always_retry_failed_builds' => 'always_retry_failed_builds',
        'cost_estimate_enabled' => 'cost_estimate_enabled',
        'pdt_api_control_enabled' => 'pdt_api_control_enabled',
        'connection_pooling' => 'connection_pooling'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'name' => 'setName',
        'dialect' => 'setDialect',
        'snippets' => 'setSnippets',
        'pdts_enabled' => 'setPdtsEnabled',
        'host' => 'setHost',
        'port' => 'setPort',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'uses_oauth' => 'setUsesOauth',
        'certificate' => 'setCertificate',
        'file_type' => 'setFileType',
        'database' => 'setDatabase',
        'db_timezone' => 'setDbTimezone',
        'query_timezone' => 'setQueryTimezone',
        'schema' => 'setSchema',
        'max_connections' => 'setMaxConnections',
        'max_billing_gigabytes' => 'setMaxBillingGigabytes',
        'ssl' => 'setSsl',
        'verify_ssl' => 'setVerifySsl',
        'tmp_db_name' => 'setTmpDbName',
        'jdbc_additional_params' => 'setJdbcAdditionalParams',
        'pool_timeout' => 'setPoolTimeout',
        'dialect_name' => 'setDialectName',
        'supports_data_studio_link' => 'setSupportsDataStudioLink',
        'created_at' => 'setCreatedAt',
        'user_id' => 'setUserId',
        'example' => 'setExample',
        'user_db_credentials' => 'setUserDbCredentials',
        'user_attribute_fields' => 'setUserAttributeFields',
        'maintenance_cron' => 'setMaintenanceCron',
        'last_regen_at' => 'setLastRegenAt',
        'last_reap_at' => 'setLastReapAt',
        'sql_runner_precache_tables' => 'setSqlRunnerPrecacheTables',
        'sql_writing_with_info_schema' => 'setSqlWritingWithInfoSchema',
        'after_connect_statements' => 'setAfterConnectStatements',
        'pdt_context_override' => 'setPdtContextOverride',
        'managed' => 'setManaged',
        'custom_local_port' => 'setCustomLocalPort',
        'tunnel_id' => 'setTunnelId',
        'uses_tns' => 'setUsesTns',
        'pdt_concurrency' => 'setPdtConcurrency',
        'disable_context_comment' => 'setDisableContextComment',
        'oauth_application_id' => 'setOauthApplicationId',
        'always_retry_failed_builds' => 'setAlwaysRetryFailedBuilds',
        'cost_estimate_enabled' => 'setCostEstimateEnabled',
        'pdt_api_control_enabled' => 'setPdtApiControlEnabled',
        'connection_pooling' => 'setConnectionPooling'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'name' => 'getName',
        'dialect' => 'getDialect',
        'snippets' => 'getSnippets',
        'pdts_enabled' => 'getPdtsEnabled',
        'host' => 'getHost',
        'port' => 'getPort',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'uses_oauth' => 'getUsesOauth',
        'certificate' => 'getCertificate',
        'file_type' => 'getFileType',
        'database' => 'getDatabase',
        'db_timezone' => 'getDbTimezone',
        'query_timezone' => 'getQueryTimezone',
        'schema' => 'getSchema',
        'max_connections' => 'getMaxConnections',
        'max_billing_gigabytes' => 'getMaxBillingGigabytes',
        'ssl' => 'getSsl',
        'verify_ssl' => 'getVerifySsl',
        'tmp_db_name' => 'getTmpDbName',
        'jdbc_additional_params' => 'getJdbcAdditionalParams',
        'pool_timeout' => 'getPoolTimeout',
        'dialect_name' => 'getDialectName',
        'supports_data_studio_link' => 'getSupportsDataStudioLink',
        'created_at' => 'getCreatedAt',
        'user_id' => 'getUserId',
        'example' => 'getExample',
        'user_db_credentials' => 'getUserDbCredentials',
        'user_attribute_fields' => 'getUserAttributeFields',
        'maintenance_cron' => 'getMaintenanceCron',
        'last_regen_at' => 'getLastRegenAt',
        'last_reap_at' => 'getLastReapAt',
        'sql_runner_precache_tables' => 'getSqlRunnerPrecacheTables',
        'sql_writing_with_info_schema' => 'getSqlWritingWithInfoSchema',
        'after_connect_statements' => 'getAfterConnectStatements',
        'pdt_context_override' => 'getPdtContextOverride',
        'managed' => 'getManaged',
        'custom_local_port' => 'getCustomLocalPort',
        'tunnel_id' => 'getTunnelId',
        'uses_tns' => 'getUsesTns',
        'pdt_concurrency' => 'getPdtConcurrency',
        'disable_context_comment' => 'getDisableContextComment',
        'oauth_application_id' => 'getOauthApplicationId',
        'always_retry_failed_builds' => 'getAlwaysRetryFailedBuilds',
        'cost_estimate_enabled' => 'getCostEstimateEnabled',
        'pdt_api_control_enabled' => 'getPdtApiControlEnabled',
        'connection_pooling' => 'getConnectionPooling'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('can', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('dialect', $data ?? [], null);
        $this->setIfExists('snippets', $data ?? [], null);
        $this->setIfExists('pdts_enabled', $data ?? [], null);
        $this->setIfExists('host', $data ?? [], null);
        $this->setIfExists('port', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('uses_oauth', $data ?? [], null);
        $this->setIfExists('certificate', $data ?? [], null);
        $this->setIfExists('file_type', $data ?? [], null);
        $this->setIfExists('database', $data ?? [], null);
        $this->setIfExists('db_timezone', $data ?? [], null);
        $this->setIfExists('query_timezone', $data ?? [], null);
        $this->setIfExists('schema', $data ?? [], null);
        $this->setIfExists('max_connections', $data ?? [], null);
        $this->setIfExists('max_billing_gigabytes', $data ?? [], null);
        $this->setIfExists('ssl', $data ?? [], null);
        $this->setIfExists('verify_ssl', $data ?? [], null);
        $this->setIfExists('tmp_db_name', $data ?? [], null);
        $this->setIfExists('jdbc_additional_params', $data ?? [], null);
        $this->setIfExists('pool_timeout', $data ?? [], null);
        $this->setIfExists('dialect_name', $data ?? [], null);
        $this->setIfExists('supports_data_studio_link', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('example', $data ?? [], null);
        $this->setIfExists('user_db_credentials', $data ?? [], null);
        $this->setIfExists('user_attribute_fields', $data ?? [], null);
        $this->setIfExists('maintenance_cron', $data ?? [], null);
        $this->setIfExists('last_regen_at', $data ?? [], null);
        $this->setIfExists('last_reap_at', $data ?? [], null);
        $this->setIfExists('sql_runner_precache_tables', $data ?? [], null);
        $this->setIfExists('sql_writing_with_info_schema', $data ?? [], null);
        $this->setIfExists('after_connect_statements', $data ?? [], null);
        $this->setIfExists('pdt_context_override', $data ?? [], null);
        $this->setIfExists('managed', $data ?? [], null);
        $this->setIfExists('custom_local_port', $data ?? [], null);
        $this->setIfExists('tunnel_id', $data ?? [], null);
        $this->setIfExists('uses_tns', $data ?? [], null);
        $this->setIfExists('pdt_concurrency', $data ?? [], null);
        $this->setIfExists('disable_context_comment', $data ?? [], null);
        $this->setIfExists('oauth_application_id', $data ?? [], null);
        $this->setIfExists('always_retry_failed_builds', $data ?? [], null);
        $this->setIfExists('cost_estimate_enabled', $data ?? [], null);
        $this->setIfExists('pdt_api_control_enabled', $data ?? [], null);
        $this->setIfExists('connection_pooling', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return array<string,bool>|null
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param array<string,bool>|null $can Operations the current user is able to perform on this object
     *
     * @return self
     */
    public function setCan($can): static
    {
        if (is_null($can)) {
            throw new \InvalidArgumentException('non-nullable can cannot be null');
        }
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the connection. Also used as the unique identifier
     *
     * @return self
     */
    public function setName($name): static
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets dialect
     *
     * @return \OpenAPI\Client\Model\Dialect|null
     */
    public function getDialect()
    {
        return $this->container['dialect'];
    }

    /**
     * Sets dialect
     *
     * @param \OpenAPI\Client\Model\Dialect|null $dialect dialect
     *
     * @return self
     */
    public function setDialect($dialect): static
    {
        if (is_null($dialect)) {
            throw new \InvalidArgumentException('non-nullable dialect cannot be null');
        }
        $this->container['dialect'] = $dialect;

        return $this;
    }

    /**
     * Gets snippets
     *
     * @return \OpenAPI\Client\Model\Snippet[]|null
     */
    public function getSnippets()
    {
        return $this->container['snippets'];
    }

    /**
     * Sets snippets
     *
     * @param \OpenAPI\Client\Model\Snippet[]|null $snippets SQL Runner snippets for this connection
     *
     * @return self
     */
    public function setSnippets($snippets): static
    {
        if (is_null($snippets)) {
            throw new \InvalidArgumentException('non-nullable snippets cannot be null');
        }
        $this->container['snippets'] = $snippets;

        return $this;
    }

    /**
     * Gets pdts_enabled
     *
     * @return bool|null
     */
    public function getPdtsEnabled()
    {
        return $this->container['pdts_enabled'];
    }

    /**
     * Sets pdts_enabled
     *
     * @param bool|null $pdts_enabled True if PDTs are enabled on this connection
     *
     * @return self
     */
    public function setPdtsEnabled($pdts_enabled): static
    {
        if (is_null($pdts_enabled)) {
            throw new \InvalidArgumentException('non-nullable pdts_enabled cannot be null');
        }
        $this->container['pdts_enabled'] = $pdts_enabled;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host Host name/address of server; or the string 'localhost' in case of a connection over an SSH tunnel.
     *
     * @return self
     */
    public function setHost($host): static
    {
        if (is_null($host)) {
            array_push($this->openAPINullablesSetToNull, 'host');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('host', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets port
     *
     * @return string|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param string|null $port Port number on server. If the connection is over an SSH tunnel, then the local port associated with the SSH tunnel.
     *
     * @return self
     */
    public function setPort($port): static
    {
        if (is_null($port)) {
            array_push($this->openAPINullablesSetToNull, 'port');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('port', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Username for server authentication
     *
     * @return self
     */
    public function setUsername($username): static
    {
        if (is_null($username)) {
            array_push($this->openAPINullablesSetToNull, 'username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('username', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password (Write-Only) Password for server authentication
     *
     * @return self
     */
    public function setPassword($password): static
    {
        if (is_null($password)) {
            array_push($this->openAPINullablesSetToNull, 'password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('password', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets uses_oauth
     *
     * @return bool|null
     */
    public function getUsesOauth()
    {
        return $this->container['uses_oauth'];
    }

    /**
     * Sets uses_oauth
     *
     * @param bool|null $uses_oauth Whether the connection uses OAuth for authentication.
     *
     * @return self
     */
    public function setUsesOauth($uses_oauth): static
    {
        if (is_null($uses_oauth)) {
            throw new \InvalidArgumentException('non-nullable uses_oauth cannot be null');
        }
        $this->container['uses_oauth'] = $uses_oauth;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return string|null
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param string|null $certificate (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
     *
     * @return self
     */
    public function setCertificate($certificate): static
    {
        if (is_null($certificate)) {
            array_push($this->openAPINullablesSetToNull, 'certificate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('certificate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['certificate'] = $certificate;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string|null
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string|null $file_type (Write-Only) Certificate keyfile type - .json or .p12
     *
     * @return self
     */
    public function setFileType($file_type): static
    {
        if (is_null($file_type)) {
            array_push($this->openAPINullablesSetToNull, 'file_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets database
     *
     * @return string|null
     */
    public function getDatabase()
    {
        return $this->container['database'];
    }

    /**
     * Sets database
     *
     * @param string|null $database Database name
     *
     * @return self
     */
    public function setDatabase($database): static
    {
        if (is_null($database)) {
            array_push($this->openAPINullablesSetToNull, 'database');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('database', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['database'] = $database;

        return $this;
    }

    /**
     * Gets db_timezone
     *
     * @return string|null
     */
    public function getDbTimezone()
    {
        return $this->container['db_timezone'];
    }

    /**
     * Sets db_timezone
     *
     * @param string|null $db_timezone Time zone of database
     *
     * @return self
     */
    public function setDbTimezone($db_timezone): static
    {
        if (is_null($db_timezone)) {
            array_push($this->openAPINullablesSetToNull, 'db_timezone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('db_timezone', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['db_timezone'] = $db_timezone;

        return $this;
    }

    /**
     * Gets query_timezone
     *
     * @return string|null
     */
    public function getQueryTimezone()
    {
        return $this->container['query_timezone'];
    }

    /**
     * Sets query_timezone
     *
     * @param string|null $query_timezone Timezone to use in queries
     *
     * @return self
     */
    public function setQueryTimezone($query_timezone): static
    {
        if (is_null($query_timezone)) {
            array_push($this->openAPINullablesSetToNull, 'query_timezone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('query_timezone', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['query_timezone'] = $query_timezone;

        return $this;
    }

    /**
     * Gets schema
     *
     * @return string|null
     */
    public function getSchema()
    {
        return $this->container['schema'];
    }

    /**
     * Sets schema
     *
     * @param string|null $schema Schema name
     *
     * @return self
     */
    public function setSchema($schema): static
    {
        if (is_null($schema)) {
            array_push($this->openAPINullablesSetToNull, 'schema');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schema', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schema'] = $schema;

        return $this;
    }

    /**
     * Gets max_connections
     *
     * @return int|null
     */
    public function getMaxConnections()
    {
        return $this->container['max_connections'];
    }

    /**
     * Sets max_connections
     *
     * @param int|null $max_connections Maximum number of concurrent connection to use
     *
     * @return self
     */
    public function setMaxConnections($max_connections): static
    {
        if (is_null($max_connections)) {
            array_push($this->openAPINullablesSetToNull, 'max_connections');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_connections', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_connections'] = $max_connections;

        return $this;
    }

    /**
     * Gets max_billing_gigabytes
     *
     * @return string|null
     */
    public function getMaxBillingGigabytes()
    {
        return $this->container['max_billing_gigabytes'];
    }

    /**
     * Sets max_billing_gigabytes
     *
     * @param string|null $max_billing_gigabytes Maximum size of query in GBs (BigQuery only, can be a user_attribute name)
     *
     * @return self
     */
    public function setMaxBillingGigabytes($max_billing_gigabytes): static
    {
        if (is_null($max_billing_gigabytes)) {
            array_push($this->openAPINullablesSetToNull, 'max_billing_gigabytes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_billing_gigabytes', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_billing_gigabytes'] = $max_billing_gigabytes;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return bool|null
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param bool|null $ssl Use SSL/TLS when connecting to server
     *
     * @return self
     */
    public function setSsl($ssl): static
    {
        if (is_null($ssl)) {
            throw new \InvalidArgumentException('non-nullable ssl cannot be null');
        }
        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets verify_ssl
     *
     * @return bool|null
     */
    public function getVerifySsl()
    {
        return $this->container['verify_ssl'];
    }

    /**
     * Sets verify_ssl
     *
     * @param bool|null $verify_ssl Verify the SSL
     *
     * @return self
     */
    public function setVerifySsl($verify_ssl): static
    {
        if (is_null($verify_ssl)) {
            throw new \InvalidArgumentException('non-nullable verify_ssl cannot be null');
        }
        $this->container['verify_ssl'] = $verify_ssl;

        return $this;
    }

    /**
     * Gets tmp_db_name
     *
     * @return string|null
     */
    public function getTmpDbName()
    {
        return $this->container['tmp_db_name'];
    }

    /**
     * Sets tmp_db_name
     *
     * @param string|null $tmp_db_name Name of temporary database (if used)
     *
     * @return self
     */
    public function setTmpDbName($tmp_db_name): static
    {
        if (is_null($tmp_db_name)) {
            array_push($this->openAPINullablesSetToNull, 'tmp_db_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tmp_db_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tmp_db_name'] = $tmp_db_name;

        return $this;
    }

    /**
     * Gets jdbc_additional_params
     *
     * @return string|null
     */
    public function getJdbcAdditionalParams()
    {
        return $this->container['jdbc_additional_params'];
    }

    /**
     * Sets jdbc_additional_params
     *
     * @param string|null $jdbc_additional_params Additional params to add to JDBC connection string
     *
     * @return self
     */
    public function setJdbcAdditionalParams($jdbc_additional_params): static
    {
        if (is_null($jdbc_additional_params)) {
            array_push($this->openAPINullablesSetToNull, 'jdbc_additional_params');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jdbc_additional_params', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['jdbc_additional_params'] = $jdbc_additional_params;

        return $this;
    }

    /**
     * Gets pool_timeout
     *
     * @return int|null
     */
    public function getPoolTimeout()
    {
        return $this->container['pool_timeout'];
    }

    /**
     * Sets pool_timeout
     *
     * @param int|null $pool_timeout Connection Pool Timeout, in seconds
     *
     * @return self
     */
    public function setPoolTimeout($pool_timeout): static
    {
        if (is_null($pool_timeout)) {
            array_push($this->openAPINullablesSetToNull, 'pool_timeout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pool_timeout', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pool_timeout'] = $pool_timeout;

        return $this;
    }

    /**
     * Gets dialect_name
     *
     * @return string|null
     */
    public function getDialectName()
    {
        return $this->container['dialect_name'];
    }

    /**
     * Sets dialect_name
     *
     * @param string|null $dialect_name (Read/Write) SQL Dialect name
     *
     * @return self
     */
    public function setDialectName($dialect_name): static
    {
        if (is_null($dialect_name)) {
            array_push($this->openAPINullablesSetToNull, 'dialect_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dialect_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dialect_name'] = $dialect_name;

        return $this;
    }

    /**
     * Gets supports_data_studio_link
     *
     * @return bool|null
     */
    public function getSupportsDataStudioLink()
    {
        return $this->container['supports_data_studio_link'];
    }

    /**
     * Sets supports_data_studio_link
     *
     * @param bool|null $supports_data_studio_link Database connection has the ability to support open data studio from explore
     *
     * @return self
     */
    public function setSupportsDataStudioLink($supports_data_studio_link): static
    {
        if (is_null($supports_data_studio_link)) {
            throw new \InvalidArgumentException('non-nullable supports_data_studio_link cannot be null');
        }
        $this->container['supports_data_studio_link'] = $supports_data_studio_link;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Creation date for this connection
     *
     * @return self
     */
    public function setCreatedAt($created_at): static
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id Id of user who last modified this connection configuration
     *
     * @return self
     */
    public function setUserId($user_id): static
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets example
     *
     * @return bool|null
     */
    public function getExample()
    {
        return $this->container['example'];
    }

    /**
     * Sets example
     *
     * @param bool|null $example Is this an example connection?
     *
     * @return self
     */
    public function setExample($example): static
    {
        if (is_null($example)) {
            throw new \InvalidArgumentException('non-nullable example cannot be null');
        }
        $this->container['example'] = $example;

        return $this;
    }

    /**
     * Gets user_db_credentials
     *
     * @return bool|null
     */
    public function getUserDbCredentials()
    {
        return $this->container['user_db_credentials'];
    }

    /**
     * Sets user_db_credentials
     *
     * @param bool|null $user_db_credentials (Limited access feature) Are per user db credentials enabled. Enabling will remove previously set username and password
     *
     * @return self
     */
    public function setUserDbCredentials($user_db_credentials): static
    {
        if (is_null($user_db_credentials)) {
            array_push($this->openAPINullablesSetToNull, 'user_db_credentials');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_db_credentials', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_db_credentials'] = $user_db_credentials;

        return $this;
    }

    /**
     * Gets user_attribute_fields
     *
     * @return string[]|null
     */
    public function getUserAttributeFields()
    {
        return $this->container['user_attribute_fields'];
    }

    /**
     * Sets user_attribute_fields
     *
     * @param string[]|null $user_attribute_fields Fields whose values map to user attribute names
     *
     * @return self
     */
    public function setUserAttributeFields($user_attribute_fields): static
    {
        if (is_null($user_attribute_fields)) {
            array_push($this->openAPINullablesSetToNull, 'user_attribute_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_attribute_fields', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_attribute_fields'] = $user_attribute_fields;

        return $this;
    }

    /**
     * Gets maintenance_cron
     *
     * @return string|null
     */
    public function getMaintenanceCron()
    {
        return $this->container['maintenance_cron'];
    }

    /**
     * Sets maintenance_cron
     *
     * @param string|null $maintenance_cron Cron string specifying when maintenance such as PDT trigger checks and drops should be performed
     *
     * @return self
     */
    public function setMaintenanceCron($maintenance_cron): static
    {
        if (is_null($maintenance_cron)) {
            array_push($this->openAPINullablesSetToNull, 'maintenance_cron');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maintenance_cron', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maintenance_cron'] = $maintenance_cron;

        return $this;
    }

    /**
     * Gets last_regen_at
     *
     * @return string|null
     */
    public function getLastRegenAt()
    {
        return $this->container['last_regen_at'];
    }

    /**
     * Sets last_regen_at
     *
     * @param string|null $last_regen_at Unix timestamp at start of last completed PDT trigger check process
     *
     * @return self
     */
    public function setLastRegenAt($last_regen_at): static
    {
        if (is_null($last_regen_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_regen_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_regen_at', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_regen_at'] = $last_regen_at;

        return $this;
    }

    /**
     * Gets last_reap_at
     *
     * @return string|null
     */
    public function getLastReapAt()
    {
        return $this->container['last_reap_at'];
    }

    /**
     * Sets last_reap_at
     *
     * @param string|null $last_reap_at Unix timestamp at start of last completed PDT reap process
     *
     * @return self
     */
    public function setLastReapAt($last_reap_at): static
    {
        if (is_null($last_reap_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_reap_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_reap_at', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_reap_at'] = $last_reap_at;

        return $this;
    }

    /**
     * Gets sql_runner_precache_tables
     *
     * @return bool|null
     */
    public function getSqlRunnerPrecacheTables()
    {
        return $this->container['sql_runner_precache_tables'];
    }

    /**
     * Sets sql_runner_precache_tables
     *
     * @param bool|null $sql_runner_precache_tables Precache tables in the SQL Runner
     *
     * @return self
     */
    public function setSqlRunnerPrecacheTables($sql_runner_precache_tables): static
    {
        if (is_null($sql_runner_precache_tables)) {
            throw new \InvalidArgumentException('non-nullable sql_runner_precache_tables cannot be null');
        }
        $this->container['sql_runner_precache_tables'] = $sql_runner_precache_tables;

        return $this;
    }

    /**
     * Gets sql_writing_with_info_schema
     *
     * @return bool|null
     */
    public function getSqlWritingWithInfoSchema()
    {
        return $this->container['sql_writing_with_info_schema'];
    }

    /**
     * Sets sql_writing_with_info_schema
     *
     * @param bool|null $sql_writing_with_info_schema Fetch Information Schema For SQL Writing
     *
     * @return self
     */
    public function setSqlWritingWithInfoSchema($sql_writing_with_info_schema): static
    {
        if (is_null($sql_writing_with_info_schema)) {
            throw new \InvalidArgumentException('non-nullable sql_writing_with_info_schema cannot be null');
        }
        $this->container['sql_writing_with_info_schema'] = $sql_writing_with_info_schema;

        return $this;
    }

    /**
     * Gets after_connect_statements
     *
     * @return string|null
     */
    public function getAfterConnectStatements()
    {
        return $this->container['after_connect_statements'];
    }

    /**
     * Sets after_connect_statements
     *
     * @param string|null $after_connect_statements SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
     *
     * @return self
     */
    public function setAfterConnectStatements($after_connect_statements): static
    {
        if (is_null($after_connect_statements)) {
            array_push($this->openAPINullablesSetToNull, 'after_connect_statements');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('after_connect_statements', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['after_connect_statements'] = $after_connect_statements;

        return $this;
    }

    /**
     * Gets pdt_context_override
     *
     * @return \OpenAPI\Client\Model\DBConnectionOverride|null
     */
    public function getPdtContextOverride()
    {
        return $this->container['pdt_context_override'];
    }

    /**
     * Sets pdt_context_override
     *
     * @param \OpenAPI\Client\Model\DBConnectionOverride|null $pdt_context_override pdt_context_override
     *
     * @return self
     */
    public function setPdtContextOverride($pdt_context_override): static
    {
        if (is_null($pdt_context_override)) {
            throw new \InvalidArgumentException('non-nullable pdt_context_override cannot be null');
        }
        $this->container['pdt_context_override'] = $pdt_context_override;

        return $this;
    }

    /**
     * Gets managed
     *
     * @return bool|null
     */
    public function getManaged()
    {
        return $this->container['managed'];
    }

    /**
     * Sets managed
     *
     * @param bool|null $managed Is this connection created and managed by Looker
     *
     * @return self
     */
    public function setManaged($managed): static
    {
        if (is_null($managed)) {
            throw new \InvalidArgumentException('non-nullable managed cannot be null');
        }
        $this->container['managed'] = $managed;

        return $this;
    }

    /**
     * Gets custom_local_port
     *
     * @return int|null
     */
    public function getCustomLocalPort()
    {
        return $this->container['custom_local_port'];
    }

    /**
     * Sets custom_local_port
     *
     * @param int|null $custom_local_port This field is only applicable to connections over an SSH Tunnel. The value of this field would be the local port associated with the SSH tunnel if configured manually. Otherwise either enter NULL or exclude this field.
     *
     * @return self
     */
    public function setCustomLocalPort($custom_local_port): static
    {
        if (is_null($custom_local_port)) {
            array_push($this->openAPINullablesSetToNull, 'custom_local_port');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_local_port', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_local_port'] = $custom_local_port;

        return $this;
    }

    /**
     * Gets tunnel_id
     *
     * @return string|null
     */
    public function getTunnelId()
    {
        return $this->container['tunnel_id'];
    }

    /**
     * Sets tunnel_id
     *
     * @param string|null $tunnel_id The Id of the ssh tunnel this connection uses
     *
     * @return self
     */
    public function setTunnelId($tunnel_id): static
    {
        if (is_null($tunnel_id)) {
            array_push($this->openAPINullablesSetToNull, 'tunnel_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tunnel_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tunnel_id'] = $tunnel_id;

        return $this;
    }

    /**
     * Gets uses_tns
     *
     * @return bool|null
     */
    public function getUsesTns()
    {
        return $this->container['uses_tns'];
    }

    /**
     * Sets uses_tns
     *
     * @param bool|null $uses_tns Enable Transparent Network Substrate (TNS) connections
     *
     * @return self
     */
    public function setUsesTns($uses_tns): static
    {
        if (is_null($uses_tns)) {
            array_push($this->openAPINullablesSetToNull, 'uses_tns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uses_tns', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uses_tns'] = $uses_tns;

        return $this;
    }

    /**
     * Gets pdt_concurrency
     *
     * @return int|null
     */
    public function getPdtConcurrency()
    {
        return $this->container['pdt_concurrency'];
    }

    /**
     * Sets pdt_concurrency
     *
     * @param int|null $pdt_concurrency Maximum number of threads to use to build PDTs in parallel
     *
     * @return self
     */
    public function setPdtConcurrency($pdt_concurrency): static
    {
        if (is_null($pdt_concurrency)) {
            array_push($this->openAPINullablesSetToNull, 'pdt_concurrency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pdt_concurrency', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pdt_concurrency'] = $pdt_concurrency;

        return $this;
    }

    /**
     * Gets disable_context_comment
     *
     * @return bool|null
     */
    public function getDisableContextComment()
    {
        return $this->container['disable_context_comment'];
    }

    /**
     * Sets disable_context_comment
     *
     * @param bool|null $disable_context_comment When disable_context_comment is true comment will not be added to SQL
     *
     * @return self
     */
    public function setDisableContextComment($disable_context_comment): static
    {
        if (is_null($disable_context_comment)) {
            array_push($this->openAPINullablesSetToNull, 'disable_context_comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disable_context_comment', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disable_context_comment'] = $disable_context_comment;

        return $this;
    }

    /**
     * Gets oauth_application_id
     *
     * @return string|null
     */
    public function getOauthApplicationId()
    {
        return $this->container['oauth_application_id'];
    }

    /**
     * Sets oauth_application_id
     *
     * @param string|null $oauth_application_id An External OAuth Application to use for authenticating to the database
     *
     * @return self
     */
    public function setOauthApplicationId($oauth_application_id): static
    {
        if (is_null($oauth_application_id)) {
            array_push($this->openAPINullablesSetToNull, 'oauth_application_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('oauth_application_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['oauth_application_id'] = $oauth_application_id;

        return $this;
    }

    /**
     * Gets always_retry_failed_builds
     *
     * @return bool|null
     */
    public function getAlwaysRetryFailedBuilds()
    {
        return $this->container['always_retry_failed_builds'];
    }

    /**
     * Sets always_retry_failed_builds
     *
     * @param bool|null $always_retry_failed_builds When true, error PDTs will be retried every regenerator cycle
     *
     * @return self
     */
    public function setAlwaysRetryFailedBuilds($always_retry_failed_builds): static
    {
        if (is_null($always_retry_failed_builds)) {
            array_push($this->openAPINullablesSetToNull, 'always_retry_failed_builds');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('always_retry_failed_builds', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['always_retry_failed_builds'] = $always_retry_failed_builds;

        return $this;
    }

    /**
     * Gets cost_estimate_enabled
     *
     * @return bool|null
     */
    public function getCostEstimateEnabled()
    {
        return $this->container['cost_estimate_enabled'];
    }

    /**
     * Sets cost_estimate_enabled
     *
     * @param bool|null $cost_estimate_enabled When true, query cost estimate will be displayed in explore.
     *
     * @return self
     */
    public function setCostEstimateEnabled($cost_estimate_enabled): static
    {
        if (is_null($cost_estimate_enabled)) {
            array_push($this->openAPINullablesSetToNull, 'cost_estimate_enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_estimate_enabled', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cost_estimate_enabled'] = $cost_estimate_enabled;

        return $this;
    }

    /**
     * Gets pdt_api_control_enabled
     *
     * @return bool|null
     */
    public function getPdtApiControlEnabled()
    {
        return $this->container['pdt_api_control_enabled'];
    }

    /**
     * Sets pdt_api_control_enabled
     *
     * @param bool|null $pdt_api_control_enabled PDT builds on this connection can be kicked off and cancelled via API.
     *
     * @return self
     */
    public function setPdtApiControlEnabled($pdt_api_control_enabled): static
    {
        if (is_null($pdt_api_control_enabled)) {
            array_push($this->openAPINullablesSetToNull, 'pdt_api_control_enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pdt_api_control_enabled', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pdt_api_control_enabled'] = $pdt_api_control_enabled;

        return $this;
    }

    /**
     * Gets connection_pooling
     *
     * @return bool|null
     */
    public function getConnectionPooling()
    {
        return $this->container['connection_pooling'];
    }

    /**
     * Sets connection_pooling
     *
     * @param bool|null $connection_pooling Enable database connection pooling.
     *
     * @return self
     */
    public function setConnectionPooling($connection_pooling): static
    {
        if (is_null($connection_pooling)) {
            throw new \InvalidArgumentException('non-nullable connection_pooling cannot be null');
        }
        $this->container['connection_pooling'] = $connection_pooling;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return (string) json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
