<?php
/**
 * Alert
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Alert Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Alert implements ModelInterface, ArrayAccess, \JsonSerializable, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Alert';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'applied_dashboard_filters' => '\OpenAPI\Client\Model\AlertAppliedDashboardFilter[]',
        'comparison_type' => 'string',
        'cron' => 'string',
        'custom_url_base' => 'string',
        'custom_url_params' => 'string',
        'custom_url_label' => 'string',
        'show_custom_url' => 'bool',
        'custom_title' => 'string',
        'dashboard_element_id' => 'string',
        'description' => 'string',
        'destinations' => '\OpenAPI\Client\Model\AlertDestination[]',
        'field' => \OpenAPI\Client\Model\AlertField::class,
        'followed' => 'bool',
        'followable' => 'bool',
        'id' => 'string',
        'is_disabled' => 'bool',
        'disabled_reason' => 'string',
        'is_public' => 'bool',
        'investigative_content_type' => 'string',
        'investigative_content_id' => 'string',
        'investigative_content_title' => 'string',
        'lookml_dashboard_id' => 'string',
        'lookml_link_id' => 'string',
        'owner_id' => 'string',
        'owner_display_name' => 'string',
        'threshold' => 'float',
        'time_series_condition_state' => \OpenAPI\Client\Model\AlertConditionState::class
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'applied_dashboard_filters' => null,
        'comparison_type' => null,
        'cron' => null,
        'custom_url_base' => null,
        'custom_url_params' => null,
        'custom_url_label' => null,
        'show_custom_url' => null,
        'custom_title' => null,
        'dashboard_element_id' => null,
        'description' => null,
        'destinations' => null,
        'field' => null,
        'followed' => null,
        'followable' => null,
        'id' => null,
        'is_disabled' => null,
        'disabled_reason' => null,
        'is_public' => null,
        'investigative_content_type' => null,
        'investigative_content_id' => null,
        'investigative_content_title' => null,
        'lookml_dashboard_id' => null,
        'lookml_link_id' => null,
        'owner_id' => null,
        'owner_display_name' => null,
        'threshold' => 'double',
        'time_series_condition_state' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'applied_dashboard_filters' => true,
        'comparison_type' => false,
        'cron' => false,
        'custom_url_base' => true,
        'custom_url_params' => true,
        'custom_url_label' => true,
        'show_custom_url' => false,
        'custom_title' => true,
        'dashboard_element_id' => true,
        'description' => true,
        'destinations' => true,
        'field' => false,
        'followed' => false,
        'followable' => false,
        'id' => false,
        'is_disabled' => false,
        'disabled_reason' => true,
        'is_public' => false,
        'investigative_content_type' => true,
        'investigative_content_id' => true,
        'investigative_content_title' => true,
        'lookml_dashboard_id' => true,
        'lookml_link_id' => true,
        'owner_id' => false,
        'owner_display_name' => true,
        'threshold' => false,
        'time_series_condition_state' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applied_dashboard_filters' => 'applied_dashboard_filters',
        'comparison_type' => 'comparison_type',
        'cron' => 'cron',
        'custom_url_base' => 'custom_url_base',
        'custom_url_params' => 'custom_url_params',
        'custom_url_label' => 'custom_url_label',
        'show_custom_url' => 'show_custom_url',
        'custom_title' => 'custom_title',
        'dashboard_element_id' => 'dashboard_element_id',
        'description' => 'description',
        'destinations' => 'destinations',
        'field' => 'field',
        'followed' => 'followed',
        'followable' => 'followable',
        'id' => 'id',
        'is_disabled' => 'is_disabled',
        'disabled_reason' => 'disabled_reason',
        'is_public' => 'is_public',
        'investigative_content_type' => 'investigative_content_type',
        'investigative_content_id' => 'investigative_content_id',
        'investigative_content_title' => 'investigative_content_title',
        'lookml_dashboard_id' => 'lookml_dashboard_id',
        'lookml_link_id' => 'lookml_link_id',
        'owner_id' => 'owner_id',
        'owner_display_name' => 'owner_display_name',
        'threshold' => 'threshold',
        'time_series_condition_state' => 'time_series_condition_state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applied_dashboard_filters' => 'setAppliedDashboardFilters',
        'comparison_type' => 'setComparisonType',
        'cron' => 'setCron',
        'custom_url_base' => 'setCustomUrlBase',
        'custom_url_params' => 'setCustomUrlParams',
        'custom_url_label' => 'setCustomUrlLabel',
        'show_custom_url' => 'setShowCustomUrl',
        'custom_title' => 'setCustomTitle',
        'dashboard_element_id' => 'setDashboardElementId',
        'description' => 'setDescription',
        'destinations' => 'setDestinations',
        'field' => 'setField',
        'followed' => 'setFollowed',
        'followable' => 'setFollowable',
        'id' => 'setId',
        'is_disabled' => 'setIsDisabled',
        'disabled_reason' => 'setDisabledReason',
        'is_public' => 'setIsPublic',
        'investigative_content_type' => 'setInvestigativeContentType',
        'investigative_content_id' => 'setInvestigativeContentId',
        'investigative_content_title' => 'setInvestigativeContentTitle',
        'lookml_dashboard_id' => 'setLookmlDashboardId',
        'lookml_link_id' => 'setLookmlLinkId',
        'owner_id' => 'setOwnerId',
        'owner_display_name' => 'setOwnerDisplayName',
        'threshold' => 'setThreshold',
        'time_series_condition_state' => 'setTimeSeriesConditionState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applied_dashboard_filters' => 'getAppliedDashboardFilters',
        'comparison_type' => 'getComparisonType',
        'cron' => 'getCron',
        'custom_url_base' => 'getCustomUrlBase',
        'custom_url_params' => 'getCustomUrlParams',
        'custom_url_label' => 'getCustomUrlLabel',
        'show_custom_url' => 'getShowCustomUrl',
        'custom_title' => 'getCustomTitle',
        'dashboard_element_id' => 'getDashboardElementId',
        'description' => 'getDescription',
        'destinations' => 'getDestinations',
        'field' => 'getField',
        'followed' => 'getFollowed',
        'followable' => 'getFollowable',
        'id' => 'getId',
        'is_disabled' => 'getIsDisabled',
        'disabled_reason' => 'getDisabledReason',
        'is_public' => 'getIsPublic',
        'investigative_content_type' => 'getInvestigativeContentType',
        'investigative_content_id' => 'getInvestigativeContentId',
        'investigative_content_title' => 'getInvestigativeContentTitle',
        'lookml_dashboard_id' => 'getLookmlDashboardId',
        'lookml_link_id' => 'getLookmlLinkId',
        'owner_id' => 'getOwnerId',
        'owner_display_name' => 'getOwnerDisplayName',
        'threshold' => 'getThreshold',
        'time_series_condition_state' => 'getTimeSeriesConditionState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const COMPARISON_TYPE_EQUAL_TO = 'EQUAL_TO';
    public const COMPARISON_TYPE_GREATER_THAN = 'GREATER_THAN';
    public const COMPARISON_TYPE_GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO';
    public const COMPARISON_TYPE_LESS_THAN = 'LESS_THAN';
    public const COMPARISON_TYPE_LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO';
    public const COMPARISON_TYPE_INCREASES_BY = 'INCREASES_BY';
    public const COMPARISON_TYPE_DECREASES_BY = 'DECREASES_BY';
    public const COMPARISON_TYPE_CHANGES_BY = 'CHANGES_BY';
    public const INVESTIGATIVE_CONTENT_TYPE_DASHBOARD = 'dashboard';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getComparisonTypeAllowableValues(): array
    {
        return [
            self::COMPARISON_TYPE_EQUAL_TO,
            self::COMPARISON_TYPE_GREATER_THAN,
            self::COMPARISON_TYPE_GREATER_THAN_OR_EQUAL_TO,
            self::COMPARISON_TYPE_LESS_THAN,
            self::COMPARISON_TYPE_LESS_THAN_OR_EQUAL_TO,
            self::COMPARISON_TYPE_INCREASES_BY,
            self::COMPARISON_TYPE_DECREASES_BY,
            self::COMPARISON_TYPE_CHANGES_BY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvestigativeContentTypeAllowableValues(): array
    {
        return [
            self::INVESTIGATIVE_CONTENT_TYPE_DASHBOARD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('applied_dashboard_filters', $data ?? [], null);
        $this->setIfExists('comparison_type', $data ?? [], null);
        $this->setIfExists('cron', $data ?? [], null);
        $this->setIfExists('custom_url_base', $data ?? [], null);
        $this->setIfExists('custom_url_params', $data ?? [], null);
        $this->setIfExists('custom_url_label', $data ?? [], null);
        $this->setIfExists('show_custom_url', $data ?? [], null);
        $this->setIfExists('custom_title', $data ?? [], null);
        $this->setIfExists('dashboard_element_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('destinations', $data ?? [], null);
        $this->setIfExists('field', $data ?? [], null);
        $this->setIfExists('followed', $data ?? [], null);
        $this->setIfExists('followable', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_disabled', $data ?? [], null);
        $this->setIfExists('disabled_reason', $data ?? [], null);
        $this->setIfExists('is_public', $data ?? [], null);
        $this->setIfExists('investigative_content_type', $data ?? [], null);
        $this->setIfExists('investigative_content_id', $data ?? [], null);
        $this->setIfExists('investigative_content_title', $data ?? [], null);
        $this->setIfExists('lookml_dashboard_id', $data ?? [], null);
        $this->setIfExists('lookml_link_id', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('owner_display_name', $data ?? [], null);
        $this->setIfExists('threshold', $data ?? [], null);
        $this->setIfExists('time_series_condition_state', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['comparison_type'] === null) {
            $invalidProperties[] = "'comparison_type' can't be null";
        }
        $allowedValues = $this->getComparisonTypeAllowableValues();
        if (!is_null($this->container['comparison_type']) && !in_array($this->container['comparison_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'comparison_type', must be one of '%s'",
                $this->container['comparison_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['cron'] === null) {
            $invalidProperties[] = "'cron' can't be null";
        }
        if ($this->container['destinations'] === null) {
            $invalidProperties[] = "'destinations' can't be null";
        }
        if ($this->container['field'] === null) {
            $invalidProperties[] = "'field' can't be null";
        }
        $allowedValues = $this->getInvestigativeContentTypeAllowableValues();
        if (!is_null($this->container['investigative_content_type']) && !in_array($this->container['investigative_content_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'investigative_content_type', must be one of '%s'",
                $this->container['investigative_content_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['owner_id'] === null) {
            $invalidProperties[] = "'owner_id' can't be null";
        }
        if ($this->container['threshold'] === null) {
            $invalidProperties[] = "'threshold' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets applied_dashboard_filters
     *
     * @return \OpenAPI\Client\Model\AlertAppliedDashboardFilter[]|null
     */
    public function getAppliedDashboardFilters()
    {
        return $this->container['applied_dashboard_filters'];
    }

    /**
     * Sets applied_dashboard_filters
     *
     * @param \OpenAPI\Client\Model\AlertAppliedDashboardFilter[]|null $applied_dashboard_filters Filters coming from the dashboard that are applied. Example `[{ \"filter_title\": \"Name\", \"field_name\": \"distribution_centers.name\", \"filter_value\": \"Los Angeles CA\" }]`
     *
     * @return self
     */
    public function setAppliedDashboardFilters($applied_dashboard_filters): static
    {
        if (is_null($applied_dashboard_filters)) {
            array_push($this->openAPINullablesSetToNull, 'applied_dashboard_filters');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('applied_dashboard_filters', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['applied_dashboard_filters'] = $applied_dashboard_filters;

        return $this;
    }

    /**
     * Gets comparison_type
     *
     * @return string
     */
    public function getComparisonType()
    {
        return $this->container['comparison_type'];
    }

    /**
     * Sets comparison_type
     *
     * @param string $comparison_type This property informs the check what kind of comparison we are performing. Only certain condition types are valid for time series alerts. For details, refer to [Setting Alert Conditions](https://cloud.google.com/looker/docs/sharing-and-publishing/creating-alerts#setting_alert_conditions) Valid values are: \"EQUAL_TO\", \"GREATER_THAN\", \"GREATER_THAN_OR_EQUAL_TO\", \"LESS_THAN\", \"LESS_THAN_OR_EQUAL_TO\", \"INCREASES_BY\", \"DECREASES_BY\", \"CHANGES_BY\".
     *
     * @return self
     */
    public function setComparisonType($comparison_type): static
    {
        if (is_null($comparison_type)) {
            throw new \InvalidArgumentException('non-nullable comparison_type cannot be null');
        }
        $allowedValues = $this->getComparisonTypeAllowableValues();
        if (!in_array($comparison_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'comparison_type', must be one of '%s'",
                    $comparison_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['comparison_type'] = $comparison_type;

        return $this;
    }

    /**
     * Gets cron
     *
     * @return string
     */
    public function getCron()
    {
        return $this->container['cron'];
    }

    /**
     * Sets cron
     *
     * @param string $cron Vixie-Style crontab specification when to run. At minimum, it has to be longer than 15 minute intervals
     *
     * @return self
     */
    public function setCron($cron): static
    {
        if (is_null($cron)) {
            throw new \InvalidArgumentException('non-nullable cron cannot be null');
        }
        $this->container['cron'] = $cron;

        return $this;
    }

    /**
     * Gets custom_url_base
     *
     * @return string|null
     */
    public function getCustomUrlBase()
    {
        return $this->container['custom_url_base'];
    }

    /**
     * Sets custom_url_base
     *
     * @param string|null $custom_url_base Domain for the custom url selected by the alert creator from the admin defined domain allowlist
     *
     * @return self
     */
    public function setCustomUrlBase($custom_url_base): static
    {
        if (is_null($custom_url_base)) {
            array_push($this->openAPINullablesSetToNull, 'custom_url_base');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_url_base', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_url_base'] = $custom_url_base;

        return $this;
    }

    /**
     * Gets custom_url_params
     *
     * @return string|null
     */
    public function getCustomUrlParams()
    {
        return $this->container['custom_url_params'];
    }

    /**
     * Sets custom_url_params
     *
     * @param string|null $custom_url_params Parameters and path for the custom url defined by the alert creator
     *
     * @return self
     */
    public function setCustomUrlParams($custom_url_params): static
    {
        if (is_null($custom_url_params)) {
            array_push($this->openAPINullablesSetToNull, 'custom_url_params');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_url_params', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_url_params'] = $custom_url_params;

        return $this;
    }

    /**
     * Gets custom_url_label
     *
     * @return string|null
     */
    public function getCustomUrlLabel()
    {
        return $this->container['custom_url_label'];
    }

    /**
     * Sets custom_url_label
     *
     * @param string|null $custom_url_label Label for the custom url defined by the alert creator
     *
     * @return self
     */
    public function setCustomUrlLabel($custom_url_label): static
    {
        if (is_null($custom_url_label)) {
            array_push($this->openAPINullablesSetToNull, 'custom_url_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_url_label', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_url_label'] = $custom_url_label;

        return $this;
    }

    /**
     * Gets show_custom_url
     *
     * @return bool|null
     */
    public function getShowCustomUrl()
    {
        return $this->container['show_custom_url'];
    }

    /**
     * Sets show_custom_url
     *
     * @param bool|null $show_custom_url Boolean to determine if the custom url should be used
     *
     * @return self
     */
    public function setShowCustomUrl($show_custom_url): static
    {
        if (is_null($show_custom_url)) {
            throw new \InvalidArgumentException('non-nullable show_custom_url cannot be null');
        }
        $this->container['show_custom_url'] = $show_custom_url;

        return $this;
    }

    /**
     * Gets custom_title
     *
     * @return string|null
     */
    public function getCustomTitle()
    {
        return $this->container['custom_title'];
    }

    /**
     * Sets custom_title
     *
     * @param string|null $custom_title An optional, user-defined title for the alert
     *
     * @return self
     */
    public function setCustomTitle($custom_title): static
    {
        if (is_null($custom_title)) {
            array_push($this->openAPINullablesSetToNull, 'custom_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_title'] = $custom_title;

        return $this;
    }

    /**
     * Gets dashboard_element_id
     *
     * @return string|null
     */
    public function getDashboardElementId()
    {
        return $this->container['dashboard_element_id'];
    }

    /**
     * Sets dashboard_element_id
     *
     * @param string|null $dashboard_element_id ID of the dashboard element associated with the alert. Refer to [dashboard_element()](#!/Dashboard/DashboardElement)
     *
     * @return self
     */
    public function setDashboardElementId($dashboard_element_id): static
    {
        if (is_null($dashboard_element_id)) {
            array_push($this->openAPINullablesSetToNull, 'dashboard_element_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dashboard_element_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dashboard_element_id'] = $dashboard_element_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description An optional description for the alert. This supplements the title
     *
     * @return self
     */
    public function setDescription($description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets destinations
     *
     * @return \OpenAPI\Client\Model\AlertDestination[]
     */
    public function getDestinations()
    {
        return $this->container['destinations'];
    }

    /**
     * Sets destinations
     *
     * @param \OpenAPI\Client\Model\AlertDestination[] $destinations Array of destinations to send alerts to. Must be the same type of destination. Example `[{ \"destination_type\": \"EMAIL\", \"email_address\": \"test@test.com\" }]`
     *
     * @return self
     */
    public function setDestinations($destinations): static
    {
        if (is_null($destinations)) {
            array_push($this->openAPINullablesSetToNull, 'destinations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destinations', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destinations'] = $destinations;

        return $this;
    }

    /**
     * Gets field
     *
     * @return \OpenAPI\Client\Model\AlertField
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param \OpenAPI\Client\Model\AlertField $field field
     *
     * @return self
     */
    public function setField($field): static
    {
        if (is_null($field)) {
            throw new \InvalidArgumentException('non-nullable field cannot be null');
        }
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets followed
     *
     * @return bool|null
     */
    public function getFollowed()
    {
        return $this->container['followed'];
    }

    /**
     * Sets followed
     *
     * @param bool|null $followed Whether or not the user follows this alert.
     *
     * @return self
     */
    public function setFollowed($followed): static
    {
        if (is_null($followed)) {
            throw new \InvalidArgumentException('non-nullable followed cannot be null');
        }
        $this->container['followed'] = $followed;

        return $this;
    }

    /**
     * Gets followable
     *
     * @return bool|null
     */
    public function getFollowable()
    {
        return $this->container['followable'];
    }

    /**
     * Sets followable
     *
     * @param bool|null $followable Whether or not the alert is followable
     *
     * @return self
     */
    public function setFollowable($followable): static
    {
        if (is_null($followable)) {
            throw new \InvalidArgumentException('non-nullable followable cannot be null');
        }
        $this->container['followable'] = $followable;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID of the alert
     *
     * @return self
     */
    public function setId($id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_disabled
     *
     * @return bool|null
     */
    public function getIsDisabled()
    {
        return $this->container['is_disabled'];
    }

    /**
     * Sets is_disabled
     *
     * @param bool|null $is_disabled Whether or not the alert is disabled
     *
     * @return self
     */
    public function setIsDisabled($is_disabled): static
    {
        if (is_null($is_disabled)) {
            throw new \InvalidArgumentException('non-nullable is_disabled cannot be null');
        }
        $this->container['is_disabled'] = $is_disabled;

        return $this;
    }

    /**
     * Gets disabled_reason
     *
     * @return string|null
     */
    public function getDisabledReason()
    {
        return $this->container['disabled_reason'];
    }

    /**
     * Sets disabled_reason
     *
     * @param string|null $disabled_reason Reason for disabling alert
     *
     * @return self
     */
    public function setDisabledReason($disabled_reason): static
    {
        if (is_null($disabled_reason)) {
            array_push($this->openAPINullablesSetToNull, 'disabled_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disabled_reason', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disabled_reason'] = $disabled_reason;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public Whether or not the alert is public
     *
     * @return self
     */
    public function setIsPublic($is_public): static
    {
        if (is_null($is_public)) {
            throw new \InvalidArgumentException('non-nullable is_public cannot be null');
        }
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets investigative_content_type
     *
     * @return string|null
     */
    public function getInvestigativeContentType()
    {
        return $this->container['investigative_content_type'];
    }

    /**
     * Sets investigative_content_type
     *
     * @param string|null $investigative_content_type The type of the investigative content Valid values are: \"dashboard\".
     *
     * @return self
     */
    public function setInvestigativeContentType($investigative_content_type): static
    {
        if (is_null($investigative_content_type)) {
            array_push($this->openAPINullablesSetToNull, 'investigative_content_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('investigative_content_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getInvestigativeContentTypeAllowableValues();
        if (!is_null($investigative_content_type) && !in_array($investigative_content_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'investigative_content_type', must be one of '%s'",
                    $investigative_content_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['investigative_content_type'] = $investigative_content_type;

        return $this;
    }

    /**
     * Gets investigative_content_id
     *
     * @return string|null
     */
    public function getInvestigativeContentId()
    {
        return $this->container['investigative_content_id'];
    }

    /**
     * Sets investigative_content_id
     *
     * @param string|null $investigative_content_id The ID of the investigative content. For dashboards, this will be the dashboard ID
     *
     * @return self
     */
    public function setInvestigativeContentId($investigative_content_id): static
    {
        if (is_null($investigative_content_id)) {
            array_push($this->openAPINullablesSetToNull, 'investigative_content_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('investigative_content_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['investigative_content_id'] = $investigative_content_id;

        return $this;
    }

    /**
     * Gets investigative_content_title
     *
     * @return string|null
     */
    public function getInvestigativeContentTitle()
    {
        return $this->container['investigative_content_title'];
    }

    /**
     * Sets investigative_content_title
     *
     * @param string|null $investigative_content_title The title of the investigative content.
     *
     * @return self
     */
    public function setInvestigativeContentTitle($investigative_content_title): static
    {
        if (is_null($investigative_content_title)) {
            array_push($this->openAPINullablesSetToNull, 'investigative_content_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('investigative_content_title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['investigative_content_title'] = $investigative_content_title;

        return $this;
    }

    /**
     * Gets lookml_dashboard_id
     *
     * @return string|null
     */
    public function getLookmlDashboardId()
    {
        return $this->container['lookml_dashboard_id'];
    }

    /**
     * Sets lookml_dashboard_id
     *
     * @param string|null $lookml_dashboard_id ID of the LookML dashboard associated with the alert
     *
     * @return self
     */
    public function setLookmlDashboardId($lookml_dashboard_id): static
    {
        if (is_null($lookml_dashboard_id)) {
            array_push($this->openAPINullablesSetToNull, 'lookml_dashboard_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lookml_dashboard_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lookml_dashboard_id'] = $lookml_dashboard_id;

        return $this;
    }

    /**
     * Gets lookml_link_id
     *
     * @return string|null
     */
    public function getLookmlLinkId()
    {
        return $this->container['lookml_link_id'];
    }

    /**
     * Sets lookml_link_id
     *
     * @param string|null $lookml_link_id ID of the LookML dashboard element associated with the alert
     *
     * @return self
     */
    public function setLookmlLinkId($lookml_link_id): static
    {
        if (is_null($lookml_link_id)) {
            array_push($this->openAPINullablesSetToNull, 'lookml_link_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lookml_link_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lookml_link_id'] = $lookml_link_id;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return string
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param string $owner_id User id of alert owner
     *
     * @return self
     */
    public function setOwnerId($owner_id): static
    {
        if (is_null($owner_id)) {
            throw new \InvalidArgumentException('non-nullable owner_id cannot be null');
        }
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets owner_display_name
     *
     * @return string|null
     */
    public function getOwnerDisplayName()
    {
        return $this->container['owner_display_name'];
    }

    /**
     * Sets owner_display_name
     *
     * @param string|null $owner_display_name Alert owner's display name
     *
     * @return self
     */
    public function setOwnerDisplayName($owner_display_name): static
    {
        if (is_null($owner_display_name)) {
            array_push($this->openAPINullablesSetToNull, 'owner_display_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('owner_display_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['owner_display_name'] = $owner_display_name;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return float
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param float $threshold Value of the alert threshold
     *
     * @return self
     */
    public function setThreshold($threshold): static
    {
        if (is_null($threshold)) {
            throw new \InvalidArgumentException('non-nullable threshold cannot be null');
        }
        $this->container['threshold'] = $threshold;

        return $this;
    }

    /**
     * Gets time_series_condition_state
     *
     * @return \OpenAPI\Client\Model\AlertConditionState|null
     */
    public function getTimeSeriesConditionState()
    {
        return $this->container['time_series_condition_state'];
    }

    /**
     * Sets time_series_condition_state
     *
     * @param \OpenAPI\Client\Model\AlertConditionState|null $time_series_condition_state time_series_condition_state
     *
     * @return self
     */
    public function setTimeSeriesConditionState($time_series_condition_state): static
    {
        if (is_null($time_series_condition_state)) {
            throw new \InvalidArgumentException('non-nullable time_series_condition_state cannot be null');
        }
        $this->container['time_series_condition_state'] = $time_series_condition_state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return (string) json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
