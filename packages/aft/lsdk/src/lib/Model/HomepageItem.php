<?php
/**
 * HomepageItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HomepageItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HomepageItem implements ModelInterface, ArrayAccess, \JsonSerializable, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HomepageItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can' => 'array<string,bool>',
        'content_created_by' => 'string',
        'content_favorite_id' => 'string',
        'content_metadata_id' => 'string',
        'content_updated_at' => 'string',
        'custom_description' => 'string',
        'custom_image_data_base64' => 'string',
        'custom_image_url' => 'string',
        'custom_title' => 'string',
        'custom_url' => 'string',
        'dashboard_id' => 'string',
        'description' => 'string',
        'favorite_count' => 'int',
        'homepage_section_id' => 'string',
        'id' => 'string',
        'image_url' => 'string',
        'location' => 'string',
        'look_id' => 'string',
        'lookml_dashboard_id' => 'string',
        'order' => 'int',
        'section_fetch_time' => 'float',
        'title' => 'string',
        'url' => 'string',
        'use_custom_description' => 'bool',
        'use_custom_image' => 'bool',
        'use_custom_title' => 'bool',
        'use_custom_url' => 'bool',
        'view_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can' => null,
        'content_created_by' => null,
        'content_favorite_id' => null,
        'content_metadata_id' => null,
        'content_updated_at' => null,
        'custom_description' => null,
        'custom_image_data_base64' => null,
        'custom_image_url' => null,
        'custom_title' => null,
        'custom_url' => null,
        'dashboard_id' => null,
        'description' => null,
        'favorite_count' => 'int64',
        'homepage_section_id' => null,
        'id' => null,
        'image_url' => null,
        'location' => null,
        'look_id' => null,
        'lookml_dashboard_id' => null,
        'order' => 'int64',
        'section_fetch_time' => 'float',
        'title' => null,
        'url' => null,
        'use_custom_description' => null,
        'use_custom_image' => null,
        'use_custom_title' => null,
        'use_custom_url' => null,
        'view_count' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'can' => false,
        'content_created_by' => true,
        'content_favorite_id' => true,
        'content_metadata_id' => true,
        'content_updated_at' => true,
        'custom_description' => true,
        'custom_image_data_base64' => true,
        'custom_image_url' => true,
        'custom_title' => true,
        'custom_url' => true,
        'dashboard_id' => true,
        'description' => true,
        'favorite_count' => true,
        'homepage_section_id' => true,
        'id' => false,
        'image_url' => true,
        'location' => true,
        'look_id' => true,
        'lookml_dashboard_id' => true,
        'order' => true,
        'section_fetch_time' => true,
        'title' => true,
        'url' => true,
        'use_custom_description' => false,
        'use_custom_image' => false,
        'use_custom_title' => false,
        'use_custom_url' => false,
        'view_count' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'content_created_by' => 'content_created_by',
        'content_favorite_id' => 'content_favorite_id',
        'content_metadata_id' => 'content_metadata_id',
        'content_updated_at' => 'content_updated_at',
        'custom_description' => 'custom_description',
        'custom_image_data_base64' => 'custom_image_data_base64',
        'custom_image_url' => 'custom_image_url',
        'custom_title' => 'custom_title',
        'custom_url' => 'custom_url',
        'dashboard_id' => 'dashboard_id',
        'description' => 'description',
        'favorite_count' => 'favorite_count',
        'homepage_section_id' => 'homepage_section_id',
        'id' => 'id',
        'image_url' => 'image_url',
        'location' => 'location',
        'look_id' => 'look_id',
        'lookml_dashboard_id' => 'lookml_dashboard_id',
        'order' => 'order',
        'section_fetch_time' => 'section_fetch_time',
        'title' => 'title',
        'url' => 'url',
        'use_custom_description' => 'use_custom_description',
        'use_custom_image' => 'use_custom_image',
        'use_custom_title' => 'use_custom_title',
        'use_custom_url' => 'use_custom_url',
        'view_count' => 'view_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'content_created_by' => 'setContentCreatedBy',
        'content_favorite_id' => 'setContentFavoriteId',
        'content_metadata_id' => 'setContentMetadataId',
        'content_updated_at' => 'setContentUpdatedAt',
        'custom_description' => 'setCustomDescription',
        'custom_image_data_base64' => 'setCustomImageDataBase64',
        'custom_image_url' => 'setCustomImageUrl',
        'custom_title' => 'setCustomTitle',
        'custom_url' => 'setCustomUrl',
        'dashboard_id' => 'setDashboardId',
        'description' => 'setDescription',
        'favorite_count' => 'setFavoriteCount',
        'homepage_section_id' => 'setHomepageSectionId',
        'id' => 'setId',
        'image_url' => 'setImageUrl',
        'location' => 'setLocation',
        'look_id' => 'setLookId',
        'lookml_dashboard_id' => 'setLookmlDashboardId',
        'order' => 'setOrder',
        'section_fetch_time' => 'setSectionFetchTime',
        'title' => 'setTitle',
        'url' => 'setUrl',
        'use_custom_description' => 'setUseCustomDescription',
        'use_custom_image' => 'setUseCustomImage',
        'use_custom_title' => 'setUseCustomTitle',
        'use_custom_url' => 'setUseCustomUrl',
        'view_count' => 'setViewCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'content_created_by' => 'getContentCreatedBy',
        'content_favorite_id' => 'getContentFavoriteId',
        'content_metadata_id' => 'getContentMetadataId',
        'content_updated_at' => 'getContentUpdatedAt',
        'custom_description' => 'getCustomDescription',
        'custom_image_data_base64' => 'getCustomImageDataBase64',
        'custom_image_url' => 'getCustomImageUrl',
        'custom_title' => 'getCustomTitle',
        'custom_url' => 'getCustomUrl',
        'dashboard_id' => 'getDashboardId',
        'description' => 'getDescription',
        'favorite_count' => 'getFavoriteCount',
        'homepage_section_id' => 'getHomepageSectionId',
        'id' => 'getId',
        'image_url' => 'getImageUrl',
        'location' => 'getLocation',
        'look_id' => 'getLookId',
        'lookml_dashboard_id' => 'getLookmlDashboardId',
        'order' => 'getOrder',
        'section_fetch_time' => 'getSectionFetchTime',
        'title' => 'getTitle',
        'url' => 'getUrl',
        'use_custom_description' => 'getUseCustomDescription',
        'use_custom_image' => 'getUseCustomImage',
        'use_custom_title' => 'getUseCustomTitle',
        'use_custom_url' => 'getUseCustomUrl',
        'view_count' => 'getViewCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('can', $data ?? [], null);
        $this->setIfExists('content_created_by', $data ?? [], null);
        $this->setIfExists('content_favorite_id', $data ?? [], null);
        $this->setIfExists('content_metadata_id', $data ?? [], null);
        $this->setIfExists('content_updated_at', $data ?? [], null);
        $this->setIfExists('custom_description', $data ?? [], null);
        $this->setIfExists('custom_image_data_base64', $data ?? [], null);
        $this->setIfExists('custom_image_url', $data ?? [], null);
        $this->setIfExists('custom_title', $data ?? [], null);
        $this->setIfExists('custom_url', $data ?? [], null);
        $this->setIfExists('dashboard_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('favorite_count', $data ?? [], null);
        $this->setIfExists('homepage_section_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('image_url', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('look_id', $data ?? [], null);
        $this->setIfExists('lookml_dashboard_id', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('section_fetch_time', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('use_custom_description', $data ?? [], null);
        $this->setIfExists('use_custom_image', $data ?? [], null);
        $this->setIfExists('use_custom_title', $data ?? [], null);
        $this->setIfExists('use_custom_url', $data ?? [], null);
        $this->setIfExists('view_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return array<string,bool>|null
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param array<string,bool>|null $can Operations the current user is able to perform on this object
     *
     * @return self
     */
    public function setCan($can): static
    {
        if (is_null($can)) {
            throw new \InvalidArgumentException('non-nullable can cannot be null');
        }
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets content_created_by
     *
     * @return string|null
     */
    public function getContentCreatedBy()
    {
        return $this->container['content_created_by'];
    }

    /**
     * Sets content_created_by
     *
     * @param string|null $content_created_by Name of user who created the content this item is based on
     *
     * @return self
     */
    public function setContentCreatedBy($content_created_by): static
    {
        if (is_null($content_created_by)) {
            array_push($this->openAPINullablesSetToNull, 'content_created_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('content_created_by', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['content_created_by'] = $content_created_by;

        return $this;
    }

    /**
     * Gets content_favorite_id
     *
     * @return string|null
     */
    public function getContentFavoriteId()
    {
        return $this->container['content_favorite_id'];
    }

    /**
     * Sets content_favorite_id
     *
     * @param string|null $content_favorite_id Content favorite id associated with the item this content is based on
     *
     * @return self
     */
    public function setContentFavoriteId($content_favorite_id): static
    {
        if (is_null($content_favorite_id)) {
            array_push($this->openAPINullablesSetToNull, 'content_favorite_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('content_favorite_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['content_favorite_id'] = $content_favorite_id;

        return $this;
    }

    /**
     * Gets content_metadata_id
     *
     * @return string|null
     */
    public function getContentMetadataId()
    {
        return $this->container['content_metadata_id'];
    }

    /**
     * Sets content_metadata_id
     *
     * @param string|null $content_metadata_id Content metadata id associated with the item this content is based on
     *
     * @return self
     */
    public function setContentMetadataId($content_metadata_id): static
    {
        if (is_null($content_metadata_id)) {
            array_push($this->openAPINullablesSetToNull, 'content_metadata_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('content_metadata_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['content_metadata_id'] = $content_metadata_id;

        return $this;
    }

    /**
     * Gets content_updated_at
     *
     * @return string|null
     */
    public function getContentUpdatedAt()
    {
        return $this->container['content_updated_at'];
    }

    /**
     * Sets content_updated_at
     *
     * @param string|null $content_updated_at Last time the content that this item is based on was updated
     *
     * @return self
     */
    public function setContentUpdatedAt($content_updated_at): static
    {
        if (is_null($content_updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'content_updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('content_updated_at', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['content_updated_at'] = $content_updated_at;

        return $this;
    }

    /**
     * Gets custom_description
     *
     * @return string|null
     */
    public function getCustomDescription()
    {
        return $this->container['custom_description'];
    }

    /**
     * Sets custom_description
     *
     * @param string|null $custom_description Custom description entered by the user, if present
     *
     * @return self
     */
    public function setCustomDescription($custom_description): static
    {
        if (is_null($custom_description)) {
            array_push($this->openAPINullablesSetToNull, 'custom_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_description'] = $custom_description;

        return $this;
    }

    /**
     * Gets custom_image_data_base64
     *
     * @return string|null
     */
    public function getCustomImageDataBase64()
    {
        return $this->container['custom_image_data_base64'];
    }

    /**
     * Sets custom_image_data_base64
     *
     * @param string|null $custom_image_data_base64 (Write-Only) base64 encoded image data
     *
     * @return self
     */
    public function setCustomImageDataBase64($custom_image_data_base64): static
    {
        if (is_null($custom_image_data_base64)) {
            array_push($this->openAPINullablesSetToNull, 'custom_image_data_base64');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_image_data_base64', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_image_data_base64'] = $custom_image_data_base64;

        return $this;
    }

    /**
     * Gets custom_image_url
     *
     * @return string|null
     */
    public function getCustomImageUrl()
    {
        return $this->container['custom_image_url'];
    }

    /**
     * Sets custom_image_url
     *
     * @param string|null $custom_image_url Custom image_url entered by the user, if present
     *
     * @return self
     */
    public function setCustomImageUrl($custom_image_url): static
    {
        if (is_null($custom_image_url)) {
            array_push($this->openAPINullablesSetToNull, 'custom_image_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_image_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_image_url'] = $custom_image_url;

        return $this;
    }

    /**
     * Gets custom_title
     *
     * @return string|null
     */
    public function getCustomTitle()
    {
        return $this->container['custom_title'];
    }

    /**
     * Sets custom_title
     *
     * @param string|null $custom_title Custom title entered by the user, if present
     *
     * @return self
     */
    public function setCustomTitle($custom_title): static
    {
        if (is_null($custom_title)) {
            array_push($this->openAPINullablesSetToNull, 'custom_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_title'] = $custom_title;

        return $this;
    }

    /**
     * Gets custom_url
     *
     * @return string|null
     */
    public function getCustomUrl()
    {
        return $this->container['custom_url'];
    }

    /**
     * Sets custom_url
     *
     * @param string|null $custom_url Custom url entered by the user, if present
     *
     * @return self
     */
    public function setCustomUrl($custom_url): static
    {
        if (is_null($custom_url)) {
            array_push($this->openAPINullablesSetToNull, 'custom_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_url'] = $custom_url;

        return $this;
    }

    /**
     * Gets dashboard_id
     *
     * @return string|null
     */
    public function getDashboardId()
    {
        return $this->container['dashboard_id'];
    }

    /**
     * Sets dashboard_id
     *
     * @param string|null $dashboard_id Dashboard to base this item on
     *
     * @return self
     */
    public function setDashboardId($dashboard_id): static
    {
        if (is_null($dashboard_id)) {
            array_push($this->openAPINullablesSetToNull, 'dashboard_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dashboard_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dashboard_id'] = $dashboard_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The actual description for display
     *
     * @return self
     */
    public function setDescription($description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets favorite_count
     *
     * @return int|null
     */
    public function getFavoriteCount()
    {
        return $this->container['favorite_count'];
    }

    /**
     * Sets favorite_count
     *
     * @param int|null $favorite_count Number of times content has been favorited, if present
     *
     * @return self
     */
    public function setFavoriteCount($favorite_count): static
    {
        if (is_null($favorite_count)) {
            array_push($this->openAPINullablesSetToNull, 'favorite_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('favorite_count', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['favorite_count'] = $favorite_count;

        return $this;
    }

    /**
     * Gets homepage_section_id
     *
     * @return string|null
     */
    public function getHomepageSectionId()
    {
        return $this->container['homepage_section_id'];
    }

    /**
     * Sets homepage_section_id
     *
     * @param string|null $homepage_section_id Associated Homepage Section
     *
     * @return self
     */
    public function setHomepageSectionId($homepage_section_id): static
    {
        if (is_null($homepage_section_id)) {
            array_push($this->openAPINullablesSetToNull, 'homepage_section_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('homepage_section_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['homepage_section_id'] = $homepage_section_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique Id
     *
     * @return self
     */
    public function setId($id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url The actual image_url for display
     *
     * @return self
     */
    public function setImageUrl($image_url): static
    {
        if (is_null($image_url)) {
            array_push($this->openAPINullablesSetToNull, 'image_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location The container folder name of the content
     *
     * @return self
     */
    public function setLocation($location): static
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets look_id
     *
     * @return string|null
     */
    public function getLookId()
    {
        return $this->container['look_id'];
    }

    /**
     * Sets look_id
     *
     * @param string|null $look_id Look to base this item on
     *
     * @return self
     */
    public function setLookId($look_id): static
    {
        if (is_null($look_id)) {
            array_push($this->openAPINullablesSetToNull, 'look_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('look_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['look_id'] = $look_id;

        return $this;
    }

    /**
     * Gets lookml_dashboard_id
     *
     * @return string|null
     */
    public function getLookmlDashboardId()
    {
        return $this->container['lookml_dashboard_id'];
    }

    /**
     * Sets lookml_dashboard_id
     *
     * @param string|null $lookml_dashboard_id LookML Dashboard to base this item on
     *
     * @return self
     */
    public function setLookmlDashboardId($lookml_dashboard_id): static
    {
        if (is_null($lookml_dashboard_id)) {
            array_push($this->openAPINullablesSetToNull, 'lookml_dashboard_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lookml_dashboard_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lookml_dashboard_id'] = $lookml_dashboard_id;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order An arbitrary integer representing the sort order within the section
     *
     * @return self
     */
    public function setOrder($order): static
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets section_fetch_time
     *
     * @return float|null
     */
    public function getSectionFetchTime()
    {
        return $this->container['section_fetch_time'];
    }

    /**
     * Sets section_fetch_time
     *
     * @param float|null $section_fetch_time Number of seconds it took to fetch the section this item is in
     *
     * @return self
     */
    public function setSectionFetchTime($section_fetch_time): static
    {
        if (is_null($section_fetch_time)) {
            array_push($this->openAPINullablesSetToNull, 'section_fetch_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('section_fetch_time', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['section_fetch_time'] = $section_fetch_time;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The actual title for display
     *
     * @return self
     */
    public function setTitle($title): static
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url The actual url for display
     *
     * @return self
     */
    public function setUrl($url): static
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets use_custom_description
     *
     * @return bool|null
     */
    public function getUseCustomDescription()
    {
        return $this->container['use_custom_description'];
    }

    /**
     * Sets use_custom_description
     *
     * @param bool|null $use_custom_description Whether the custom description should be used instead of the content description, if the item is associated with content
     *
     * @return self
     */
    public function setUseCustomDescription($use_custom_description): static
    {
        if (is_null($use_custom_description)) {
            throw new \InvalidArgumentException('non-nullable use_custom_description cannot be null');
        }
        $this->container['use_custom_description'] = $use_custom_description;

        return $this;
    }

    /**
     * Gets use_custom_image
     *
     * @return bool|null
     */
    public function getUseCustomImage()
    {
        return $this->container['use_custom_image'];
    }

    /**
     * Sets use_custom_image
     *
     * @param bool|null $use_custom_image Whether the custom image should be used instead of the content image, if the item is associated with content
     *
     * @return self
     */
    public function setUseCustomImage($use_custom_image): static
    {
        if (is_null($use_custom_image)) {
            throw new \InvalidArgumentException('non-nullable use_custom_image cannot be null');
        }
        $this->container['use_custom_image'] = $use_custom_image;

        return $this;
    }

    /**
     * Gets use_custom_title
     *
     * @return bool|null
     */
    public function getUseCustomTitle()
    {
        return $this->container['use_custom_title'];
    }

    /**
     * Sets use_custom_title
     *
     * @param bool|null $use_custom_title Whether the custom title should be used instead of the content title, if the item is associated with content
     *
     * @return self
     */
    public function setUseCustomTitle($use_custom_title): static
    {
        if (is_null($use_custom_title)) {
            throw new \InvalidArgumentException('non-nullable use_custom_title cannot be null');
        }
        $this->container['use_custom_title'] = $use_custom_title;

        return $this;
    }

    /**
     * Gets use_custom_url
     *
     * @return bool|null
     */
    public function getUseCustomUrl()
    {
        return $this->container['use_custom_url'];
    }

    /**
     * Sets use_custom_url
     *
     * @param bool|null $use_custom_url Whether the custom url should be used instead of the content url, if the item is associated with content
     *
     * @return self
     */
    public function setUseCustomUrl($use_custom_url): static
    {
        if (is_null($use_custom_url)) {
            throw new \InvalidArgumentException('non-nullable use_custom_url cannot be null');
        }
        $this->container['use_custom_url'] = $use_custom_url;

        return $this;
    }

    /**
     * Gets view_count
     *
     * @return int|null
     */
    public function getViewCount()
    {
        return $this->container['view_count'];
    }

    /**
     * Sets view_count
     *
     * @param int|null $view_count Number of times content has been viewed, if present
     *
     * @return self
     */
    public function setViewCount($view_count): static
    {
        if (is_null($view_count)) {
            array_push($this->openAPINullablesSetToNull, 'view_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('view_count', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['view_count'] = $view_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return (string) json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
