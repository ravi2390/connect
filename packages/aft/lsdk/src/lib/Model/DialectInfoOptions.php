<?php
/**
 * DialectInfoOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DialectInfoOptions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DialectInfoOptions implements ModelInterface, ArrayAccess, \JsonSerializable, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DialectInfoOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additional_params' => 'bool',
        'after_connect_statements' => 'bool',
        'analytical_view_dataset' => 'bool',
        'auth' => 'bool',
        'cost_estimate' => 'bool',
        'disable_context_comment' => 'bool',
        'host' => 'bool',
        'instance_name' => 'bool',
        'max_billing_gigabytes' => 'bool',
        'oauth_credentials' => 'bool',
        'pdts_for_oauth' => 'bool',
        'port' => 'bool',
        'project_name' => 'bool',
        'schema' => 'bool',
        'service_account_credentials' => 'bool',
        'ssl' => 'bool',
        'timezone' => 'bool',
        'tmp_table' => 'bool',
        'tns' => 'bool',
        'username' => 'bool',
        'username_required' => 'bool',
        'supports_connection_pooling' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additional_params' => null,
        'after_connect_statements' => null,
        'analytical_view_dataset' => null,
        'auth' => null,
        'cost_estimate' => null,
        'disable_context_comment' => null,
        'host' => null,
        'instance_name' => null,
        'max_billing_gigabytes' => null,
        'oauth_credentials' => null,
        'pdts_for_oauth' => null,
        'port' => null,
        'project_name' => null,
        'schema' => null,
        'service_account_credentials' => null,
        'ssl' => null,
        'timezone' => null,
        'tmp_table' => null,
        'tns' => null,
        'username' => null,
        'username_required' => null,
        'supports_connection_pooling' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'additional_params' => false,
        'after_connect_statements' => false,
        'analytical_view_dataset' => false,
        'auth' => false,
        'cost_estimate' => false,
        'disable_context_comment' => false,
        'host' => false,
        'instance_name' => false,
        'max_billing_gigabytes' => false,
        'oauth_credentials' => false,
        'pdts_for_oauth' => false,
        'port' => false,
        'project_name' => false,
        'schema' => false,
        'service_account_credentials' => false,
        'ssl' => false,
        'timezone' => false,
        'tmp_table' => false,
        'tns' => false,
        'username' => false,
        'username_required' => false,
        'supports_connection_pooling' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_params' => 'additional_params',
        'after_connect_statements' => 'after_connect_statements',
        'analytical_view_dataset' => 'analytical_view_dataset',
        'auth' => 'auth',
        'cost_estimate' => 'cost_estimate',
        'disable_context_comment' => 'disable_context_comment',
        'host' => 'host',
        'instance_name' => 'instance_name',
        'max_billing_gigabytes' => 'max_billing_gigabytes',
        'oauth_credentials' => 'oauth_credentials',
        'pdts_for_oauth' => 'pdts_for_oauth',
        'port' => 'port',
        'project_name' => 'project_name',
        'schema' => 'schema',
        'service_account_credentials' => 'service_account_credentials',
        'ssl' => 'ssl',
        'timezone' => 'timezone',
        'tmp_table' => 'tmp_table',
        'tns' => 'tns',
        'username' => 'username',
        'username_required' => 'username_required',
        'supports_connection_pooling' => 'supports_connection_pooling'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_params' => 'setAdditionalParams',
        'after_connect_statements' => 'setAfterConnectStatements',
        'analytical_view_dataset' => 'setAnalyticalViewDataset',
        'auth' => 'setAuth',
        'cost_estimate' => 'setCostEstimate',
        'disable_context_comment' => 'setDisableContextComment',
        'host' => 'setHost',
        'instance_name' => 'setInstanceName',
        'max_billing_gigabytes' => 'setMaxBillingGigabytes',
        'oauth_credentials' => 'setOauthCredentials',
        'pdts_for_oauth' => 'setPdtsForOauth',
        'port' => 'setPort',
        'project_name' => 'setProjectName',
        'schema' => 'setSchema',
        'service_account_credentials' => 'setServiceAccountCredentials',
        'ssl' => 'setSsl',
        'timezone' => 'setTimezone',
        'tmp_table' => 'setTmpTable',
        'tns' => 'setTns',
        'username' => 'setUsername',
        'username_required' => 'setUsernameRequired',
        'supports_connection_pooling' => 'setSupportsConnectionPooling'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_params' => 'getAdditionalParams',
        'after_connect_statements' => 'getAfterConnectStatements',
        'analytical_view_dataset' => 'getAnalyticalViewDataset',
        'auth' => 'getAuth',
        'cost_estimate' => 'getCostEstimate',
        'disable_context_comment' => 'getDisableContextComment',
        'host' => 'getHost',
        'instance_name' => 'getInstanceName',
        'max_billing_gigabytes' => 'getMaxBillingGigabytes',
        'oauth_credentials' => 'getOauthCredentials',
        'pdts_for_oauth' => 'getPdtsForOauth',
        'port' => 'getPort',
        'project_name' => 'getProjectName',
        'schema' => 'getSchema',
        'service_account_credentials' => 'getServiceAccountCredentials',
        'ssl' => 'getSsl',
        'timezone' => 'getTimezone',
        'tmp_table' => 'getTmpTable',
        'tns' => 'getTns',
        'username' => 'getUsername',
        'username_required' => 'getUsernameRequired',
        'supports_connection_pooling' => 'getSupportsConnectionPooling'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('additional_params', $data ?? [], null);
        $this->setIfExists('after_connect_statements', $data ?? [], null);
        $this->setIfExists('analytical_view_dataset', $data ?? [], null);
        $this->setIfExists('auth', $data ?? [], null);
        $this->setIfExists('cost_estimate', $data ?? [], null);
        $this->setIfExists('disable_context_comment', $data ?? [], null);
        $this->setIfExists('host', $data ?? [], null);
        $this->setIfExists('instance_name', $data ?? [], null);
        $this->setIfExists('max_billing_gigabytes', $data ?? [], null);
        $this->setIfExists('oauth_credentials', $data ?? [], null);
        $this->setIfExists('pdts_for_oauth', $data ?? [], null);
        $this->setIfExists('port', $data ?? [], null);
        $this->setIfExists('project_name', $data ?? [], null);
        $this->setIfExists('schema', $data ?? [], null);
        $this->setIfExists('service_account_credentials', $data ?? [], null);
        $this->setIfExists('ssl', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('tmp_table', $data ?? [], null);
        $this->setIfExists('tns', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('username_required', $data ?? [], null);
        $this->setIfExists('supports_connection_pooling', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_params
     *
     * @return bool|null
     */
    public function getAdditionalParams()
    {
        return $this->container['additional_params'];
    }

    /**
     * Sets additional_params
     *
     * @param bool|null $additional_params Has additional params support
     *
     * @return self
     */
    public function setAdditionalParams($additional_params): static
    {
        if (is_null($additional_params)) {
            throw new \InvalidArgumentException('non-nullable additional_params cannot be null');
        }
        $this->container['additional_params'] = $additional_params;

        return $this;
    }

    /**
     * Gets after_connect_statements
     *
     * @return bool|null
     */
    public function getAfterConnectStatements()
    {
        return $this->container['after_connect_statements'];
    }

    /**
     * Sets after_connect_statements
     *
     * @param bool|null $after_connect_statements Has support for issuing statements after connecting to the database
     *
     * @return self
     */
    public function setAfterConnectStatements($after_connect_statements): static
    {
        if (is_null($after_connect_statements)) {
            throw new \InvalidArgumentException('non-nullable after_connect_statements cannot be null');
        }
        $this->container['after_connect_statements'] = $after_connect_statements;

        return $this;
    }

    /**
     * Gets analytical_view_dataset
     *
     * @return bool|null
     */
    public function getAnalyticalViewDataset()
    {
        return $this->container['analytical_view_dataset'];
    }

    /**
     * Sets analytical_view_dataset
     *
     * @param bool|null $analytical_view_dataset Has analytical view support
     *
     * @return self
     */
    public function setAnalyticalViewDataset($analytical_view_dataset): static
    {
        if (is_null($analytical_view_dataset)) {
            throw new \InvalidArgumentException('non-nullable analytical_view_dataset cannot be null');
        }
        $this->container['analytical_view_dataset'] = $analytical_view_dataset;

        return $this;
    }

    /**
     * Gets auth
     *
     * @return bool|null
     */
    public function getAuth()
    {
        return $this->container['auth'];
    }

    /**
     * Sets auth
     *
     * @param bool|null $auth Has auth support
     *
     * @return self
     */
    public function setAuth($auth): static
    {
        if (is_null($auth)) {
            throw new \InvalidArgumentException('non-nullable auth cannot be null');
        }
        $this->container['auth'] = $auth;

        return $this;
    }

    /**
     * Gets cost_estimate
     *
     * @return bool|null
     */
    public function getCostEstimate()
    {
        return $this->container['cost_estimate'];
    }

    /**
     * Sets cost_estimate
     *
     * @param bool|null $cost_estimate Has configurable cost estimation
     *
     * @return self
     */
    public function setCostEstimate($cost_estimate): static
    {
        if (is_null($cost_estimate)) {
            throw new \InvalidArgumentException('non-nullable cost_estimate cannot be null');
        }
        $this->container['cost_estimate'] = $cost_estimate;

        return $this;
    }

    /**
     * Gets disable_context_comment
     *
     * @return bool|null
     */
    public function getDisableContextComment()
    {
        return $this->container['disable_context_comment'];
    }

    /**
     * Sets disable_context_comment
     *
     * @param bool|null $disable_context_comment Can disable query context comments
     *
     * @return self
     */
    public function setDisableContextComment($disable_context_comment): static
    {
        if (is_null($disable_context_comment)) {
            throw new \InvalidArgumentException('non-nullable disable_context_comment cannot be null');
        }
        $this->container['disable_context_comment'] = $disable_context_comment;

        return $this;
    }

    /**
     * Gets host
     *
     * @return bool|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param bool|null $host Host is required
     *
     * @return self
     */
    public function setHost($host): static
    {
        if (is_null($host)) {
            throw new \InvalidArgumentException('non-nullable host cannot be null');
        }
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return bool|null
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param bool|null $instance_name Instance name is required
     *
     * @return self
     */
    public function setInstanceName($instance_name): static
    {
        if (is_null($instance_name)) {
            throw new \InvalidArgumentException('non-nullable instance_name cannot be null');
        }
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets max_billing_gigabytes
     *
     * @return bool|null
     */
    public function getMaxBillingGigabytes()
    {
        return $this->container['max_billing_gigabytes'];
    }

    /**
     * Sets max_billing_gigabytes
     *
     * @param bool|null $max_billing_gigabytes Has max billing gigabytes support
     *
     * @return self
     */
    public function setMaxBillingGigabytes($max_billing_gigabytes): static
    {
        if (is_null($max_billing_gigabytes)) {
            throw new \InvalidArgumentException('non-nullable max_billing_gigabytes cannot be null');
        }
        $this->container['max_billing_gigabytes'] = $max_billing_gigabytes;

        return $this;
    }

    /**
     * Gets oauth_credentials
     *
     * @return bool|null
     */
    public function getOauthCredentials()
    {
        return $this->container['oauth_credentials'];
    }

    /**
     * Sets oauth_credentials
     *
     * @param bool|null $oauth_credentials Has support for a service account
     *
     * @return self
     */
    public function setOauthCredentials($oauth_credentials): static
    {
        if (is_null($oauth_credentials)) {
            throw new \InvalidArgumentException('non-nullable oauth_credentials cannot be null');
        }
        $this->container['oauth_credentials'] = $oauth_credentials;

        return $this;
    }

    /**
     * Gets pdts_for_oauth
     *
     * @return bool|null
     */
    public function getPdtsForOauth()
    {
        return $this->container['pdts_for_oauth'];
    }

    /**
     * Sets pdts_for_oauth
     *
     * @param bool|null $pdts_for_oauth Has OAuth for PDT support
     *
     * @return self
     */
    public function setPdtsForOauth($pdts_for_oauth): static
    {
        if (is_null($pdts_for_oauth)) {
            throw new \InvalidArgumentException('non-nullable pdts_for_oauth cannot be null');
        }
        $this->container['pdts_for_oauth'] = $pdts_for_oauth;

        return $this;
    }

    /**
     * Gets port
     *
     * @return bool|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param bool|null $port Port can be specified
     *
     * @return self
     */
    public function setPort($port): static
    {
        if (is_null($port)) {
            throw new \InvalidArgumentException('non-nullable port cannot be null');
        }
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return bool|null
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param bool|null $project_name Has project name support
     *
     * @return self
     */
    public function setProjectName($project_name): static
    {
        if (is_null($project_name)) {
            throw new \InvalidArgumentException('non-nullable project_name cannot be null');
        }
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets schema
     *
     * @return bool|null
     */
    public function getSchema()
    {
        return $this->container['schema'];
    }

    /**
     * Sets schema
     *
     * @param bool|null $schema Schema can be specified
     *
     * @return self
     */
    public function setSchema($schema): static
    {
        if (is_null($schema)) {
            throw new \InvalidArgumentException('non-nullable schema cannot be null');
        }
        $this->container['schema'] = $schema;

        return $this;
    }

    /**
     * Gets service_account_credentials
     *
     * @return bool|null
     */
    public function getServiceAccountCredentials()
    {
        return $this->container['service_account_credentials'];
    }

    /**
     * Sets service_account_credentials
     *
     * @param bool|null $service_account_credentials Has support for a service account
     *
     * @return self
     */
    public function setServiceAccountCredentials($service_account_credentials): static
    {
        if (is_null($service_account_credentials)) {
            throw new \InvalidArgumentException('non-nullable service_account_credentials cannot be null');
        }
        $this->container['service_account_credentials'] = $service_account_credentials;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return bool|null
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param bool|null $ssl Has TLS/SSL support
     *
     * @return self
     */
    public function setSsl($ssl): static
    {
        if (is_null($ssl)) {
            throw new \InvalidArgumentException('non-nullable ssl cannot be null');
        }
        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return bool|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param bool|null $timezone Has timezone support
     *
     * @return self
     */
    public function setTimezone($timezone): static
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets tmp_table
     *
     * @return bool|null
     */
    public function getTmpTable()
    {
        return $this->container['tmp_table'];
    }

    /**
     * Sets tmp_table
     *
     * @param bool|null $tmp_table Has tmp table support
     *
     * @return self
     */
    public function setTmpTable($tmp_table): static
    {
        if (is_null($tmp_table)) {
            throw new \InvalidArgumentException('non-nullable tmp_table cannot be null');
        }
        $this->container['tmp_table'] = $tmp_table;

        return $this;
    }

    /**
     * Gets tns
     *
     * @return bool|null
     */
    public function getTns()
    {
        return $this->container['tns'];
    }

    /**
     * Sets tns
     *
     * @param bool|null $tns Has Oracle TNS support
     *
     * @return self
     */
    public function setTns($tns): static
    {
        if (is_null($tns)) {
            throw new \InvalidArgumentException('non-nullable tns cannot be null');
        }
        $this->container['tns'] = $tns;

        return $this;
    }

    /**
     * Gets username
     *
     * @return bool|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param bool|null $username Username can be specified
     *
     * @return self
     */
    public function setUsername($username): static
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets username_required
     *
     * @return bool|null
     */
    public function getUsernameRequired()
    {
        return $this->container['username_required'];
    }

    /**
     * Sets username_required
     *
     * @param bool|null $username_required Username is required
     *
     * @return self
     */
    public function setUsernameRequired($username_required): static
    {
        if (is_null($username_required)) {
            throw new \InvalidArgumentException('non-nullable username_required cannot be null');
        }
        $this->container['username_required'] = $username_required;

        return $this;
    }

    /**
     * Gets supports_connection_pooling
     *
     * @return bool|null
     */
    public function getSupportsConnectionPooling()
    {
        return $this->container['supports_connection_pooling'];
    }

    /**
     * Sets supports_connection_pooling
     *
     * @param bool|null $supports_connection_pooling Has support for connection pooling
     *
     * @return self
     */
    public function setSupportsConnectionPooling($supports_connection_pooling): static
    {
        if (is_null($supports_connection_pooling)) {
            throw new \InvalidArgumentException('non-nullable supports_connection_pooling cannot be null');
        }
        $this->container['supports_connection_pooling'] = $supports_connection_pooling;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return (string) json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
