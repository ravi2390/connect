<?php
/**
 * ThemeSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ThemeSettings Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ThemeSettings implements ModelInterface, ArrayAccess, \JsonSerializable, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ThemeSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'background_color' => 'string',
        'base_font_size' => 'string',
        'color_collection_id' => 'string',
        'font_color' => 'string',
        'font_family' => 'string',
        'font_source' => 'string',
        'info_button_color' => 'string',
        'primary_button_color' => 'string',
        'show_filters_bar' => 'bool',
        'show_title' => 'bool',
        'text_tile_text_color' => 'string',
        'tile_background_color' => 'string',
        'text_tile_background_color' => 'string',
        'tile_text_color' => 'string',
        'title_color' => 'string',
        'warn_button_color' => 'string',
        'tile_title_alignment' => 'string',
        'tile_shadow' => 'bool',
        'show_last_updated_indicator' => 'bool',
        'show_reload_data_icon' => 'bool',
        'show_dashboard_menu' => 'bool',
        'show_filters_toggle' => 'bool',
        'show_dashboard_header' => 'bool',
        'center_dashboard_title' => 'bool',
        'dashboard_title_font_size' => 'string',
        'box_shadow' => 'string',
        'page_margin_top' => 'string',
        'page_margin_bottom' => 'string',
        'page_margin_sides' => 'string',
        'show_explore_header' => 'bool',
        'show_explore_title' => 'bool',
        'show_explore_last_run' => 'bool',
        'show_explore_timezone' => 'bool',
        'show_explore_run_stop_button' => 'bool',
        'show_explore_actions_button' => 'bool',
        'show_look_header' => 'bool',
        'show_look_title' => 'bool',
        'show_look_last_run' => 'bool',
        'show_look_timezone' => 'bool',
        'show_look_run_stop_button' => 'bool',
        'show_look_actions_button' => 'bool',
        'tile_title_font_size' => 'string',
        'column_gap_size' => 'string',
        'row_gap_size' => 'string',
        'border_radius' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'background_color' => null,
        'base_font_size' => null,
        'color_collection_id' => null,
        'font_color' => null,
        'font_family' => null,
        'font_source' => null,
        'info_button_color' => null,
        'primary_button_color' => null,
        'show_filters_bar' => null,
        'show_title' => null,
        'text_tile_text_color' => null,
        'tile_background_color' => null,
        'text_tile_background_color' => null,
        'tile_text_color' => null,
        'title_color' => null,
        'warn_button_color' => null,
        'tile_title_alignment' => null,
        'tile_shadow' => null,
        'show_last_updated_indicator' => null,
        'show_reload_data_icon' => null,
        'show_dashboard_menu' => null,
        'show_filters_toggle' => null,
        'show_dashboard_header' => null,
        'center_dashboard_title' => null,
        'dashboard_title_font_size' => null,
        'box_shadow' => null,
        'page_margin_top' => null,
        'page_margin_bottom' => null,
        'page_margin_sides' => null,
        'show_explore_header' => null,
        'show_explore_title' => null,
        'show_explore_last_run' => null,
        'show_explore_timezone' => null,
        'show_explore_run_stop_button' => null,
        'show_explore_actions_button' => null,
        'show_look_header' => null,
        'show_look_title' => null,
        'show_look_last_run' => null,
        'show_look_timezone' => null,
        'show_look_run_stop_button' => null,
        'show_look_actions_button' => null,
        'tile_title_font_size' => null,
        'column_gap_size' => null,
        'row_gap_size' => null,
        'border_radius' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'background_color' => false,
        'base_font_size' => true,
        'color_collection_id' => false,
        'font_color' => true,
        'font_family' => false,
        'font_source' => true,
        'info_button_color' => false,
        'primary_button_color' => false,
        'show_filters_bar' => false,
        'show_title' => false,
        'text_tile_text_color' => false,
        'tile_background_color' => false,
        'text_tile_background_color' => false,
        'tile_text_color' => false,
        'title_color' => false,
        'warn_button_color' => false,
        'tile_title_alignment' => false,
        'tile_shadow' => false,
        'show_last_updated_indicator' => false,
        'show_reload_data_icon' => false,
        'show_dashboard_menu' => false,
        'show_filters_toggle' => false,
        'show_dashboard_header' => false,
        'center_dashboard_title' => false,
        'dashboard_title_font_size' => false,
        'box_shadow' => false,
        'page_margin_top' => false,
        'page_margin_bottom' => false,
        'page_margin_sides' => false,
        'show_explore_header' => false,
        'show_explore_title' => false,
        'show_explore_last_run' => false,
        'show_explore_timezone' => false,
        'show_explore_run_stop_button' => false,
        'show_explore_actions_button' => false,
        'show_look_header' => false,
        'show_look_title' => false,
        'show_look_last_run' => false,
        'show_look_timezone' => false,
        'show_look_run_stop_button' => false,
        'show_look_actions_button' => false,
        'tile_title_font_size' => false,
        'column_gap_size' => false,
        'row_gap_size' => false,
        'border_radius' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'background_color' => 'background_color',
        'base_font_size' => 'base_font_size',
        'color_collection_id' => 'color_collection_id',
        'font_color' => 'font_color',
        'font_family' => 'font_family',
        'font_source' => 'font_source',
        'info_button_color' => 'info_button_color',
        'primary_button_color' => 'primary_button_color',
        'show_filters_bar' => 'show_filters_bar',
        'show_title' => 'show_title',
        'text_tile_text_color' => 'text_tile_text_color',
        'tile_background_color' => 'tile_background_color',
        'text_tile_background_color' => 'text_tile_background_color',
        'tile_text_color' => 'tile_text_color',
        'title_color' => 'title_color',
        'warn_button_color' => 'warn_button_color',
        'tile_title_alignment' => 'tile_title_alignment',
        'tile_shadow' => 'tile_shadow',
        'show_last_updated_indicator' => 'show_last_updated_indicator',
        'show_reload_data_icon' => 'show_reload_data_icon',
        'show_dashboard_menu' => 'show_dashboard_menu',
        'show_filters_toggle' => 'show_filters_toggle',
        'show_dashboard_header' => 'show_dashboard_header',
        'center_dashboard_title' => 'center_dashboard_title',
        'dashboard_title_font_size' => 'dashboard_title_font_size',
        'box_shadow' => 'box_shadow',
        'page_margin_top' => 'page_margin_top',
        'page_margin_bottom' => 'page_margin_bottom',
        'page_margin_sides' => 'page_margin_sides',
        'show_explore_header' => 'show_explore_header',
        'show_explore_title' => 'show_explore_title',
        'show_explore_last_run' => 'show_explore_last_run',
        'show_explore_timezone' => 'show_explore_timezone',
        'show_explore_run_stop_button' => 'show_explore_run_stop_button',
        'show_explore_actions_button' => 'show_explore_actions_button',
        'show_look_header' => 'show_look_header',
        'show_look_title' => 'show_look_title',
        'show_look_last_run' => 'show_look_last_run',
        'show_look_timezone' => 'show_look_timezone',
        'show_look_run_stop_button' => 'show_look_run_stop_button',
        'show_look_actions_button' => 'show_look_actions_button',
        'tile_title_font_size' => 'tile_title_font_size',
        'column_gap_size' => 'column_gap_size',
        'row_gap_size' => 'row_gap_size',
        'border_radius' => 'border_radius'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'background_color' => 'setBackgroundColor',
        'base_font_size' => 'setBaseFontSize',
        'color_collection_id' => 'setColorCollectionId',
        'font_color' => 'setFontColor',
        'font_family' => 'setFontFamily',
        'font_source' => 'setFontSource',
        'info_button_color' => 'setInfoButtonColor',
        'primary_button_color' => 'setPrimaryButtonColor',
        'show_filters_bar' => 'setShowFiltersBar',
        'show_title' => 'setShowTitle',
        'text_tile_text_color' => 'setTextTileTextColor',
        'tile_background_color' => 'setTileBackgroundColor',
        'text_tile_background_color' => 'setTextTileBackgroundColor',
        'tile_text_color' => 'setTileTextColor',
        'title_color' => 'setTitleColor',
        'warn_button_color' => 'setWarnButtonColor',
        'tile_title_alignment' => 'setTileTitleAlignment',
        'tile_shadow' => 'setTileShadow',
        'show_last_updated_indicator' => 'setShowLastUpdatedIndicator',
        'show_reload_data_icon' => 'setShowReloadDataIcon',
        'show_dashboard_menu' => 'setShowDashboardMenu',
        'show_filters_toggle' => 'setShowFiltersToggle',
        'show_dashboard_header' => 'setShowDashboardHeader',
        'center_dashboard_title' => 'setCenterDashboardTitle',
        'dashboard_title_font_size' => 'setDashboardTitleFontSize',
        'box_shadow' => 'setBoxShadow',
        'page_margin_top' => 'setPageMarginTop',
        'page_margin_bottom' => 'setPageMarginBottom',
        'page_margin_sides' => 'setPageMarginSides',
        'show_explore_header' => 'setShowExploreHeader',
        'show_explore_title' => 'setShowExploreTitle',
        'show_explore_last_run' => 'setShowExploreLastRun',
        'show_explore_timezone' => 'setShowExploreTimezone',
        'show_explore_run_stop_button' => 'setShowExploreRunStopButton',
        'show_explore_actions_button' => 'setShowExploreActionsButton',
        'show_look_header' => 'setShowLookHeader',
        'show_look_title' => 'setShowLookTitle',
        'show_look_last_run' => 'setShowLookLastRun',
        'show_look_timezone' => 'setShowLookTimezone',
        'show_look_run_stop_button' => 'setShowLookRunStopButton',
        'show_look_actions_button' => 'setShowLookActionsButton',
        'tile_title_font_size' => 'setTileTitleFontSize',
        'column_gap_size' => 'setColumnGapSize',
        'row_gap_size' => 'setRowGapSize',
        'border_radius' => 'setBorderRadius'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'background_color' => 'getBackgroundColor',
        'base_font_size' => 'getBaseFontSize',
        'color_collection_id' => 'getColorCollectionId',
        'font_color' => 'getFontColor',
        'font_family' => 'getFontFamily',
        'font_source' => 'getFontSource',
        'info_button_color' => 'getInfoButtonColor',
        'primary_button_color' => 'getPrimaryButtonColor',
        'show_filters_bar' => 'getShowFiltersBar',
        'show_title' => 'getShowTitle',
        'text_tile_text_color' => 'getTextTileTextColor',
        'tile_background_color' => 'getTileBackgroundColor',
        'text_tile_background_color' => 'getTextTileBackgroundColor',
        'tile_text_color' => 'getTileTextColor',
        'title_color' => 'getTitleColor',
        'warn_button_color' => 'getWarnButtonColor',
        'tile_title_alignment' => 'getTileTitleAlignment',
        'tile_shadow' => 'getTileShadow',
        'show_last_updated_indicator' => 'getShowLastUpdatedIndicator',
        'show_reload_data_icon' => 'getShowReloadDataIcon',
        'show_dashboard_menu' => 'getShowDashboardMenu',
        'show_filters_toggle' => 'getShowFiltersToggle',
        'show_dashboard_header' => 'getShowDashboardHeader',
        'center_dashboard_title' => 'getCenterDashboardTitle',
        'dashboard_title_font_size' => 'getDashboardTitleFontSize',
        'box_shadow' => 'getBoxShadow',
        'page_margin_top' => 'getPageMarginTop',
        'page_margin_bottom' => 'getPageMarginBottom',
        'page_margin_sides' => 'getPageMarginSides',
        'show_explore_header' => 'getShowExploreHeader',
        'show_explore_title' => 'getShowExploreTitle',
        'show_explore_last_run' => 'getShowExploreLastRun',
        'show_explore_timezone' => 'getShowExploreTimezone',
        'show_explore_run_stop_button' => 'getShowExploreRunStopButton',
        'show_explore_actions_button' => 'getShowExploreActionsButton',
        'show_look_header' => 'getShowLookHeader',
        'show_look_title' => 'getShowLookTitle',
        'show_look_last_run' => 'getShowLookLastRun',
        'show_look_timezone' => 'getShowLookTimezone',
        'show_look_run_stop_button' => 'getShowLookRunStopButton',
        'show_look_actions_button' => 'getShowLookActionsButton',
        'tile_title_font_size' => 'getTileTitleFontSize',
        'column_gap_size' => 'getColumnGapSize',
        'row_gap_size' => 'getRowGapSize',
        'border_radius' => 'getBorderRadius'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('background_color', $data ?? [], null);
        $this->setIfExists('base_font_size', $data ?? [], null);
        $this->setIfExists('color_collection_id', $data ?? [], null);
        $this->setIfExists('font_color', $data ?? [], null);
        $this->setIfExists('font_family', $data ?? [], null);
        $this->setIfExists('font_source', $data ?? [], null);
        $this->setIfExists('info_button_color', $data ?? [], null);
        $this->setIfExists('primary_button_color', $data ?? [], null);
        $this->setIfExists('show_filters_bar', $data ?? [], null);
        $this->setIfExists('show_title', $data ?? [], null);
        $this->setIfExists('text_tile_text_color', $data ?? [], null);
        $this->setIfExists('tile_background_color', $data ?? [], null);
        $this->setIfExists('text_tile_background_color', $data ?? [], null);
        $this->setIfExists('tile_text_color', $data ?? [], null);
        $this->setIfExists('title_color', $data ?? [], null);
        $this->setIfExists('warn_button_color', $data ?? [], null);
        $this->setIfExists('tile_title_alignment', $data ?? [], null);
        $this->setIfExists('tile_shadow', $data ?? [], null);
        $this->setIfExists('show_last_updated_indicator', $data ?? [], null);
        $this->setIfExists('show_reload_data_icon', $data ?? [], null);
        $this->setIfExists('show_dashboard_menu', $data ?? [], null);
        $this->setIfExists('show_filters_toggle', $data ?? [], null);
        $this->setIfExists('show_dashboard_header', $data ?? [], null);
        $this->setIfExists('center_dashboard_title', $data ?? [], null);
        $this->setIfExists('dashboard_title_font_size', $data ?? [], null);
        $this->setIfExists('box_shadow', $data ?? [], null);
        $this->setIfExists('page_margin_top', $data ?? [], null);
        $this->setIfExists('page_margin_bottom', $data ?? [], null);
        $this->setIfExists('page_margin_sides', $data ?? [], null);
        $this->setIfExists('show_explore_header', $data ?? [], null);
        $this->setIfExists('show_explore_title', $data ?? [], null);
        $this->setIfExists('show_explore_last_run', $data ?? [], null);
        $this->setIfExists('show_explore_timezone', $data ?? [], null);
        $this->setIfExists('show_explore_run_stop_button', $data ?? [], null);
        $this->setIfExists('show_explore_actions_button', $data ?? [], null);
        $this->setIfExists('show_look_header', $data ?? [], null);
        $this->setIfExists('show_look_title', $data ?? [], null);
        $this->setIfExists('show_look_last_run', $data ?? [], null);
        $this->setIfExists('show_look_timezone', $data ?? [], null);
        $this->setIfExists('show_look_run_stop_button', $data ?? [], null);
        $this->setIfExists('show_look_actions_button', $data ?? [], null);
        $this->setIfExists('tile_title_font_size', $data ?? [], null);
        $this->setIfExists('column_gap_size', $data ?? [], null);
        $this->setIfExists('row_gap_size', $data ?? [], null);
        $this->setIfExists('border_radius', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets background_color
     *
     * @return string|null
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string|null $background_color Default background color
     *
     * @return self
     */
    public function setBackgroundColor($background_color): static
    {
        if (is_null($background_color)) {
            throw new \InvalidArgumentException('non-nullable background_color cannot be null');
        }
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets base_font_size
     *
     * @return string|null
     */
    public function getBaseFontSize()
    {
        return $this->container['base_font_size'];
    }

    /**
     * Sets base_font_size
     *
     * @param string|null $base_font_size Base font size for scaling fonts (only supported by legacy dashboards)
     *
     * @return self
     */
    public function setBaseFontSize($base_font_size): static
    {
        if (is_null($base_font_size)) {
            array_push($this->openAPINullablesSetToNull, 'base_font_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('base_font_size', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['base_font_size'] = $base_font_size;

        return $this;
    }

    /**
     * Gets color_collection_id
     *
     * @return string|null
     */
    public function getColorCollectionId()
    {
        return $this->container['color_collection_id'];
    }

    /**
     * Sets color_collection_id
     *
     * @param string|null $color_collection_id Optional. ID of color collection to use with the theme. Use an empty string for none.
     *
     * @return self
     */
    public function setColorCollectionId($color_collection_id): static
    {
        if (is_null($color_collection_id)) {
            throw new \InvalidArgumentException('non-nullable color_collection_id cannot be null');
        }
        $this->container['color_collection_id'] = $color_collection_id;

        return $this;
    }

    /**
     * Gets font_color
     *
     * @return string|null
     */
    public function getFontColor()
    {
        return $this->container['font_color'];
    }

    /**
     * Sets font_color
     *
     * @param string|null $font_color Default font color
     *
     * @return self
     */
    public function setFontColor($font_color): static
    {
        if (is_null($font_color)) {
            array_push($this->openAPINullablesSetToNull, 'font_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('font_color', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['font_color'] = $font_color;

        return $this;
    }

    /**
     * Gets font_family
     *
     * @return string|null
     */
    public function getFontFamily()
    {
        return $this->container['font_family'];
    }

    /**
     * Sets font_family
     *
     * @param string|null $font_family Primary font family
     *
     * @return self
     */
    public function setFontFamily($font_family): static
    {
        if (is_null($font_family)) {
            throw new \InvalidArgumentException('non-nullable font_family cannot be null');
        }
        $this->container['font_family'] = $font_family;

        return $this;
    }

    /**
     * Gets font_source
     *
     * @return string|null
     */
    public function getFontSource()
    {
        return $this->container['font_source'];
    }

    /**
     * Sets font_source
     *
     * @param string|null $font_source Source specification for font
     *
     * @return self
     */
    public function setFontSource($font_source): static
    {
        if (is_null($font_source)) {
            array_push($this->openAPINullablesSetToNull, 'font_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('font_source', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['font_source'] = $font_source;

        return $this;
    }

    /**
     * Gets info_button_color
     *
     * @return string|null
     * @deprecated
     */
    public function getInfoButtonColor()
    {
        return $this->container['info_button_color'];
    }

    /**
     * Sets info_button_color
     *
     * @param string|null $info_button_color (DEPRECATED) Info button color
     *
     * @return self
     * @deprecated
     */
    public function setInfoButtonColor($info_button_color): static
    {
        if (is_null($info_button_color)) {
            throw new \InvalidArgumentException('non-nullable info_button_color cannot be null');
        }
        $this->container['info_button_color'] = $info_button_color;

        return $this;
    }

    /**
     * Gets primary_button_color
     *
     * @return string|null
     */
    public function getPrimaryButtonColor()
    {
        return $this->container['primary_button_color'];
    }

    /**
     * Sets primary_button_color
     *
     * @param string|null $primary_button_color Primary button color
     *
     * @return self
     */
    public function setPrimaryButtonColor($primary_button_color): static
    {
        if (is_null($primary_button_color)) {
            throw new \InvalidArgumentException('non-nullable primary_button_color cannot be null');
        }
        $this->container['primary_button_color'] = $primary_button_color;

        return $this;
    }

    /**
     * Gets show_filters_bar
     *
     * @return bool|null
     */
    public function getShowFiltersBar()
    {
        return $this->container['show_filters_bar'];
    }

    /**
     * Sets show_filters_bar
     *
     * @param bool|null $show_filters_bar Toggle to show filters. Defaults to true.
     *
     * @return self
     */
    public function setShowFiltersBar($show_filters_bar): static
    {
        if (is_null($show_filters_bar)) {
            throw new \InvalidArgumentException('non-nullable show_filters_bar cannot be null');
        }
        $this->container['show_filters_bar'] = $show_filters_bar;

        return $this;
    }

    /**
     * Gets show_title
     *
     * @return bool|null
     */
    public function getShowTitle()
    {
        return $this->container['show_title'];
    }

    /**
     * Sets show_title
     *
     * @param bool|null $show_title Toggle to show the title. Defaults to true.
     *
     * @return self
     */
    public function setShowTitle($show_title): static
    {
        if (is_null($show_title)) {
            throw new \InvalidArgumentException('non-nullable show_title cannot be null');
        }
        $this->container['show_title'] = $show_title;

        return $this;
    }

    /**
     * Gets text_tile_text_color
     *
     * @return string|null
     */
    public function getTextTileTextColor()
    {
        return $this->container['text_tile_text_color'];
    }

    /**
     * Sets text_tile_text_color
     *
     * @param string|null $text_tile_text_color Text color for text tiles
     *
     * @return self
     */
    public function setTextTileTextColor($text_tile_text_color): static
    {
        if (is_null($text_tile_text_color)) {
            throw new \InvalidArgumentException('non-nullable text_tile_text_color cannot be null');
        }
        $this->container['text_tile_text_color'] = $text_tile_text_color;

        return $this;
    }

    /**
     * Gets tile_background_color
     *
     * @return string|null
     */
    public function getTileBackgroundColor()
    {
        return $this->container['tile_background_color'];
    }

    /**
     * Sets tile_background_color
     *
     * @param string|null $tile_background_color Background color for tiles
     *
     * @return self
     */
    public function setTileBackgroundColor($tile_background_color): static
    {
        if (is_null($tile_background_color)) {
            throw new \InvalidArgumentException('non-nullable tile_background_color cannot be null');
        }
        $this->container['tile_background_color'] = $tile_background_color;

        return $this;
    }

    /**
     * Gets text_tile_background_color
     *
     * @return string|null
     */
    public function getTextTileBackgroundColor()
    {
        return $this->container['text_tile_background_color'];
    }

    /**
     * Sets text_tile_background_color
     *
     * @param string|null $text_tile_background_color Background color for text tiles
     *
     * @return self
     */
    public function setTextTileBackgroundColor($text_tile_background_color): static
    {
        if (is_null($text_tile_background_color)) {
            throw new \InvalidArgumentException('non-nullable text_tile_background_color cannot be null');
        }
        $this->container['text_tile_background_color'] = $text_tile_background_color;

        return $this;
    }

    /**
     * Gets tile_text_color
     *
     * @return string|null
     */
    public function getTileTextColor()
    {
        return $this->container['tile_text_color'];
    }

    /**
     * Sets tile_text_color
     *
     * @param string|null $tile_text_color Text color for tiles
     *
     * @return self
     */
    public function setTileTextColor($tile_text_color): static
    {
        if (is_null($tile_text_color)) {
            throw new \InvalidArgumentException('non-nullable tile_text_color cannot be null');
        }
        $this->container['tile_text_color'] = $tile_text_color;

        return $this;
    }

    /**
     * Gets title_color
     *
     * @return string|null
     */
    public function getTitleColor()
    {
        return $this->container['title_color'];
    }

    /**
     * Sets title_color
     *
     * @param string|null $title_color Color for titles
     *
     * @return self
     */
    public function setTitleColor($title_color): static
    {
        if (is_null($title_color)) {
            throw new \InvalidArgumentException('non-nullable title_color cannot be null');
        }
        $this->container['title_color'] = $title_color;

        return $this;
    }

    /**
     * Gets warn_button_color
     *
     * @return string|null
     * @deprecated
     */
    public function getWarnButtonColor()
    {
        return $this->container['warn_button_color'];
    }

    /**
     * Sets warn_button_color
     *
     * @param string|null $warn_button_color (DEPRECATED) Warning button color
     *
     * @return self
     * @deprecated
     */
    public function setWarnButtonColor($warn_button_color): static
    {
        if (is_null($warn_button_color)) {
            throw new \InvalidArgumentException('non-nullable warn_button_color cannot be null');
        }
        $this->container['warn_button_color'] = $warn_button_color;

        return $this;
    }

    /**
     * Gets tile_title_alignment
     *
     * @return string|null
     */
    public function getTileTitleAlignment()
    {
        return $this->container['tile_title_alignment'];
    }

    /**
     * Sets tile_title_alignment
     *
     * @param string|null $tile_title_alignment The text alignment of tile titles (New Dashboards)
     *
     * @return self
     */
    public function setTileTitleAlignment($tile_title_alignment): static
    {
        if (is_null($tile_title_alignment)) {
            throw new \InvalidArgumentException('non-nullable tile_title_alignment cannot be null');
        }
        $this->container['tile_title_alignment'] = $tile_title_alignment;

        return $this;
    }

    /**
     * Gets tile_shadow
     *
     * @return bool|null
     */
    public function getTileShadow()
    {
        return $this->container['tile_shadow'];
    }

    /**
     * Sets tile_shadow
     *
     * @param bool|null $tile_shadow Toggles the tile shadow (not supported)
     *
     * @return self
     */
    public function setTileShadow($tile_shadow): static
    {
        if (is_null($tile_shadow)) {
            throw new \InvalidArgumentException('non-nullable tile_shadow cannot be null');
        }
        $this->container['tile_shadow'] = $tile_shadow;

        return $this;
    }

    /**
     * Gets show_last_updated_indicator
     *
     * @return bool|null
     */
    public function getShowLastUpdatedIndicator()
    {
        return $this->container['show_last_updated_indicator'];
    }

    /**
     * Sets show_last_updated_indicator
     *
     * @param bool|null $show_last_updated_indicator Toggle to show the dashboard last updated indicator. Defaults to true.
     *
     * @return self
     */
    public function setShowLastUpdatedIndicator($show_last_updated_indicator): static
    {
        if (is_null($show_last_updated_indicator)) {
            throw new \InvalidArgumentException('non-nullable show_last_updated_indicator cannot be null');
        }
        $this->container['show_last_updated_indicator'] = $show_last_updated_indicator;

        return $this;
    }

    /**
     * Gets show_reload_data_icon
     *
     * @return bool|null
     */
    public function getShowReloadDataIcon()
    {
        return $this->container['show_reload_data_icon'];
    }

    /**
     * Sets show_reload_data_icon
     *
     * @param bool|null $show_reload_data_icon Toggle to show reload data icon/button. Defaults to true.
     *
     * @return self
     */
    public function setShowReloadDataIcon($show_reload_data_icon): static
    {
        if (is_null($show_reload_data_icon)) {
            throw new \InvalidArgumentException('non-nullable show_reload_data_icon cannot be null');
        }
        $this->container['show_reload_data_icon'] = $show_reload_data_icon;

        return $this;
    }

    /**
     * Gets show_dashboard_menu
     *
     * @return bool|null
     */
    public function getShowDashboardMenu()
    {
        return $this->container['show_dashboard_menu'];
    }

    /**
     * Sets show_dashboard_menu
     *
     * @param bool|null $show_dashboard_menu Toggle to show the dashboard actions menu. Defaults to true.
     *
     * @return self
     */
    public function setShowDashboardMenu($show_dashboard_menu): static
    {
        if (is_null($show_dashboard_menu)) {
            throw new \InvalidArgumentException('non-nullable show_dashboard_menu cannot be null');
        }
        $this->container['show_dashboard_menu'] = $show_dashboard_menu;

        return $this;
    }

    /**
     * Gets show_filters_toggle
     *
     * @return bool|null
     */
    public function getShowFiltersToggle()
    {
        return $this->container['show_filters_toggle'];
    }

    /**
     * Sets show_filters_toggle
     *
     * @param bool|null $show_filters_toggle Toggle to show the filters icon/toggle. Defaults to true.
     *
     * @return self
     */
    public function setShowFiltersToggle($show_filters_toggle): static
    {
        if (is_null($show_filters_toggle)) {
            throw new \InvalidArgumentException('non-nullable show_filters_toggle cannot be null');
        }
        $this->container['show_filters_toggle'] = $show_filters_toggle;

        return $this;
    }

    /**
     * Gets show_dashboard_header
     *
     * @return bool|null
     */
    public function getShowDashboardHeader()
    {
        return $this->container['show_dashboard_header'];
    }

    /**
     * Sets show_dashboard_header
     *
     * @param bool|null $show_dashboard_header Toggle to show the dashboard header. Defaults to true.
     *
     * @return self
     */
    public function setShowDashboardHeader($show_dashboard_header): static
    {
        if (is_null($show_dashboard_header)) {
            throw new \InvalidArgumentException('non-nullable show_dashboard_header cannot be null');
        }
        $this->container['show_dashboard_header'] = $show_dashboard_header;

        return $this;
    }

    /**
     * Gets center_dashboard_title
     *
     * @return bool|null
     */
    public function getCenterDashboardTitle()
    {
        return $this->container['center_dashboard_title'];
    }

    /**
     * Sets center_dashboard_title
     *
     * @param bool|null $center_dashboard_title Toggle to center the dashboard title. Defaults to false.
     *
     * @return self
     */
    public function setCenterDashboardTitle($center_dashboard_title): static
    {
        if (is_null($center_dashboard_title)) {
            throw new \InvalidArgumentException('non-nullable center_dashboard_title cannot be null');
        }
        $this->container['center_dashboard_title'] = $center_dashboard_title;

        return $this;
    }

    /**
     * Gets dashboard_title_font_size
     *
     * @return string|null
     */
    public function getDashboardTitleFontSize()
    {
        return $this->container['dashboard_title_font_size'];
    }

    /**
     * Sets dashboard_title_font_size
     *
     * @param string|null $dashboard_title_font_size Dashboard title font size.
     *
     * @return self
     */
    public function setDashboardTitleFontSize($dashboard_title_font_size): static
    {
        if (is_null($dashboard_title_font_size)) {
            throw new \InvalidArgumentException('non-nullable dashboard_title_font_size cannot be null');
        }
        $this->container['dashboard_title_font_size'] = $dashboard_title_font_size;

        return $this;
    }

    /**
     * Gets box_shadow
     *
     * @return string|null
     */
    public function getBoxShadow()
    {
        return $this->container['box_shadow'];
    }

    /**
     * Sets box_shadow
     *
     * @param string|null $box_shadow Default box shadow.
     *
     * @return self
     */
    public function setBoxShadow($box_shadow): static
    {
        if (is_null($box_shadow)) {
            throw new \InvalidArgumentException('non-nullable box_shadow cannot be null');
        }
        $this->container['box_shadow'] = $box_shadow;

        return $this;
    }

    /**
     * Gets page_margin_top
     *
     * @return string|null
     */
    public function getPageMarginTop()
    {
        return $this->container['page_margin_top'];
    }

    /**
     * Sets page_margin_top
     *
     * @param string|null $page_margin_top Dashboard page margin top.
     *
     * @return self
     */
    public function setPageMarginTop($page_margin_top): static
    {
        if (is_null($page_margin_top)) {
            throw new \InvalidArgumentException('non-nullable page_margin_top cannot be null');
        }
        $this->container['page_margin_top'] = $page_margin_top;

        return $this;
    }

    /**
     * Gets page_margin_bottom
     *
     * @return string|null
     */
    public function getPageMarginBottom()
    {
        return $this->container['page_margin_bottom'];
    }

    /**
     * Sets page_margin_bottom
     *
     * @param string|null $page_margin_bottom Dashboard page margin bottom.
     *
     * @return self
     */
    public function setPageMarginBottom($page_margin_bottom): static
    {
        if (is_null($page_margin_bottom)) {
            throw new \InvalidArgumentException('non-nullable page_margin_bottom cannot be null');
        }
        $this->container['page_margin_bottom'] = $page_margin_bottom;

        return $this;
    }

    /**
     * Gets page_margin_sides
     *
     * @return string|null
     */
    public function getPageMarginSides()
    {
        return $this->container['page_margin_sides'];
    }

    /**
     * Sets page_margin_sides
     *
     * @param string|null $page_margin_sides Dashboard page margin left and right.
     *
     * @return self
     */
    public function setPageMarginSides($page_margin_sides): static
    {
        if (is_null($page_margin_sides)) {
            throw new \InvalidArgumentException('non-nullable page_margin_sides cannot be null');
        }
        $this->container['page_margin_sides'] = $page_margin_sides;

        return $this;
    }

    /**
     * Gets show_explore_header
     *
     * @return bool|null
     */
    public function getShowExploreHeader()
    {
        return $this->container['show_explore_header'];
    }

    /**
     * Sets show_explore_header
     *
     * @param bool|null $show_explore_header Toggle to show the explore page header. Defaults to true.
     *
     * @return self
     */
    public function setShowExploreHeader($show_explore_header): static
    {
        if (is_null($show_explore_header)) {
            throw new \InvalidArgumentException('non-nullable show_explore_header cannot be null');
        }
        $this->container['show_explore_header'] = $show_explore_header;

        return $this;
    }

    /**
     * Gets show_explore_title
     *
     * @return bool|null
     */
    public function getShowExploreTitle()
    {
        return $this->container['show_explore_title'];
    }

    /**
     * Sets show_explore_title
     *
     * @param bool|null $show_explore_title Toggle to show the explore page title. Defaults to true.
     *
     * @return self
     */
    public function setShowExploreTitle($show_explore_title): static
    {
        if (is_null($show_explore_title)) {
            throw new \InvalidArgumentException('non-nullable show_explore_title cannot be null');
        }
        $this->container['show_explore_title'] = $show_explore_title;

        return $this;
    }

    /**
     * Gets show_explore_last_run
     *
     * @return bool|null
     */
    public function getShowExploreLastRun()
    {
        return $this->container['show_explore_last_run'];
    }

    /**
     * Sets show_explore_last_run
     *
     * @param bool|null $show_explore_last_run Toggle to show the explore page last run. Defaults to true.
     *
     * @return self
     */
    public function setShowExploreLastRun($show_explore_last_run): static
    {
        if (is_null($show_explore_last_run)) {
            throw new \InvalidArgumentException('non-nullable show_explore_last_run cannot be null');
        }
        $this->container['show_explore_last_run'] = $show_explore_last_run;

        return $this;
    }

    /**
     * Gets show_explore_timezone
     *
     * @return bool|null
     */
    public function getShowExploreTimezone()
    {
        return $this->container['show_explore_timezone'];
    }

    /**
     * Sets show_explore_timezone
     *
     * @param bool|null $show_explore_timezone Toggle to show the explore page timezone. Defaults to true.
     *
     * @return self
     */
    public function setShowExploreTimezone($show_explore_timezone): static
    {
        if (is_null($show_explore_timezone)) {
            throw new \InvalidArgumentException('non-nullable show_explore_timezone cannot be null');
        }
        $this->container['show_explore_timezone'] = $show_explore_timezone;

        return $this;
    }

    /**
     * Gets show_explore_run_stop_button
     *
     * @return bool|null
     */
    public function getShowExploreRunStopButton()
    {
        return $this->container['show_explore_run_stop_button'];
    }

    /**
     * Sets show_explore_run_stop_button
     *
     * @param bool|null $show_explore_run_stop_button Toggle to show the explore page run button. Defaults to true.
     *
     * @return self
     */
    public function setShowExploreRunStopButton($show_explore_run_stop_button): static
    {
        if (is_null($show_explore_run_stop_button)) {
            throw new \InvalidArgumentException('non-nullable show_explore_run_stop_button cannot be null');
        }
        $this->container['show_explore_run_stop_button'] = $show_explore_run_stop_button;

        return $this;
    }

    /**
     * Gets show_explore_actions_button
     *
     * @return bool|null
     */
    public function getShowExploreActionsButton()
    {
        return $this->container['show_explore_actions_button'];
    }

    /**
     * Sets show_explore_actions_button
     *
     * @param bool|null $show_explore_actions_button Toggle to show the explore page actions button. Defaults to true.
     *
     * @return self
     */
    public function setShowExploreActionsButton($show_explore_actions_button): static
    {
        if (is_null($show_explore_actions_button)) {
            throw new \InvalidArgumentException('non-nullable show_explore_actions_button cannot be null');
        }
        $this->container['show_explore_actions_button'] = $show_explore_actions_button;

        return $this;
    }

    /**
     * Gets show_look_header
     *
     * @return bool|null
     */
    public function getShowLookHeader()
    {
        return $this->container['show_look_header'];
    }

    /**
     * Sets show_look_header
     *
     * @param bool|null $show_look_header Toggle to show the look page header. Defaults to true.
     *
     * @return self
     */
    public function setShowLookHeader($show_look_header): static
    {
        if (is_null($show_look_header)) {
            throw new \InvalidArgumentException('non-nullable show_look_header cannot be null');
        }
        $this->container['show_look_header'] = $show_look_header;

        return $this;
    }

    /**
     * Gets show_look_title
     *
     * @return bool|null
     */
    public function getShowLookTitle()
    {
        return $this->container['show_look_title'];
    }

    /**
     * Sets show_look_title
     *
     * @param bool|null $show_look_title Toggle to show the look page title. Defaults to true.
     *
     * @return self
     */
    public function setShowLookTitle($show_look_title): static
    {
        if (is_null($show_look_title)) {
            throw new \InvalidArgumentException('non-nullable show_look_title cannot be null');
        }
        $this->container['show_look_title'] = $show_look_title;

        return $this;
    }

    /**
     * Gets show_look_last_run
     *
     * @return bool|null
     */
    public function getShowLookLastRun()
    {
        return $this->container['show_look_last_run'];
    }

    /**
     * Sets show_look_last_run
     *
     * @param bool|null $show_look_last_run Toggle to show the look page last run. Defaults to true.
     *
     * @return self
     */
    public function setShowLookLastRun($show_look_last_run): static
    {
        if (is_null($show_look_last_run)) {
            throw new \InvalidArgumentException('non-nullable show_look_last_run cannot be null');
        }
        $this->container['show_look_last_run'] = $show_look_last_run;

        return $this;
    }

    /**
     * Gets show_look_timezone
     *
     * @return bool|null
     */
    public function getShowLookTimezone()
    {
        return $this->container['show_look_timezone'];
    }

    /**
     * Sets show_look_timezone
     *
     * @param bool|null $show_look_timezone Toggle to show the look page timezone Defaults to true.
     *
     * @return self
     */
    public function setShowLookTimezone($show_look_timezone): static
    {
        if (is_null($show_look_timezone)) {
            throw new \InvalidArgumentException('non-nullable show_look_timezone cannot be null');
        }
        $this->container['show_look_timezone'] = $show_look_timezone;

        return $this;
    }

    /**
     * Gets show_look_run_stop_button
     *
     * @return bool|null
     */
    public function getShowLookRunStopButton()
    {
        return $this->container['show_look_run_stop_button'];
    }

    /**
     * Sets show_look_run_stop_button
     *
     * @param bool|null $show_look_run_stop_button Toggle to show the look page run button. Defaults to true.
     *
     * @return self
     */
    public function setShowLookRunStopButton($show_look_run_stop_button): static
    {
        if (is_null($show_look_run_stop_button)) {
            throw new \InvalidArgumentException('non-nullable show_look_run_stop_button cannot be null');
        }
        $this->container['show_look_run_stop_button'] = $show_look_run_stop_button;

        return $this;
    }

    /**
     * Gets show_look_actions_button
     *
     * @return bool|null
     */
    public function getShowLookActionsButton()
    {
        return $this->container['show_look_actions_button'];
    }

    /**
     * Sets show_look_actions_button
     *
     * @param bool|null $show_look_actions_button Toggle to show the look page actions button. Defaults to true.
     *
     * @return self
     */
    public function setShowLookActionsButton($show_look_actions_button): static
    {
        if (is_null($show_look_actions_button)) {
            throw new \InvalidArgumentException('non-nullable show_look_actions_button cannot be null');
        }
        $this->container['show_look_actions_button'] = $show_look_actions_button;

        return $this;
    }

    /**
     * Gets tile_title_font_size
     *
     * @return string|null
     */
    public function getTileTitleFontSize()
    {
        return $this->container['tile_title_font_size'];
    }

    /**
     * Sets tile_title_font_size
     *
     * @param string|null $tile_title_font_size Font size for tiles.
     *
     * @return self
     */
    public function setTileTitleFontSize($tile_title_font_size): static
    {
        if (is_null($tile_title_font_size)) {
            throw new \InvalidArgumentException('non-nullable tile_title_font_size cannot be null');
        }
        $this->container['tile_title_font_size'] = $tile_title_font_size;

        return $this;
    }

    /**
     * Gets column_gap_size
     *
     * @return string|null
     */
    public function getColumnGapSize()
    {
        return $this->container['column_gap_size'];
    }

    /**
     * Sets column_gap_size
     *
     * @param string|null $column_gap_size The vertical gap/gutter size between tiles.
     *
     * @return self
     */
    public function setColumnGapSize($column_gap_size): static
    {
        if (is_null($column_gap_size)) {
            throw new \InvalidArgumentException('non-nullable column_gap_size cannot be null');
        }
        $this->container['column_gap_size'] = $column_gap_size;

        return $this;
    }

    /**
     * Gets row_gap_size
     *
     * @return string|null
     */
    public function getRowGapSize()
    {
        return $this->container['row_gap_size'];
    }

    /**
     * Sets row_gap_size
     *
     * @param string|null $row_gap_size The horizontal gap/gutter size between tiles.
     *
     * @return self
     */
    public function setRowGapSize($row_gap_size): static
    {
        if (is_null($row_gap_size)) {
            throw new \InvalidArgumentException('non-nullable row_gap_size cannot be null');
        }
        $this->container['row_gap_size'] = $row_gap_size;

        return $this;
    }

    /**
     * Gets border_radius
     *
     * @return string|null
     */
    public function getBorderRadius()
    {
        return $this->container['border_radius'];
    }

    /**
     * Sets border_radius
     *
     * @param string|null $border_radius The border radius for tiles.
     *
     * @return self
     */
    public function setBorderRadius($border_radius): static
    {
        if (is_null($border_radius)) {
            throw new \InvalidArgumentException('non-nullable border_radius cannot be null');
        }
        $this->container['border_radius'] = $border_radius;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return (string) json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
