<?php
/**
 * SamlConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SamlConfig Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SamlConfig implements ModelInterface, ArrayAccess, \JsonSerializable, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SamlConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can' => 'array<string,bool>',
        'enabled' => 'bool',
        'idp_cert' => 'string',
        'idp_url' => 'string',
        'idp_issuer' => 'string',
        'idp_audience' => 'string',
        'allowed_clock_drift' => 'int',
        'user_attribute_map_email' => 'string',
        'user_attribute_map_first_name' => 'string',
        'user_attribute_map_last_name' => 'string',
        'new_user_migration_types' => 'string',
        'alternate_email_login_allowed' => 'bool',
        'test_slug' => 'string',
        'modified_at' => 'string',
        'modified_by' => 'string',
        'default_new_user_roles' => '\OpenAPI\Client\Model\Role[]',
        'default_new_user_groups' => '\OpenAPI\Client\Model\Group[]',
        'default_new_user_role_ids' => 'string[]',
        'default_new_user_group_ids' => 'string[]',
        'set_roles_from_groups' => 'bool',
        'groups_attribute' => 'string',
        'groups' => '\OpenAPI\Client\Model\SamlGroupRead[]',
        'groups_with_role_ids' => '\OpenAPI\Client\Model\SamlGroupWrite[]',
        'auth_requires_role' => 'bool',
        'user_attributes' => '\OpenAPI\Client\Model\SamlUserAttributeRead[]',
        'user_attributes_with_ids' => '\OpenAPI\Client\Model\SamlUserAttributeWrite[]',
        'groups_finder_type' => 'string',
        'groups_member_value' => 'string',
        'bypass_login_page' => 'bool',
        'allow_normal_group_membership' => 'bool',
        'allow_roles_from_normal_groups' => 'bool',
        'allow_direct_roles' => 'bool',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can' => null,
        'enabled' => null,
        'idp_cert' => null,
        'idp_url' => null,
        'idp_issuer' => null,
        'idp_audience' => null,
        'allowed_clock_drift' => 'int64',
        'user_attribute_map_email' => null,
        'user_attribute_map_first_name' => null,
        'user_attribute_map_last_name' => null,
        'new_user_migration_types' => null,
        'alternate_email_login_allowed' => null,
        'test_slug' => null,
        'modified_at' => null,
        'modified_by' => null,
        'default_new_user_roles' => null,
        'default_new_user_groups' => null,
        'default_new_user_role_ids' => null,
        'default_new_user_group_ids' => null,
        'set_roles_from_groups' => null,
        'groups_attribute' => null,
        'groups' => null,
        'groups_with_role_ids' => null,
        'auth_requires_role' => null,
        'user_attributes' => null,
        'user_attributes_with_ids' => null,
        'groups_finder_type' => null,
        'groups_member_value' => null,
        'bypass_login_page' => null,
        'allow_normal_group_membership' => null,
        'allow_roles_from_normal_groups' => null,
        'allow_direct_roles' => null,
        'url' => 'uri-reference'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'can' => false,
        'enabled' => false,
        'idp_cert' => true,
        'idp_url' => true,
        'idp_issuer' => true,
        'idp_audience' => true,
        'allowed_clock_drift' => true,
        'user_attribute_map_email' => true,
        'user_attribute_map_first_name' => true,
        'user_attribute_map_last_name' => true,
        'new_user_migration_types' => true,
        'alternate_email_login_allowed' => false,
        'test_slug' => true,
        'modified_at' => true,
        'modified_by' => true,
        'default_new_user_roles' => true,
        'default_new_user_groups' => true,
        'default_new_user_role_ids' => true,
        'default_new_user_group_ids' => true,
        'set_roles_from_groups' => false,
        'groups_attribute' => true,
        'groups' => true,
        'groups_with_role_ids' => true,
        'auth_requires_role' => false,
        'user_attributes' => true,
        'user_attributes_with_ids' => true,
        'groups_finder_type' => true,
        'groups_member_value' => true,
        'bypass_login_page' => false,
        'allow_normal_group_membership' => false,
        'allow_roles_from_normal_groups' => false,
        'allow_direct_roles' => false,
        'url' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'enabled' => 'enabled',
        'idp_cert' => 'idp_cert',
        'idp_url' => 'idp_url',
        'idp_issuer' => 'idp_issuer',
        'idp_audience' => 'idp_audience',
        'allowed_clock_drift' => 'allowed_clock_drift',
        'user_attribute_map_email' => 'user_attribute_map_email',
        'user_attribute_map_first_name' => 'user_attribute_map_first_name',
        'user_attribute_map_last_name' => 'user_attribute_map_last_name',
        'new_user_migration_types' => 'new_user_migration_types',
        'alternate_email_login_allowed' => 'alternate_email_login_allowed',
        'test_slug' => 'test_slug',
        'modified_at' => 'modified_at',
        'modified_by' => 'modified_by',
        'default_new_user_roles' => 'default_new_user_roles',
        'default_new_user_groups' => 'default_new_user_groups',
        'default_new_user_role_ids' => 'default_new_user_role_ids',
        'default_new_user_group_ids' => 'default_new_user_group_ids',
        'set_roles_from_groups' => 'set_roles_from_groups',
        'groups_attribute' => 'groups_attribute',
        'groups' => 'groups',
        'groups_with_role_ids' => 'groups_with_role_ids',
        'auth_requires_role' => 'auth_requires_role',
        'user_attributes' => 'user_attributes',
        'user_attributes_with_ids' => 'user_attributes_with_ids',
        'groups_finder_type' => 'groups_finder_type',
        'groups_member_value' => 'groups_member_value',
        'bypass_login_page' => 'bypass_login_page',
        'allow_normal_group_membership' => 'allow_normal_group_membership',
        'allow_roles_from_normal_groups' => 'allow_roles_from_normal_groups',
        'allow_direct_roles' => 'allow_direct_roles',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'enabled' => 'setEnabled',
        'idp_cert' => 'setIdpCert',
        'idp_url' => 'setIdpUrl',
        'idp_issuer' => 'setIdpIssuer',
        'idp_audience' => 'setIdpAudience',
        'allowed_clock_drift' => 'setAllowedClockDrift',
        'user_attribute_map_email' => 'setUserAttributeMapEmail',
        'user_attribute_map_first_name' => 'setUserAttributeMapFirstName',
        'user_attribute_map_last_name' => 'setUserAttributeMapLastName',
        'new_user_migration_types' => 'setNewUserMigrationTypes',
        'alternate_email_login_allowed' => 'setAlternateEmailLoginAllowed',
        'test_slug' => 'setTestSlug',
        'modified_at' => 'setModifiedAt',
        'modified_by' => 'setModifiedBy',
        'default_new_user_roles' => 'setDefaultNewUserRoles',
        'default_new_user_groups' => 'setDefaultNewUserGroups',
        'default_new_user_role_ids' => 'setDefaultNewUserRoleIds',
        'default_new_user_group_ids' => 'setDefaultNewUserGroupIds',
        'set_roles_from_groups' => 'setSetRolesFromGroups',
        'groups_attribute' => 'setGroupsAttribute',
        'groups' => 'setGroups',
        'groups_with_role_ids' => 'setGroupsWithRoleIds',
        'auth_requires_role' => 'setAuthRequiresRole',
        'user_attributes' => 'setUserAttributes',
        'user_attributes_with_ids' => 'setUserAttributesWithIds',
        'groups_finder_type' => 'setGroupsFinderType',
        'groups_member_value' => 'setGroupsMemberValue',
        'bypass_login_page' => 'setBypassLoginPage',
        'allow_normal_group_membership' => 'setAllowNormalGroupMembership',
        'allow_roles_from_normal_groups' => 'setAllowRolesFromNormalGroups',
        'allow_direct_roles' => 'setAllowDirectRoles',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'enabled' => 'getEnabled',
        'idp_cert' => 'getIdpCert',
        'idp_url' => 'getIdpUrl',
        'idp_issuer' => 'getIdpIssuer',
        'idp_audience' => 'getIdpAudience',
        'allowed_clock_drift' => 'getAllowedClockDrift',
        'user_attribute_map_email' => 'getUserAttributeMapEmail',
        'user_attribute_map_first_name' => 'getUserAttributeMapFirstName',
        'user_attribute_map_last_name' => 'getUserAttributeMapLastName',
        'new_user_migration_types' => 'getNewUserMigrationTypes',
        'alternate_email_login_allowed' => 'getAlternateEmailLoginAllowed',
        'test_slug' => 'getTestSlug',
        'modified_at' => 'getModifiedAt',
        'modified_by' => 'getModifiedBy',
        'default_new_user_roles' => 'getDefaultNewUserRoles',
        'default_new_user_groups' => 'getDefaultNewUserGroups',
        'default_new_user_role_ids' => 'getDefaultNewUserRoleIds',
        'default_new_user_group_ids' => 'getDefaultNewUserGroupIds',
        'set_roles_from_groups' => 'getSetRolesFromGroups',
        'groups_attribute' => 'getGroupsAttribute',
        'groups' => 'getGroups',
        'groups_with_role_ids' => 'getGroupsWithRoleIds',
        'auth_requires_role' => 'getAuthRequiresRole',
        'user_attributes' => 'getUserAttributes',
        'user_attributes_with_ids' => 'getUserAttributesWithIds',
        'groups_finder_type' => 'getGroupsFinderType',
        'groups_member_value' => 'getGroupsMemberValue',
        'bypass_login_page' => 'getBypassLoginPage',
        'allow_normal_group_membership' => 'getAllowNormalGroupMembership',
        'allow_roles_from_normal_groups' => 'getAllowRolesFromNormalGroups',
        'allow_direct_roles' => 'getAllowDirectRoles',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('can', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('idp_cert', $data ?? [], null);
        $this->setIfExists('idp_url', $data ?? [], null);
        $this->setIfExists('idp_issuer', $data ?? [], null);
        $this->setIfExists('idp_audience', $data ?? [], null);
        $this->setIfExists('allowed_clock_drift', $data ?? [], null);
        $this->setIfExists('user_attribute_map_email', $data ?? [], null);
        $this->setIfExists('user_attribute_map_first_name', $data ?? [], null);
        $this->setIfExists('user_attribute_map_last_name', $data ?? [], null);
        $this->setIfExists('new_user_migration_types', $data ?? [], null);
        $this->setIfExists('alternate_email_login_allowed', $data ?? [], null);
        $this->setIfExists('test_slug', $data ?? [], null);
        $this->setIfExists('modified_at', $data ?? [], null);
        $this->setIfExists('modified_by', $data ?? [], null);
        $this->setIfExists('default_new_user_roles', $data ?? [], null);
        $this->setIfExists('default_new_user_groups', $data ?? [], null);
        $this->setIfExists('default_new_user_role_ids', $data ?? [], null);
        $this->setIfExists('default_new_user_group_ids', $data ?? [], null);
        $this->setIfExists('set_roles_from_groups', $data ?? [], null);
        $this->setIfExists('groups_attribute', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('groups_with_role_ids', $data ?? [], null);
        $this->setIfExists('auth_requires_role', $data ?? [], null);
        $this->setIfExists('user_attributes', $data ?? [], null);
        $this->setIfExists('user_attributes_with_ids', $data ?? [], null);
        $this->setIfExists('groups_finder_type', $data ?? [], null);
        $this->setIfExists('groups_member_value', $data ?? [], null);
        $this->setIfExists('bypass_login_page', $data ?? [], null);
        $this->setIfExists('allow_normal_group_membership', $data ?? [], null);
        $this->setIfExists('allow_roles_from_normal_groups', $data ?? [], null);
        $this->setIfExists('allow_direct_roles', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return array<string,bool>|null
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param array<string,bool>|null $can Operations the current user is able to perform on this object
     *
     * @return self
     */
    public function setCan($can): static
    {
        if (is_null($can)) {
            throw new \InvalidArgumentException('non-nullable can cannot be null');
        }
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Enable/Disable Saml authentication for the server
     *
     * @return self
     */
    public function setEnabled($enabled): static
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets idp_cert
     *
     * @return string|null
     */
    public function getIdpCert()
    {
        return $this->container['idp_cert'];
    }

    /**
     * Sets idp_cert
     *
     * @param string|null $idp_cert Identity Provider Certificate (provided by IdP)
     *
     * @return self
     */
    public function setIdpCert($idp_cert): static
    {
        if (is_null($idp_cert)) {
            array_push($this->openAPINullablesSetToNull, 'idp_cert');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idp_cert', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idp_cert'] = $idp_cert;

        return $this;
    }

    /**
     * Gets idp_url
     *
     * @return string|null
     */
    public function getIdpUrl()
    {
        return $this->container['idp_url'];
    }

    /**
     * Sets idp_url
     *
     * @param string|null $idp_url Identity Provider Url (provided by IdP)
     *
     * @return self
     */
    public function setIdpUrl($idp_url): static
    {
        if (is_null($idp_url)) {
            array_push($this->openAPINullablesSetToNull, 'idp_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idp_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idp_url'] = $idp_url;

        return $this;
    }

    /**
     * Gets idp_issuer
     *
     * @return string|null
     */
    public function getIdpIssuer()
    {
        return $this->container['idp_issuer'];
    }

    /**
     * Sets idp_issuer
     *
     * @param string|null $idp_issuer Identity Provider Issuer (provided by IdP)
     *
     * @return self
     */
    public function setIdpIssuer($idp_issuer): static
    {
        if (is_null($idp_issuer)) {
            array_push($this->openAPINullablesSetToNull, 'idp_issuer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idp_issuer', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idp_issuer'] = $idp_issuer;

        return $this;
    }

    /**
     * Gets idp_audience
     *
     * @return string|null
     */
    public function getIdpAudience()
    {
        return $this->container['idp_audience'];
    }

    /**
     * Sets idp_audience
     *
     * @param string|null $idp_audience Identity Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP.
     *
     * @return self
     */
    public function setIdpAudience($idp_audience): static
    {
        if (is_null($idp_audience)) {
            array_push($this->openAPINullablesSetToNull, 'idp_audience');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idp_audience', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idp_audience'] = $idp_audience;

        return $this;
    }

    /**
     * Gets allowed_clock_drift
     *
     * @return int|null
     */
    public function getAllowedClockDrift()
    {
        return $this->container['allowed_clock_drift'];
    }

    /**
     * Sets allowed_clock_drift
     *
     * @param int|null $allowed_clock_drift Count of seconds of clock drift to allow when validating timestamps of assertions.
     *
     * @return self
     */
    public function setAllowedClockDrift($allowed_clock_drift): static
    {
        if (is_null($allowed_clock_drift)) {
            array_push($this->openAPINullablesSetToNull, 'allowed_clock_drift');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allowed_clock_drift', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allowed_clock_drift'] = $allowed_clock_drift;

        return $this;
    }

    /**
     * Gets user_attribute_map_email
     *
     * @return string|null
     */
    public function getUserAttributeMapEmail()
    {
        return $this->container['user_attribute_map_email'];
    }

    /**
     * Sets user_attribute_map_email
     *
     * @param string|null $user_attribute_map_email Name of user record attributes used to indicate email address field
     *
     * @return self
     */
    public function setUserAttributeMapEmail($user_attribute_map_email): static
    {
        if (is_null($user_attribute_map_email)) {
            array_push($this->openAPINullablesSetToNull, 'user_attribute_map_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_attribute_map_email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_attribute_map_email'] = $user_attribute_map_email;

        return $this;
    }

    /**
     * Gets user_attribute_map_first_name
     *
     * @return string|null
     */
    public function getUserAttributeMapFirstName()
    {
        return $this->container['user_attribute_map_first_name'];
    }

    /**
     * Sets user_attribute_map_first_name
     *
     * @param string|null $user_attribute_map_first_name Name of user record attributes used to indicate first name
     *
     * @return self
     */
    public function setUserAttributeMapFirstName($user_attribute_map_first_name): static
    {
        if (is_null($user_attribute_map_first_name)) {
            array_push($this->openAPINullablesSetToNull, 'user_attribute_map_first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_attribute_map_first_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_attribute_map_first_name'] = $user_attribute_map_first_name;

        return $this;
    }

    /**
     * Gets user_attribute_map_last_name
     *
     * @return string|null
     */
    public function getUserAttributeMapLastName()
    {
        return $this->container['user_attribute_map_last_name'];
    }

    /**
     * Sets user_attribute_map_last_name
     *
     * @param string|null $user_attribute_map_last_name Name of user record attributes used to indicate last name
     *
     * @return self
     */
    public function setUserAttributeMapLastName($user_attribute_map_last_name): static
    {
        if (is_null($user_attribute_map_last_name)) {
            array_push($this->openAPINullablesSetToNull, 'user_attribute_map_last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_attribute_map_last_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_attribute_map_last_name'] = $user_attribute_map_last_name;

        return $this;
    }

    /**
     * Gets new_user_migration_types
     *
     * @return string|null
     */
    public function getNewUserMigrationTypes()
    {
        return $this->container['new_user_migration_types'];
    }

    /**
     * Sets new_user_migration_types
     *
     * @param string|null $new_user_migration_types Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
     *
     * @return self
     */
    public function setNewUserMigrationTypes($new_user_migration_types): static
    {
        if (is_null($new_user_migration_types)) {
            array_push($this->openAPINullablesSetToNull, 'new_user_migration_types');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('new_user_migration_types', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['new_user_migration_types'] = $new_user_migration_types;

        return $this;
    }

    /**
     * Gets alternate_email_login_allowed
     *
     * @return bool|null
     */
    public function getAlternateEmailLoginAllowed()
    {
        return $this->container['alternate_email_login_allowed'];
    }

    /**
     * Sets alternate_email_login_allowed
     *
     * @param bool|null $alternate_email_login_allowed Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
     *
     * @return self
     */
    public function setAlternateEmailLoginAllowed($alternate_email_login_allowed): static
    {
        if (is_null($alternate_email_login_allowed)) {
            throw new \InvalidArgumentException('non-nullable alternate_email_login_allowed cannot be null');
        }
        $this->container['alternate_email_login_allowed'] = $alternate_email_login_allowed;

        return $this;
    }

    /**
     * Gets test_slug
     *
     * @return string|null
     */
    public function getTestSlug()
    {
        return $this->container['test_slug'];
    }

    /**
     * Sets test_slug
     *
     * @param string|null $test_slug Slug to identify configurations that are created in order to run a Saml config test
     *
     * @return self
     */
    public function setTestSlug($test_slug): static
    {
        if (is_null($test_slug)) {
            array_push($this->openAPINullablesSetToNull, 'test_slug');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_slug', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_slug'] = $test_slug;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return string|null
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param string|null $modified_at When this config was last modified
     *
     * @return self
     */
    public function setModifiedAt($modified_at): static
    {
        if (is_null($modified_at)) {
            array_push($this->openAPINullablesSetToNull, 'modified_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modified_at', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return string|null
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param string|null $modified_by User id of user who last modified this config
     *
     * @return self
     */
    public function setModifiedBy($modified_by): static
    {
        if (is_null($modified_by)) {
            array_push($this->openAPINullablesSetToNull, 'modified_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modified_by', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets default_new_user_roles
     *
     * @return \OpenAPI\Client\Model\Role[]|null
     */
    public function getDefaultNewUserRoles()
    {
        return $this->container['default_new_user_roles'];
    }

    /**
     * Sets default_new_user_roles
     *
     * @param \OpenAPI\Client\Model\Role[]|null $default_new_user_roles (Read-only) Roles that will be applied to new users the first time they login via Saml
     *
     * @return self
     */
    public function setDefaultNewUserRoles($default_new_user_roles): static
    {
        if (is_null($default_new_user_roles)) {
            array_push($this->openAPINullablesSetToNull, 'default_new_user_roles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_new_user_roles', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_new_user_roles'] = $default_new_user_roles;

        return $this;
    }

    /**
     * Gets default_new_user_groups
     *
     * @return \OpenAPI\Client\Model\Group[]|null
     */
    public function getDefaultNewUserGroups()
    {
        return $this->container['default_new_user_groups'];
    }

    /**
     * Sets default_new_user_groups
     *
     * @param \OpenAPI\Client\Model\Group[]|null $default_new_user_groups (Read-only) Groups that will be applied to new users the first time they login via Saml
     *
     * @return self
     */
    public function setDefaultNewUserGroups($default_new_user_groups): static
    {
        if (is_null($default_new_user_groups)) {
            array_push($this->openAPINullablesSetToNull, 'default_new_user_groups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_new_user_groups', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_new_user_groups'] = $default_new_user_groups;

        return $this;
    }

    /**
     * Gets default_new_user_role_ids
     *
     * @return string[]|null
     */
    public function getDefaultNewUserRoleIds()
    {
        return $this->container['default_new_user_role_ids'];
    }

    /**
     * Sets default_new_user_role_ids
     *
     * @param string[]|null $default_new_user_role_ids (Write-Only) Array of ids of roles that will be applied to new users the first time they login via Saml
     *
     * @return self
     */
    public function setDefaultNewUserRoleIds($default_new_user_role_ids): static
    {
        if (is_null($default_new_user_role_ids)) {
            array_push($this->openAPINullablesSetToNull, 'default_new_user_role_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_new_user_role_ids', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_new_user_role_ids'] = $default_new_user_role_ids;

        return $this;
    }

    /**
     * Gets default_new_user_group_ids
     *
     * @return string[]|null
     */
    public function getDefaultNewUserGroupIds()
    {
        return $this->container['default_new_user_group_ids'];
    }

    /**
     * Sets default_new_user_group_ids
     *
     * @param string[]|null $default_new_user_group_ids (Write-Only) Array of ids of groups that will be applied to new users the first time they login via Saml
     *
     * @return self
     */
    public function setDefaultNewUserGroupIds($default_new_user_group_ids): static
    {
        if (is_null($default_new_user_group_ids)) {
            array_push($this->openAPINullablesSetToNull, 'default_new_user_group_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_new_user_group_ids', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_new_user_group_ids'] = $default_new_user_group_ids;

        return $this;
    }

    /**
     * Gets set_roles_from_groups
     *
     * @return bool|null
     */
    public function getSetRolesFromGroups()
    {
        return $this->container['set_roles_from_groups'];
    }

    /**
     * Sets set_roles_from_groups
     *
     * @param bool|null $set_roles_from_groups Set user roles in Looker based on groups from Saml
     *
     * @return self
     */
    public function setSetRolesFromGroups($set_roles_from_groups): static
    {
        if (is_null($set_roles_from_groups)) {
            throw new \InvalidArgumentException('non-nullable set_roles_from_groups cannot be null');
        }
        $this->container['set_roles_from_groups'] = $set_roles_from_groups;

        return $this;
    }

    /**
     * Gets groups_attribute
     *
     * @return string|null
     */
    public function getGroupsAttribute()
    {
        return $this->container['groups_attribute'];
    }

    /**
     * Sets groups_attribute
     *
     * @param string|null $groups_attribute Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
     *
     * @return self
     */
    public function setGroupsAttribute($groups_attribute): static
    {
        if (is_null($groups_attribute)) {
            array_push($this->openAPINullablesSetToNull, 'groups_attribute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('groups_attribute', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['groups_attribute'] = $groups_attribute;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \OpenAPI\Client\Model\SamlGroupRead[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \OpenAPI\Client\Model\SamlGroupRead[]|null $groups (Read-only) Array of mappings between Saml Groups and Looker Roles
     *
     * @return self
     */
    public function setGroups($groups): static
    {
        if (is_null($groups)) {
            array_push($this->openAPINullablesSetToNull, 'groups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('groups', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets groups_with_role_ids
     *
     * @return \OpenAPI\Client\Model\SamlGroupWrite[]|null
     */
    public function getGroupsWithRoleIds()
    {
        return $this->container['groups_with_role_ids'];
    }

    /**
     * Sets groups_with_role_ids
     *
     * @param \OpenAPI\Client\Model\SamlGroupWrite[]|null $groups_with_role_ids (Read/Write) Array of mappings between Saml Groups and arrays of Looker Role ids
     *
     * @return self
     */
    public function setGroupsWithRoleIds($groups_with_role_ids): static
    {
        if (is_null($groups_with_role_ids)) {
            array_push($this->openAPINullablesSetToNull, 'groups_with_role_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('groups_with_role_ids', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['groups_with_role_ids'] = $groups_with_role_ids;

        return $this;
    }

    /**
     * Gets auth_requires_role
     *
     * @return bool|null
     */
    public function getAuthRequiresRole()
    {
        return $this->container['auth_requires_role'];
    }

    /**
     * Sets auth_requires_role
     *
     * @param bool|null $auth_requires_role Users will not be allowed to login at all unless a role for them is found in Saml if set to true
     *
     * @return self
     */
    public function setAuthRequiresRole($auth_requires_role): static
    {
        if (is_null($auth_requires_role)) {
            throw new \InvalidArgumentException('non-nullable auth_requires_role cannot be null');
        }
        $this->container['auth_requires_role'] = $auth_requires_role;

        return $this;
    }

    /**
     * Gets user_attributes
     *
     * @return \OpenAPI\Client\Model\SamlUserAttributeRead[]|null
     */
    public function getUserAttributes()
    {
        return $this->container['user_attributes'];
    }

    /**
     * Sets user_attributes
     *
     * @param \OpenAPI\Client\Model\SamlUserAttributeRead[]|null $user_attributes (Read-only) Array of mappings between Saml User Attributes and Looker User Attributes
     *
     * @return self
     */
    public function setUserAttributes($user_attributes): static
    {
        if (is_null($user_attributes)) {
            array_push($this->openAPINullablesSetToNull, 'user_attributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_attributes', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_attributes'] = $user_attributes;

        return $this;
    }

    /**
     * Gets user_attributes_with_ids
     *
     * @return \OpenAPI\Client\Model\SamlUserAttributeWrite[]|null
     */
    public function getUserAttributesWithIds()
    {
        return $this->container['user_attributes_with_ids'];
    }

    /**
     * Sets user_attributes_with_ids
     *
     * @param \OpenAPI\Client\Model\SamlUserAttributeWrite[]|null $user_attributes_with_ids (Read/Write) Array of mappings between Saml User Attributes and arrays of Looker User Attribute ids
     *
     * @return self
     */
    public function setUserAttributesWithIds($user_attributes_with_ids): static
    {
        if (is_null($user_attributes_with_ids)) {
            array_push($this->openAPINullablesSetToNull, 'user_attributes_with_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_attributes_with_ids', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_attributes_with_ids'] = $user_attributes_with_ids;

        return $this;
    }

    /**
     * Gets groups_finder_type
     *
     * @return string|null
     */
    public function getGroupsFinderType()
    {
        return $this->container['groups_finder_type'];
    }

    /**
     * Sets groups_finder_type
     *
     * @param string|null $groups_finder_type Identifier for a strategy for how Looker will find groups in the SAML response. One of ['grouped_attribute_values', 'individual_attributes']
     *
     * @return self
     */
    public function setGroupsFinderType($groups_finder_type): static
    {
        if (is_null($groups_finder_type)) {
            array_push($this->openAPINullablesSetToNull, 'groups_finder_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('groups_finder_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['groups_finder_type'] = $groups_finder_type;

        return $this;
    }

    /**
     * Gets groups_member_value
     *
     * @return string|null
     */
    public function getGroupsMemberValue()
    {
        return $this->container['groups_member_value'];
    }

    /**
     * Sets groups_member_value
     *
     * @param string|null $groups_member_value Value for group attribute used to indicate membership. Used when 'groups_finder_type' is set to 'individual_attributes'
     *
     * @return self
     */
    public function setGroupsMemberValue($groups_member_value): static
    {
        if (is_null($groups_member_value)) {
            array_push($this->openAPINullablesSetToNull, 'groups_member_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('groups_member_value', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['groups_member_value'] = $groups_member_value;

        return $this;
    }

    /**
     * Gets bypass_login_page
     *
     * @return bool|null
     */
    public function getBypassLoginPage()
    {
        return $this->container['bypass_login_page'];
    }

    /**
     * Sets bypass_login_page
     *
     * @param bool|null $bypass_login_page Bypass the login page when user authentication is required. Redirect to IdP immediately instead.
     *
     * @return self
     */
    public function setBypassLoginPage($bypass_login_page): static
    {
        if (is_null($bypass_login_page)) {
            throw new \InvalidArgumentException('non-nullable bypass_login_page cannot be null');
        }
        $this->container['bypass_login_page'] = $bypass_login_page;

        return $this;
    }

    /**
     * Gets allow_normal_group_membership
     *
     * @return bool|null
     */
    public function getAllowNormalGroupMembership()
    {
        return $this->container['allow_normal_group_membership'];
    }

    /**
     * Sets allow_normal_group_membership
     *
     * @param bool|null $allow_normal_group_membership Allow SAML auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
     *
     * @return self
     */
    public function setAllowNormalGroupMembership($allow_normal_group_membership): static
    {
        if (is_null($allow_normal_group_membership)) {
            throw new \InvalidArgumentException('non-nullable allow_normal_group_membership cannot be null');
        }
        $this->container['allow_normal_group_membership'] = $allow_normal_group_membership;

        return $this;
    }

    /**
     * Gets allow_roles_from_normal_groups
     *
     * @return bool|null
     */
    public function getAllowRolesFromNormalGroups()
    {
        return $this->container['allow_roles_from_normal_groups'];
    }

    /**
     * Sets allow_roles_from_normal_groups
     *
     * @param bool|null $allow_roles_from_normal_groups SAML auth'd users will inherit roles from non-reflected Looker groups.
     *
     * @return self
     */
    public function setAllowRolesFromNormalGroups($allow_roles_from_normal_groups): static
    {
        if (is_null($allow_roles_from_normal_groups)) {
            throw new \InvalidArgumentException('non-nullable allow_roles_from_normal_groups cannot be null');
        }
        $this->container['allow_roles_from_normal_groups'] = $allow_roles_from_normal_groups;

        return $this;
    }

    /**
     * Gets allow_direct_roles
     *
     * @return bool|null
     */
    public function getAllowDirectRoles()
    {
        return $this->container['allow_direct_roles'];
    }

    /**
     * Sets allow_direct_roles
     *
     * @param bool|null $allow_direct_roles Allows roles to be directly assigned to SAML auth'd users.
     *
     * @return self
     */
    public function setAllowDirectRoles($allow_direct_roles): static
    {
        if (is_null($allow_direct_roles)) {
            throw new \InvalidArgumentException('non-nullable allow_direct_roles cannot be null');
        }
        $this->container['allow_direct_roles'] = $allow_direct_roles;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url Link to get this item
     *
     * @return self
     */
    public function setUrl($url): static
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return (string) json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
