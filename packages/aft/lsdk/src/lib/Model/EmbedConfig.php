<?php
/**
 * EmbedConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EmbedConfig Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmbedConfig implements ModelInterface, ArrayAccess, \JsonSerializable, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmbedConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'domain_allowlist' => 'string[]',
        'alert_url_allowlist' => 'string[]',
        'alert_url_param_owner' => 'string',
        'alert_url_label' => 'string',
        'sso_auth_enabled' => 'bool',
        'embed_cookieless_v2' => 'bool',
        'embed_content_navigation' => 'bool',
        'embed_content_management' => 'bool',
        'strict_sameorigin_for_login' => 'bool',
        'look_filters' => 'bool',
        'hide_look_navigation' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'domain_allowlist' => null,
        'alert_url_allowlist' => null,
        'alert_url_param_owner' => null,
        'alert_url_label' => null,
        'sso_auth_enabled' => null,
        'embed_cookieless_v2' => null,
        'embed_content_navigation' => null,
        'embed_content_management' => null,
        'strict_sameorigin_for_login' => null,
        'look_filters' => null,
        'hide_look_navigation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'domain_allowlist' => true,
        'alert_url_allowlist' => true,
        'alert_url_param_owner' => true,
        'alert_url_label' => true,
        'sso_auth_enabled' => false,
        'embed_cookieless_v2' => false,
        'embed_content_navigation' => false,
        'embed_content_management' => false,
        'strict_sameorigin_for_login' => false,
        'look_filters' => false,
        'hide_look_navigation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain_allowlist' => 'domain_allowlist',
        'alert_url_allowlist' => 'alert_url_allowlist',
        'alert_url_param_owner' => 'alert_url_param_owner',
        'alert_url_label' => 'alert_url_label',
        'sso_auth_enabled' => 'sso_auth_enabled',
        'embed_cookieless_v2' => 'embed_cookieless_v2',
        'embed_content_navigation' => 'embed_content_navigation',
        'embed_content_management' => 'embed_content_management',
        'strict_sameorigin_for_login' => 'strict_sameorigin_for_login',
        'look_filters' => 'look_filters',
        'hide_look_navigation' => 'hide_look_navigation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain_allowlist' => 'setDomainAllowlist',
        'alert_url_allowlist' => 'setAlertUrlAllowlist',
        'alert_url_param_owner' => 'setAlertUrlParamOwner',
        'alert_url_label' => 'setAlertUrlLabel',
        'sso_auth_enabled' => 'setSsoAuthEnabled',
        'embed_cookieless_v2' => 'setEmbedCookielessV2',
        'embed_content_navigation' => 'setEmbedContentNavigation',
        'embed_content_management' => 'setEmbedContentManagement',
        'strict_sameorigin_for_login' => 'setStrictSameoriginForLogin',
        'look_filters' => 'setLookFilters',
        'hide_look_navigation' => 'setHideLookNavigation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain_allowlist' => 'getDomainAllowlist',
        'alert_url_allowlist' => 'getAlertUrlAllowlist',
        'alert_url_param_owner' => 'getAlertUrlParamOwner',
        'alert_url_label' => 'getAlertUrlLabel',
        'sso_auth_enabled' => 'getSsoAuthEnabled',
        'embed_cookieless_v2' => 'getEmbedCookielessV2',
        'embed_content_navigation' => 'getEmbedContentNavigation',
        'embed_content_management' => 'getEmbedContentManagement',
        'strict_sameorigin_for_login' => 'getStrictSameoriginForLogin',
        'look_filters' => 'getLookFilters',
        'hide_look_navigation' => 'getHideLookNavigation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('domain_allowlist', $data ?? [], null);
        $this->setIfExists('alert_url_allowlist', $data ?? [], null);
        $this->setIfExists('alert_url_param_owner', $data ?? [], null);
        $this->setIfExists('alert_url_label', $data ?? [], null);
        $this->setIfExists('sso_auth_enabled', $data ?? [], null);
        $this->setIfExists('embed_cookieless_v2', $data ?? [], null);
        $this->setIfExists('embed_content_navigation', $data ?? [], null);
        $this->setIfExists('embed_content_management', $data ?? [], null);
        $this->setIfExists('strict_sameorigin_for_login', $data ?? [], null);
        $this->setIfExists('look_filters', $data ?? [], null);
        $this->setIfExists('hide_look_navigation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain_allowlist
     *
     * @return string[]|null
     */
    public function getDomainAllowlist()
    {
        return $this->container['domain_allowlist'];
    }

    /**
     * Sets domain_allowlist
     *
     * @param string[]|null $domain_allowlist List of domains to allow for embedding
     *
     * @return self
     */
    public function setDomainAllowlist($domain_allowlist): static
    {
        if (is_null($domain_allowlist)) {
            array_push($this->openAPINullablesSetToNull, 'domain_allowlist');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('domain_allowlist', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['domain_allowlist'] = $domain_allowlist;

        return $this;
    }

    /**
     * Gets alert_url_allowlist
     *
     * @return string[]|null
     */
    public function getAlertUrlAllowlist()
    {
        return $this->container['alert_url_allowlist'];
    }

    /**
     * Sets alert_url_allowlist
     *
     * @param string[]|null $alert_url_allowlist List of base urls to allow for alert/schedule
     *
     * @return self
     */
    public function setAlertUrlAllowlist($alert_url_allowlist): static
    {
        if (is_null($alert_url_allowlist)) {
            array_push($this->openAPINullablesSetToNull, 'alert_url_allowlist');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alert_url_allowlist', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alert_url_allowlist'] = $alert_url_allowlist;

        return $this;
    }

    /**
     * Gets alert_url_param_owner
     *
     * @return string|null
     */
    public function getAlertUrlParamOwner()
    {
        return $this->container['alert_url_param_owner'];
    }

    /**
     * Sets alert_url_param_owner
     *
     * @param string|null $alert_url_param_owner Owner of who defines the alert/schedule params on the base url
     *
     * @return self
     */
    public function setAlertUrlParamOwner($alert_url_param_owner): static
    {
        if (is_null($alert_url_param_owner)) {
            array_push($this->openAPINullablesSetToNull, 'alert_url_param_owner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alert_url_param_owner', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alert_url_param_owner'] = $alert_url_param_owner;

        return $this;
    }

    /**
     * Gets alert_url_label
     *
     * @return string|null
     */
    public function getAlertUrlLabel()
    {
        return $this->container['alert_url_label'];
    }

    /**
     * Sets alert_url_label
     *
     * @param string|null $alert_url_label Label for the alert/schedule url
     *
     * @return self
     */
    public function setAlertUrlLabel($alert_url_label): static
    {
        if (is_null($alert_url_label)) {
            array_push($this->openAPINullablesSetToNull, 'alert_url_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alert_url_label', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alert_url_label'] = $alert_url_label;

        return $this;
    }

    /**
     * Gets sso_auth_enabled
     *
     * @return bool|null
     */
    public function getSsoAuthEnabled()
    {
        return $this->container['sso_auth_enabled'];
    }

    /**
     * Sets sso_auth_enabled
     *
     * @param bool|null $sso_auth_enabled Is SSO embedding enabled for this Looker
     *
     * @return self
     */
    public function setSsoAuthEnabled($sso_auth_enabled): static
    {
        if (is_null($sso_auth_enabled)) {
            throw new \InvalidArgumentException('non-nullable sso_auth_enabled cannot be null');
        }
        $this->container['sso_auth_enabled'] = $sso_auth_enabled;

        return $this;
    }

    /**
     * Gets embed_cookieless_v2
     *
     * @return bool|null
     */
    public function getEmbedCookielessV2()
    {
        return $this->container['embed_cookieless_v2'];
    }

    /**
     * Sets embed_cookieless_v2
     *
     * @param bool|null $embed_cookieless_v2 Is Cookieless embedding enabled for this Looker
     *
     * @return self
     */
    public function setEmbedCookielessV2($embed_cookieless_v2): static
    {
        if (is_null($embed_cookieless_v2)) {
            throw new \InvalidArgumentException('non-nullable embed_cookieless_v2 cannot be null');
        }
        $this->container['embed_cookieless_v2'] = $embed_cookieless_v2;

        return $this;
    }

    /**
     * Gets embed_content_navigation
     *
     * @return bool|null
     */
    public function getEmbedContentNavigation()
    {
        return $this->container['embed_content_navigation'];
    }

    /**
     * Sets embed_content_navigation
     *
     * @param bool|null $embed_content_navigation Is embed content navigation enabled for this looker
     *
     * @return self
     */
    public function setEmbedContentNavigation($embed_content_navigation): static
    {
        if (is_null($embed_content_navigation)) {
            throw new \InvalidArgumentException('non-nullable embed_content_navigation cannot be null');
        }
        $this->container['embed_content_navigation'] = $embed_content_navigation;

        return $this;
    }

    /**
     * Gets embed_content_management
     *
     * @return bool|null
     */
    public function getEmbedContentManagement()
    {
        return $this->container['embed_content_management'];
    }

    /**
     * Sets embed_content_management
     *
     * @param bool|null $embed_content_management Is embed content management enabled for this Looker
     *
     * @return self
     */
    public function setEmbedContentManagement($embed_content_management): static
    {
        if (is_null($embed_content_management)) {
            throw new \InvalidArgumentException('non-nullable embed_content_management cannot be null');
        }
        $this->container['embed_content_management'] = $embed_content_management;

        return $this;
    }

    /**
     * Gets strict_sameorigin_for_login
     *
     * @return bool|null
     */
    public function getStrictSameoriginForLogin()
    {
        return $this->container['strict_sameorigin_for_login'];
    }

    /**
     * Sets strict_sameorigin_for_login
     *
     * @param bool|null $strict_sameorigin_for_login When true, prohibits the use of Looker login pages in non-Looker iframes. When false, Looker login pages may be used in non-Looker hosted iframes.
     *
     * @return self
     */
    public function setStrictSameoriginForLogin($strict_sameorigin_for_login): static
    {
        if (is_null($strict_sameorigin_for_login)) {
            throw new \InvalidArgumentException('non-nullable strict_sameorigin_for_login cannot be null');
        }
        $this->container['strict_sameorigin_for_login'] = $strict_sameorigin_for_login;

        return $this;
    }

    /**
     * Gets look_filters
     *
     * @return bool|null
     */
    public function getLookFilters()
    {
        return $this->container['look_filters'];
    }

    /**
     * Sets look_filters
     *
     * @param bool|null $look_filters When true, filters are enabled on embedded Looks
     *
     * @return self
     */
    public function setLookFilters($look_filters): static
    {
        if (is_null($look_filters)) {
            throw new \InvalidArgumentException('non-nullable look_filters cannot be null');
        }
        $this->container['look_filters'] = $look_filters;

        return $this;
    }

    /**
     * Gets hide_look_navigation
     *
     * @return bool|null
     */
    public function getHideLookNavigation()
    {
        return $this->container['hide_look_navigation'];
    }

    /**
     * Sets hide_look_navigation
     *
     * @param bool|null $hide_look_navigation When true, removes navigation to Looks from embedded dashboards and explores.
     *
     * @return self
     */
    public function setHideLookNavigation($hide_look_navigation): static
    {
        if (is_null($hide_look_navigation)) {
            throw new \InvalidArgumentException('non-nullable hide_look_navigation cannot be null');
        }
        $this->container['hide_look_navigation'] = $hide_look_navigation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return (string) json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
