<?php
/**
 * Setting
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Setting Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Setting implements ModelInterface, ArrayAccess, \JsonSerializable, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Setting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'extension_framework_enabled' => 'bool',
        'extension_load_url_enabled' => 'bool',
        'marketplace_auto_install_enabled' => 'bool',
        'marketplace_automation' => \OpenAPI\Client\Model\MarketplaceAutomation::class,
        'marketplace_enabled' => 'bool',
        'marketplace_site' => 'string',
        'marketplace_terms_accepted' => 'bool',
        'privatelabel_configuration' => \OpenAPI\Client\Model\PrivatelabelConfiguration::class,
        'custom_welcome_email' => \OpenAPI\Client\Model\CustomWelcomeEmail::class,
        'onboarding_enabled' => 'bool',
        'timezone' => 'string',
        'allow_user_timezones' => 'bool',
        'data_connector_default_enabled' => 'bool',
        'host_url' => 'string',
        'override_warnings' => 'bool',
        'email_domain_allowlist' => 'string[]',
        'embed_cookieless_v2' => 'bool',
        'embed_enabled' => 'bool',
        'embed_config' => \OpenAPI\Client\Model\EmbedConfig::class,
        'login_notification_enabled' => 'bool',
        'login_notification_text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'extension_framework_enabled' => null,
        'extension_load_url_enabled' => null,
        'marketplace_auto_install_enabled' => null,
        'marketplace_automation' => null,
        'marketplace_enabled' => null,
        'marketplace_site' => null,
        'marketplace_terms_accepted' => null,
        'privatelabel_configuration' => null,
        'custom_welcome_email' => null,
        'onboarding_enabled' => null,
        'timezone' => null,
        'allow_user_timezones' => null,
        'data_connector_default_enabled' => null,
        'host_url' => null,
        'override_warnings' => null,
        'email_domain_allowlist' => null,
        'embed_cookieless_v2' => null,
        'embed_enabled' => null,
        'embed_config' => null,
        'login_notification_enabled' => null,
        'login_notification_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'extension_framework_enabled' => false,
        'extension_load_url_enabled' => false,
        'marketplace_auto_install_enabled' => false,
        'marketplace_automation' => false,
        'marketplace_enabled' => false,
        'marketplace_site' => false,
        'marketplace_terms_accepted' => false,
        'privatelabel_configuration' => false,
        'custom_welcome_email' => false,
        'onboarding_enabled' => false,
        'timezone' => false,
        'allow_user_timezones' => false,
        'data_connector_default_enabled' => false,
        'host_url' => false,
        'override_warnings' => false,
        'email_domain_allowlist' => false,
        'embed_cookieless_v2' => false,
        'embed_enabled' => false,
        'embed_config' => false,
        'login_notification_enabled' => false,
        'login_notification_text' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'extension_framework_enabled' => 'extension_framework_enabled',
        'extension_load_url_enabled' => 'extension_load_url_enabled',
        'marketplace_auto_install_enabled' => 'marketplace_auto_install_enabled',
        'marketplace_automation' => 'marketplace_automation',
        'marketplace_enabled' => 'marketplace_enabled',
        'marketplace_site' => 'marketplace_site',
        'marketplace_terms_accepted' => 'marketplace_terms_accepted',
        'privatelabel_configuration' => 'privatelabel_configuration',
        'custom_welcome_email' => 'custom_welcome_email',
        'onboarding_enabled' => 'onboarding_enabled',
        'timezone' => 'timezone',
        'allow_user_timezones' => 'allow_user_timezones',
        'data_connector_default_enabled' => 'data_connector_default_enabled',
        'host_url' => 'host_url',
        'override_warnings' => 'override_warnings',
        'email_domain_allowlist' => 'email_domain_allowlist',
        'embed_cookieless_v2' => 'embed_cookieless_v2',
        'embed_enabled' => 'embed_enabled',
        'embed_config' => 'embed_config',
        'login_notification_enabled' => 'login_notification_enabled',
        'login_notification_text' => 'login_notification_text'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'extension_framework_enabled' => 'setExtensionFrameworkEnabled',
        'extension_load_url_enabled' => 'setExtensionLoadUrlEnabled',
        'marketplace_auto_install_enabled' => 'setMarketplaceAutoInstallEnabled',
        'marketplace_automation' => 'setMarketplaceAutomation',
        'marketplace_enabled' => 'setMarketplaceEnabled',
        'marketplace_site' => 'setMarketplaceSite',
        'marketplace_terms_accepted' => 'setMarketplaceTermsAccepted',
        'privatelabel_configuration' => 'setPrivatelabelConfiguration',
        'custom_welcome_email' => 'setCustomWelcomeEmail',
        'onboarding_enabled' => 'setOnboardingEnabled',
        'timezone' => 'setTimezone',
        'allow_user_timezones' => 'setAllowUserTimezones',
        'data_connector_default_enabled' => 'setDataConnectorDefaultEnabled',
        'host_url' => 'setHostUrl',
        'override_warnings' => 'setOverrideWarnings',
        'email_domain_allowlist' => 'setEmailDomainAllowlist',
        'embed_cookieless_v2' => 'setEmbedCookielessV2',
        'embed_enabled' => 'setEmbedEnabled',
        'embed_config' => 'setEmbedConfig',
        'login_notification_enabled' => 'setLoginNotificationEnabled',
        'login_notification_text' => 'setLoginNotificationText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'extension_framework_enabled' => 'getExtensionFrameworkEnabled',
        'extension_load_url_enabled' => 'getExtensionLoadUrlEnabled',
        'marketplace_auto_install_enabled' => 'getMarketplaceAutoInstallEnabled',
        'marketplace_automation' => 'getMarketplaceAutomation',
        'marketplace_enabled' => 'getMarketplaceEnabled',
        'marketplace_site' => 'getMarketplaceSite',
        'marketplace_terms_accepted' => 'getMarketplaceTermsAccepted',
        'privatelabel_configuration' => 'getPrivatelabelConfiguration',
        'custom_welcome_email' => 'getCustomWelcomeEmail',
        'onboarding_enabled' => 'getOnboardingEnabled',
        'timezone' => 'getTimezone',
        'allow_user_timezones' => 'getAllowUserTimezones',
        'data_connector_default_enabled' => 'getDataConnectorDefaultEnabled',
        'host_url' => 'getHostUrl',
        'override_warnings' => 'getOverrideWarnings',
        'email_domain_allowlist' => 'getEmailDomainAllowlist',
        'embed_cookieless_v2' => 'getEmbedCookielessV2',
        'embed_enabled' => 'getEmbedEnabled',
        'embed_config' => 'getEmbedConfig',
        'login_notification_enabled' => 'getLoginNotificationEnabled',
        'login_notification_text' => 'getLoginNotificationText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('extension_framework_enabled', $data ?? [], null);
        $this->setIfExists('extension_load_url_enabled', $data ?? [], null);
        $this->setIfExists('marketplace_auto_install_enabled', $data ?? [], null);
        $this->setIfExists('marketplace_automation', $data ?? [], null);
        $this->setIfExists('marketplace_enabled', $data ?? [], null);
        $this->setIfExists('marketplace_site', $data ?? [], null);
        $this->setIfExists('marketplace_terms_accepted', $data ?? [], null);
        $this->setIfExists('privatelabel_configuration', $data ?? [], null);
        $this->setIfExists('custom_welcome_email', $data ?? [], null);
        $this->setIfExists('onboarding_enabled', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('allow_user_timezones', $data ?? [], null);
        $this->setIfExists('data_connector_default_enabled', $data ?? [], null);
        $this->setIfExists('host_url', $data ?? [], null);
        $this->setIfExists('override_warnings', $data ?? [], null);
        $this->setIfExists('email_domain_allowlist', $data ?? [], null);
        $this->setIfExists('embed_cookieless_v2', $data ?? [], null);
        $this->setIfExists('embed_enabled', $data ?? [], null);
        $this->setIfExists('embed_config', $data ?? [], null);
        $this->setIfExists('login_notification_enabled', $data ?? [], null);
        $this->setIfExists('login_notification_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets extension_framework_enabled
     *
     * @return bool|null
     */
    public function getExtensionFrameworkEnabled()
    {
        return $this->container['extension_framework_enabled'];
    }

    /**
     * Sets extension_framework_enabled
     *
     * @param bool|null $extension_framework_enabled Toggle extension framework on or off
     *
     * @return self
     */
    public function setExtensionFrameworkEnabled($extension_framework_enabled): static
    {
        if (is_null($extension_framework_enabled)) {
            throw new \InvalidArgumentException('non-nullable extension_framework_enabled cannot be null');
        }
        $this->container['extension_framework_enabled'] = $extension_framework_enabled;

        return $this;
    }

    /**
     * Gets extension_load_url_enabled
     *
     * @return bool|null
     * @deprecated
     */
    public function getExtensionLoadUrlEnabled()
    {
        return $this->container['extension_load_url_enabled'];
    }

    /**
     * Sets extension_load_url_enabled
     *
     * @param bool|null $extension_load_url_enabled (DEPRECATED) Toggle extension load url on or off. Do not use. This is temporary setting that will eventually become a noop and subsequently deleted.
     *
     * @return self
     * @deprecated
     */
    public function setExtensionLoadUrlEnabled($extension_load_url_enabled): static
    {
        if (is_null($extension_load_url_enabled)) {
            throw new \InvalidArgumentException('non-nullable extension_load_url_enabled cannot be null');
        }
        $this->container['extension_load_url_enabled'] = $extension_load_url_enabled;

        return $this;
    }

    /**
     * Gets marketplace_auto_install_enabled
     *
     * @return bool|null
     * @deprecated
     */
    public function getMarketplaceAutoInstallEnabled()
    {
        return $this->container['marketplace_auto_install_enabled'];
    }

    /**
     * Sets marketplace_auto_install_enabled
     *
     * @param bool|null $marketplace_auto_install_enabled (DEPRECATED) Toggle marketplace auto install on or off. Deprecated - do not use. Auto install can now be enabled via marketplace automation settings
     *
     * @return self
     * @deprecated
     */
    public function setMarketplaceAutoInstallEnabled($marketplace_auto_install_enabled): static
    {
        if (is_null($marketplace_auto_install_enabled)) {
            throw new \InvalidArgumentException('non-nullable marketplace_auto_install_enabled cannot be null');
        }
        $this->container['marketplace_auto_install_enabled'] = $marketplace_auto_install_enabled;

        return $this;
    }

    /**
     * Gets marketplace_automation
     *
     * @return \OpenAPI\Client\Model\MarketplaceAutomation|null
     */
    public function getMarketplaceAutomation()
    {
        return $this->container['marketplace_automation'];
    }

    /**
     * Sets marketplace_automation
     *
     * @param \OpenAPI\Client\Model\MarketplaceAutomation|null $marketplace_automation marketplace_automation
     *
     * @return self
     */
    public function setMarketplaceAutomation($marketplace_automation): static
    {
        if (is_null($marketplace_automation)) {
            throw new \InvalidArgumentException('non-nullable marketplace_automation cannot be null');
        }
        $this->container['marketplace_automation'] = $marketplace_automation;

        return $this;
    }

    /**
     * Gets marketplace_enabled
     *
     * @return bool|null
     */
    public function getMarketplaceEnabled()
    {
        return $this->container['marketplace_enabled'];
    }

    /**
     * Sets marketplace_enabled
     *
     * @param bool|null $marketplace_enabled Toggle marketplace on or off
     *
     * @return self
     */
    public function setMarketplaceEnabled($marketplace_enabled): static
    {
        if (is_null($marketplace_enabled)) {
            throw new \InvalidArgumentException('non-nullable marketplace_enabled cannot be null');
        }
        $this->container['marketplace_enabled'] = $marketplace_enabled;

        return $this;
    }

    /**
     * Gets marketplace_site
     *
     * @return string|null
     */
    public function getMarketplaceSite()
    {
        return $this->container['marketplace_site'];
    }

    /**
     * Sets marketplace_site
     *
     * @param string|null $marketplace_site Location of Looker marketplace CDN
     *
     * @return self
     */
    public function setMarketplaceSite($marketplace_site): static
    {
        if (is_null($marketplace_site)) {
            throw new \InvalidArgumentException('non-nullable marketplace_site cannot be null');
        }
        $this->container['marketplace_site'] = $marketplace_site;

        return $this;
    }

    /**
     * Gets marketplace_terms_accepted
     *
     * @return bool|null
     */
    public function getMarketplaceTermsAccepted()
    {
        return $this->container['marketplace_terms_accepted'];
    }

    /**
     * Sets marketplace_terms_accepted
     *
     * @param bool|null $marketplace_terms_accepted Accept marketplace terms by setting this value to true, or get the current status. Marketplace terms CANNOT be declined once accepted. Accepting marketplace terms automatically enables the marketplace. The marketplace can still be disabled after it has been enabled.
     *
     * @return self
     */
    public function setMarketplaceTermsAccepted($marketplace_terms_accepted): static
    {
        if (is_null($marketplace_terms_accepted)) {
            throw new \InvalidArgumentException('non-nullable marketplace_terms_accepted cannot be null');
        }
        $this->container['marketplace_terms_accepted'] = $marketplace_terms_accepted;

        return $this;
    }

    /**
     * Gets privatelabel_configuration
     *
     * @return \OpenAPI\Client\Model\PrivatelabelConfiguration|null
     */
    public function getPrivatelabelConfiguration()
    {
        return $this->container['privatelabel_configuration'];
    }

    /**
     * Sets privatelabel_configuration
     *
     * @param \OpenAPI\Client\Model\PrivatelabelConfiguration|null $privatelabel_configuration privatelabel_configuration
     *
     * @return self
     */
    public function setPrivatelabelConfiguration($privatelabel_configuration): static
    {
        if (is_null($privatelabel_configuration)) {
            throw new \InvalidArgumentException('non-nullable privatelabel_configuration cannot be null');
        }
        $this->container['privatelabel_configuration'] = $privatelabel_configuration;

        return $this;
    }

    /**
     * Gets custom_welcome_email
     *
     * @return \OpenAPI\Client\Model\CustomWelcomeEmail|null
     */
    public function getCustomWelcomeEmail()
    {
        return $this->container['custom_welcome_email'];
    }

    /**
     * Sets custom_welcome_email
     *
     * @param \OpenAPI\Client\Model\CustomWelcomeEmail|null $custom_welcome_email custom_welcome_email
     *
     * @return self
     */
    public function setCustomWelcomeEmail($custom_welcome_email): static
    {
        if (is_null($custom_welcome_email)) {
            throw new \InvalidArgumentException('non-nullable custom_welcome_email cannot be null');
        }
        $this->container['custom_welcome_email'] = $custom_welcome_email;

        return $this;
    }

    /**
     * Gets onboarding_enabled
     *
     * @return bool|null
     */
    public function getOnboardingEnabled()
    {
        return $this->container['onboarding_enabled'];
    }

    /**
     * Sets onboarding_enabled
     *
     * @param bool|null $onboarding_enabled Toggle onboarding on or off
     *
     * @return self
     */
    public function setOnboardingEnabled($onboarding_enabled): static
    {
        if (is_null($onboarding_enabled)) {
            throw new \InvalidArgumentException('non-nullable onboarding_enabled cannot be null');
        }
        $this->container['onboarding_enabled'] = $onboarding_enabled;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone Change instance-wide default timezone
     *
     * @return self
     */
    public function setTimezone($timezone): static
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets allow_user_timezones
     *
     * @return bool|null
     */
    public function getAllowUserTimezones()
    {
        return $this->container['allow_user_timezones'];
    }

    /**
     * Sets allow_user_timezones
     *
     * @param bool|null $allow_user_timezones Toggle user-specific timezones on or off
     *
     * @return self
     */
    public function setAllowUserTimezones($allow_user_timezones): static
    {
        if (is_null($allow_user_timezones)) {
            throw new \InvalidArgumentException('non-nullable allow_user_timezones cannot be null');
        }
        $this->container['allow_user_timezones'] = $allow_user_timezones;

        return $this;
    }

    /**
     * Gets data_connector_default_enabled
     *
     * @return bool|null
     */
    public function getDataConnectorDefaultEnabled()
    {
        return $this->container['data_connector_default_enabled'];
    }

    /**
     * Sets data_connector_default_enabled
     *
     * @param bool|null $data_connector_default_enabled Toggle default future connectors on or off
     *
     * @return self
     */
    public function setDataConnectorDefaultEnabled($data_connector_default_enabled): static
    {
        if (is_null($data_connector_default_enabled)) {
            throw new \InvalidArgumentException('non-nullable data_connector_default_enabled cannot be null');
        }
        $this->container['data_connector_default_enabled'] = $data_connector_default_enabled;

        return $this;
    }

    /**
     * Gets host_url
     *
     * @return string|null
     */
    public function getHostUrl()
    {
        return $this->container['host_url'];
    }

    /**
     * Sets host_url
     *
     * @param string|null $host_url Change the base portion of your Looker instance URL setting
     *
     * @return self
     */
    public function setHostUrl($host_url): static
    {
        if (is_null($host_url)) {
            throw new \InvalidArgumentException('non-nullable host_url cannot be null');
        }
        $this->container['host_url'] = $host_url;

        return $this;
    }

    /**
     * Gets override_warnings
     *
     * @return bool|null
     */
    public function getOverrideWarnings()
    {
        return $this->container['override_warnings'];
    }

    /**
     * Sets override_warnings
     *
     * @param bool|null $override_warnings (Write-Only) If warnings are preventing a host URL change, this parameter allows for overriding warnings to force update the setting. Does not directly change any Looker settings.
     *
     * @return self
     */
    public function setOverrideWarnings($override_warnings): static
    {
        if (is_null($override_warnings)) {
            throw new \InvalidArgumentException('non-nullable override_warnings cannot be null');
        }
        $this->container['override_warnings'] = $override_warnings;

        return $this;
    }

    /**
     * Gets email_domain_allowlist
     *
     * @return string[]|null
     */
    public function getEmailDomainAllowlist()
    {
        return $this->container['email_domain_allowlist'];
    }

    /**
     * Sets email_domain_allowlist
     *
     * @param string[]|null $email_domain_allowlist An array of Email Domain Allowlist of type string for Scheduled Content
     *
     * @return self
     */
    public function setEmailDomainAllowlist($email_domain_allowlist): static
    {
        if (is_null($email_domain_allowlist)) {
            throw new \InvalidArgumentException('non-nullable email_domain_allowlist cannot be null');
        }
        $this->container['email_domain_allowlist'] = $email_domain_allowlist;

        return $this;
    }

    /**
     * Gets embed_cookieless_v2
     *
     * @return bool|null
     * @deprecated
     */
    public function getEmbedCookielessV2()
    {
        return $this->container['embed_cookieless_v2'];
    }

    /**
     * Sets embed_cookieless_v2
     *
     * @param bool|null $embed_cookieless_v2 (DEPRECATED) Use embed_config.embed_cookieless_v2 instead. If embed_config.embed_cookieless_v2 is specified, it overrides this value.
     *
     * @return self
     * @deprecated
     */
    public function setEmbedCookielessV2($embed_cookieless_v2): static
    {
        if (is_null($embed_cookieless_v2)) {
            throw new \InvalidArgumentException('non-nullable embed_cookieless_v2 cannot be null');
        }
        $this->container['embed_cookieless_v2'] = $embed_cookieless_v2;

        return $this;
    }

    /**
     * Gets embed_enabled
     *
     * @return bool|null
     */
    public function getEmbedEnabled()
    {
        return $this->container['embed_enabled'];
    }

    /**
     * Sets embed_enabled
     *
     * @param bool|null $embed_enabled True if embedding is enabled https://cloud.google.com/looker/docs/r/looker-core-feature-embed, false otherwise
     *
     * @return self
     */
    public function setEmbedEnabled($embed_enabled): static
    {
        if (is_null($embed_enabled)) {
            throw new \InvalidArgumentException('non-nullable embed_enabled cannot be null');
        }
        $this->container['embed_enabled'] = $embed_enabled;

        return $this;
    }

    /**
     * Gets embed_config
     *
     * @return \OpenAPI\Client\Model\EmbedConfig|null
     */
    public function getEmbedConfig()
    {
        return $this->container['embed_config'];
    }

    /**
     * Sets embed_config
     *
     * @param \OpenAPI\Client\Model\EmbedConfig|null $embed_config embed_config
     *
     * @return self
     */
    public function setEmbedConfig($embed_config): static
    {
        if (is_null($embed_config)) {
            throw new \InvalidArgumentException('non-nullable embed_config cannot be null');
        }
        $this->container['embed_config'] = $embed_config;

        return $this;
    }

    /**
     * Gets login_notification_enabled
     *
     * @return bool|null
     */
    public function getLoginNotificationEnabled()
    {
        return $this->container['login_notification_enabled'];
    }

    /**
     * Sets login_notification_enabled
     *
     * @param bool|null $login_notification_enabled Login notification enabled
     *
     * @return self
     */
    public function setLoginNotificationEnabled($login_notification_enabled): static
    {
        if (is_null($login_notification_enabled)) {
            throw new \InvalidArgumentException('non-nullable login_notification_enabled cannot be null');
        }
        $this->container['login_notification_enabled'] = $login_notification_enabled;

        return $this;
    }

    /**
     * Gets login_notification_text
     *
     * @return string|null
     */
    public function getLoginNotificationText()
    {
        return $this->container['login_notification_text'];
    }

    /**
     * Sets login_notification_text
     *
     * @param string|null $login_notification_text Login notification text
     *
     * @return self
     */
    public function setLoginNotificationText($login_notification_text): static
    {
        if (is_null($login_notification_text)) {
            array_push($this->openAPINullablesSetToNull, 'login_notification_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('login_notification_text', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['login_notification_text'] = $login_notification_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return (string) json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
