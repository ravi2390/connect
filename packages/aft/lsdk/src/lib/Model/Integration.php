<?php
/**
 * Integration
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Integration Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Integration implements ModelInterface, ArrayAccess, \JsonSerializable, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Integration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can' => 'array<string,bool>',
        'id' => 'string',
        'integration_hub_id' => 'string',
        'label' => 'string',
        'description' => 'string',
        'enabled' => 'bool',
        'params' => '\OpenAPI\Client\Model\IntegrationParam[]',
        'supported_formats' => 'string[]',
        'supported_action_types' => 'string[]',
        'supported_formattings' => 'string[]',
        'supported_visualization_formattings' => 'string[]',
        'supported_download_settings' => 'string[]',
        'icon_url' => 'string',
        'uses_oauth' => 'bool',
        'required_fields' => '\OpenAPI\Client\Model\IntegrationRequiredField[]',
        'privacy_link' => 'string',
        'delegate_oauth' => 'bool',
        'installed_delegate_oauth_targets' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can' => null,
        'id' => null,
        'integration_hub_id' => null,
        'label' => null,
        'description' => null,
        'enabled' => null,
        'params' => null,
        'supported_formats' => null,
        'supported_action_types' => null,
        'supported_formattings' => null,
        'supported_visualization_formattings' => null,
        'supported_download_settings' => null,
        'icon_url' => null,
        'uses_oauth' => null,
        'required_fields' => null,
        'privacy_link' => null,
        'delegate_oauth' => null,
        'installed_delegate_oauth_targets' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'can' => false,
        'id' => false,
        'integration_hub_id' => false,
        'label' => false,
        'description' => true,
        'enabled' => false,
        'params' => false,
        'supported_formats' => false,
        'supported_action_types' => false,
        'supported_formattings' => false,
        'supported_visualization_formattings' => false,
        'supported_download_settings' => false,
        'icon_url' => true,
        'uses_oauth' => true,
        'required_fields' => false,
        'privacy_link' => true,
        'delegate_oauth' => true,
        'installed_delegate_oauth_targets' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'id' => 'id',
        'integration_hub_id' => 'integration_hub_id',
        'label' => 'label',
        'description' => 'description',
        'enabled' => 'enabled',
        'params' => 'params',
        'supported_formats' => 'supported_formats',
        'supported_action_types' => 'supported_action_types',
        'supported_formattings' => 'supported_formattings',
        'supported_visualization_formattings' => 'supported_visualization_formattings',
        'supported_download_settings' => 'supported_download_settings',
        'icon_url' => 'icon_url',
        'uses_oauth' => 'uses_oauth',
        'required_fields' => 'required_fields',
        'privacy_link' => 'privacy_link',
        'delegate_oauth' => 'delegate_oauth',
        'installed_delegate_oauth_targets' => 'installed_delegate_oauth_targets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'id' => 'setId',
        'integration_hub_id' => 'setIntegrationHubId',
        'label' => 'setLabel',
        'description' => 'setDescription',
        'enabled' => 'setEnabled',
        'params' => 'setParams',
        'supported_formats' => 'setSupportedFormats',
        'supported_action_types' => 'setSupportedActionTypes',
        'supported_formattings' => 'setSupportedFormattings',
        'supported_visualization_formattings' => 'setSupportedVisualizationFormattings',
        'supported_download_settings' => 'setSupportedDownloadSettings',
        'icon_url' => 'setIconUrl',
        'uses_oauth' => 'setUsesOauth',
        'required_fields' => 'setRequiredFields',
        'privacy_link' => 'setPrivacyLink',
        'delegate_oauth' => 'setDelegateOauth',
        'installed_delegate_oauth_targets' => 'setInstalledDelegateOauthTargets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'id' => 'getId',
        'integration_hub_id' => 'getIntegrationHubId',
        'label' => 'getLabel',
        'description' => 'getDescription',
        'enabled' => 'getEnabled',
        'params' => 'getParams',
        'supported_formats' => 'getSupportedFormats',
        'supported_action_types' => 'getSupportedActionTypes',
        'supported_formattings' => 'getSupportedFormattings',
        'supported_visualization_formattings' => 'getSupportedVisualizationFormattings',
        'supported_download_settings' => 'getSupportedDownloadSettings',
        'icon_url' => 'getIconUrl',
        'uses_oauth' => 'getUsesOauth',
        'required_fields' => 'getRequiredFields',
        'privacy_link' => 'getPrivacyLink',
        'delegate_oauth' => 'getDelegateOauth',
        'installed_delegate_oauth_targets' => 'getInstalledDelegateOauthTargets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupportedFormatsAllowableValues(): array
    {
        return [
            
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupportedActionTypesAllowableValues(): array
    {
        return [
            
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupportedFormattingsAllowableValues(): array
    {
        return [
            
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupportedVisualizationFormattingsAllowableValues(): array
    {
        return [
            
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupportedDownloadSettingsAllowableValues(): array
    {
        return [
            
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('can', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('integration_hub_id', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('params', $data ?? [], null);
        $this->setIfExists('supported_formats', $data ?? [], null);
        $this->setIfExists('supported_action_types', $data ?? [], null);
        $this->setIfExists('supported_formattings', $data ?? [], null);
        $this->setIfExists('supported_visualization_formattings', $data ?? [], null);
        $this->setIfExists('supported_download_settings', $data ?? [], null);
        $this->setIfExists('icon_url', $data ?? [], null);
        $this->setIfExists('uses_oauth', $data ?? [], null);
        $this->setIfExists('required_fields', $data ?? [], null);
        $this->setIfExists('privacy_link', $data ?? [], null);
        $this->setIfExists('delegate_oauth', $data ?? [], null);
        $this->setIfExists('installed_delegate_oauth_targets', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return array<string,bool>|null
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param array<string,bool>|null $can Operations the current user is able to perform on this object
     *
     * @return self
     */
    public function setCan($can): static
    {
        if (is_null($can)) {
            throw new \InvalidArgumentException('non-nullable can cannot be null');
        }
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID of the integration.
     *
     * @return self
     */
    public function setId($id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets integration_hub_id
     *
     * @return string|null
     */
    public function getIntegrationHubId()
    {
        return $this->container['integration_hub_id'];
    }

    /**
     * Sets integration_hub_id
     *
     * @param string|null $integration_hub_id ID of the integration hub.
     *
     * @return self
     */
    public function setIntegrationHubId($integration_hub_id): static
    {
        if (is_null($integration_hub_id)) {
            throw new \InvalidArgumentException('non-nullable integration_hub_id cannot be null');
        }
        $this->container['integration_hub_id'] = $integration_hub_id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Label for the integration.
     *
     * @return self
     */
    public function setLabel($label): static
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the integration.
     *
     * @return self
     */
    public function setDescription($description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Whether the integration is available to users.
     *
     * @return self
     */
    public function setEnabled($enabled): static
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets params
     *
     * @return \OpenAPI\Client\Model\IntegrationParam[]|null
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param \OpenAPI\Client\Model\IntegrationParam[]|null $params Array of params for the integration.
     *
     * @return self
     */
    public function setParams($params): static
    {
        if (is_null($params)) {
            throw new \InvalidArgumentException('non-nullable params cannot be null');
        }
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets supported_formats
     *
     * @return string[]|null
     */
    public function getSupportedFormats()
    {
        return $this->container['supported_formats'];
    }

    /**
     * Sets supported_formats
     *
     * @param string[]|null $supported_formats A list of data formats the integration supports. If unspecified, the default is all data formats. Valid values are: \"txt\", \"csv\", \"inline_json\", \"json\", \"json_label\", \"json_detail\", \"json_detail_lite_stream\", \"json_bi\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", \"wysiwyg_png\", \"csv_zip\".
     *
     * @return self
     */
    public function setSupportedFormats($supported_formats): static
    {
        if (is_null($supported_formats)) {
            throw new \InvalidArgumentException('non-nullable supported_formats cannot be null');
        }
        $allowedValues = $this->getSupportedFormatsAllowableValues();
        if (array_diff($supported_formats, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'supported_formats', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supported_formats'] = $supported_formats;

        return $this;
    }

    /**
     * Gets supported_action_types
     *
     * @return string[]|null
     */
    public function getSupportedActionTypes()
    {
        return $this->container['supported_action_types'];
    }

    /**
     * Sets supported_action_types
     *
     * @param string[]|null $supported_action_types A list of action types the integration supports. Valid values are: \"cell\", \"query\", \"dashboard\", \"none\".
     *
     * @return self
     */
    public function setSupportedActionTypes($supported_action_types): static
    {
        if (is_null($supported_action_types)) {
            throw new \InvalidArgumentException('non-nullable supported_action_types cannot be null');
        }
        $allowedValues = $this->getSupportedActionTypesAllowableValues();
        if (array_diff($supported_action_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'supported_action_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supported_action_types'] = $supported_action_types;

        return $this;
    }

    /**
     * Gets supported_formattings
     *
     * @return string[]|null
     */
    public function getSupportedFormattings()
    {
        return $this->container['supported_formattings'];
    }

    /**
     * Sets supported_formattings
     *
     * @param string[]|null $supported_formattings A list of formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: \"formatted\", \"unformatted\".
     *
     * @return self
     */
    public function setSupportedFormattings($supported_formattings): static
    {
        if (is_null($supported_formattings)) {
            throw new \InvalidArgumentException('non-nullable supported_formattings cannot be null');
        }
        $allowedValues = $this->getSupportedFormattingsAllowableValues();
        if (array_diff($supported_formattings, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'supported_formattings', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supported_formattings'] = $supported_formattings;

        return $this;
    }

    /**
     * Gets supported_visualization_formattings
     *
     * @return string[]|null
     */
    public function getSupportedVisualizationFormattings()
    {
        return $this->container['supported_visualization_formattings'];
    }

    /**
     * Sets supported_visualization_formattings
     *
     * @param string[]|null $supported_visualization_formattings A list of visualization formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: \"apply\", \"noapply\".
     *
     * @return self
     */
    public function setSupportedVisualizationFormattings($supported_visualization_formattings): static
    {
        if (is_null($supported_visualization_formattings)) {
            throw new \InvalidArgumentException('non-nullable supported_visualization_formattings cannot be null');
        }
        $allowedValues = $this->getSupportedVisualizationFormattingsAllowableValues();
        if (array_diff($supported_visualization_formattings, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'supported_visualization_formattings', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supported_visualization_formattings'] = $supported_visualization_formattings;

        return $this;
    }

    /**
     * Gets supported_download_settings
     *
     * @return string[]|null
     */
    public function getSupportedDownloadSettings()
    {
        return $this->container['supported_download_settings'];
    }

    /**
     * Sets supported_download_settings
     *
     * @param string[]|null $supported_download_settings A list of all the download mechanisms the integration supports. The order of values is not significant: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this defaults to all download setting values. Valid values are: \"push\", \"url\".
     *
     * @return self
     */
    public function setSupportedDownloadSettings($supported_download_settings): static
    {
        if (is_null($supported_download_settings)) {
            throw new \InvalidArgumentException('non-nullable supported_download_settings cannot be null');
        }
        $allowedValues = $this->getSupportedDownloadSettingsAllowableValues();
        if (array_diff($supported_download_settings, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'supported_download_settings', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supported_download_settings'] = $supported_download_settings;

        return $this;
    }

    /**
     * Gets icon_url
     *
     * @return string|null
     */
    public function getIconUrl()
    {
        return $this->container['icon_url'];
    }

    /**
     * Sets icon_url
     *
     * @param string|null $icon_url URL to an icon for the integration.
     *
     * @return self
     */
    public function setIconUrl($icon_url): static
    {
        if (is_null($icon_url)) {
            array_push($this->openAPINullablesSetToNull, 'icon_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icon_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icon_url'] = $icon_url;

        return $this;
    }

    /**
     * Gets uses_oauth
     *
     * @return bool|null
     */
    public function getUsesOauth()
    {
        return $this->container['uses_oauth'];
    }

    /**
     * Sets uses_oauth
     *
     * @param bool|null $uses_oauth Whether the integration uses oauth.
     *
     * @return self
     */
    public function setUsesOauth($uses_oauth): static
    {
        if (is_null($uses_oauth)) {
            array_push($this->openAPINullablesSetToNull, 'uses_oauth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uses_oauth', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uses_oauth'] = $uses_oauth;

        return $this;
    }

    /**
     * Gets required_fields
     *
     * @return \OpenAPI\Client\Model\IntegrationRequiredField[]|null
     */
    public function getRequiredFields()
    {
        return $this->container['required_fields'];
    }

    /**
     * Sets required_fields
     *
     * @param \OpenAPI\Client\Model\IntegrationRequiredField[]|null $required_fields A list of descriptions of required fields that this integration is compatible with. If there are multiple entries in this list, the integration requires more than one field. If unspecified, no fields will be required.
     *
     * @return self
     */
    public function setRequiredFields($required_fields): static
    {
        if (is_null($required_fields)) {
            throw new \InvalidArgumentException('non-nullable required_fields cannot be null');
        }
        $this->container['required_fields'] = $required_fields;

        return $this;
    }

    /**
     * Gets privacy_link
     *
     * @return string|null
     */
    public function getPrivacyLink()
    {
        return $this->container['privacy_link'];
    }

    /**
     * Sets privacy_link
     *
     * @param string|null $privacy_link Link to privacy policy for destination
     *
     * @return self
     */
    public function setPrivacyLink($privacy_link): static
    {
        if (is_null($privacy_link)) {
            array_push($this->openAPINullablesSetToNull, 'privacy_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('privacy_link', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['privacy_link'] = $privacy_link;

        return $this;
    }

    /**
     * Gets delegate_oauth
     *
     * @return bool|null
     */
    public function getDelegateOauth()
    {
        return $this->container['delegate_oauth'];
    }

    /**
     * Sets delegate_oauth
     *
     * @param bool|null $delegate_oauth Whether the integration uses delegate oauth, which allows federation between an integration installation scope specific entity (like org, group, and team, etc.) and Looker.
     *
     * @return self
     */
    public function setDelegateOauth($delegate_oauth): static
    {
        if (is_null($delegate_oauth)) {
            array_push($this->openAPINullablesSetToNull, 'delegate_oauth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delegate_oauth', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delegate_oauth'] = $delegate_oauth;

        return $this;
    }

    /**
     * Gets installed_delegate_oauth_targets
     *
     * @return string[]|null
     */
    public function getInstalledDelegateOauthTargets()
    {
        return $this->container['installed_delegate_oauth_targets'];
    }

    /**
     * Sets installed_delegate_oauth_targets
     *
     * @param string[]|null $installed_delegate_oauth_targets Whether the integration is available to users.
     *
     * @return self
     */
    public function setInstalledDelegateOauthTargets($installed_delegate_oauth_targets): static
    {
        if (is_null($installed_delegate_oauth_targets)) {
            throw new \InvalidArgumentException('non-nullable installed_delegate_oauth_targets cannot be null');
        }
        $this->container['installed_delegate_oauth_targets'] = $installed_delegate_oauth_targets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return (string) json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
