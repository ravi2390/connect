<?php
/**
 * QueryTask
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * QueryTask Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QueryTask implements ModelInterface, ArrayAccess, \JsonSerializable, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QueryTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can' => 'array<string,bool>',
        'id' => 'string',
        'query_id' => 'string',
        'query' => \OpenAPI\Client\Model\Query::class,
        'generate_links' => 'bool',
        'force_production' => 'bool',
        'path_prefix' => 'string',
        'cache' => 'bool',
        'server_table_calcs' => 'bool',
        'cache_only' => 'bool',
        'cache_key' => 'string',
        'status' => 'string',
        'source' => 'string',
        'runtime' => 'float',
        'rebuild_pdts' => 'bool',
        'result_source' => 'string',
        'look_id' => 'string',
        'dashboard_id' => 'string',
        'result_format' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can' => null,
        'id' => null,
        'query_id' => null,
        'query' => null,
        'generate_links' => null,
        'force_production' => null,
        'path_prefix' => null,
        'cache' => null,
        'server_table_calcs' => null,
        'cache_only' => null,
        'cache_key' => null,
        'status' => null,
        'source' => null,
        'runtime' => 'float',
        'rebuild_pdts' => null,
        'result_source' => null,
        'look_id' => null,
        'dashboard_id' => null,
        'result_format' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'can' => false,
        'id' => false,
        'query_id' => true,
        'query' => false,
        'generate_links' => false,
        'force_production' => false,
        'path_prefix' => true,
        'cache' => false,
        'server_table_calcs' => false,
        'cache_only' => false,
        'cache_key' => true,
        'status' => true,
        'source' => true,
        'runtime' => true,
        'rebuild_pdts' => false,
        'result_source' => true,
        'look_id' => true,
        'dashboard_id' => true,
        'result_format' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'id' => 'id',
        'query_id' => 'query_id',
        'query' => 'query',
        'generate_links' => 'generate_links',
        'force_production' => 'force_production',
        'path_prefix' => 'path_prefix',
        'cache' => 'cache',
        'server_table_calcs' => 'server_table_calcs',
        'cache_only' => 'cache_only',
        'cache_key' => 'cache_key',
        'status' => 'status',
        'source' => 'source',
        'runtime' => 'runtime',
        'rebuild_pdts' => 'rebuild_pdts',
        'result_source' => 'result_source',
        'look_id' => 'look_id',
        'dashboard_id' => 'dashboard_id',
        'result_format' => 'result_format'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'id' => 'setId',
        'query_id' => 'setQueryId',
        'query' => 'setQuery',
        'generate_links' => 'setGenerateLinks',
        'force_production' => 'setForceProduction',
        'path_prefix' => 'setPathPrefix',
        'cache' => 'setCache',
        'server_table_calcs' => 'setServerTableCalcs',
        'cache_only' => 'setCacheOnly',
        'cache_key' => 'setCacheKey',
        'status' => 'setStatus',
        'source' => 'setSource',
        'runtime' => 'setRuntime',
        'rebuild_pdts' => 'setRebuildPdts',
        'result_source' => 'setResultSource',
        'look_id' => 'setLookId',
        'dashboard_id' => 'setDashboardId',
        'result_format' => 'setResultFormat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'id' => 'getId',
        'query_id' => 'getQueryId',
        'query' => 'getQuery',
        'generate_links' => 'getGenerateLinks',
        'force_production' => 'getForceProduction',
        'path_prefix' => 'getPathPrefix',
        'cache' => 'getCache',
        'server_table_calcs' => 'getServerTableCalcs',
        'cache_only' => 'getCacheOnly',
        'cache_key' => 'getCacheKey',
        'status' => 'getStatus',
        'source' => 'getSource',
        'runtime' => 'getRuntime',
        'rebuild_pdts' => 'getRebuildPdts',
        'result_source' => 'getResultSource',
        'look_id' => 'getLookId',
        'dashboard_id' => 'getDashboardId',
        'result_format' => 'getResultFormat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('can', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('query_id', $data ?? [], null);
        $this->setIfExists('query', $data ?? [], null);
        $this->setIfExists('generate_links', $data ?? [], null);
        $this->setIfExists('force_production', $data ?? [], null);
        $this->setIfExists('path_prefix', $data ?? [], null);
        $this->setIfExists('cache', $data ?? [], null);
        $this->setIfExists('server_table_calcs', $data ?? [], null);
        $this->setIfExists('cache_only', $data ?? [], null);
        $this->setIfExists('cache_key', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('runtime', $data ?? [], null);
        $this->setIfExists('rebuild_pdts', $data ?? [], null);
        $this->setIfExists('result_source', $data ?? [], null);
        $this->setIfExists('look_id', $data ?? [], null);
        $this->setIfExists('dashboard_id', $data ?? [], null);
        $this->setIfExists('result_format', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return array<string,bool>|null
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param array<string,bool>|null $can Operations the current user is able to perform on this object
     *
     * @return self
     */
    public function setCan($can): static
    {
        if (is_null($can)) {
            throw new \InvalidArgumentException('non-nullable can cannot be null');
        }
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique Id
     *
     * @return self
     */
    public function setId($id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets query_id
     *
     * @return string|null
     */
    public function getQueryId()
    {
        return $this->container['query_id'];
    }

    /**
     * Sets query_id
     *
     * @param string|null $query_id Id of query
     *
     * @return self
     */
    public function setQueryId($query_id): static
    {
        if (is_null($query_id)) {
            array_push($this->openAPINullablesSetToNull, 'query_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('query_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['query_id'] = $query_id;

        return $this;
    }

    /**
     * Gets query
     *
     * @return \OpenAPI\Client\Model\Query|null
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param \OpenAPI\Client\Model\Query|null $query query
     *
     * @return self
     */
    public function setQuery($query): static
    {
        if (is_null($query)) {
            throw new \InvalidArgumentException('non-nullable query cannot be null');
        }
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets generate_links
     *
     * @return bool|null
     */
    public function getGenerateLinks()
    {
        return $this->container['generate_links'];
    }

    /**
     * Sets generate_links
     *
     * @param bool|null $generate_links whether or not to generate links in the query response.
     *
     * @return self
     */
    public function setGenerateLinks($generate_links): static
    {
        if (is_null($generate_links)) {
            throw new \InvalidArgumentException('non-nullable generate_links cannot be null');
        }
        $this->container['generate_links'] = $generate_links;

        return $this;
    }

    /**
     * Gets force_production
     *
     * @return bool|null
     */
    public function getForceProduction()
    {
        return $this->container['force_production'];
    }

    /**
     * Sets force_production
     *
     * @param bool|null $force_production Use production models to run query (even is user is in dev mode).
     *
     * @return self
     */
    public function setForceProduction($force_production): static
    {
        if (is_null($force_production)) {
            throw new \InvalidArgumentException('non-nullable force_production cannot be null');
        }
        $this->container['force_production'] = $force_production;

        return $this;
    }

    /**
     * Gets path_prefix
     *
     * @return string|null
     */
    public function getPathPrefix()
    {
        return $this->container['path_prefix'];
    }

    /**
     * Sets path_prefix
     *
     * @param string|null $path_prefix Prefix to use for drill links.
     *
     * @return self
     */
    public function setPathPrefix($path_prefix): static
    {
        if (is_null($path_prefix)) {
            array_push($this->openAPINullablesSetToNull, 'path_prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('path_prefix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['path_prefix'] = $path_prefix;

        return $this;
    }

    /**
     * Gets cache
     *
     * @return bool|null
     */
    public function getCache()
    {
        return $this->container['cache'];
    }

    /**
     * Sets cache
     *
     * @param bool|null $cache Whether or not to use the cache
     *
     * @return self
     */
    public function setCache($cache): static
    {
        if (is_null($cache)) {
            throw new \InvalidArgumentException('non-nullable cache cannot be null');
        }
        $this->container['cache'] = $cache;

        return $this;
    }

    /**
     * Gets server_table_calcs
     *
     * @return bool|null
     */
    public function getServerTableCalcs()
    {
        return $this->container['server_table_calcs'];
    }

    /**
     * Sets server_table_calcs
     *
     * @param bool|null $server_table_calcs Whether or not to run table calculations on the server
     *
     * @return self
     */
    public function setServerTableCalcs($server_table_calcs): static
    {
        if (is_null($server_table_calcs)) {
            throw new \InvalidArgumentException('non-nullable server_table_calcs cannot be null');
        }
        $this->container['server_table_calcs'] = $server_table_calcs;

        return $this;
    }

    /**
     * Gets cache_only
     *
     * @return bool|null
     */
    public function getCacheOnly()
    {
        return $this->container['cache_only'];
    }

    /**
     * Sets cache_only
     *
     * @param bool|null $cache_only Retrieve any results from cache even if the results have expired.
     *
     * @return self
     */
    public function setCacheOnly($cache_only): static
    {
        if (is_null($cache_only)) {
            throw new \InvalidArgumentException('non-nullable cache_only cannot be null');
        }
        $this->container['cache_only'] = $cache_only;

        return $this;
    }

    /**
     * Gets cache_key
     *
     * @return string|null
     */
    public function getCacheKey()
    {
        return $this->container['cache_key'];
    }

    /**
     * Sets cache_key
     *
     * @param string|null $cache_key cache key used to cache query.
     *
     * @return self
     */
    public function setCacheKey($cache_key): static
    {
        if (is_null($cache_key)) {
            array_push($this->openAPINullablesSetToNull, 'cache_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cache_key', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cache_key'] = $cache_key;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of query task.
     *
     * @return self
     */
    public function setStatus($status): static
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source Source of query task.
     *
     * @return self
     */
    public function setSource($source): static
    {
        if (is_null($source)) {
            array_push($this->openAPINullablesSetToNull, 'source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets runtime
     *
     * @return float|null
     */
    public function getRuntime()
    {
        return $this->container['runtime'];
    }

    /**
     * Sets runtime
     *
     * @param float|null $runtime Runtime of prior queries.
     *
     * @return self
     */
    public function setRuntime($runtime): static
    {
        if (is_null($runtime)) {
            array_push($this->openAPINullablesSetToNull, 'runtime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('runtime', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['runtime'] = $runtime;

        return $this;
    }

    /**
     * Gets rebuild_pdts
     *
     * @return bool|null
     */
    public function getRebuildPdts()
    {
        return $this->container['rebuild_pdts'];
    }

    /**
     * Sets rebuild_pdts
     *
     * @param bool|null $rebuild_pdts Rebuild PDTS used in query.
     *
     * @return self
     */
    public function setRebuildPdts($rebuild_pdts): static
    {
        if (is_null($rebuild_pdts)) {
            throw new \InvalidArgumentException('non-nullable rebuild_pdts cannot be null');
        }
        $this->container['rebuild_pdts'] = $rebuild_pdts;

        return $this;
    }

    /**
     * Gets result_source
     *
     * @return string|null
     */
    public function getResultSource()
    {
        return $this->container['result_source'];
    }

    /**
     * Sets result_source
     *
     * @param string|null $result_source Source of the results of the query.
     *
     * @return self
     */
    public function setResultSource($result_source): static
    {
        if (is_null($result_source)) {
            array_push($this->openAPINullablesSetToNull, 'result_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('result_source', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['result_source'] = $result_source;

        return $this;
    }

    /**
     * Gets look_id
     *
     * @return string|null
     */
    public function getLookId()
    {
        return $this->container['look_id'];
    }

    /**
     * Sets look_id
     *
     * @param string|null $look_id Id of look associated with query.
     *
     * @return self
     */
    public function setLookId($look_id): static
    {
        if (is_null($look_id)) {
            array_push($this->openAPINullablesSetToNull, 'look_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('look_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['look_id'] = $look_id;

        return $this;
    }

    /**
     * Gets dashboard_id
     *
     * @return string|null
     */
    public function getDashboardId()
    {
        return $this->container['dashboard_id'];
    }

    /**
     * Sets dashboard_id
     *
     * @param string|null $dashboard_id Id of dashboard associated with query.
     *
     * @return self
     */
    public function setDashboardId($dashboard_id): static
    {
        if (is_null($dashboard_id)) {
            array_push($this->openAPINullablesSetToNull, 'dashboard_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dashboard_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dashboard_id'] = $dashboard_id;

        return $this;
    }

    /**
     * Gets result_format
     *
     * @return string|null
     */
    public function getResultFormat()
    {
        return $this->container['result_format'];
    }

    /**
     * Sets result_format
     *
     * @param string|null $result_format The data format of the query results.
     *
     * @return self
     */
    public function setResultFormat($result_format): static
    {
        if (is_null($result_format)) {
            array_push($this->openAPINullablesSetToNull, 'result_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('result_format', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['result_format'] = $result_format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return (string) json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
