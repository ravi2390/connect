<?php
/**
 * LookWithQuery
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LookWithQuery Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LookWithQuery implements ModelInterface, ArrayAccess, \JsonSerializable, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LookWithQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can' => 'array<string,bool>',
        'content_metadata_id' => 'string',
        'id' => 'string',
        'title' => 'string',
        'user_id' => 'string',
        'content_favorite_id' => 'string',
        'created_at' => '\DateTime',
        'deleted' => 'bool',
        'deleted_at' => '\DateTime',
        'deleter_id' => 'string',
        'description' => 'string',
        'embed_url' => 'string',
        'excel_file_url' => 'string',
        'favorite_count' => 'int',
        'google_spreadsheet_formula' => 'string',
        'image_embed_url' => 'string',
        'is_run_on_load' => 'bool',
        'last_accessed_at' => '\DateTime',
        'last_updater_id' => 'string',
        'last_viewed_at' => '\DateTime',
        'model' => \OpenAPI\Client\Model\LookModel::class,
        'public' => 'bool',
        'public_slug' => 'string',
        'public_url' => 'string',
        'query_id' => 'string',
        'short_url' => 'string',
        'folder' => \OpenAPI\Client\Model\FolderBase::class,
        'folder_id' => 'string',
        'updated_at' => '\DateTime',
        'view_count' => 'int',
        'query' => \OpenAPI\Client\Model\Query::class,
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can' => null,
        'content_metadata_id' => null,
        'id' => null,
        'title' => null,
        'user_id' => null,
        'content_favorite_id' => null,
        'created_at' => 'date-time',
        'deleted' => null,
        'deleted_at' => 'date-time',
        'deleter_id' => null,
        'description' => null,
        'embed_url' => null,
        'excel_file_url' => null,
        'favorite_count' => 'int64',
        'google_spreadsheet_formula' => null,
        'image_embed_url' => null,
        'is_run_on_load' => null,
        'last_accessed_at' => 'date-time',
        'last_updater_id' => null,
        'last_viewed_at' => 'date-time',
        'model' => null,
        'public' => null,
        'public_slug' => null,
        'public_url' => null,
        'query_id' => null,
        'short_url' => null,
        'folder' => null,
        'folder_id' => null,
        'updated_at' => 'date-time',
        'view_count' => 'int64',
        'query' => null,
        'url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'can' => false,
        'content_metadata_id' => true,
        'id' => false,
        'title' => true,
        'user_id' => true,
        'content_favorite_id' => true,
        'created_at' => true,
        'deleted' => false,
        'deleted_at' => true,
        'deleter_id' => true,
        'description' => true,
        'embed_url' => true,
        'excel_file_url' => true,
        'favorite_count' => true,
        'google_spreadsheet_formula' => true,
        'image_embed_url' => true,
        'is_run_on_load' => false,
        'last_accessed_at' => true,
        'last_updater_id' => true,
        'last_viewed_at' => true,
        'model' => false,
        'public' => false,
        'public_slug' => true,
        'public_url' => true,
        'query_id' => true,
        'short_url' => true,
        'folder' => false,
        'folder_id' => true,
        'updated_at' => true,
        'view_count' => true,
        'query' => false,
        'url' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'content_metadata_id' => 'content_metadata_id',
        'id' => 'id',
        'title' => 'title',
        'user_id' => 'user_id',
        'content_favorite_id' => 'content_favorite_id',
        'created_at' => 'created_at',
        'deleted' => 'deleted',
        'deleted_at' => 'deleted_at',
        'deleter_id' => 'deleter_id',
        'description' => 'description',
        'embed_url' => 'embed_url',
        'excel_file_url' => 'excel_file_url',
        'favorite_count' => 'favorite_count',
        'google_spreadsheet_formula' => 'google_spreadsheet_formula',
        'image_embed_url' => 'image_embed_url',
        'is_run_on_load' => 'is_run_on_load',
        'last_accessed_at' => 'last_accessed_at',
        'last_updater_id' => 'last_updater_id',
        'last_viewed_at' => 'last_viewed_at',
        'model' => 'model',
        'public' => 'public',
        'public_slug' => 'public_slug',
        'public_url' => 'public_url',
        'query_id' => 'query_id',
        'short_url' => 'short_url',
        'folder' => 'folder',
        'folder_id' => 'folder_id',
        'updated_at' => 'updated_at',
        'view_count' => 'view_count',
        'query' => 'query',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'content_metadata_id' => 'setContentMetadataId',
        'id' => 'setId',
        'title' => 'setTitle',
        'user_id' => 'setUserId',
        'content_favorite_id' => 'setContentFavoriteId',
        'created_at' => 'setCreatedAt',
        'deleted' => 'setDeleted',
        'deleted_at' => 'setDeletedAt',
        'deleter_id' => 'setDeleterId',
        'description' => 'setDescription',
        'embed_url' => 'setEmbedUrl',
        'excel_file_url' => 'setExcelFileUrl',
        'favorite_count' => 'setFavoriteCount',
        'google_spreadsheet_formula' => 'setGoogleSpreadsheetFormula',
        'image_embed_url' => 'setImageEmbedUrl',
        'is_run_on_load' => 'setIsRunOnLoad',
        'last_accessed_at' => 'setLastAccessedAt',
        'last_updater_id' => 'setLastUpdaterId',
        'last_viewed_at' => 'setLastViewedAt',
        'model' => 'setModel',
        'public' => 'setPublic',
        'public_slug' => 'setPublicSlug',
        'public_url' => 'setPublicUrl',
        'query_id' => 'setQueryId',
        'short_url' => 'setShortUrl',
        'folder' => 'setFolder',
        'folder_id' => 'setFolderId',
        'updated_at' => 'setUpdatedAt',
        'view_count' => 'setViewCount',
        'query' => 'setQuery',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'content_metadata_id' => 'getContentMetadataId',
        'id' => 'getId',
        'title' => 'getTitle',
        'user_id' => 'getUserId',
        'content_favorite_id' => 'getContentFavoriteId',
        'created_at' => 'getCreatedAt',
        'deleted' => 'getDeleted',
        'deleted_at' => 'getDeletedAt',
        'deleter_id' => 'getDeleterId',
        'description' => 'getDescription',
        'embed_url' => 'getEmbedUrl',
        'excel_file_url' => 'getExcelFileUrl',
        'favorite_count' => 'getFavoriteCount',
        'google_spreadsheet_formula' => 'getGoogleSpreadsheetFormula',
        'image_embed_url' => 'getImageEmbedUrl',
        'is_run_on_load' => 'getIsRunOnLoad',
        'last_accessed_at' => 'getLastAccessedAt',
        'last_updater_id' => 'getLastUpdaterId',
        'last_viewed_at' => 'getLastViewedAt',
        'model' => 'getModel',
        'public' => 'getPublic',
        'public_slug' => 'getPublicSlug',
        'public_url' => 'getPublicUrl',
        'query_id' => 'getQueryId',
        'short_url' => 'getShortUrl',
        'folder' => 'getFolder',
        'folder_id' => 'getFolderId',
        'updated_at' => 'getUpdatedAt',
        'view_count' => 'getViewCount',
        'query' => 'getQuery',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('can', $data ?? [], null);
        $this->setIfExists('content_metadata_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('content_favorite_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('deleter_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('embed_url', $data ?? [], null);
        $this->setIfExists('excel_file_url', $data ?? [], null);
        $this->setIfExists('favorite_count', $data ?? [], null);
        $this->setIfExists('google_spreadsheet_formula', $data ?? [], null);
        $this->setIfExists('image_embed_url', $data ?? [], null);
        $this->setIfExists('is_run_on_load', $data ?? [], null);
        $this->setIfExists('last_accessed_at', $data ?? [], null);
        $this->setIfExists('last_updater_id', $data ?? [], null);
        $this->setIfExists('last_viewed_at', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('public', $data ?? [], null);
        $this->setIfExists('public_slug', $data ?? [], null);
        $this->setIfExists('public_url', $data ?? [], null);
        $this->setIfExists('query_id', $data ?? [], null);
        $this->setIfExists('short_url', $data ?? [], null);
        $this->setIfExists('folder', $data ?? [], null);
        $this->setIfExists('folder_id', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('view_count', $data ?? [], null);
        $this->setIfExists('query', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return array<string,bool>|null
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param array<string,bool>|null $can Operations the current user is able to perform on this object
     *
     * @return self
     */
    public function setCan($can): static
    {
        if (is_null($can)) {
            throw new \InvalidArgumentException('non-nullable can cannot be null');
        }
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets content_metadata_id
     *
     * @return string|null
     */
    public function getContentMetadataId()
    {
        return $this->container['content_metadata_id'];
    }

    /**
     * Sets content_metadata_id
     *
     * @param string|null $content_metadata_id Id of content metadata
     *
     * @return self
     */
    public function setContentMetadataId($content_metadata_id): static
    {
        if (is_null($content_metadata_id)) {
            array_push($this->openAPINullablesSetToNull, 'content_metadata_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('content_metadata_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['content_metadata_id'] = $content_metadata_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique Id
     *
     * @return self
     */
    public function setId($id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Look Title
     *
     * @return self
     */
    public function setTitle($title): static
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id User Id
     *
     * @return self
     */
    public function setUserId($user_id): static
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets content_favorite_id
     *
     * @return string|null
     */
    public function getContentFavoriteId()
    {
        return $this->container['content_favorite_id'];
    }

    /**
     * Sets content_favorite_id
     *
     * @param string|null $content_favorite_id Content Favorite Id
     *
     * @return self
     */
    public function setContentFavoriteId($content_favorite_id): static
    {
        if (is_null($content_favorite_id)) {
            array_push($this->openAPINullablesSetToNull, 'content_favorite_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('content_favorite_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['content_favorite_id'] = $content_favorite_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Time that the Look was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at): static
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted Whether or not a look is 'soft' deleted.
     *
     * @return self
     */
    public function setDeleted($deleted): static
    {
        if (is_null($deleted)) {
            throw new \InvalidArgumentException('non-nullable deleted cannot be null');
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime|null $deleted_at Time that the Look was deleted.
     *
     * @return self
     */
    public function setDeletedAt($deleted_at): static
    {
        if (is_null($deleted_at)) {
            array_push($this->openAPINullablesSetToNull, 'deleted_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted_at', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets deleter_id
     *
     * @return string|null
     */
    public function getDeleterId()
    {
        return $this->container['deleter_id'];
    }

    /**
     * Sets deleter_id
     *
     * @param string|null $deleter_id Id of User that deleted the look.
     *
     * @return self
     */
    public function setDeleterId($deleter_id): static
    {
        if (is_null($deleter_id)) {
            array_push($this->openAPINullablesSetToNull, 'deleter_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleter_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleter_id'] = $deleter_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets embed_url
     *
     * @return string|null
     */
    public function getEmbedUrl()
    {
        return $this->container['embed_url'];
    }

    /**
     * Sets embed_url
     *
     * @param string|null $embed_url Embed Url
     *
     * @return self
     */
    public function setEmbedUrl($embed_url): static
    {
        if (is_null($embed_url)) {
            array_push($this->openAPINullablesSetToNull, 'embed_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('embed_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['embed_url'] = $embed_url;

        return $this;
    }

    /**
     * Gets excel_file_url
     *
     * @return string|null
     */
    public function getExcelFileUrl()
    {
        return $this->container['excel_file_url'];
    }

    /**
     * Sets excel_file_url
     *
     * @param string|null $excel_file_url Excel File Url
     *
     * @return self
     */
    public function setExcelFileUrl($excel_file_url): static
    {
        if (is_null($excel_file_url)) {
            array_push($this->openAPINullablesSetToNull, 'excel_file_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('excel_file_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['excel_file_url'] = $excel_file_url;

        return $this;
    }

    /**
     * Gets favorite_count
     *
     * @return int|null
     */
    public function getFavoriteCount()
    {
        return $this->container['favorite_count'];
    }

    /**
     * Sets favorite_count
     *
     * @param int|null $favorite_count Number of times favorited
     *
     * @return self
     */
    public function setFavoriteCount($favorite_count): static
    {
        if (is_null($favorite_count)) {
            array_push($this->openAPINullablesSetToNull, 'favorite_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('favorite_count', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['favorite_count'] = $favorite_count;

        return $this;
    }

    /**
     * Gets google_spreadsheet_formula
     *
     * @return string|null
     */
    public function getGoogleSpreadsheetFormula()
    {
        return $this->container['google_spreadsheet_formula'];
    }

    /**
     * Sets google_spreadsheet_formula
     *
     * @param string|null $google_spreadsheet_formula Google Spreadsheet Formula
     *
     * @return self
     */
    public function setGoogleSpreadsheetFormula($google_spreadsheet_formula): static
    {
        if (is_null($google_spreadsheet_formula)) {
            array_push($this->openAPINullablesSetToNull, 'google_spreadsheet_formula');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('google_spreadsheet_formula', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['google_spreadsheet_formula'] = $google_spreadsheet_formula;

        return $this;
    }

    /**
     * Gets image_embed_url
     *
     * @return string|null
     */
    public function getImageEmbedUrl()
    {
        return $this->container['image_embed_url'];
    }

    /**
     * Sets image_embed_url
     *
     * @param string|null $image_embed_url Image Embed Url
     *
     * @return self
     */
    public function setImageEmbedUrl($image_embed_url): static
    {
        if (is_null($image_embed_url)) {
            array_push($this->openAPINullablesSetToNull, 'image_embed_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_embed_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_embed_url'] = $image_embed_url;

        return $this;
    }

    /**
     * Gets is_run_on_load
     *
     * @return bool|null
     */
    public function getIsRunOnLoad()
    {
        return $this->container['is_run_on_load'];
    }

    /**
     * Sets is_run_on_load
     *
     * @param bool|null $is_run_on_load auto-run query when Look viewed
     *
     * @return self
     */
    public function setIsRunOnLoad($is_run_on_load): static
    {
        if (is_null($is_run_on_load)) {
            throw new \InvalidArgumentException('non-nullable is_run_on_load cannot be null');
        }
        $this->container['is_run_on_load'] = $is_run_on_load;

        return $this;
    }

    /**
     * Gets last_accessed_at
     *
     * @return \DateTime|null
     */
    public function getLastAccessedAt()
    {
        return $this->container['last_accessed_at'];
    }

    /**
     * Sets last_accessed_at
     *
     * @param \DateTime|null $last_accessed_at Time that the Look was last accessed by any user
     *
     * @return self
     */
    public function setLastAccessedAt($last_accessed_at): static
    {
        if (is_null($last_accessed_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_accessed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_accessed_at', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_accessed_at'] = $last_accessed_at;

        return $this;
    }

    /**
     * Gets last_updater_id
     *
     * @return string|null
     */
    public function getLastUpdaterId()
    {
        return $this->container['last_updater_id'];
    }

    /**
     * Sets last_updater_id
     *
     * @param string|null $last_updater_id Id of User that last updated the look.
     *
     * @return self
     */
    public function setLastUpdaterId($last_updater_id): static
    {
        if (is_null($last_updater_id)) {
            array_push($this->openAPINullablesSetToNull, 'last_updater_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_updater_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_updater_id'] = $last_updater_id;

        return $this;
    }

    /**
     * Gets last_viewed_at
     *
     * @return \DateTime|null
     */
    public function getLastViewedAt()
    {
        return $this->container['last_viewed_at'];
    }

    /**
     * Sets last_viewed_at
     *
     * @param \DateTime|null $last_viewed_at Time last viewed in the Looker web UI
     *
     * @return self
     */
    public function setLastViewedAt($last_viewed_at): static
    {
        if (is_null($last_viewed_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_viewed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_viewed_at', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_viewed_at'] = $last_viewed_at;

        return $this;
    }

    /**
     * Gets model
     *
     * @return \OpenAPI\Client\Model\LookModel|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \OpenAPI\Client\Model\LookModel|null $model model
     *
     * @return self
     */
    public function setModel($model): static
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets public
     *
     * @return bool|null
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool|null $public Is Public
     *
     * @return self
     */
    public function setPublic($public): static
    {
        if (is_null($public)) {
            throw new \InvalidArgumentException('non-nullable public cannot be null');
        }
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets public_slug
     *
     * @return string|null
     */
    public function getPublicSlug()
    {
        return $this->container['public_slug'];
    }

    /**
     * Sets public_slug
     *
     * @param string|null $public_slug Public Slug
     *
     * @return self
     */
    public function setPublicSlug($public_slug): static
    {
        if (is_null($public_slug)) {
            array_push($this->openAPINullablesSetToNull, 'public_slug');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('public_slug', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['public_slug'] = $public_slug;

        return $this;
    }

    /**
     * Gets public_url
     *
     * @return string|null
     */
    public function getPublicUrl()
    {
        return $this->container['public_url'];
    }

    /**
     * Sets public_url
     *
     * @param string|null $public_url Public Url
     *
     * @return self
     */
    public function setPublicUrl($public_url): static
    {
        if (is_null($public_url)) {
            array_push($this->openAPINullablesSetToNull, 'public_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('public_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['public_url'] = $public_url;

        return $this;
    }

    /**
     * Gets query_id
     *
     * @return string|null
     */
    public function getQueryId()
    {
        return $this->container['query_id'];
    }

    /**
     * Sets query_id
     *
     * @param string|null $query_id Query Id
     *
     * @return self
     */
    public function setQueryId($query_id): static
    {
        if (is_null($query_id)) {
            array_push($this->openAPINullablesSetToNull, 'query_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('query_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['query_id'] = $query_id;

        return $this;
    }

    /**
     * Gets short_url
     *
     * @return string|null
     */
    public function getShortUrl()
    {
        return $this->container['short_url'];
    }

    /**
     * Sets short_url
     *
     * @param string|null $short_url Short Url
     *
     * @return self
     */
    public function setShortUrl($short_url): static
    {
        if (is_null($short_url)) {
            array_push($this->openAPINullablesSetToNull, 'short_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_url'] = $short_url;

        return $this;
    }

    /**
     * Gets folder
     *
     * @return \OpenAPI\Client\Model\FolderBase|null
     */
    public function getFolder()
    {
        return $this->container['folder'];
    }

    /**
     * Sets folder
     *
     * @param \OpenAPI\Client\Model\FolderBase|null $folder folder
     *
     * @return self
     */
    public function setFolder($folder): static
    {
        if (is_null($folder)) {
            throw new \InvalidArgumentException('non-nullable folder cannot be null');
        }
        $this->container['folder'] = $folder;

        return $this;
    }

    /**
     * Gets folder_id
     *
     * @return string|null
     */
    public function getFolderId()
    {
        return $this->container['folder_id'];
    }

    /**
     * Sets folder_id
     *
     * @param string|null $folder_id Folder Id
     *
     * @return self
     */
    public function setFolderId($folder_id): static
    {
        if (is_null($folder_id)) {
            array_push($this->openAPINullablesSetToNull, 'folder_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('folder_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['folder_id'] = $folder_id;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Time that the Look was updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at): static
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets view_count
     *
     * @return int|null
     */
    public function getViewCount()
    {
        return $this->container['view_count'];
    }

    /**
     * Sets view_count
     *
     * @param int|null $view_count Number of times viewed in the Looker web UI
     *
     * @return self
     */
    public function setViewCount($view_count): static
    {
        if (is_null($view_count)) {
            array_push($this->openAPINullablesSetToNull, 'view_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('view_count', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['view_count'] = $view_count;

        return $this;
    }

    /**
     * Gets query
     *
     * @return \OpenAPI\Client\Model\Query|null
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param \OpenAPI\Client\Model\Query|null $query query
     *
     * @return self
     */
    public function setQuery($query): static
    {
        if (is_null($query)) {
            throw new \InvalidArgumentException('non-nullable query cannot be null');
        }
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url Url
     *
     * @return self
     */
    public function setUrl($url): static
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return (string) json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
