<?php
/**
 * LookmlModelExplore
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LookmlModelExplore Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LookmlModelExplore implements ModelInterface, ArrayAccess, \JsonSerializable, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LookmlModelExplore';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'label' => 'string',
        'title' => 'string',
        'scopes' => 'string[]',
        'can_total' => 'bool',
        'can_develop' => 'bool',
        'can_see_lookml' => 'bool',
        'lookml_link' => 'string',
        'can_save' => 'bool',
        'can_explain' => 'bool',
        'can_pivot_in_db' => 'bool',
        'can_subtotal' => 'bool',
        'has_timezone_support' => 'bool',
        'supports_cost_estimate' => 'bool',
        'connection_name' => 'string',
        'null_sort_treatment' => 'string',
        'files' => 'string[]',
        'source_file' => 'string',
        'project_name' => 'string',
        'model_name' => 'string',
        'view_name' => 'string',
        'hidden' => 'bool',
        'sql_table_name' => 'string',
        'access_filter_fields' => 'string[]',
        'access_filters' => '\OpenAPI\Client\Model\LookmlModelExploreAccessFilter[]',
        'aliases' => '\OpenAPI\Client\Model\LookmlModelExploreAlias[]',
        'always_filter' => '\OpenAPI\Client\Model\LookmlModelExploreAlwaysFilter[]',
        'conditionally_filter' => '\OpenAPI\Client\Model\LookmlModelExploreConditionallyFilter[]',
        'index_fields' => 'string[]',
        'sets' => '\OpenAPI\Client\Model\LookmlModelExploreSet[]',
        'tags' => 'string[]',
        'errors' => '\OpenAPI\Client\Model\LookmlModelExploreError[]',
        'fields' => \OpenAPI\Client\Model\LookmlModelExploreFieldset::class,
        'joins' => '\OpenAPI\Client\Model\LookmlModelExploreJoins[]',
        'group_label' => 'string',
        'supported_measure_types' => '\OpenAPI\Client\Model\LookmlModelExploreSupportedMeasureType[]',
        'always_join' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'label' => null,
        'title' => null,
        'scopes' => null,
        'can_total' => null,
        'can_develop' => null,
        'can_see_lookml' => null,
        'lookml_link' => null,
        'can_save' => null,
        'can_explain' => null,
        'can_pivot_in_db' => null,
        'can_subtotal' => null,
        'has_timezone_support' => null,
        'supports_cost_estimate' => null,
        'connection_name' => null,
        'null_sort_treatment' => null,
        'files' => null,
        'source_file' => null,
        'project_name' => null,
        'model_name' => null,
        'view_name' => null,
        'hidden' => null,
        'sql_table_name' => null,
        'access_filter_fields' => null,
        'access_filters' => null,
        'aliases' => null,
        'always_filter' => null,
        'conditionally_filter' => null,
        'index_fields' => null,
        'sets' => null,
        'tags' => null,
        'errors' => null,
        'fields' => null,
        'joins' => null,
        'group_label' => null,
        'supported_measure_types' => null,
        'always_join' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => true,
        'description' => true,
        'label' => true,
        'title' => true,
        'scopes' => true,
        'can_total' => false,
        'can_develop' => false,
        'can_see_lookml' => false,
        'lookml_link' => true,
        'can_save' => false,
        'can_explain' => false,
        'can_pivot_in_db' => false,
        'can_subtotal' => false,
        'has_timezone_support' => false,
        'supports_cost_estimate' => false,
        'connection_name' => true,
        'null_sort_treatment' => true,
        'files' => true,
        'source_file' => true,
        'project_name' => true,
        'model_name' => true,
        'view_name' => true,
        'hidden' => false,
        'sql_table_name' => true,
        'access_filter_fields' => true,
        'access_filters' => true,
        'aliases' => true,
        'always_filter' => true,
        'conditionally_filter' => true,
        'index_fields' => true,
        'sets' => true,
        'tags' => true,
        'errors' => true,
        'fields' => false,
        'joins' => true,
        'group_label' => true,
        'supported_measure_types' => false,
        'always_join' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'label' => 'label',
        'title' => 'title',
        'scopes' => 'scopes',
        'can_total' => 'can_total',
        'can_develop' => 'can_develop',
        'can_see_lookml' => 'can_see_lookml',
        'lookml_link' => 'lookml_link',
        'can_save' => 'can_save',
        'can_explain' => 'can_explain',
        'can_pivot_in_db' => 'can_pivot_in_db',
        'can_subtotal' => 'can_subtotal',
        'has_timezone_support' => 'has_timezone_support',
        'supports_cost_estimate' => 'supports_cost_estimate',
        'connection_name' => 'connection_name',
        'null_sort_treatment' => 'null_sort_treatment',
        'files' => 'files',
        'source_file' => 'source_file',
        'project_name' => 'project_name',
        'model_name' => 'model_name',
        'view_name' => 'view_name',
        'hidden' => 'hidden',
        'sql_table_name' => 'sql_table_name',
        'access_filter_fields' => 'access_filter_fields',
        'access_filters' => 'access_filters',
        'aliases' => 'aliases',
        'always_filter' => 'always_filter',
        'conditionally_filter' => 'conditionally_filter',
        'index_fields' => 'index_fields',
        'sets' => 'sets',
        'tags' => 'tags',
        'errors' => 'errors',
        'fields' => 'fields',
        'joins' => 'joins',
        'group_label' => 'group_label',
        'supported_measure_types' => 'supported_measure_types',
        'always_join' => 'always_join'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'label' => 'setLabel',
        'title' => 'setTitle',
        'scopes' => 'setScopes',
        'can_total' => 'setCanTotal',
        'can_develop' => 'setCanDevelop',
        'can_see_lookml' => 'setCanSeeLookml',
        'lookml_link' => 'setLookmlLink',
        'can_save' => 'setCanSave',
        'can_explain' => 'setCanExplain',
        'can_pivot_in_db' => 'setCanPivotInDb',
        'can_subtotal' => 'setCanSubtotal',
        'has_timezone_support' => 'setHasTimezoneSupport',
        'supports_cost_estimate' => 'setSupportsCostEstimate',
        'connection_name' => 'setConnectionName',
        'null_sort_treatment' => 'setNullSortTreatment',
        'files' => 'setFiles',
        'source_file' => 'setSourceFile',
        'project_name' => 'setProjectName',
        'model_name' => 'setModelName',
        'view_name' => 'setViewName',
        'hidden' => 'setHidden',
        'sql_table_name' => 'setSqlTableName',
        'access_filter_fields' => 'setAccessFilterFields',
        'access_filters' => 'setAccessFilters',
        'aliases' => 'setAliases',
        'always_filter' => 'setAlwaysFilter',
        'conditionally_filter' => 'setConditionallyFilter',
        'index_fields' => 'setIndexFields',
        'sets' => 'setSets',
        'tags' => 'setTags',
        'errors' => 'setErrors',
        'fields' => 'setFields',
        'joins' => 'setJoins',
        'group_label' => 'setGroupLabel',
        'supported_measure_types' => 'setSupportedMeasureTypes',
        'always_join' => 'setAlwaysJoin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'label' => 'getLabel',
        'title' => 'getTitle',
        'scopes' => 'getScopes',
        'can_total' => 'getCanTotal',
        'can_develop' => 'getCanDevelop',
        'can_see_lookml' => 'getCanSeeLookml',
        'lookml_link' => 'getLookmlLink',
        'can_save' => 'getCanSave',
        'can_explain' => 'getCanExplain',
        'can_pivot_in_db' => 'getCanPivotInDb',
        'can_subtotal' => 'getCanSubtotal',
        'has_timezone_support' => 'getHasTimezoneSupport',
        'supports_cost_estimate' => 'getSupportsCostEstimate',
        'connection_name' => 'getConnectionName',
        'null_sort_treatment' => 'getNullSortTreatment',
        'files' => 'getFiles',
        'source_file' => 'getSourceFile',
        'project_name' => 'getProjectName',
        'model_name' => 'getModelName',
        'view_name' => 'getViewName',
        'hidden' => 'getHidden',
        'sql_table_name' => 'getSqlTableName',
        'access_filter_fields' => 'getAccessFilterFields',
        'access_filters' => 'getAccessFilters',
        'aliases' => 'getAliases',
        'always_filter' => 'getAlwaysFilter',
        'conditionally_filter' => 'getConditionallyFilter',
        'index_fields' => 'getIndexFields',
        'sets' => 'getSets',
        'tags' => 'getTags',
        'errors' => 'getErrors',
        'fields' => 'getFields',
        'joins' => 'getJoins',
        'group_label' => 'getGroupLabel',
        'supported_measure_types' => 'getSupportedMeasureTypes',
        'always_join' => 'getAlwaysJoin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('scopes', $data ?? [], null);
        $this->setIfExists('can_total', $data ?? [], null);
        $this->setIfExists('can_develop', $data ?? [], null);
        $this->setIfExists('can_see_lookml', $data ?? [], null);
        $this->setIfExists('lookml_link', $data ?? [], null);
        $this->setIfExists('can_save', $data ?? [], null);
        $this->setIfExists('can_explain', $data ?? [], null);
        $this->setIfExists('can_pivot_in_db', $data ?? [], null);
        $this->setIfExists('can_subtotal', $data ?? [], null);
        $this->setIfExists('has_timezone_support', $data ?? [], null);
        $this->setIfExists('supports_cost_estimate', $data ?? [], null);
        $this->setIfExists('connection_name', $data ?? [], null);
        $this->setIfExists('null_sort_treatment', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('source_file', $data ?? [], null);
        $this->setIfExists('project_name', $data ?? [], null);
        $this->setIfExists('model_name', $data ?? [], null);
        $this->setIfExists('view_name', $data ?? [], null);
        $this->setIfExists('hidden', $data ?? [], null);
        $this->setIfExists('sql_table_name', $data ?? [], null);
        $this->setIfExists('access_filter_fields', $data ?? [], null);
        $this->setIfExists('access_filters', $data ?? [], null);
        $this->setIfExists('aliases', $data ?? [], null);
        $this->setIfExists('always_filter', $data ?? [], null);
        $this->setIfExists('conditionally_filter', $data ?? [], null);
        $this->setIfExists('index_fields', $data ?? [], null);
        $this->setIfExists('sets', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('errors', $data ?? [], null);
        $this->setIfExists('fields', $data ?? [], null);
        $this->setIfExists('joins', $data ?? [], null);
        $this->setIfExists('group_label', $data ?? [], null);
        $this->setIfExists('supported_measure_types', $data ?? [], null);
        $this->setIfExists('always_join', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Fully qualified explore name (model name plus explore name)
     *
     * @return self
     */
    public function setId($id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Explore name
     *
     * @return self
     */
    public function setName($name): static
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Label
     *
     * @return self
     */
    public function setLabel($label): static
    {
        if (is_null($label)) {
            array_push($this->openAPINullablesSetToNull, 'label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('label', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Explore title
     *
     * @return self
     */
    public function setTitle($title): static
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return string[]|null
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param string[]|null $scopes Scopes
     *
     * @return self
     */
    public function setScopes($scopes): static
    {
        if (is_null($scopes)) {
            array_push($this->openAPINullablesSetToNull, 'scopes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scopes', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets can_total
     *
     * @return bool|null
     */
    public function getCanTotal()
    {
        return $this->container['can_total'];
    }

    /**
     * Sets can_total
     *
     * @param bool|null $can_total Can Total
     *
     * @return self
     */
    public function setCanTotal($can_total): static
    {
        if (is_null($can_total)) {
            throw new \InvalidArgumentException('non-nullable can_total cannot be null');
        }
        $this->container['can_total'] = $can_total;

        return $this;
    }

    /**
     * Gets can_develop
     *
     * @return bool|null
     */
    public function getCanDevelop()
    {
        return $this->container['can_develop'];
    }

    /**
     * Sets can_develop
     *
     * @param bool|null $can_develop Can Develop LookML
     *
     * @return self
     */
    public function setCanDevelop($can_develop): static
    {
        if (is_null($can_develop)) {
            throw new \InvalidArgumentException('non-nullable can_develop cannot be null');
        }
        $this->container['can_develop'] = $can_develop;

        return $this;
    }

    /**
     * Gets can_see_lookml
     *
     * @return bool|null
     */
    public function getCanSeeLookml()
    {
        return $this->container['can_see_lookml'];
    }

    /**
     * Sets can_see_lookml
     *
     * @param bool|null $can_see_lookml Can See LookML
     *
     * @return self
     */
    public function setCanSeeLookml($can_see_lookml): static
    {
        if (is_null($can_see_lookml)) {
            throw new \InvalidArgumentException('non-nullable can_see_lookml cannot be null');
        }
        $this->container['can_see_lookml'] = $can_see_lookml;

        return $this;
    }

    /**
     * Gets lookml_link
     *
     * @return string|null
     */
    public function getLookmlLink()
    {
        return $this->container['lookml_link'];
    }

    /**
     * Sets lookml_link
     *
     * @param string|null $lookml_link A URL linking to the definition of this explore in the LookML IDE.
     *
     * @return self
     */
    public function setLookmlLink($lookml_link): static
    {
        if (is_null($lookml_link)) {
            array_push($this->openAPINullablesSetToNull, 'lookml_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lookml_link', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lookml_link'] = $lookml_link;

        return $this;
    }

    /**
     * Gets can_save
     *
     * @return bool|null
     */
    public function getCanSave()
    {
        return $this->container['can_save'];
    }

    /**
     * Sets can_save
     *
     * @param bool|null $can_save Can Save
     *
     * @return self
     */
    public function setCanSave($can_save): static
    {
        if (is_null($can_save)) {
            throw new \InvalidArgumentException('non-nullable can_save cannot be null');
        }
        $this->container['can_save'] = $can_save;

        return $this;
    }

    /**
     * Gets can_explain
     *
     * @return bool|null
     */
    public function getCanExplain()
    {
        return $this->container['can_explain'];
    }

    /**
     * Sets can_explain
     *
     * @param bool|null $can_explain Can Explain
     *
     * @return self
     */
    public function setCanExplain($can_explain): static
    {
        if (is_null($can_explain)) {
            throw new \InvalidArgumentException('non-nullable can_explain cannot be null');
        }
        $this->container['can_explain'] = $can_explain;

        return $this;
    }

    /**
     * Gets can_pivot_in_db
     *
     * @return bool|null
     */
    public function getCanPivotInDb()
    {
        return $this->container['can_pivot_in_db'];
    }

    /**
     * Sets can_pivot_in_db
     *
     * @param bool|null $can_pivot_in_db Can pivot in the DB
     *
     * @return self
     */
    public function setCanPivotInDb($can_pivot_in_db): static
    {
        if (is_null($can_pivot_in_db)) {
            throw new \InvalidArgumentException('non-nullable can_pivot_in_db cannot be null');
        }
        $this->container['can_pivot_in_db'] = $can_pivot_in_db;

        return $this;
    }

    /**
     * Gets can_subtotal
     *
     * @return bool|null
     */
    public function getCanSubtotal()
    {
        return $this->container['can_subtotal'];
    }

    /**
     * Sets can_subtotal
     *
     * @param bool|null $can_subtotal Can use subtotals
     *
     * @return self
     */
    public function setCanSubtotal($can_subtotal): static
    {
        if (is_null($can_subtotal)) {
            throw new \InvalidArgumentException('non-nullable can_subtotal cannot be null');
        }
        $this->container['can_subtotal'] = $can_subtotal;

        return $this;
    }

    /**
     * Gets has_timezone_support
     *
     * @return bool|null
     */
    public function getHasTimezoneSupport()
    {
        return $this->container['has_timezone_support'];
    }

    /**
     * Sets has_timezone_support
     *
     * @param bool|null $has_timezone_support Has timezone support
     *
     * @return self
     */
    public function setHasTimezoneSupport($has_timezone_support): static
    {
        if (is_null($has_timezone_support)) {
            throw new \InvalidArgumentException('non-nullable has_timezone_support cannot be null');
        }
        $this->container['has_timezone_support'] = $has_timezone_support;

        return $this;
    }

    /**
     * Gets supports_cost_estimate
     *
     * @return bool|null
     */
    public function getSupportsCostEstimate()
    {
        return $this->container['supports_cost_estimate'];
    }

    /**
     * Sets supports_cost_estimate
     *
     * @param bool|null $supports_cost_estimate Cost estimates supported
     *
     * @return self
     */
    public function setSupportsCostEstimate($supports_cost_estimate): static
    {
        if (is_null($supports_cost_estimate)) {
            throw new \InvalidArgumentException('non-nullable supports_cost_estimate cannot be null');
        }
        $this->container['supports_cost_estimate'] = $supports_cost_estimate;

        return $this;
    }

    /**
     * Gets connection_name
     *
     * @return string|null
     */
    public function getConnectionName()
    {
        return $this->container['connection_name'];
    }

    /**
     * Sets connection_name
     *
     * @param string|null $connection_name Connection name
     *
     * @return self
     */
    public function setConnectionName($connection_name): static
    {
        if (is_null($connection_name)) {
            array_push($this->openAPINullablesSetToNull, 'connection_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('connection_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['connection_name'] = $connection_name;

        return $this;
    }

    /**
     * Gets null_sort_treatment
     *
     * @return string|null
     */
    public function getNullSortTreatment()
    {
        return $this->container['null_sort_treatment'];
    }

    /**
     * Sets null_sort_treatment
     *
     * @param string|null $null_sort_treatment How nulls are sorted, possible values are \"low\", \"high\", \"first\" and \"last\"
     *
     * @return self
     */
    public function setNullSortTreatment($null_sort_treatment): static
    {
        if (is_null($null_sort_treatment)) {
            array_push($this->openAPINullablesSetToNull, 'null_sort_treatment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('null_sort_treatment', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['null_sort_treatment'] = $null_sort_treatment;

        return $this;
    }

    /**
     * Gets files
     *
     * @return string[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param string[]|null $files List of model source files
     *
     * @return self
     */
    public function setFiles($files): static
    {
        if (is_null($files)) {
            array_push($this->openAPINullablesSetToNull, 'files');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('files', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets source_file
     *
     * @return string|null
     */
    public function getSourceFile()
    {
        return $this->container['source_file'];
    }

    /**
     * Sets source_file
     *
     * @param string|null $source_file Primary source_file file
     *
     * @return self
     */
    public function setSourceFile($source_file): static
    {
        if (is_null($source_file)) {
            array_push($this->openAPINullablesSetToNull, 'source_file');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_file', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_file'] = $source_file;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string|null
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string|null $project_name Name of project
     *
     * @return self
     */
    public function setProjectName($project_name): static
    {
        if (is_null($project_name)) {
            array_push($this->openAPINullablesSetToNull, 'project_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets model_name
     *
     * @return string
     */
    public function getModelName()
    {
        return $this->container['model_name'] ?? self::$openAPIModelName;
    }

    /**
     * Sets model_name
     *
     * @param string|null $model_name Name of model
     *
     * @return self
     */
    public function setModelName($model_name): static
    {
        if (is_null($model_name)) {
            array_push($this->openAPINullablesSetToNull, 'model_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('model_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['model_name'] = $model_name;

        return $this;
    }

    /**
     * Gets view_name
     *
     * @return string|null
     */
    public function getViewName()
    {
        return $this->container['view_name'];
    }

    /**
     * Sets view_name
     *
     * @param string|null $view_name Name of view
     *
     * @return self
     */
    public function setViewName($view_name): static
    {
        if (is_null($view_name)) {
            array_push($this->openAPINullablesSetToNull, 'view_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('view_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['view_name'] = $view_name;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool|null
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool|null $hidden Is hidden
     *
     * @return self
     */
    public function setHidden($hidden): static
    {
        if (is_null($hidden)) {
            throw new \InvalidArgumentException('non-nullable hidden cannot be null');
        }
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets sql_table_name
     *
     * @return string|null
     */
    public function getSqlTableName()
    {
        return $this->container['sql_table_name'];
    }

    /**
     * Sets sql_table_name
     *
     * @param string|null $sql_table_name A sql_table_name expression that defines what sql table the view/explore maps onto. Example: \"prod_orders2 AS orders\" in a view named orders.
     *
     * @return self
     */
    public function setSqlTableName($sql_table_name): static
    {
        if (is_null($sql_table_name)) {
            array_push($this->openAPINullablesSetToNull, 'sql_table_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sql_table_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sql_table_name'] = $sql_table_name;

        return $this;
    }

    /**
     * Gets access_filter_fields
     *
     * @return string[]|null
     * @deprecated
     */
    public function getAccessFilterFields()
    {
        return $this->container['access_filter_fields'];
    }

    /**
     * Sets access_filter_fields
     *
     * @param string[]|null $access_filter_fields (DEPRECATED) Array of access filter field names
     *
     * @return self
     * @deprecated
     */
    public function setAccessFilterFields($access_filter_fields): static
    {
        if (is_null($access_filter_fields)) {
            array_push($this->openAPINullablesSetToNull, 'access_filter_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('access_filter_fields', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['access_filter_fields'] = $access_filter_fields;

        return $this;
    }

    /**
     * Gets access_filters
     *
     * @return \OpenAPI\Client\Model\LookmlModelExploreAccessFilter[]|null
     */
    public function getAccessFilters()
    {
        return $this->container['access_filters'];
    }

    /**
     * Sets access_filters
     *
     * @param \OpenAPI\Client\Model\LookmlModelExploreAccessFilter[]|null $access_filters Access filters
     *
     * @return self
     */
    public function setAccessFilters($access_filters): static
    {
        if (is_null($access_filters)) {
            array_push($this->openAPINullablesSetToNull, 'access_filters');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('access_filters', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['access_filters'] = $access_filters;

        return $this;
    }

    /**
     * Gets aliases
     *
     * @return \OpenAPI\Client\Model\LookmlModelExploreAlias[]|null
     */
    public function getAliases()
    {
        return $this->container['aliases'];
    }

    /**
     * Sets aliases
     *
     * @param \OpenAPI\Client\Model\LookmlModelExploreAlias[]|null $aliases Aliases
     *
     * @return self
     */
    public function setAliases($aliases): static
    {
        if (is_null($aliases)) {
            array_push($this->openAPINullablesSetToNull, 'aliases');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aliases', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aliases'] = $aliases;

        return $this;
    }

    /**
     * Gets always_filter
     *
     * @return \OpenAPI\Client\Model\LookmlModelExploreAlwaysFilter[]|null
     */
    public function getAlwaysFilter()
    {
        return $this->container['always_filter'];
    }

    /**
     * Sets always_filter
     *
     * @param \OpenAPI\Client\Model\LookmlModelExploreAlwaysFilter[]|null $always_filter Always filter
     *
     * @return self
     */
    public function setAlwaysFilter($always_filter): static
    {
        if (is_null($always_filter)) {
            array_push($this->openAPINullablesSetToNull, 'always_filter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('always_filter', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['always_filter'] = $always_filter;

        return $this;
    }

    /**
     * Gets conditionally_filter
     *
     * @return \OpenAPI\Client\Model\LookmlModelExploreConditionallyFilter[]|null
     */
    public function getConditionallyFilter()
    {
        return $this->container['conditionally_filter'];
    }

    /**
     * Sets conditionally_filter
     *
     * @param \OpenAPI\Client\Model\LookmlModelExploreConditionallyFilter[]|null $conditionally_filter Conditionally filter
     *
     * @return self
     */
    public function setConditionallyFilter($conditionally_filter): static
    {
        if (is_null($conditionally_filter)) {
            array_push($this->openAPINullablesSetToNull, 'conditionally_filter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conditionally_filter', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['conditionally_filter'] = $conditionally_filter;

        return $this;
    }

    /**
     * Gets index_fields
     *
     * @return string[]|null
     */
    public function getIndexFields()
    {
        return $this->container['index_fields'];
    }

    /**
     * Sets index_fields
     *
     * @param string[]|null $index_fields Array of index fields
     *
     * @return self
     */
    public function setIndexFields($index_fields): static
    {
        if (is_null($index_fields)) {
            array_push($this->openAPINullablesSetToNull, 'index_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('index_fields', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['index_fields'] = $index_fields;

        return $this;
    }

    /**
     * Gets sets
     *
     * @return \OpenAPI\Client\Model\LookmlModelExploreSet[]|null
     */
    public function getSets()
    {
        return $this->container['sets'];
    }

    /**
     * Sets sets
     *
     * @param \OpenAPI\Client\Model\LookmlModelExploreSet[]|null $sets Sets
     *
     * @return self
     */
    public function setSets($sets): static
    {
        if (is_null($sets)) {
            array_push($this->openAPINullablesSetToNull, 'sets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sets', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sets'] = $sets;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags An array of arbitrary string tags provided in the model for this explore.
     *
     * @return self
     */
    public function setTags($tags): static
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return \OpenAPI\Client\Model\LookmlModelExploreError[]|null
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param \OpenAPI\Client\Model\LookmlModelExploreError[]|null $errors Errors
     *
     * @return self
     */
    public function setErrors($errors): static
    {
        if (is_null($errors)) {
            array_push($this->openAPINullablesSetToNull, 'errors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('errors', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \OpenAPI\Client\Model\LookmlModelExploreFieldset|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \OpenAPI\Client\Model\LookmlModelExploreFieldset|null $fields fields
     *
     * @return self
     */
    public function setFields($fields): static
    {
        if (is_null($fields)) {
            throw new \InvalidArgumentException('non-nullable fields cannot be null');
        }
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets joins
     *
     * @return \OpenAPI\Client\Model\LookmlModelExploreJoins[]|null
     */
    public function getJoins()
    {
        return $this->container['joins'];
    }

    /**
     * Sets joins
     *
     * @param \OpenAPI\Client\Model\LookmlModelExploreJoins[]|null $joins Views joined into this explore
     *
     * @return self
     */
    public function setJoins($joins): static
    {
        if (is_null($joins)) {
            array_push($this->openAPINullablesSetToNull, 'joins');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('joins', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['joins'] = $joins;

        return $this;
    }

    /**
     * Gets group_label
     *
     * @return string|null
     */
    public function getGroupLabel()
    {
        return $this->container['group_label'];
    }

    /**
     * Sets group_label
     *
     * @param string|null $group_label Label used to group explores in the navigation menus
     *
     * @return self
     */
    public function setGroupLabel($group_label): static
    {
        if (is_null($group_label)) {
            array_push($this->openAPINullablesSetToNull, 'group_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_label', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['group_label'] = $group_label;

        return $this;
    }

    /**
     * Gets supported_measure_types
     *
     * @return \OpenAPI\Client\Model\LookmlModelExploreSupportedMeasureType[]|null
     */
    public function getSupportedMeasureTypes()
    {
        return $this->container['supported_measure_types'];
    }

    /**
     * Sets supported_measure_types
     *
     * @param \OpenAPI\Client\Model\LookmlModelExploreSupportedMeasureType[]|null $supported_measure_types An array of items describing which custom measure types are supported for creating a custom measure 'based_on' each possible dimension type.
     *
     * @return self
     */
    public function setSupportedMeasureTypes($supported_measure_types): static
    {
        if (is_null($supported_measure_types)) {
            throw new \InvalidArgumentException('non-nullable supported_measure_types cannot be null');
        }
        $this->container['supported_measure_types'] = $supported_measure_types;

        return $this;
    }

    /**
     * Gets always_join
     *
     * @return string[]|null
     */
    public function getAlwaysJoin()
    {
        return $this->container['always_join'];
    }

    /**
     * Sets always_join
     *
     * @param string[]|null $always_join An array of joins that will always be included in the SQL for this explore, even if the user has not selected a field from the joined view.
     *
     * @return self
     */
    public function setAlwaysJoin($always_join): static
    {
        if (is_null($always_join)) {
            array_push($this->openAPINullablesSetToNull, 'always_join');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('always_join', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['always_join'] = $always_join;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return (string) json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
