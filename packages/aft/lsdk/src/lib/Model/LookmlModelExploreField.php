<?php
/**
 * LookmlModelExploreField
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LookmlModelExploreField Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LookmlModelExploreField implements ModelInterface, ArrayAccess, \JsonSerializable, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LookmlModelExploreField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'align' => 'string',
        'can_filter' => 'bool',
        'category' => 'string',
        'default_filter_value' => 'string',
        'description' => 'string',
        'dimension_group' => 'string',
        'drill_fields' => 'string[]',
        'enumerations' => '\OpenAPI\Client\Model\LookmlModelExploreFieldEnumeration[]',
        'error' => 'string',
        'field_group_label' => 'string',
        'field_group_variant' => 'string',
        'fill_style' => 'string',
        'fiscal_month_offset' => 'int',
        'has_allowed_values' => 'bool',
        'has_drills_metadata' => 'bool',
        'hidden' => 'bool',
        'is_filter' => 'bool',
        'is_fiscal' => 'bool',
        'is_numeric' => 'bool',
        'is_timeframe' => 'bool',
        'can_time_filter' => 'bool',
        'time_interval' => \OpenAPI\Client\Model\LookmlModelExploreFieldTimeInterval::class,
        'label' => 'string',
        'label_from_parameter' => 'string',
        'label_short' => 'string',
        'lookml_link' => 'string',
        'links' => '\OpenAPI\Client\Model\LookmlFieldLink[]',
        'map_layer' => \OpenAPI\Client\Model\LookmlModelExploreFieldMapLayer::class,
        'measure' => 'bool',
        'name' => 'string',
        'strict_value_format' => 'bool',
        'parameter' => 'bool',
        'permanent' => 'bool',
        'primary_key' => 'bool',
        'project_name' => 'string',
        'requires_refresh_on_sort' => 'bool',
        'scope' => 'string',
        'sortable' => 'bool',
        'source_file' => 'string',
        'source_file_path' => 'string',
        'sql' => 'string',
        'sql_case' => '\OpenAPI\Client\Model\LookmlModelExploreFieldSqlCase[]',
        'filters' => '\OpenAPI\Client\Model\LookmlModelExploreFieldMeasureFilters[]',
        'suggest_dimension' => 'string',
        'suggest_explore' => 'string',
        'suggestable' => 'bool',
        'suggestions' => 'string[]',
        'tags' => 'string[]',
        'type' => 'string',
        'user_attribute_filter_types' => 'string[]',
        'value_format' => 'string',
        'view' => 'string',
        'view_label' => 'string',
        'dynamic' => 'bool',
        'week_start_day' => 'string',
        'times_used' => 'int',
        'original_view' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'align' => null,
        'can_filter' => null,
        'category' => null,
        'default_filter_value' => null,
        'description' => null,
        'dimension_group' => null,
        'drill_fields' => null,
        'enumerations' => null,
        'error' => null,
        'field_group_label' => null,
        'field_group_variant' => null,
        'fill_style' => null,
        'fiscal_month_offset' => 'int64',
        'has_allowed_values' => null,
        'has_drills_metadata' => null,
        'hidden' => null,
        'is_filter' => null,
        'is_fiscal' => null,
        'is_numeric' => null,
        'is_timeframe' => null,
        'can_time_filter' => null,
        'time_interval' => null,
        'label' => null,
        'label_from_parameter' => null,
        'label_short' => null,
        'lookml_link' => null,
        'links' => null,
        'map_layer' => null,
        'measure' => null,
        'name' => null,
        'strict_value_format' => null,
        'parameter' => null,
        'permanent' => null,
        'primary_key' => null,
        'project_name' => null,
        'requires_refresh_on_sort' => null,
        'scope' => null,
        'sortable' => null,
        'source_file' => null,
        'source_file_path' => null,
        'sql' => null,
        'sql_case' => null,
        'filters' => null,
        'suggest_dimension' => null,
        'suggest_explore' => null,
        'suggestable' => null,
        'suggestions' => null,
        'tags' => null,
        'type' => null,
        'user_attribute_filter_types' => null,
        'value_format' => null,
        'view' => null,
        'view_label' => null,
        'dynamic' => null,
        'week_start_day' => null,
        'times_used' => 'int64',
        'original_view' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'align' => false,
        'can_filter' => false,
        'category' => true,
        'default_filter_value' => true,
        'description' => true,
        'dimension_group' => true,
        'drill_fields' => true,
        'enumerations' => true,
        'error' => true,
        'field_group_label' => true,
        'field_group_variant' => true,
        'fill_style' => true,
        'fiscal_month_offset' => false,
        'has_allowed_values' => false,
        'has_drills_metadata' => false,
        'hidden' => false,
        'is_filter' => false,
        'is_fiscal' => false,
        'is_numeric' => false,
        'is_timeframe' => false,
        'can_time_filter' => false,
        'time_interval' => false,
        'label' => false,
        'label_from_parameter' => true,
        'label_short' => false,
        'lookml_link' => true,
        'links' => true,
        'map_layer' => false,
        'measure' => false,
        'name' => false,
        'strict_value_format' => false,
        'parameter' => false,
        'permanent' => true,
        'primary_key' => false,
        'project_name' => true,
        'requires_refresh_on_sort' => false,
        'scope' => false,
        'sortable' => false,
        'source_file' => false,
        'source_file_path' => false,
        'sql' => true,
        'sql_case' => true,
        'filters' => true,
        'suggest_dimension' => false,
        'suggest_explore' => false,
        'suggestable' => false,
        'suggestions' => true,
        'tags' => false,
        'type' => false,
        'user_attribute_filter_types' => false,
        'value_format' => true,
        'view' => false,
        'view_label' => false,
        'dynamic' => false,
        'week_start_day' => false,
        'times_used' => false,
        'original_view' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'align' => 'align',
        'can_filter' => 'can_filter',
        'category' => 'category',
        'default_filter_value' => 'default_filter_value',
        'description' => 'description',
        'dimension_group' => 'dimension_group',
        'drill_fields' => 'drill_fields',
        'enumerations' => 'enumerations',
        'error' => 'error',
        'field_group_label' => 'field_group_label',
        'field_group_variant' => 'field_group_variant',
        'fill_style' => 'fill_style',
        'fiscal_month_offset' => 'fiscal_month_offset',
        'has_allowed_values' => 'has_allowed_values',
        'has_drills_metadata' => 'has_drills_metadata',
        'hidden' => 'hidden',
        'is_filter' => 'is_filter',
        'is_fiscal' => 'is_fiscal',
        'is_numeric' => 'is_numeric',
        'is_timeframe' => 'is_timeframe',
        'can_time_filter' => 'can_time_filter',
        'time_interval' => 'time_interval',
        'label' => 'label',
        'label_from_parameter' => 'label_from_parameter',
        'label_short' => 'label_short',
        'lookml_link' => 'lookml_link',
        'links' => 'links',
        'map_layer' => 'map_layer',
        'measure' => 'measure',
        'name' => 'name',
        'strict_value_format' => 'strict_value_format',
        'parameter' => 'parameter',
        'permanent' => 'permanent',
        'primary_key' => 'primary_key',
        'project_name' => 'project_name',
        'requires_refresh_on_sort' => 'requires_refresh_on_sort',
        'scope' => 'scope',
        'sortable' => 'sortable',
        'source_file' => 'source_file',
        'source_file_path' => 'source_file_path',
        'sql' => 'sql',
        'sql_case' => 'sql_case',
        'filters' => 'filters',
        'suggest_dimension' => 'suggest_dimension',
        'suggest_explore' => 'suggest_explore',
        'suggestable' => 'suggestable',
        'suggestions' => 'suggestions',
        'tags' => 'tags',
        'type' => 'type',
        'user_attribute_filter_types' => 'user_attribute_filter_types',
        'value_format' => 'value_format',
        'view' => 'view',
        'view_label' => 'view_label',
        'dynamic' => 'dynamic',
        'week_start_day' => 'week_start_day',
        'times_used' => 'times_used',
        'original_view' => 'original_view'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'align' => 'setAlign',
        'can_filter' => 'setCanFilter',
        'category' => 'setCategory',
        'default_filter_value' => 'setDefaultFilterValue',
        'description' => 'setDescription',
        'dimension_group' => 'setDimensionGroup',
        'drill_fields' => 'setDrillFields',
        'enumerations' => 'setEnumerations',
        'error' => 'setError',
        'field_group_label' => 'setFieldGroupLabel',
        'field_group_variant' => 'setFieldGroupVariant',
        'fill_style' => 'setFillStyle',
        'fiscal_month_offset' => 'setFiscalMonthOffset',
        'has_allowed_values' => 'setHasAllowedValues',
        'has_drills_metadata' => 'setHasDrillsMetadata',
        'hidden' => 'setHidden',
        'is_filter' => 'setIsFilter',
        'is_fiscal' => 'setIsFiscal',
        'is_numeric' => 'setIsNumeric',
        'is_timeframe' => 'setIsTimeframe',
        'can_time_filter' => 'setCanTimeFilter',
        'time_interval' => 'setTimeInterval',
        'label' => 'setLabel',
        'label_from_parameter' => 'setLabelFromParameter',
        'label_short' => 'setLabelShort',
        'lookml_link' => 'setLookmlLink',
        'links' => 'setLinks',
        'map_layer' => 'setMapLayer',
        'measure' => 'setMeasure',
        'name' => 'setName',
        'strict_value_format' => 'setStrictValueFormat',
        'parameter' => 'setParameter',
        'permanent' => 'setPermanent',
        'primary_key' => 'setPrimaryKey',
        'project_name' => 'setProjectName',
        'requires_refresh_on_sort' => 'setRequiresRefreshOnSort',
        'scope' => 'setScope',
        'sortable' => 'setSortable',
        'source_file' => 'setSourceFile',
        'source_file_path' => 'setSourceFilePath',
        'sql' => 'setSql',
        'sql_case' => 'setSqlCase',
        'filters' => 'setFilters',
        'suggest_dimension' => 'setSuggestDimension',
        'suggest_explore' => 'setSuggestExplore',
        'suggestable' => 'setSuggestable',
        'suggestions' => 'setSuggestions',
        'tags' => 'setTags',
        'type' => 'setType',
        'user_attribute_filter_types' => 'setUserAttributeFilterTypes',
        'value_format' => 'setValueFormat',
        'view' => 'setView',
        'view_label' => 'setViewLabel',
        'dynamic' => 'setDynamic',
        'week_start_day' => 'setWeekStartDay',
        'times_used' => 'setTimesUsed',
        'original_view' => 'setOriginalView'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'align' => 'getAlign',
        'can_filter' => 'getCanFilter',
        'category' => 'getCategory',
        'default_filter_value' => 'getDefaultFilterValue',
        'description' => 'getDescription',
        'dimension_group' => 'getDimensionGroup',
        'drill_fields' => 'getDrillFields',
        'enumerations' => 'getEnumerations',
        'error' => 'getError',
        'field_group_label' => 'getFieldGroupLabel',
        'field_group_variant' => 'getFieldGroupVariant',
        'fill_style' => 'getFillStyle',
        'fiscal_month_offset' => 'getFiscalMonthOffset',
        'has_allowed_values' => 'getHasAllowedValues',
        'has_drills_metadata' => 'getHasDrillsMetadata',
        'hidden' => 'getHidden',
        'is_filter' => 'getIsFilter',
        'is_fiscal' => 'getIsFiscal',
        'is_numeric' => 'getIsNumeric',
        'is_timeframe' => 'getIsTimeframe',
        'can_time_filter' => 'getCanTimeFilter',
        'time_interval' => 'getTimeInterval',
        'label' => 'getLabel',
        'label_from_parameter' => 'getLabelFromParameter',
        'label_short' => 'getLabelShort',
        'lookml_link' => 'getLookmlLink',
        'links' => 'getLinks',
        'map_layer' => 'getMapLayer',
        'measure' => 'getMeasure',
        'name' => 'getName',
        'strict_value_format' => 'getStrictValueFormat',
        'parameter' => 'getParameter',
        'permanent' => 'getPermanent',
        'primary_key' => 'getPrimaryKey',
        'project_name' => 'getProjectName',
        'requires_refresh_on_sort' => 'getRequiresRefreshOnSort',
        'scope' => 'getScope',
        'sortable' => 'getSortable',
        'source_file' => 'getSourceFile',
        'source_file_path' => 'getSourceFilePath',
        'sql' => 'getSql',
        'sql_case' => 'getSqlCase',
        'filters' => 'getFilters',
        'suggest_dimension' => 'getSuggestDimension',
        'suggest_explore' => 'getSuggestExplore',
        'suggestable' => 'getSuggestable',
        'suggestions' => 'getSuggestions',
        'tags' => 'getTags',
        'type' => 'getType',
        'user_attribute_filter_types' => 'getUserAttributeFilterTypes',
        'value_format' => 'getValueFormat',
        'view' => 'getView',
        'view_label' => 'getViewLabel',
        'dynamic' => 'getDynamic',
        'week_start_day' => 'getWeekStartDay',
        'times_used' => 'getTimesUsed',
        'original_view' => 'getOriginalView'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ALIGN_LEFT = 'left';
    public const ALIGN_RIGHT = 'right';
    public const CATEGORY_PARAMETER = 'parameter';
    public const CATEGORY_FILTER = 'filter';
    public const CATEGORY_MEASURE = 'measure';
    public const CATEGORY_DIMENSION = 'dimension';
    public const FILL_STYLE_ENUMERATION = 'enumeration';
    public const FILL_STYLE_RANGE = 'range';
    public const WEEK_START_DAY_MONDAY = 'monday';
    public const WEEK_START_DAY_TUESDAY = 'tuesday';
    public const WEEK_START_DAY_WEDNESDAY = 'wednesday';
    public const WEEK_START_DAY_THURSDAY = 'thursday';
    public const WEEK_START_DAY_FRIDAY = 'friday';
    public const WEEK_START_DAY_SATURDAY = 'saturday';
    public const WEEK_START_DAY_SUNDAY = 'sunday';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAlignAllowableValues(): array
    {
        return [
            self::ALIGN_LEFT,
            self::ALIGN_RIGHT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryAllowableValues(): array
    {
        return [
            self::CATEGORY_PARAMETER,
            self::CATEGORY_FILTER,
            self::CATEGORY_MEASURE,
            self::CATEGORY_DIMENSION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFillStyleAllowableValues(): array
    {
        return [
            self::FILL_STYLE_ENUMERATION,
            self::FILL_STYLE_RANGE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserAttributeFilterTypesAllowableValues(): array
    {
        return [
            
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeekStartDayAllowableValues(): array
    {
        return [
            self::WEEK_START_DAY_MONDAY,
            self::WEEK_START_DAY_TUESDAY,
            self::WEEK_START_DAY_WEDNESDAY,
            self::WEEK_START_DAY_THURSDAY,
            self::WEEK_START_DAY_FRIDAY,
            self::WEEK_START_DAY_SATURDAY,
            self::WEEK_START_DAY_SUNDAY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('align', $data ?? [], null);
        $this->setIfExists('can_filter', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('default_filter_value', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('dimension_group', $data ?? [], null);
        $this->setIfExists('drill_fields', $data ?? [], null);
        $this->setIfExists('enumerations', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('field_group_label', $data ?? [], null);
        $this->setIfExists('field_group_variant', $data ?? [], null);
        $this->setIfExists('fill_style', $data ?? [], null);
        $this->setIfExists('fiscal_month_offset', $data ?? [], null);
        $this->setIfExists('has_allowed_values', $data ?? [], null);
        $this->setIfExists('has_drills_metadata', $data ?? [], null);
        $this->setIfExists('hidden', $data ?? [], null);
        $this->setIfExists('is_filter', $data ?? [], null);
        $this->setIfExists('is_fiscal', $data ?? [], null);
        $this->setIfExists('is_numeric', $data ?? [], null);
        $this->setIfExists('is_timeframe', $data ?? [], null);
        $this->setIfExists('can_time_filter', $data ?? [], null);
        $this->setIfExists('time_interval', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('label_from_parameter', $data ?? [], null);
        $this->setIfExists('label_short', $data ?? [], null);
        $this->setIfExists('lookml_link', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('map_layer', $data ?? [], null);
        $this->setIfExists('measure', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('strict_value_format', $data ?? [], null);
        $this->setIfExists('parameter', $data ?? [], null);
        $this->setIfExists('permanent', $data ?? [], null);
        $this->setIfExists('primary_key', $data ?? [], null);
        $this->setIfExists('project_name', $data ?? [], null);
        $this->setIfExists('requires_refresh_on_sort', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
        $this->setIfExists('sortable', $data ?? [], null);
        $this->setIfExists('source_file', $data ?? [], null);
        $this->setIfExists('source_file_path', $data ?? [], null);
        $this->setIfExists('sql', $data ?? [], null);
        $this->setIfExists('sql_case', $data ?? [], null);
        $this->setIfExists('filters', $data ?? [], null);
        $this->setIfExists('suggest_dimension', $data ?? [], null);
        $this->setIfExists('suggest_explore', $data ?? [], null);
        $this->setIfExists('suggestable', $data ?? [], null);
        $this->setIfExists('suggestions', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('user_attribute_filter_types', $data ?? [], null);
        $this->setIfExists('value_format', $data ?? [], null);
        $this->setIfExists('view', $data ?? [], null);
        $this->setIfExists('view_label', $data ?? [], null);
        $this->setIfExists('dynamic', $data ?? [], null);
        $this->setIfExists('week_start_day', $data ?? [], null);
        $this->setIfExists('times_used', $data ?? [], null);
        $this->setIfExists('original_view', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getAlignAllowableValues();
        if (!is_null($this->container['align']) && !in_array($this->container['align'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'align', must be one of '%s'",
                $this->container['align'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($this->container['category']) && !in_array($this->container['category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'category', must be one of '%s'",
                $this->container['category'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFillStyleAllowableValues();
        if (!is_null($this->container['fill_style']) && !in_array($this->container['fill_style'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fill_style', must be one of '%s'",
                $this->container['fill_style'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWeekStartDayAllowableValues();
        if (!is_null($this->container['week_start_day']) && !in_array($this->container['week_start_day'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'week_start_day', must be one of '%s'",
                $this->container['week_start_day'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets align
     *
     * @return string|null
     */
    public function getAlign()
    {
        return $this->container['align'];
    }

    /**
     * Sets align
     *
     * @param string|null $align The appropriate horizontal text alignment the values of this field should be displayed in. Valid values are: \"left\", \"right\".
     *
     * @return self
     */
    public function setAlign($align): static
    {
        if (is_null($align)) {
            throw new \InvalidArgumentException('non-nullable align cannot be null');
        }
        $allowedValues = $this->getAlignAllowableValues();
        if (!in_array($align, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'align', must be one of '%s'",
                    $align,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['align'] = $align;

        return $this;
    }

    /**
     * Gets can_filter
     *
     * @return bool|null
     */
    public function getCanFilter()
    {
        return $this->container['can_filter'];
    }

    /**
     * Sets can_filter
     *
     * @param bool|null $can_filter Whether it's possible to filter on this field.
     *
     * @return self
     */
    public function setCanFilter($can_filter): static
    {
        if (is_null($can_filter)) {
            throw new \InvalidArgumentException('non-nullable can_filter cannot be null');
        }
        $this->container['can_filter'] = $can_filter;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Field category Valid values are: \"parameter\", \"filter\", \"measure\", \"dimension\".
     *
     * @return self
     */
    public function setCategory($category): static
    {
        if (is_null($category)) {
            array_push($this->openAPINullablesSetToNull, 'category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($category) && !in_array($category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'category', must be one of '%s'",
                    $category,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets default_filter_value
     *
     * @return string|null
     */
    public function getDefaultFilterValue()
    {
        return $this->container['default_filter_value'];
    }

    /**
     * Sets default_filter_value
     *
     * @param string|null $default_filter_value The default value that this field uses when filtering. Null if there is no default value.
     *
     * @return self
     */
    public function setDefaultFilterValue($default_filter_value): static
    {
        if (is_null($default_filter_value)) {
            array_push($this->openAPINullablesSetToNull, 'default_filter_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_filter_value', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_filter_value'] = $default_filter_value;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dimension_group
     *
     * @return string|null
     */
    public function getDimensionGroup()
    {
        return $this->container['dimension_group'];
    }

    /**
     * Sets dimension_group
     *
     * @param string|null $dimension_group Dimension group if this field is part of a dimension group. If not, this will be null.
     *
     * @return self
     */
    public function setDimensionGroup($dimension_group): static
    {
        if (is_null($dimension_group)) {
            array_push($this->openAPINullablesSetToNull, 'dimension_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dimension_group', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dimension_group'] = $dimension_group;

        return $this;
    }

    /**
     * Gets drill_fields
     *
     * @return string[]|null
     */
    public function getDrillFields()
    {
        return $this->container['drill_fields'];
    }

    /**
     * Sets drill_fields
     *
     * @param string[]|null $drill_fields Drill fields declared for this field in LookML or default drills for certain types.
     *
     * @return self
     */
    public function setDrillFields($drill_fields): static
    {
        if (is_null($drill_fields)) {
            array_push($this->openAPINullablesSetToNull, 'drill_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('drill_fields', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['drill_fields'] = $drill_fields;

        return $this;
    }

    /**
     * Gets enumerations
     *
     * @return \OpenAPI\Client\Model\LookmlModelExploreFieldEnumeration[]|null
     */
    public function getEnumerations()
    {
        return $this->container['enumerations'];
    }

    /**
     * Sets enumerations
     *
     * @param \OpenAPI\Client\Model\LookmlModelExploreFieldEnumeration[]|null $enumerations An array enumerating all the possible values that this field can contain. When null, there is no limit to the set of possible values this field can contain.
     *
     * @return self
     */
    public function setEnumerations($enumerations): static
    {
        if (is_null($enumerations)) {
            array_push($this->openAPINullablesSetToNull, 'enumerations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enumerations', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enumerations'] = $enumerations;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error An error message indicating a problem with the definition of this field. If there are no errors, this will be null.
     *
     * @return self
     */
    public function setError($error): static
    {
        if (is_null($error)) {
            array_push($this->openAPINullablesSetToNull, 'error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets field_group_label
     *
     * @return string|null
     */
    public function getFieldGroupLabel()
    {
        return $this->container['field_group_label'];
    }

    /**
     * Sets field_group_label
     *
     * @param string|null $field_group_label A label creating a grouping of fields. All fields with this label should be presented together when displayed in a UI.
     *
     * @return self
     */
    public function setFieldGroupLabel($field_group_label): static
    {
        if (is_null($field_group_label)) {
            array_push($this->openAPINullablesSetToNull, 'field_group_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('field_group_label', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['field_group_label'] = $field_group_label;

        return $this;
    }

    /**
     * Gets field_group_variant
     *
     * @return string|null
     */
    public function getFieldGroupVariant()
    {
        return $this->container['field_group_variant'];
    }

    /**
     * Sets field_group_variant
     *
     * @param string|null $field_group_variant When presented in a field group via field_group_label, a shorter name of the field to be displayed in that context.
     *
     * @return self
     */
    public function setFieldGroupVariant($field_group_variant): static
    {
        if (is_null($field_group_variant)) {
            array_push($this->openAPINullablesSetToNull, 'field_group_variant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('field_group_variant', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['field_group_variant'] = $field_group_variant;

        return $this;
    }

    /**
     * Gets fill_style
     *
     * @return string|null
     */
    public function getFillStyle()
    {
        return $this->container['fill_style'];
    }

    /**
     * Sets fill_style
     *
     * @param string|null $fill_style The style of dimension fill that is possible for this field. Null if no dimension fill is possible. Valid values are: \"enumeration\", \"range\".
     *
     * @return self
     */
    public function setFillStyle($fill_style): static
    {
        if (is_null($fill_style)) {
            array_push($this->openAPINullablesSetToNull, 'fill_style');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fill_style', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getFillStyleAllowableValues();
        if (!is_null($fill_style) && !in_array($fill_style, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fill_style', must be one of '%s'",
                    $fill_style,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fill_style'] = $fill_style;

        return $this;
    }

    /**
     * Gets fiscal_month_offset
     *
     * @return int|null
     */
    public function getFiscalMonthOffset()
    {
        return $this->container['fiscal_month_offset'];
    }

    /**
     * Sets fiscal_month_offset
     *
     * @param int|null $fiscal_month_offset An offset (in months) from the calendar start month to the fiscal start month defined in the LookML model this field belongs to.
     *
     * @return self
     */
    public function setFiscalMonthOffset($fiscal_month_offset): static
    {
        if (is_null($fiscal_month_offset)) {
            throw new \InvalidArgumentException('non-nullable fiscal_month_offset cannot be null');
        }
        $this->container['fiscal_month_offset'] = $fiscal_month_offset;

        return $this;
    }

    /**
     * Gets has_allowed_values
     *
     * @return bool|null
     */
    public function getHasAllowedValues()
    {
        return $this->container['has_allowed_values'];
    }

    /**
     * Sets has_allowed_values
     *
     * @param bool|null $has_allowed_values Whether this field has a set of allowed_values specified in LookML.
     *
     * @return self
     */
    public function setHasAllowedValues($has_allowed_values): static
    {
        if (is_null($has_allowed_values)) {
            throw new \InvalidArgumentException('non-nullable has_allowed_values cannot be null');
        }
        $this->container['has_allowed_values'] = $has_allowed_values;

        return $this;
    }

    /**
     * Gets has_drills_metadata
     *
     * @return bool|null
     */
    public function getHasDrillsMetadata()
    {
        return $this->container['has_drills_metadata'];
    }

    /**
     * Sets has_drills_metadata
     *
     * @param bool|null $has_drills_metadata Whether this field has links or drill fields defined.
     *
     * @return self
     */
    public function setHasDrillsMetadata($has_drills_metadata): static
    {
        if (is_null($has_drills_metadata)) {
            throw new \InvalidArgumentException('non-nullable has_drills_metadata cannot be null');
        }
        $this->container['has_drills_metadata'] = $has_drills_metadata;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool|null
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool|null $hidden Whether this field should be hidden from the user interface.
     *
     * @return self
     */
    public function setHidden($hidden): static
    {
        if (is_null($hidden)) {
            throw new \InvalidArgumentException('non-nullable hidden cannot be null');
        }
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets is_filter
     *
     * @return bool|null
     */
    public function getIsFilter()
    {
        return $this->container['is_filter'];
    }

    /**
     * Sets is_filter
     *
     * @param bool|null $is_filter Whether this field is a filter.
     *
     * @return self
     */
    public function setIsFilter($is_filter): static
    {
        if (is_null($is_filter)) {
            throw new \InvalidArgumentException('non-nullable is_filter cannot be null');
        }
        $this->container['is_filter'] = $is_filter;

        return $this;
    }

    /**
     * Gets is_fiscal
     *
     * @return bool|null
     */
    public function getIsFiscal()
    {
        return $this->container['is_fiscal'];
    }

    /**
     * Sets is_fiscal
     *
     * @param bool|null $is_fiscal Whether this field represents a fiscal time value.
     *
     * @return self
     */
    public function setIsFiscal($is_fiscal): static
    {
        if (is_null($is_fiscal)) {
            throw new \InvalidArgumentException('non-nullable is_fiscal cannot be null');
        }
        $this->container['is_fiscal'] = $is_fiscal;

        return $this;
    }

    /**
     * Gets is_numeric
     *
     * @return bool|null
     */
    public function getIsNumeric()
    {
        return $this->container['is_numeric'];
    }

    /**
     * Sets is_numeric
     *
     * @param bool|null $is_numeric Whether this field is of a type that represents a numeric value.
     *
     * @return self
     */
    public function setIsNumeric($is_numeric): static
    {
        if (is_null($is_numeric)) {
            throw new \InvalidArgumentException('non-nullable is_numeric cannot be null');
        }
        $this->container['is_numeric'] = $is_numeric;

        return $this;
    }

    /**
     * Gets is_timeframe
     *
     * @return bool|null
     */
    public function getIsTimeframe()
    {
        return $this->container['is_timeframe'];
    }

    /**
     * Sets is_timeframe
     *
     * @param bool|null $is_timeframe Whether this field is of a type that represents a time value.
     *
     * @return self
     */
    public function setIsTimeframe($is_timeframe): static
    {
        if (is_null($is_timeframe)) {
            throw new \InvalidArgumentException('non-nullable is_timeframe cannot be null');
        }
        $this->container['is_timeframe'] = $is_timeframe;

        return $this;
    }

    /**
     * Gets can_time_filter
     *
     * @return bool|null
     */
    public function getCanTimeFilter()
    {
        return $this->container['can_time_filter'];
    }

    /**
     * Sets can_time_filter
     *
     * @param bool|null $can_time_filter Whether this field can be time filtered.
     *
     * @return self
     */
    public function setCanTimeFilter($can_time_filter): static
    {
        if (is_null($can_time_filter)) {
            throw new \InvalidArgumentException('non-nullable can_time_filter cannot be null');
        }
        $this->container['can_time_filter'] = $can_time_filter;

        return $this;
    }

    /**
     * Gets time_interval
     *
     * @return \OpenAPI\Client\Model\LookmlModelExploreFieldTimeInterval|null
     */
    public function getTimeInterval()
    {
        return $this->container['time_interval'];
    }

    /**
     * Sets time_interval
     *
     * @param \OpenAPI\Client\Model\LookmlModelExploreFieldTimeInterval|null $time_interval time_interval
     *
     * @return self
     */
    public function setTimeInterval($time_interval): static
    {
        if (is_null($time_interval)) {
            throw new \InvalidArgumentException('non-nullable time_interval cannot be null');
        }
        $this->container['time_interval'] = $time_interval;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Fully-qualified human-readable label of the field.
     *
     * @return self
     */
    public function setLabel($label): static
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets label_from_parameter
     *
     * @return string|null
     */
    public function getLabelFromParameter()
    {
        return $this->container['label_from_parameter'];
    }

    /**
     * Sets label_from_parameter
     *
     * @param string|null $label_from_parameter The name of the parameter that will provide a parameterized label for this field, if available in the current context.
     *
     * @return self
     */
    public function setLabelFromParameter($label_from_parameter): static
    {
        if (is_null($label_from_parameter)) {
            array_push($this->openAPINullablesSetToNull, 'label_from_parameter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('label_from_parameter', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['label_from_parameter'] = $label_from_parameter;

        return $this;
    }

    /**
     * Gets label_short
     *
     * @return string|null
     */
    public function getLabelShort()
    {
        return $this->container['label_short'];
    }

    /**
     * Sets label_short
     *
     * @param string|null $label_short The human-readable label of the field, without the view label.
     *
     * @return self
     */
    public function setLabelShort($label_short): static
    {
        if (is_null($label_short)) {
            throw new \InvalidArgumentException('non-nullable label_short cannot be null');
        }
        $this->container['label_short'] = $label_short;

        return $this;
    }

    /**
     * Gets lookml_link
     *
     * @return string|null
     */
    public function getLookmlLink()
    {
        return $this->container['lookml_link'];
    }

    /**
     * Sets lookml_link
     *
     * @param string|null $lookml_link A URL linking to the definition of this field in the LookML IDE.
     *
     * @return self
     */
    public function setLookmlLink($lookml_link): static
    {
        if (is_null($lookml_link)) {
            array_push($this->openAPINullablesSetToNull, 'lookml_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lookml_link', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lookml_link'] = $lookml_link;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Model\LookmlFieldLink[]|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Model\LookmlFieldLink[]|null $links Links associated with this field.
     *
     * @return self
     */
    public function setLinks($links): static
    {
        if (is_null($links)) {
            array_push($this->openAPINullablesSetToNull, 'links');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('links', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets map_layer
     *
     * @return \OpenAPI\Client\Model\LookmlModelExploreFieldMapLayer|null
     */
    public function getMapLayer()
    {
        return $this->container['map_layer'];
    }

    /**
     * Sets map_layer
     *
     * @param \OpenAPI\Client\Model\LookmlModelExploreFieldMapLayer|null $map_layer map_layer
     *
     * @return self
     */
    public function setMapLayer($map_layer): static
    {
        if (is_null($map_layer)) {
            throw new \InvalidArgumentException('non-nullable map_layer cannot be null');
        }
        $this->container['map_layer'] = $map_layer;

        return $this;
    }

    /**
     * Gets measure
     *
     * @return bool|null
     */
    public function getMeasure()
    {
        return $this->container['measure'];
    }

    /**
     * Sets measure
     *
     * @param bool|null $measure Whether this field is a measure.
     *
     * @return self
     */
    public function setMeasure($measure): static
    {
        if (is_null($measure)) {
            throw new \InvalidArgumentException('non-nullable measure cannot be null');
        }
        $this->container['measure'] = $measure;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Fully-qualified name of the field.
     *
     * @return self
     */
    public function setName($name): static
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets strict_value_format
     *
     * @return bool|null
     */
    public function getStrictValueFormat()
    {
        return $this->container['strict_value_format'];
    }

    /**
     * Sets strict_value_format
     *
     * @param bool|null $strict_value_format If yes, the field will not be localized with the user attribute number_format. Defaults to no
     *
     * @return self
     */
    public function setStrictValueFormat($strict_value_format): static
    {
        if (is_null($strict_value_format)) {
            throw new \InvalidArgumentException('non-nullable strict_value_format cannot be null');
        }
        $this->container['strict_value_format'] = $strict_value_format;

        return $this;
    }

    /**
     * Gets parameter
     *
     * @return bool|null
     */
    public function getParameter()
    {
        return $this->container['parameter'];
    }

    /**
     * Sets parameter
     *
     * @param bool|null $parameter Whether this field is a parameter.
     *
     * @return self
     */
    public function setParameter($parameter): static
    {
        if (is_null($parameter)) {
            throw new \InvalidArgumentException('non-nullable parameter cannot be null');
        }
        $this->container['parameter'] = $parameter;

        return $this;
    }

    /**
     * Gets permanent
     *
     * @return bool|null
     */
    public function getPermanent()
    {
        return $this->container['permanent'];
    }

    /**
     * Sets permanent
     *
     * @param bool|null $permanent Whether this field can be removed from a query.
     *
     * @return self
     */
    public function setPermanent($permanent): static
    {
        if (is_null($permanent)) {
            array_push($this->openAPINullablesSetToNull, 'permanent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('permanent', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['permanent'] = $permanent;

        return $this;
    }

    /**
     * Gets primary_key
     *
     * @return bool|null
     */
    public function getPrimaryKey()
    {
        return $this->container['primary_key'];
    }

    /**
     * Sets primary_key
     *
     * @param bool|null $primary_key Whether or not the field represents a primary key.
     *
     * @return self
     */
    public function setPrimaryKey($primary_key): static
    {
        if (is_null($primary_key)) {
            throw new \InvalidArgumentException('non-nullable primary_key cannot be null');
        }
        $this->container['primary_key'] = $primary_key;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string|null
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string|null $project_name The name of the project this field is defined in.
     *
     * @return self
     */
    public function setProjectName($project_name): static
    {
        if (is_null($project_name)) {
            array_push($this->openAPINullablesSetToNull, 'project_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets requires_refresh_on_sort
     *
     * @return bool|null
     */
    public function getRequiresRefreshOnSort()
    {
        return $this->container['requires_refresh_on_sort'];
    }

    /**
     * Sets requires_refresh_on_sort
     *
     * @param bool|null $requires_refresh_on_sort When true, it's not possible to re-sort this field's values without re-running the SQL query, due to database logic that affects the sort.
     *
     * @return self
     */
    public function setRequiresRefreshOnSort($requires_refresh_on_sort): static
    {
        if (is_null($requires_refresh_on_sort)) {
            throw new \InvalidArgumentException('non-nullable requires_refresh_on_sort cannot be null');
        }
        $this->container['requires_refresh_on_sort'] = $requires_refresh_on_sort;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope The LookML scope this field belongs to. The scope is typically the field's view.
     *
     * @return self
     */
    public function setScope($scope): static
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets sortable
     *
     * @return bool|null
     */
    public function getSortable()
    {
        return $this->container['sortable'];
    }

    /**
     * Sets sortable
     *
     * @param bool|null $sortable Whether this field can be sorted.
     *
     * @return self
     */
    public function setSortable($sortable): static
    {
        if (is_null($sortable)) {
            throw new \InvalidArgumentException('non-nullable sortable cannot be null');
        }
        $this->container['sortable'] = $sortable;

        return $this;
    }

    /**
     * Gets source_file
     *
     * @return string|null
     */
    public function getSourceFile()
    {
        return $this->container['source_file'];
    }

    /**
     * Sets source_file
     *
     * @param string|null $source_file The path portion of source_file_path.
     *
     * @return self
     */
    public function setSourceFile($source_file): static
    {
        if (is_null($source_file)) {
            throw new \InvalidArgumentException('non-nullable source_file cannot be null');
        }
        $this->container['source_file'] = $source_file;

        return $this;
    }

    /**
     * Gets source_file_path
     *
     * @return string|null
     */
    public function getSourceFilePath()
    {
        return $this->container['source_file_path'];
    }

    /**
     * Sets source_file_path
     *
     * @param string|null $source_file_path The fully-qualified path of the project file this field is defined in.
     *
     * @return self
     */
    public function setSourceFilePath($source_file_path): static
    {
        if (is_null($source_file_path)) {
            throw new \InvalidArgumentException('non-nullable source_file_path cannot be null');
        }
        $this->container['source_file_path'] = $source_file_path;

        return $this;
    }

    /**
     * Gets sql
     *
     * @return string|null
     */
    public function getSql()
    {
        return $this->container['sql'];
    }

    /**
     * Sets sql
     *
     * @param string|null $sql SQL expression as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model.
     *
     * @return self
     */
    public function setSql($sql): static
    {
        if (is_null($sql)) {
            array_push($this->openAPINullablesSetToNull, 'sql');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sql', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sql'] = $sql;

        return $this;
    }

    /**
     * Gets sql_case
     *
     * @return \OpenAPI\Client\Model\LookmlModelExploreFieldSqlCase[]|null
     */
    public function getSqlCase()
    {
        return $this->container['sql_case'];
    }

    /**
     * Sets sql_case
     *
     * @param \OpenAPI\Client\Model\LookmlModelExploreFieldSqlCase[]|null $sql_case An array of conditions and values that make up a SQL Case expression, as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model.
     *
     * @return self
     */
    public function setSqlCase($sql_case): static
    {
        if (is_null($sql_case)) {
            array_push($this->openAPINullablesSetToNull, 'sql_case');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sql_case', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sql_case'] = $sql_case;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \OpenAPI\Client\Model\LookmlModelExploreFieldMeasureFilters[]|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \OpenAPI\Client\Model\LookmlModelExploreFieldMeasureFilters[]|null $filters Array of filter conditions defined for the measure in LookML.
     *
     * @return self
     */
    public function setFilters($filters): static
    {
        if (is_null($filters)) {
            array_push($this->openAPINullablesSetToNull, 'filters');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('filters', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets suggest_dimension
     *
     * @return string|null
     */
    public function getSuggestDimension()
    {
        return $this->container['suggest_dimension'];
    }

    /**
     * Sets suggest_dimension
     *
     * @param string|null $suggest_dimension The name of the dimension to base suggest queries from.
     *
     * @return self
     */
    public function setSuggestDimension($suggest_dimension): static
    {
        if (is_null($suggest_dimension)) {
            throw new \InvalidArgumentException('non-nullable suggest_dimension cannot be null');
        }
        $this->container['suggest_dimension'] = $suggest_dimension;

        return $this;
    }

    /**
     * Gets suggest_explore
     *
     * @return string|null
     */
    public function getSuggestExplore()
    {
        return $this->container['suggest_explore'];
    }

    /**
     * Sets suggest_explore
     *
     * @param string|null $suggest_explore The name of the explore to base suggest queries from.
     *
     * @return self
     */
    public function setSuggestExplore($suggest_explore): static
    {
        if (is_null($suggest_explore)) {
            throw new \InvalidArgumentException('non-nullable suggest_explore cannot be null');
        }
        $this->container['suggest_explore'] = $suggest_explore;

        return $this;
    }

    /**
     * Gets suggestable
     *
     * @return bool|null
     */
    public function getSuggestable()
    {
        return $this->container['suggestable'];
    }

    /**
     * Sets suggestable
     *
     * @param bool|null $suggestable Whether or not suggestions are possible for this field.
     *
     * @return self
     */
    public function setSuggestable($suggestable): static
    {
        if (is_null($suggestable)) {
            throw new \InvalidArgumentException('non-nullable suggestable cannot be null');
        }
        $this->container['suggestable'] = $suggestable;

        return $this;
    }

    /**
     * Gets suggestions
     *
     * @return string[]|null
     */
    public function getSuggestions()
    {
        return $this->container['suggestions'];
    }

    /**
     * Sets suggestions
     *
     * @param string[]|null $suggestions If available, a list of suggestions for this field. For most fields, a suggest query is a more appropriate way to get an up-to-date list of suggestions. Or use enumerations to list all the possible values.
     *
     * @return self
     */
    public function setSuggestions($suggestions): static
    {
        if (is_null($suggestions)) {
            array_push($this->openAPINullablesSetToNull, 'suggestions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suggestions', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suggestions'] = $suggestions;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags An array of arbitrary string tags provided in the model for this field.
     *
     * @return self
     */
    public function setTags($tags): static
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The LookML type of the field.
     *
     * @return self
     */
    public function setType($type): static
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user_attribute_filter_types
     *
     * @return string[]|null
     */
    public function getUserAttributeFilterTypes()
    {
        return $this->container['user_attribute_filter_types'];
    }

    /**
     * Sets user_attribute_filter_types
     *
     * @param string[]|null $user_attribute_filter_types An array of user attribute types that are allowed to be used in filters on this field. Valid values are: \"advanced_filter_string\", \"advanced_filter_number\", \"advanced_filter_datetime\", \"string\", \"number\", \"datetime\", \"relative_url\", \"yesno\", \"zipcode\".
     *
     * @return self
     */
    public function setUserAttributeFilterTypes($user_attribute_filter_types): static
    {
        if (is_null($user_attribute_filter_types)) {
            throw new \InvalidArgumentException('non-nullable user_attribute_filter_types cannot be null');
        }
        $allowedValues = $this->getUserAttributeFilterTypesAllowableValues();
        if (array_diff($user_attribute_filter_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'user_attribute_filter_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_attribute_filter_types'] = $user_attribute_filter_types;

        return $this;
    }

    /**
     * Gets value_format
     *
     * @return string|null
     */
    public function getValueFormat()
    {
        return $this->container['value_format'];
    }

    /**
     * Sets value_format
     *
     * @param string|null $value_format If specified, the LookML value format string for formatting values of this field.
     *
     * @return self
     */
    public function setValueFormat($value_format): static
    {
        if (is_null($value_format)) {
            array_push($this->openAPINullablesSetToNull, 'value_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('value_format', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['value_format'] = $value_format;

        return $this;
    }

    /**
     * Gets view
     *
     * @return string|null
     */
    public function getView()
    {
        return $this->container['view'];
    }

    /**
     * Sets view
     *
     * @param string|null $view The name of the view this field belongs to.
     *
     * @return self
     */
    public function setView($view): static
    {
        if (is_null($view)) {
            throw new \InvalidArgumentException('non-nullable view cannot be null');
        }
        $this->container['view'] = $view;

        return $this;
    }

    /**
     * Gets view_label
     *
     * @return string|null
     */
    public function getViewLabel()
    {
        return $this->container['view_label'];
    }

    /**
     * Sets view_label
     *
     * @param string|null $view_label The human-readable label of the view the field belongs to.
     *
     * @return self
     */
    public function setViewLabel($view_label): static
    {
        if (is_null($view_label)) {
            throw new \InvalidArgumentException('non-nullable view_label cannot be null');
        }
        $this->container['view_label'] = $view_label;

        return $this;
    }

    /**
     * Gets dynamic
     *
     * @return bool|null
     */
    public function getDynamic()
    {
        return $this->container['dynamic'];
    }

    /**
     * Sets dynamic
     *
     * @param bool|null $dynamic Whether this field was specified in \"dynamic_fields\" and is not part of the model.
     *
     * @return self
     */
    public function setDynamic($dynamic): static
    {
        if (is_null($dynamic)) {
            throw new \InvalidArgumentException('non-nullable dynamic cannot be null');
        }
        $this->container['dynamic'] = $dynamic;

        return $this;
    }

    /**
     * Gets week_start_day
     *
     * @return string|null
     */
    public function getWeekStartDay()
    {
        return $this->container['week_start_day'];
    }

    /**
     * Sets week_start_day
     *
     * @param string|null $week_start_day The name of the starting day of the week. Valid values are: \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\".
     *
     * @return self
     */
    public function setWeekStartDay($week_start_day): static
    {
        if (is_null($week_start_day)) {
            throw new \InvalidArgumentException('non-nullable week_start_day cannot be null');
        }
        $allowedValues = $this->getWeekStartDayAllowableValues();
        if (!in_array($week_start_day, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'week_start_day', must be one of '%s'",
                    $week_start_day,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['week_start_day'] = $week_start_day;

        return $this;
    }

    /**
     * Gets times_used
     *
     * @return int|null
     */
    public function getTimesUsed()
    {
        return $this->container['times_used'];
    }

    /**
     * Sets times_used
     *
     * @param int|null $times_used The number of times this field has been used in queries
     *
     * @return self
     */
    public function setTimesUsed($times_used): static
    {
        if (is_null($times_used)) {
            throw new \InvalidArgumentException('non-nullable times_used cannot be null');
        }
        $this->container['times_used'] = $times_used;

        return $this;
    }

    /**
     * Gets original_view
     *
     * @return string|null
     */
    public function getOriginalView()
    {
        return $this->container['original_view'];
    }

    /**
     * Sets original_view
     *
     * @param string|null $original_view The name of the view this field is defined in. This will be different than \"view\" when the view has been joined via a different name using the \"from\" parameter.
     *
     * @return self
     */
    public function setOriginalView($original_view): static
    {
        if (is_null($original_view)) {
            throw new \InvalidArgumentException('non-nullable original_view cannot be null');
        }
        $this->container['original_view'] = $original_view;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return (string) json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
