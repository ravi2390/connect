<?php
/**
 * Project
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Project Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Project implements ModelInterface, ArrayAccess, \JsonSerializable, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Project';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can' => 'array<string,bool>',
        'id' => 'string',
        'name' => 'string',
        'uses_git' => 'bool',
        'git_remote_url' => 'string',
        'git_username' => 'string',
        'git_password' => 'string',
        'git_production_branch_name' => 'string',
        'use_git_cookie_auth' => 'bool',
        'git_username_user_attribute' => 'string',
        'git_password_user_attribute' => 'string',
        'git_service_name' => 'string',
        'git_application_server_http_port' => 'int',
        'git_application_server_http_scheme' => 'string',
        'deploy_secret' => 'string',
        'unset_deploy_secret' => 'bool',
        'pull_request_mode' => 'string',
        'validation_required' => 'bool',
        'git_release_mgmt_enabled' => 'bool',
        'allow_warnings' => 'bool',
        'is_example' => 'bool',
        'dependency_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can' => null,
        'id' => null,
        'name' => null,
        'uses_git' => null,
        'git_remote_url' => null,
        'git_username' => null,
        'git_password' => null,
        'git_production_branch_name' => null,
        'use_git_cookie_auth' => null,
        'git_username_user_attribute' => null,
        'git_password_user_attribute' => null,
        'git_service_name' => null,
        'git_application_server_http_port' => 'int64',
        'git_application_server_http_scheme' => null,
        'deploy_secret' => null,
        'unset_deploy_secret' => null,
        'pull_request_mode' => null,
        'validation_required' => null,
        'git_release_mgmt_enabled' => null,
        'allow_warnings' => null,
        'is_example' => null,
        'dependency_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'can' => false,
        'id' => false,
        'name' => false,
        'uses_git' => false,
        'git_remote_url' => true,
        'git_username' => true,
        'git_password' => true,
        'git_production_branch_name' => false,
        'use_git_cookie_auth' => false,
        'git_username_user_attribute' => true,
        'git_password_user_attribute' => true,
        'git_service_name' => true,
        'git_application_server_http_port' => true,
        'git_application_server_http_scheme' => true,
        'deploy_secret' => true,
        'unset_deploy_secret' => false,
        'pull_request_mode' => false,
        'validation_required' => false,
        'git_release_mgmt_enabled' => false,
        'allow_warnings' => false,
        'is_example' => false,
        'dependency_status' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can' => 'can',
        'id' => 'id',
        'name' => 'name',
        'uses_git' => 'uses_git',
        'git_remote_url' => 'git_remote_url',
        'git_username' => 'git_username',
        'git_password' => 'git_password',
        'git_production_branch_name' => 'git_production_branch_name',
        'use_git_cookie_auth' => 'use_git_cookie_auth',
        'git_username_user_attribute' => 'git_username_user_attribute',
        'git_password_user_attribute' => 'git_password_user_attribute',
        'git_service_name' => 'git_service_name',
        'git_application_server_http_port' => 'git_application_server_http_port',
        'git_application_server_http_scheme' => 'git_application_server_http_scheme',
        'deploy_secret' => 'deploy_secret',
        'unset_deploy_secret' => 'unset_deploy_secret',
        'pull_request_mode' => 'pull_request_mode',
        'validation_required' => 'validation_required',
        'git_release_mgmt_enabled' => 'git_release_mgmt_enabled',
        'allow_warnings' => 'allow_warnings',
        'is_example' => 'is_example',
        'dependency_status' => 'dependency_status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can' => 'setCan',
        'id' => 'setId',
        'name' => 'setName',
        'uses_git' => 'setUsesGit',
        'git_remote_url' => 'setGitRemoteUrl',
        'git_username' => 'setGitUsername',
        'git_password' => 'setGitPassword',
        'git_production_branch_name' => 'setGitProductionBranchName',
        'use_git_cookie_auth' => 'setUseGitCookieAuth',
        'git_username_user_attribute' => 'setGitUsernameUserAttribute',
        'git_password_user_attribute' => 'setGitPasswordUserAttribute',
        'git_service_name' => 'setGitServiceName',
        'git_application_server_http_port' => 'setGitApplicationServerHttpPort',
        'git_application_server_http_scheme' => 'setGitApplicationServerHttpScheme',
        'deploy_secret' => 'setDeploySecret',
        'unset_deploy_secret' => 'setUnsetDeploySecret',
        'pull_request_mode' => 'setPullRequestMode',
        'validation_required' => 'setValidationRequired',
        'git_release_mgmt_enabled' => 'setGitReleaseMgmtEnabled',
        'allow_warnings' => 'setAllowWarnings',
        'is_example' => 'setIsExample',
        'dependency_status' => 'setDependencyStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can' => 'getCan',
        'id' => 'getId',
        'name' => 'getName',
        'uses_git' => 'getUsesGit',
        'git_remote_url' => 'getGitRemoteUrl',
        'git_username' => 'getGitUsername',
        'git_password' => 'getGitPassword',
        'git_production_branch_name' => 'getGitProductionBranchName',
        'use_git_cookie_auth' => 'getUseGitCookieAuth',
        'git_username_user_attribute' => 'getGitUsernameUserAttribute',
        'git_password_user_attribute' => 'getGitPasswordUserAttribute',
        'git_service_name' => 'getGitServiceName',
        'git_application_server_http_port' => 'getGitApplicationServerHttpPort',
        'git_application_server_http_scheme' => 'getGitApplicationServerHttpScheme',
        'deploy_secret' => 'getDeploySecret',
        'unset_deploy_secret' => 'getUnsetDeploySecret',
        'pull_request_mode' => 'getPullRequestMode',
        'validation_required' => 'getValidationRequired',
        'git_release_mgmt_enabled' => 'getGitReleaseMgmtEnabled',
        'allow_warnings' => 'getAllowWarnings',
        'is_example' => 'getIsExample',
        'dependency_status' => 'getDependencyStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PULL_REQUEST_MODE_OFF = 'off';
    public const PULL_REQUEST_MODE_LINKS = 'links';
    public const PULL_REQUEST_MODE_RECOMMENDED = 'recommended';
    public const PULL_REQUEST_MODE_REQUIRED = 'required';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPullRequestModeAllowableValues(): array
    {
        return [
            self::PULL_REQUEST_MODE_OFF,
            self::PULL_REQUEST_MODE_LINKS,
            self::PULL_REQUEST_MODE_RECOMMENDED,
            self::PULL_REQUEST_MODE_REQUIRED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('can', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('uses_git', $data ?? [], null);
        $this->setIfExists('git_remote_url', $data ?? [], null);
        $this->setIfExists('git_username', $data ?? [], null);
        $this->setIfExists('git_password', $data ?? [], null);
        $this->setIfExists('git_production_branch_name', $data ?? [], null);
        $this->setIfExists('use_git_cookie_auth', $data ?? [], null);
        $this->setIfExists('git_username_user_attribute', $data ?? [], null);
        $this->setIfExists('git_password_user_attribute', $data ?? [], null);
        $this->setIfExists('git_service_name', $data ?? [], null);
        $this->setIfExists('git_application_server_http_port', $data ?? [], null);
        $this->setIfExists('git_application_server_http_scheme', $data ?? [], null);
        $this->setIfExists('deploy_secret', $data ?? [], null);
        $this->setIfExists('unset_deploy_secret', $data ?? [], null);
        $this->setIfExists('pull_request_mode', $data ?? [], null);
        $this->setIfExists('validation_required', $data ?? [], null);
        $this->setIfExists('git_release_mgmt_enabled', $data ?? [], null);
        $this->setIfExists('allow_warnings', $data ?? [], null);
        $this->setIfExists('is_example', $data ?? [], null);
        $this->setIfExists('dependency_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getPullRequestModeAllowableValues();
        if (!is_null($this->container['pull_request_mode']) && !in_array($this->container['pull_request_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pull_request_mode', must be one of '%s'",
                $this->container['pull_request_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can
     *
     * @return array<string,bool>|null
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param array<string,bool>|null $can Operations the current user is able to perform on this object
     *
     * @return self
     */
    public function setCan($can): static
    {
        if (is_null($can)) {
            throw new \InvalidArgumentException('non-nullable can cannot be null');
        }
        $this->container['can'] = $can;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Project Id
     *
     * @return self
     */
    public function setId($id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Project display name
     *
     * @return self
     */
    public function setName($name): static
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets uses_git
     *
     * @return bool|null
     */
    public function getUsesGit()
    {
        return $this->container['uses_git'];
    }

    /**
     * Sets uses_git
     *
     * @param bool|null $uses_git If true the project is configured with a git repository
     *
     * @return self
     */
    public function setUsesGit($uses_git): static
    {
        if (is_null($uses_git)) {
            throw new \InvalidArgumentException('non-nullable uses_git cannot be null');
        }
        $this->container['uses_git'] = $uses_git;

        return $this;
    }

    /**
     * Gets git_remote_url
     *
     * @return string|null
     */
    public function getGitRemoteUrl()
    {
        return $this->container['git_remote_url'];
    }

    /**
     * Sets git_remote_url
     *
     * @param string|null $git_remote_url Git remote repository url
     *
     * @return self
     */
    public function setGitRemoteUrl($git_remote_url): static
    {
        if (is_null($git_remote_url)) {
            array_push($this->openAPINullablesSetToNull, 'git_remote_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('git_remote_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['git_remote_url'] = $git_remote_url;

        return $this;
    }

    /**
     * Gets git_username
     *
     * @return string|null
     */
    public function getGitUsername()
    {
        return $this->container['git_username'];
    }

    /**
     * Sets git_username
     *
     * @param string|null $git_username Git username for HTTPS authentication. (For production only, if using user attributes.)
     *
     * @return self
     */
    public function setGitUsername($git_username): static
    {
        if (is_null($git_username)) {
            array_push($this->openAPINullablesSetToNull, 'git_username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('git_username', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['git_username'] = $git_username;

        return $this;
    }

    /**
     * Gets git_password
     *
     * @return string|null
     */
    public function getGitPassword()
    {
        return $this->container['git_password'];
    }

    /**
     * Sets git_password
     *
     * @param string|null $git_password (Write-Only) Git password for HTTPS authentication. (For production only, if using user attributes.)
     *
     * @return self
     */
    public function setGitPassword($git_password): static
    {
        if (is_null($git_password)) {
            array_push($this->openAPINullablesSetToNull, 'git_password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('git_password', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['git_password'] = $git_password;

        return $this;
    }

    /**
     * Gets git_production_branch_name
     *
     * @return string|null
     */
    public function getGitProductionBranchName()
    {
        return $this->container['git_production_branch_name'];
    }

    /**
     * Sets git_production_branch_name
     *
     * @param string|null $git_production_branch_name Git production branch name. Defaults to master. Supported only in Looker 21.0 and higher.
     *
     * @return self
     */
    public function setGitProductionBranchName($git_production_branch_name): static
    {
        if (is_null($git_production_branch_name)) {
            throw new \InvalidArgumentException('non-nullable git_production_branch_name cannot be null');
        }
        $this->container['git_production_branch_name'] = $git_production_branch_name;

        return $this;
    }

    /**
     * Gets use_git_cookie_auth
     *
     * @return bool|null
     */
    public function getUseGitCookieAuth()
    {
        return $this->container['use_git_cookie_auth'];
    }

    /**
     * Sets use_git_cookie_auth
     *
     * @param bool|null $use_git_cookie_auth If true, the project uses a git cookie for authentication.
     *
     * @return self
     */
    public function setUseGitCookieAuth($use_git_cookie_auth): static
    {
        if (is_null($use_git_cookie_auth)) {
            throw new \InvalidArgumentException('non-nullable use_git_cookie_auth cannot be null');
        }
        $this->container['use_git_cookie_auth'] = $use_git_cookie_auth;

        return $this;
    }

    /**
     * Gets git_username_user_attribute
     *
     * @return string|null
     */
    public function getGitUsernameUserAttribute()
    {
        return $this->container['git_username_user_attribute'];
    }

    /**
     * Sets git_username_user_attribute
     *
     * @param string|null $git_username_user_attribute User attribute name for username in per-user HTTPS authentication.
     *
     * @return self
     */
    public function setGitUsernameUserAttribute($git_username_user_attribute): static
    {
        if (is_null($git_username_user_attribute)) {
            array_push($this->openAPINullablesSetToNull, 'git_username_user_attribute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('git_username_user_attribute', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['git_username_user_attribute'] = $git_username_user_attribute;

        return $this;
    }

    /**
     * Gets git_password_user_attribute
     *
     * @return string|null
     */
    public function getGitPasswordUserAttribute()
    {
        return $this->container['git_password_user_attribute'];
    }

    /**
     * Sets git_password_user_attribute
     *
     * @param string|null $git_password_user_attribute User attribute name for password in per-user HTTPS authentication.
     *
     * @return self
     */
    public function setGitPasswordUserAttribute($git_password_user_attribute): static
    {
        if (is_null($git_password_user_attribute)) {
            array_push($this->openAPINullablesSetToNull, 'git_password_user_attribute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('git_password_user_attribute', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['git_password_user_attribute'] = $git_password_user_attribute;

        return $this;
    }

    /**
     * Gets git_service_name
     *
     * @return string|null
     */
    public function getGitServiceName()
    {
        return $this->container['git_service_name'];
    }

    /**
     * Sets git_service_name
     *
     * @param string|null $git_service_name Name of the git service provider
     *
     * @return self
     */
    public function setGitServiceName($git_service_name): static
    {
        if (is_null($git_service_name)) {
            array_push($this->openAPINullablesSetToNull, 'git_service_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('git_service_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['git_service_name'] = $git_service_name;

        return $this;
    }

    /**
     * Gets git_application_server_http_port
     *
     * @return int|null
     */
    public function getGitApplicationServerHttpPort()
    {
        return $this->container['git_application_server_http_port'];
    }

    /**
     * Sets git_application_server_http_port
     *
     * @param int|null $git_application_server_http_port Port that HTTP(S) application server is running on (for PRs, file browsing, etc.)
     *
     * @return self
     */
    public function setGitApplicationServerHttpPort($git_application_server_http_port): static
    {
        if (is_null($git_application_server_http_port)) {
            array_push($this->openAPINullablesSetToNull, 'git_application_server_http_port');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('git_application_server_http_port', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['git_application_server_http_port'] = $git_application_server_http_port;

        return $this;
    }

    /**
     * Gets git_application_server_http_scheme
     *
     * @return string|null
     */
    public function getGitApplicationServerHttpScheme()
    {
        return $this->container['git_application_server_http_scheme'];
    }

    /**
     * Sets git_application_server_http_scheme
     *
     * @param string|null $git_application_server_http_scheme Scheme that is running on application server (for PRs, file browsing, etc.)
     *
     * @return self
     */
    public function setGitApplicationServerHttpScheme($git_application_server_http_scheme): static
    {
        if (is_null($git_application_server_http_scheme)) {
            array_push($this->openAPINullablesSetToNull, 'git_application_server_http_scheme');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('git_application_server_http_scheme', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['git_application_server_http_scheme'] = $git_application_server_http_scheme;

        return $this;
    }

    /**
     * Gets deploy_secret
     *
     * @return string|null
     */
    public function getDeploySecret()
    {
        return $this->container['deploy_secret'];
    }

    /**
     * Sets deploy_secret
     *
     * @param string|null $deploy_secret (Write-Only) Optional secret token with which to authenticate requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated.
     *
     * @return self
     */
    public function setDeploySecret($deploy_secret): static
    {
        if (is_null($deploy_secret)) {
            array_push($this->openAPINullablesSetToNull, 'deploy_secret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deploy_secret', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deploy_secret'] = $deploy_secret;

        return $this;
    }

    /**
     * Gets unset_deploy_secret
     *
     * @return bool|null
     */
    public function getUnsetDeploySecret()
    {
        return $this->container['unset_deploy_secret'];
    }

    /**
     * Sets unset_deploy_secret
     *
     * @param bool|null $unset_deploy_secret (Write-Only) When true, unsets the deploy secret to allow unauthenticated access to the webhook deploy endpoint.
     *
     * @return self
     */
    public function setUnsetDeploySecret($unset_deploy_secret): static
    {
        if (is_null($unset_deploy_secret)) {
            throw new \InvalidArgumentException('non-nullable unset_deploy_secret cannot be null');
        }
        $this->container['unset_deploy_secret'] = $unset_deploy_secret;

        return $this;
    }

    /**
     * Gets pull_request_mode
     *
     * @return string|null
     */
    public function getPullRequestMode()
    {
        return $this->container['pull_request_mode'];
    }

    /**
     * Sets pull_request_mode
     *
     * @param string|null $pull_request_mode The git pull request policy for this project. Valid values are: \"off\", \"links\", \"recommended\", \"required\".
     *
     * @return self
     */
    public function setPullRequestMode($pull_request_mode): static
    {
        if (is_null($pull_request_mode)) {
            throw new \InvalidArgumentException('non-nullable pull_request_mode cannot be null');
        }
        $allowedValues = $this->getPullRequestModeAllowableValues();
        if (!in_array($pull_request_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pull_request_mode', must be one of '%s'",
                    $pull_request_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pull_request_mode'] = $pull_request_mode;

        return $this;
    }

    /**
     * Gets validation_required
     *
     * @return bool|null
     */
    public function getValidationRequired()
    {
        return $this->container['validation_required'];
    }

    /**
     * Sets validation_required
     *
     * @param bool|null $validation_required Validation policy: If true, the project must pass validation checks before project changes can be committed to the git repository
     *
     * @return self
     */
    public function setValidationRequired($validation_required): static
    {
        if (is_null($validation_required)) {
            throw new \InvalidArgumentException('non-nullable validation_required cannot be null');
        }
        $this->container['validation_required'] = $validation_required;

        return $this;
    }

    /**
     * Gets git_release_mgmt_enabled
     *
     * @return bool|null
     */
    public function getGitReleaseMgmtEnabled()
    {
        return $this->container['git_release_mgmt_enabled'];
    }

    /**
     * Sets git_release_mgmt_enabled
     *
     * @param bool|null $git_release_mgmt_enabled If true, advanced git release management is enabled for this project
     *
     * @return self
     */
    public function setGitReleaseMgmtEnabled($git_release_mgmt_enabled): static
    {
        if (is_null($git_release_mgmt_enabled)) {
            throw new \InvalidArgumentException('non-nullable git_release_mgmt_enabled cannot be null');
        }
        $this->container['git_release_mgmt_enabled'] = $git_release_mgmt_enabled;

        return $this;
    }

    /**
     * Gets allow_warnings
     *
     * @return bool|null
     */
    public function getAllowWarnings()
    {
        return $this->container['allow_warnings'];
    }

    /**
     * Sets allow_warnings
     *
     * @param bool|null $allow_warnings Validation policy: If true, the project can be committed with warnings when `validation_required` is true. (`allow_warnings` does nothing if `validation_required` is false).
     *
     * @return self
     */
    public function setAllowWarnings($allow_warnings): static
    {
        if (is_null($allow_warnings)) {
            throw new \InvalidArgumentException('non-nullable allow_warnings cannot be null');
        }
        $this->container['allow_warnings'] = $allow_warnings;

        return $this;
    }

    /**
     * Gets is_example
     *
     * @return bool|null
     */
    public function getIsExample()
    {
        return $this->container['is_example'];
    }

    /**
     * Sets is_example
     *
     * @param bool|null $is_example If true the project is an example project and cannot be modified
     *
     * @return self
     */
    public function setIsExample($is_example): static
    {
        if (is_null($is_example)) {
            throw new \InvalidArgumentException('non-nullable is_example cannot be null');
        }
        $this->container['is_example'] = $is_example;

        return $this;
    }

    /**
     * Gets dependency_status
     *
     * @return string|null
     */
    public function getDependencyStatus()
    {
        return $this->container['dependency_status'];
    }

    /**
     * Sets dependency_status
     *
     * @param string|null $dependency_status Status of dependencies in your manifest & lockfile
     *
     * @return self
     */
    public function setDependencyStatus($dependency_status): static
    {
        if (is_null($dependency_status)) {
            array_push($this->openAPINullablesSetToNull, 'dependency_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dependency_status', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dependency_status'] = $dependency_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return (string) json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
