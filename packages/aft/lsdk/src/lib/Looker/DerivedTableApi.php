<?php
/**
 * DerivedTableApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Looker;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DerivedTableApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DerivedTableApi
{
    protected \GuzzleHttp\ClientInterface $client;

    protected \OpenAPI\Client\Configuration $config;

    protected \OpenAPI\Client\HeaderSelector $headerSelector;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'checkPdtBuild' => [
            'application/json',
        ],
        'graphDerivedTablesForModel' => [
            'application/json',
        ],
        'graphDerivedTablesForView' => [
            'application/json',
        ],
        'startPdtBuild' => [
            'application/json',
        ],
        'stopPdtBuild' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        protected $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): \OpenAPI\Client\Configuration
    {
        return $this->config;
    }

    /**
     * Operation checkPdtBuild
     *
     * Check status of a PDT materialization
     *
     * @param  string $materialization_id The materialization id to check status for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkPdtBuild'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MaterializePDT|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function checkPdtBuild($materialization_id, string $contentType = self::contentTypes['checkPdtBuild'][0])
    {
        [$response] = $this->checkPdtBuildWithHttpInfo($materialization_id, $contentType);
        return $response;
    }

    /**
     * Operation checkPdtBuildWithHttpInfo
     *
     * Check status of a PDT materialization
     *
     * @param  string $materialization_id The materialization id to check status for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkPdtBuild'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MaterializePDT|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkPdtBuildWithHttpInfo($materialization_id, string $contentType = self::contentTypes['checkPdtBuild'][0])
    {
        $request = $this->checkPdtBuildRequest($materialization_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (\OpenAPI\Client\Model\MaterializePDT::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\MaterializePDT::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\MaterializePDT::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \OpenAPI\Client\Model\MaterializePDT::class;
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\MaterializePDT::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkPdtBuildAsync
     *
     * Check status of a PDT materialization
     *
     * @param  string $materialization_id The materialization id to check status for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkPdtBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkPdtBuildAsync($materialization_id, string $contentType = self::contentTypes['checkPdtBuild'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->checkPdtBuildAsyncWithHttpInfo($materialization_id, $contentType)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation checkPdtBuildAsyncWithHttpInfo
     *
     * Check status of a PDT materialization
     *
     * @param  string $materialization_id The materialization id to check status for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkPdtBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkPdtBuildAsyncWithHttpInfo($materialization_id, string $contentType = self::contentTypes['checkPdtBuild'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = \OpenAPI\Client\Model\MaterializePDT::class;
        $request = $this->checkPdtBuildRequest($materialization_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkPdtBuild'
     *
     * @param  string $materialization_id The materialization id to check status for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkPdtBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkPdtBuildRequest($materialization_id, string $contentType = self::contentTypes['checkPdtBuild'][0]): \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'materialization_id' is set
        if ($materialization_id === null || (is_array($materialization_id) && count($materialization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $materialization_id when calling checkPdtBuild'
            );
        }


        $resourcePath = '/derived_table/{materialization_id}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($materialization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'materialization_id' . '}',
                ObjectSerializer::toPathValue($materialization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation graphDerivedTablesForModel
     *
     * Get Derived Table graph for model
     *
     * @param  string $model The name of the Lookml model. (required)
     * @param  string $format The format of the graph. Valid values are [dot]. Default is &#x60;dot&#x60; (optional)
     * @param  string $color Color denoting the build status of the graph. Grey &#x3D; not built, green &#x3D; built, yellow &#x3D; building, red &#x3D; error. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['graphDerivedTablesForModel'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DependencyGraph|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function graphDerivedTablesForModel($model, $format = null, $color = null, string $contentType = self::contentTypes['graphDerivedTablesForModel'][0])
    {
        [$response] = $this->graphDerivedTablesForModelWithHttpInfo($model, $format, $color, $contentType);
        return $response;
    }

    /**
     * Operation graphDerivedTablesForModelWithHttpInfo
     *
     * Get Derived Table graph for model
     *
     * @param  string $model The name of the Lookml model. (required)
     * @param  string $format The format of the graph. Valid values are [dot]. Default is &#x60;dot&#x60; (optional)
     * @param  string $color Color denoting the build status of the graph. Grey &#x3D; not built, green &#x3D; built, yellow &#x3D; building, red &#x3D; error. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['graphDerivedTablesForModel'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DependencyGraph|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function graphDerivedTablesForModelWithHttpInfo($model, $format = null, $color = null, string $contentType = self::contentTypes['graphDerivedTablesForModel'][0])
    {
        $request = $this->graphDerivedTablesForModelRequest($model, $format, $color, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (\OpenAPI\Client\Model\DependencyGraph::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\DependencyGraph::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\DependencyGraph::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \OpenAPI\Client\Model\DependencyGraph::class;
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\DependencyGraph::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation graphDerivedTablesForModelAsync
     *
     * Get Derived Table graph for model
     *
     * @param  string $model The name of the Lookml model. (required)
     * @param  string $format The format of the graph. Valid values are [dot]. Default is &#x60;dot&#x60; (optional)
     * @param  string $color Color denoting the build status of the graph. Grey &#x3D; not built, green &#x3D; built, yellow &#x3D; building, red &#x3D; error. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['graphDerivedTablesForModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function graphDerivedTablesForModelAsync($model, $format = null, $color = null, string $contentType = self::contentTypes['graphDerivedTablesForModel'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->graphDerivedTablesForModelAsyncWithHttpInfo($model, $format, $color, $contentType)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation graphDerivedTablesForModelAsyncWithHttpInfo
     *
     * Get Derived Table graph for model
     *
     * @param  string $model The name of the Lookml model. (required)
     * @param  string $format The format of the graph. Valid values are [dot]. Default is &#x60;dot&#x60; (optional)
     * @param  string $color Color denoting the build status of the graph. Grey &#x3D; not built, green &#x3D; built, yellow &#x3D; building, red &#x3D; error. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['graphDerivedTablesForModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function graphDerivedTablesForModelAsyncWithHttpInfo($model, $format = null, $color = null, string $contentType = self::contentTypes['graphDerivedTablesForModel'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = \OpenAPI\Client\Model\DependencyGraph::class;
        $request = $this->graphDerivedTablesForModelRequest($model, $format, $color, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'graphDerivedTablesForModel'
     *
     * @param  string $model The name of the Lookml model. (required)
     * @param  string $format The format of the graph. Valid values are [dot]. Default is &#x60;dot&#x60; (optional)
     * @param  string $color Color denoting the build status of the graph. Grey &#x3D; not built, green &#x3D; built, yellow &#x3D; building, red &#x3D; error. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['graphDerivedTablesForModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function graphDerivedTablesForModelRequest($model, $format = null, $color = null, string $contentType = self::contentTypes['graphDerivedTablesForModel'][0]): \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling graphDerivedTablesForModel'
            );
        }




        $resourcePath = '/derived_table/graph/model/{model}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $color,
            'color', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($model !== null) {
            $resourcePath = str_replace(
                '{' . 'model' . '}',
                ObjectSerializer::toPathValue($model),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation graphDerivedTablesForView
     *
     * Get subgraph of derived table and dependencies
     *
     * @param  string $view The derived table&#39;s view name. (required)
     * @param  string $models The models where this derived table is defined. (optional)
     * @param  string $workspace The model directory to look in, either &#x60;dev&#x60; or &#x60;production&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['graphDerivedTablesForView'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DependencyGraph|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function graphDerivedTablesForView($view, $models = null, $workspace = null, string $contentType = self::contentTypes['graphDerivedTablesForView'][0])
    {
        [$response] = $this->graphDerivedTablesForViewWithHttpInfo($view, $models, $workspace, $contentType);
        return $response;
    }

    /**
     * Operation graphDerivedTablesForViewWithHttpInfo
     *
     * Get subgraph of derived table and dependencies
     *
     * @param  string $view The derived table&#39;s view name. (required)
     * @param  string $models The models where this derived table is defined. (optional)
     * @param  string $workspace The model directory to look in, either &#x60;dev&#x60; or &#x60;production&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['graphDerivedTablesForView'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DependencyGraph|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function graphDerivedTablesForViewWithHttpInfo($view, $models = null, $workspace = null, string $contentType = self::contentTypes['graphDerivedTablesForView'][0])
    {
        $request = $this->graphDerivedTablesForViewRequest($view, $models, $workspace, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (\OpenAPI\Client\Model\DependencyGraph::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\DependencyGraph::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\DependencyGraph::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \OpenAPI\Client\Model\DependencyGraph::class;
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\DependencyGraph::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation graphDerivedTablesForViewAsync
     *
     * Get subgraph of derived table and dependencies
     *
     * @param  string $view The derived table&#39;s view name. (required)
     * @param  string $models The models where this derived table is defined. (optional)
     * @param  string $workspace The model directory to look in, either &#x60;dev&#x60; or &#x60;production&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['graphDerivedTablesForView'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function graphDerivedTablesForViewAsync($view, $models = null, $workspace = null, string $contentType = self::contentTypes['graphDerivedTablesForView'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->graphDerivedTablesForViewAsyncWithHttpInfo($view, $models, $workspace, $contentType)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation graphDerivedTablesForViewAsyncWithHttpInfo
     *
     * Get subgraph of derived table and dependencies
     *
     * @param  string $view The derived table&#39;s view name. (required)
     * @param  string $models The models where this derived table is defined. (optional)
     * @param  string $workspace The model directory to look in, either &#x60;dev&#x60; or &#x60;production&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['graphDerivedTablesForView'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function graphDerivedTablesForViewAsyncWithHttpInfo($view, $models = null, $workspace = null, string $contentType = self::contentTypes['graphDerivedTablesForView'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = \OpenAPI\Client\Model\DependencyGraph::class;
        $request = $this->graphDerivedTablesForViewRequest($view, $models, $workspace, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'graphDerivedTablesForView'
     *
     * @param  string $view The derived table&#39;s view name. (required)
     * @param  string $models The models where this derived table is defined. (optional)
     * @param  string $workspace The model directory to look in, either &#x60;dev&#x60; or &#x60;production&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['graphDerivedTablesForView'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function graphDerivedTablesForViewRequest($view, $models = null, $workspace = null, string $contentType = self::contentTypes['graphDerivedTablesForView'][0]): \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'view' is set
        if ($view === null || (is_array($view) && count($view) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $view when calling graphDerivedTablesForView'
            );
        }




        $resourcePath = '/derived_table/graph/view/{view}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $models,
            'models', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace,
            'workspace', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($view !== null) {
            $resourcePath = str_replace(
                '{' . 'view' . '}',
                ObjectSerializer::toPathValue($view),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startPdtBuild
     *
     * Start a PDT materialization
     *
     * @param  string $model_name The model of the PDT to start building. (required)
     * @param  string $view_name The view name of the PDT to start building. (required)
     * @param  string $force_rebuild Force rebuild of required dependent PDTs, even if they are already materialized. (optional)
     * @param  string $force_full_incremental Force involved incremental PDTs to fully re-materialize. (optional)
     * @param  string $workspace Workspace in which to materialize selected PDT (&#39;dev&#39; or default &#39;production&#39;). (optional)
     * @param  string $source The source of this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startPdtBuild'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MaterializePDT|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function startPdtBuild($model_name, $view_name, $force_rebuild = null, $force_full_incremental = null, $workspace = null, $source = null, string $contentType = self::contentTypes['startPdtBuild'][0])
    {
        [$response] = $this->startPdtBuildWithHttpInfo($model_name, $view_name, $force_rebuild, $force_full_incremental, $workspace, $source, $contentType);
        return $response;
    }

    /**
     * Operation startPdtBuildWithHttpInfo
     *
     * Start a PDT materialization
     *
     * @param  string $model_name The model of the PDT to start building. (required)
     * @param  string $view_name The view name of the PDT to start building. (required)
     * @param  string $force_rebuild Force rebuild of required dependent PDTs, even if they are already materialized. (optional)
     * @param  string $force_full_incremental Force involved incremental PDTs to fully re-materialize. (optional)
     * @param  string $workspace Workspace in which to materialize selected PDT (&#39;dev&#39; or default &#39;production&#39;). (optional)
     * @param  string $source The source of this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startPdtBuild'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MaterializePDT|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function startPdtBuildWithHttpInfo($model_name, $view_name, $force_rebuild = null, $force_full_incremental = null, $workspace = null, $source = null, string $contentType = self::contentTypes['startPdtBuild'][0])
    {
        $request = $this->startPdtBuildRequest($model_name, $view_name, $force_rebuild, $force_full_incremental, $workspace, $source, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (\OpenAPI\Client\Model\MaterializePDT::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\MaterializePDT::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\MaterializePDT::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \OpenAPI\Client\Model\MaterializePDT::class;
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\MaterializePDT::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startPdtBuildAsync
     *
     * Start a PDT materialization
     *
     * @param  string $model_name The model of the PDT to start building. (required)
     * @param  string $view_name The view name of the PDT to start building. (required)
     * @param  string $force_rebuild Force rebuild of required dependent PDTs, even if they are already materialized. (optional)
     * @param  string $force_full_incremental Force involved incremental PDTs to fully re-materialize. (optional)
     * @param  string $workspace Workspace in which to materialize selected PDT (&#39;dev&#39; or default &#39;production&#39;). (optional)
     * @param  string $source The source of this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startPdtBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startPdtBuildAsync($model_name, $view_name, $force_rebuild = null, $force_full_incremental = null, $workspace = null, $source = null, string $contentType = self::contentTypes['startPdtBuild'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->startPdtBuildAsyncWithHttpInfo($model_name, $view_name, $force_rebuild, $force_full_incremental, $workspace, $source, $contentType)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation startPdtBuildAsyncWithHttpInfo
     *
     * Start a PDT materialization
     *
     * @param  string $model_name The model of the PDT to start building. (required)
     * @param  string $view_name The view name of the PDT to start building. (required)
     * @param  string $force_rebuild Force rebuild of required dependent PDTs, even if they are already materialized. (optional)
     * @param  string $force_full_incremental Force involved incremental PDTs to fully re-materialize. (optional)
     * @param  string $workspace Workspace in which to materialize selected PDT (&#39;dev&#39; or default &#39;production&#39;). (optional)
     * @param  string $source The source of this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startPdtBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startPdtBuildAsyncWithHttpInfo($model_name, $view_name, $force_rebuild = null, $force_full_incremental = null, $workspace = null, $source = null, string $contentType = self::contentTypes['startPdtBuild'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = \OpenAPI\Client\Model\MaterializePDT::class;
        $request = $this->startPdtBuildRequest($model_name, $view_name, $force_rebuild, $force_full_incremental, $workspace, $source, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startPdtBuild'
     *
     * @param  string $model_name The model of the PDT to start building. (required)
     * @param  string $view_name The view name of the PDT to start building. (required)
     * @param  string $force_rebuild Force rebuild of required dependent PDTs, even if they are already materialized. (optional)
     * @param  string $force_full_incremental Force involved incremental PDTs to fully re-materialize. (optional)
     * @param  string $workspace Workspace in which to materialize selected PDT (&#39;dev&#39; or default &#39;production&#39;). (optional)
     * @param  string $source The source of this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startPdtBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function startPdtBuildRequest($model_name, $view_name, $force_rebuild = null, $force_full_incremental = null, $workspace = null, $source = null, string $contentType = self::contentTypes['startPdtBuild'][0]): \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'model_name' is set
        if ($model_name === null || (is_array($model_name) && count($model_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_name when calling startPdtBuild'
            );
        }

        // verify the required parameter 'view_name' is set
        if ($view_name === null || (is_array($view_name) && count($view_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $view_name when calling startPdtBuild'
            );
        }






        $resourcePath = '/derived_table/{model_name}/{view_name}/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force_rebuild,
            'force_rebuild', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force_full_incremental,
            'force_full_incremental', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace,
            'workspace', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source,
            'source', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($model_name !== null) {
            $resourcePath = str_replace(
                '{' . 'model_name' . '}',
                ObjectSerializer::toPathValue($model_name),
                $resourcePath
            );
        }
        // path params
        if ($view_name !== null) {
            $resourcePath = str_replace(
                '{' . 'view_name' . '}',
                ObjectSerializer::toPathValue($view_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stopPdtBuild
     *
     * Stop a PDT materialization
     *
     * @param  string $materialization_id The materialization id to stop. (required)
     * @param  string $source The source of this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopPdtBuild'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MaterializePDT|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function stopPdtBuild($materialization_id, $source = null, string $contentType = self::contentTypes['stopPdtBuild'][0])
    {
        [$response] = $this->stopPdtBuildWithHttpInfo($materialization_id, $source, $contentType);
        return $response;
    }

    /**
     * Operation stopPdtBuildWithHttpInfo
     *
     * Stop a PDT materialization
     *
     * @param  string $materialization_id The materialization id to stop. (required)
     * @param  string $source The source of this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopPdtBuild'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MaterializePDT|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPdtBuildWithHttpInfo($materialization_id, $source = null, string $contentType = self::contentTypes['stopPdtBuild'][0])
    {
        $request = $this->stopPdtBuildRequest($materialization_id, $source, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (\OpenAPI\Client\Model\MaterializePDT::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\MaterializePDT::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\MaterializePDT::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if (\OpenAPI\Client\Model\Error::class === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (\OpenAPI\Client\Model\Error::class !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, \OpenAPI\Client\Model\Error::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \OpenAPI\Client\Model\MaterializePDT::class;
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\MaterializePDT::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \OpenAPI\Client\Model\Error::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stopPdtBuildAsync
     *
     * Stop a PDT materialization
     *
     * @param  string $materialization_id The materialization id to stop. (required)
     * @param  string $source The source of this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopPdtBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopPdtBuildAsync($materialization_id, $source = null, string $contentType = self::contentTypes['stopPdtBuild'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->stopPdtBuildAsyncWithHttpInfo($materialization_id, $source, $contentType)
            ->then(
                fn($response) => $response[0]
            );
    }

    /**
     * Operation stopPdtBuildAsyncWithHttpInfo
     *
     * Stop a PDT materialization
     *
     * @param  string $materialization_id The materialization id to stop. (required)
     * @param  string $source The source of this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopPdtBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopPdtBuildAsyncWithHttpInfo($materialization_id, $source = null, string $contentType = self::contentTypes['stopPdtBuild'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = \OpenAPI\Client\Model\MaterializePDT::class;
        $request = $this->stopPdtBuildRequest($materialization_id, $source, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType): array {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stopPdtBuild'
     *
     * @param  string $materialization_id The materialization id to stop. (required)
     * @param  string $source The source of this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopPdtBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function stopPdtBuildRequest($materialization_id, $source = null, string $contentType = self::contentTypes['stopPdtBuild'][0]): \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'materialization_id' is set
        if ($materialization_id === null || (is_array($materialization_id) && count($materialization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $materialization_id when calling stopPdtBuild'
            );
        }



        $resourcePath = '/derived_table/{materialization_id}/stop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source,
            'source', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($materialization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'materialization_id' . '}',
                ObjectSerializer::toPathValue($materialization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
