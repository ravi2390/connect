<?php
/**
 * UserApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * UserApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for allUserCredentialsApi3s
     *
     * Get All API Credentials.
     *
     */
    public function testAllUserCredentialsApi3s(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allUserCredentialsEmbeds
     *
     * Get All Embedding Credentials.
     *
     */
    public function testAllUserCredentialsEmbeds(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allUserSessions
     *
     * Get All Web Login Sessions.
     *
     */
    public function testAllUserSessions(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allUsers
     *
     * Get All Users.
     *
     */
    public function testAllUsers(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createEmbedUser
     *
     * Create an embed user from an external user ID.
     *
     */
    public function testCreateEmbedUser(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createUser
     *
     * Create User.
     *
     */
    public function testCreateUser(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createUserCredentialsApi3
     *
     * Create API Credential.
     *
     */
    public function testCreateUserCredentialsApi3(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createUserCredentialsEmail
     *
     * Create Email/Password Credential.
     *
     */
    public function testCreateUserCredentialsEmail(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createUserCredentialsEmailPasswordReset
     *
     * Create Password Reset Token.
     *
     */
    public function testCreateUserCredentialsEmailPasswordReset(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createUserCredentialsTotp
     *
     * Create Two-Factor Credential.
     *
     */
    public function testCreateUserCredentialsTotp(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUser
     *
     * Delete User.
     *
     */
    public function testDeleteUser(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserAttributeUserValue
     *
     * Delete User Attribute User Value.
     *
     */
    public function testDeleteUserAttributeUserValue(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsApi3
     *
     * Delete API Credential.
     *
     */
    public function testDeleteUserCredentialsApi3(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsEmail
     *
     * Delete Email/Password Credential.
     *
     */
    public function testDeleteUserCredentialsEmail(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsEmbed
     *
     * Delete Embedding Credential.
     *
     */
    public function testDeleteUserCredentialsEmbed(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsGoogle
     *
     * Delete Google Auth Credential.
     *
     */
    public function testDeleteUserCredentialsGoogle(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsLdap
     *
     * Delete LDAP Credential.
     *
     */
    public function testDeleteUserCredentialsLdap(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsLookerOpenid
     *
     * Delete Looker OpenId Credential.
     *
     */
    public function testDeleteUserCredentialsLookerOpenid(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsOidc
     *
     * Delete OIDC Auth Credential.
     *
     */
    public function testDeleteUserCredentialsOidc(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsSaml
     *
     * Delete Saml Auth Credential.
     *
     */
    public function testDeleteUserCredentialsSaml(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCredentialsTotp
     *
     * Delete Two-Factor Credential.
     *
     */
    public function testDeleteUserCredentialsTotp(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserSession
     *
     * Delete Web Login Session.
     *
     */
    public function testDeleteUserSession(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for me
     *
     * Get Current User.
     *
     */
    public function testMe(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchCredentialsEmail
     *
     * Search CredentialsEmail.
     *
     */
    public function testSearchCredentialsEmail(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchUsers
     *
     * Search Users.
     *
     */
    public function testSearchUsers(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchUsersNames
     *
     * Search User Names.
     *
     */
    public function testSearchUsersNames(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendUserCredentialsEmailPasswordReset
     *
     * Send Password Reset Token.
     *
     */
    public function testSendUserCredentialsEmailPasswordReset(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setUserAttributeUserValue
     *
     * Set User Attribute User Value.
     *
     */
    public function testSetUserAttributeUserValue(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setUserRoles
     *
     * Set User Roles.
     *
     */
    public function testSetUserRoles(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateUser
     *
     * Update User.
     *
     */
    public function testUpdateUser(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateUserCredentialsEmail
     *
     * Update Email/Password Credential.
     *
     */
    public function testUpdateUserCredentialsEmail(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for user
     *
     * Get User by Id.
     *
     */
    public function testUser(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userAttributeUserValues
     *
     * Get User Attribute Values.
     *
     */
    public function testUserAttributeUserValues(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsApi3
     *
     * Get API Credential.
     *
     */
    public function testUserCredentialsApi3(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsEmail
     *
     * Get Email/Password Credential.
     *
     */
    public function testUserCredentialsEmail(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsEmbed
     *
     * Get Embedding Credential.
     *
     */
    public function testUserCredentialsEmbed(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsGoogle
     *
     * Get Google Auth Credential.
     *
     */
    public function testUserCredentialsGoogle(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsLdap
     *
     * Get LDAP Credential.
     *
     */
    public function testUserCredentialsLdap(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsLookerOpenid
     *
     * Get Looker OpenId Credential.
     *
     */
    public function testUserCredentialsLookerOpenid(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsOidc
     *
     * Get OIDC Auth Credential.
     *
     */
    public function testUserCredentialsOidc(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsSaml
     *
     * Get Saml Auth Credential.
     *
     */
    public function testUserCredentialsSaml(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userCredentialsTotp
     *
     * Get Two-Factor Credential.
     *
     */
    public function testUserCredentialsTotp(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userForCredential
     *
     * Get User by Credential Id.
     *
     */
    public function testUserForCredential(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userRoles
     *
     * Get User Roles.
     *
     */
    public function testUserRoles(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for userSession
     *
     * Get Web Login Session.
     *
     */
    public function testUserSession(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for wipeoutUserEmails
     *
     * Wipeout User Emails.
     *
     */
    public function testWipeoutUserEmails(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
