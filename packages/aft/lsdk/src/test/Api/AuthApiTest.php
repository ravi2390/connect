<?php
/**
 * AuthApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * AuthApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AuthApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for acquireEmbedCookielessSession
     *
     * Create Acquire cookieless embed session.
     *
     */
    public function testAcquireEmbedCookielessSession(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for activateAppUser
     *
     * Activate OAuth App User.
     *
     */
    public function testActivateAppUser(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addSupportAccessAllowlistEntries
     *
     * Add Support Access Allowlist Users.
     *
     */
    public function testAddSupportAccessAllowlistEntries(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allOauthClientApps
     *
     * Get All OAuth Client Apps.
     *
     */
    public function testAllOauthClientApps(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allUserLoginLockouts
     *
     * Get All User Login Lockouts.
     *
     */
    public function testAllUserLoginLockouts(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createEmbedSecret
     *
     * Create Embed Secret.
     *
     */
    public function testCreateEmbedSecret(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createEmbedUrlAsMe
     *
     * Create Embed URL.
     *
     */
    public function testCreateEmbedUrlAsMe(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOidcTestConfig
     *
     * Create OIDC Test Configuration.
     *
     */
    public function testCreateOidcTestConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createSamlTestConfig
     *
     * Create SAML Test Configuration.
     *
     */
    public function testCreateSamlTestConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createSsoEmbedUrl
     *
     * Create Signed Embed Url.
     *
     */
    public function testCreateSsoEmbedUrl(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deactivateAppUser
     *
     * Deactivate OAuth App User.
     *
     */
    public function testDeactivateAppUser(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteEmbedCookielessSession
     *
     * Delete cookieless embed session.
     *
     */
    public function testDeleteEmbedCookielessSession(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteEmbedSecret
     *
     * Delete Embed Secret.
     *
     */
    public function testDeleteEmbedSecret(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOauthClientApp
     *
     * Delete OAuth Client App.
     *
     */
    public function testDeleteOauthClientApp(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOidcTestConfig
     *
     * Delete OIDC Test Configuration.
     *
     */
    public function testDeleteOidcTestConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteSamlTestConfig
     *
     * Delete SAML Test Configuration.
     *
     */
    public function testDeleteSamlTestConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteSupportAccessAllowlistEntry
     *
     * Delete Support Access Allowlist Entry.
     *
     */
    public function testDeleteSupportAccessAllowlistEntry(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserLoginLockout
     *
     * Delete User Login Lockout.
     *
     */
    public function testDeleteUserLoginLockout(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deregisterMobileDevice
     *
     * Deregister Mobile Device.
     *
     */
    public function testDeregisterMobileDevice(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for disableSupportAccess
     *
     * Disable Support Access.
     *
     */
    public function testDisableSupportAccess(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for enableSupportAccess
     *
     * Enable Support Access.
     *
     */
    public function testEnableSupportAccess(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchAndParseSamlIdpMetadata
     *
     * Parse SAML IdP Url.
     *
     */
    public function testFetchAndParseSamlIdpMetadata(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for forcePasswordResetAtNextLoginForAllUsers
     *
     * Force password reset.
     *
     */
    public function testForcePasswordResetAtNextLoginForAllUsers(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateTokensForCookielessSession
     *
     * Generate tokens for cookieless embed session.
     *
     */
    public function testGenerateTokensForCookielessSession(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSupportAccessAllowlistEntries
     *
     * Get Support Access Allowlist Users.
     *
     */
    public function testGetSupportAccessAllowlistEntries(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for invalidateTokens
     *
     * Invalidate Tokens.
     *
     */
    public function testInvalidateTokens(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for ldapConfig
     *
     * Get LDAP Configuration.
     *
     */
    public function testLdapConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for oauthClientApp
     *
     * Get OAuth Client App.
     *
     */
    public function testOauthClientApp(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for oidcConfig
     *
     * Get OIDC Configuration.
     *
     */
    public function testOidcConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for oidcTestConfig
     *
     * Get OIDC Test Configuration.
     *
     */
    public function testOidcTestConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for parseSamlIdpMetadata
     *
     * Parse SAML IdP XML.
     *
     */
    public function testParseSamlIdpMetadata(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for passwordConfig
     *
     * Get Password Config.
     *
     */
    public function testPasswordConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for registerMobileDevice
     *
     * Register Mobile Device.
     *
     */
    public function testRegisterMobileDevice(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for registerOauthClientApp
     *
     * Register OAuth App.
     *
     */
    public function testRegisterOauthClientApp(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for samlConfig
     *
     * Get SAML Configuration.
     *
     */
    public function testSamlConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for samlTestConfig
     *
     * Get SAML Test Configuration.
     *
     */
    public function testSamlTestConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchUserLoginLockouts
     *
     * Search User Login Lockouts.
     *
     */
    public function testSearchUserLoginLockouts(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sessionConfig
     *
     * Get Session Config.
     *
     */
    public function testSessionConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for supportAccessStatus
     *
     * Support Access Status.
     *
     */
    public function testSupportAccessStatus(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testLdapConfigAuth
     *
     * Test LDAP Auth.
     *
     */
    public function testTestLdapConfigAuth(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testLdapConfigConnection
     *
     * Test LDAP Connection.
     *
     */
    public function testTestLdapConfigConnection(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testLdapConfigUserAuth
     *
     * Test LDAP User Auth.
     *
     */
    public function testTestLdapConfigUserAuth(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testLdapConfigUserInfo
     *
     * Test LDAP User Info.
     *
     */
    public function testTestLdapConfigUserInfo(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateLdapConfig
     *
     * Update LDAP Configuration.
     *
     */
    public function testUpdateLdapConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateMobileDeviceRegistration
     *
     * Update Mobile Device Registration.
     *
     */
    public function testUpdateMobileDeviceRegistration(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOauthClientApp
     *
     * Update OAuth App.
     *
     */
    public function testUpdateOauthClientApp(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOidcConfig
     *
     * Update OIDC Configuration.
     *
     */
    public function testUpdateOidcConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePasswordConfig
     *
     * Update Password Config.
     *
     */
    public function testUpdatePasswordConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateSamlConfig
     *
     * Update SAML Configuration.
     *
     */
    public function testUpdateSamlConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateSessionConfig
     *
     * Update Session Config.
     *
     */
    public function testUpdateSessionConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for validateEmbedUrl
     *
     * Get Embed URL Validation.
     *
     */
    public function testValidateEmbedUrl(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
