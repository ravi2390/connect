<?php
/**
 * ConnectionApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ConnectionApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConnectionApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for allConnections
     *
     * Get All Connections.
     *
     */
    public function testAllConnections(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allDialectInfos
     *
     * Get All Dialect Infos.
     *
     */
    public function testAllDialectInfos(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allExternalOauthApplications
     *
     * Get All External OAuth Applications.
     *
     */
    public function testAllExternalOauthApplications(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allSshServers
     *
     * Get All SSH Servers.
     *
     */
    public function testAllSshServers(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allSshTunnels
     *
     * Get All SSH Tunnels.
     *
     */
    public function testAllSshTunnels(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for connection
     *
     * Get Connection.
     *
     */
    public function testConnection(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createConnection
     *
     * Create Connection.
     *
     */
    public function testCreateConnection(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createExternalOauthApplication
     *
     * Create External OAuth Application.
     *
     */
    public function testCreateExternalOauthApplication(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOauthApplicationUserState
     *
     * Create Create OAuth user state..
     *
     */
    public function testCreateOauthApplicationUserState(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createSshServer
     *
     * Create SSH Server.
     *
     */
    public function testCreateSshServer(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createSshTunnel
     *
     * Create SSH Tunnel.
     *
     */
    public function testCreateSshTunnel(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteConnection
     *
     * Delete Connection.
     *
     */
    public function testDeleteConnection(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteConnectionOverride
     *
     * Delete Connection Override.
     *
     */
    public function testDeleteConnectionOverride(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteSshServer
     *
     * Delete SSH Server.
     *
     */
    public function testDeleteSshServer(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteSshTunnel
     *
     * Delete SSH Tunnel.
     *
     */
    public function testDeleteSshTunnel(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sshPublicKey
     *
     * Get SSH Public Key.
     *
     */
    public function testSshPublicKey(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sshServer
     *
     * Get SSH Server.
     *
     */
    public function testSshServer(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sshTunnel
     *
     * Get SSH Tunnel.
     *
     */
    public function testSshTunnel(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testConnection
     *
     * Test Connection.
     *
     */
    public function testTestConnection(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testConnectionConfig
     *
     * Test Connection Configuration.
     *
     */
    public function testTestConnectionConfig(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testSshServer
     *
     * Test SSH Server.
     *
     */
    public function testTestSshServer(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testSshTunnel
     *
     * Test SSH Tunnel.
     *
     */
    public function testTestSshTunnel(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateConnection
     *
     * Update Connection.
     *
     */
    public function testUpdateConnection(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateSshServer
     *
     * Update SSH Server.
     *
     */
    public function testUpdateSshServer(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateSshTunnel
     *
     * Update SSH Tunnel.
     *
     */
    public function testUpdateSshTunnel(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
