<?php
/**
 * ConfigApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Looker API 4.0 Reference
 *
 * API 4.0 is the current release of the Looker API. API 3.x has been removed.  ### Authorization  The classic method of API authorization uses Looker **API** credentials for authorization and access control. Looker admins can create API credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).   ### In This Release  API 4.0 is the only supported API version for Looker starting with release 23.18. API 3.0 and 3.1 have been removed.  API 4.0 has better support for strongly typed languages like TypeScript, Kotlin, Swift, Go, C#, and more.  See the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information about API 4.0.  The API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.
 *
 * The version of the OpenAPI document: 4.0.24.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ConfigApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConfigApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for allLegacyFeatures
     *
     * Get All Legacy Features.
     *
     */
    public function testAllLegacyFeatures(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allLocales
     *
     * Get All Locales.
     *
     */
    public function testAllLocales(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allTimezones
     *
     * Get All Timezones.
     *
     */
    public function testAllTimezones(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiSpec
     *
     * Get an API specification.
     *
     */
    public function testApiSpec(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cloudStorageConfiguration
     *
     * Get Cloud Storage.
     *
     */
    public function testCloudStorageConfiguration(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDigestEmailSend
     *
     * Deliver digest email contents.
     *
     */
    public function testCreateDigestEmailSend(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for customWelcomeEmail
     *
     * Get Custom Welcome Email.
     *
     */
    public function testCustomWelcomeEmail(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for digestEmailsEnabled
     *
     * Get Digest_emails.
     *
     */
    public function testDigestEmailsEnabled(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSetting
     *
     * Get Setting.
     *
     */
    public function testGetSetting(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for internalHelpResources
     *
     * Get Internal Help Resources.
     *
     */
    public function testInternalHelpResources(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for internalHelpResourcesContent
     *
     * Get Internal Help Resources Content.
     *
     */
    public function testInternalHelpResourcesContent(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for legacyFeature
     *
     * Get Legacy Feature.
     *
     */
    public function testLegacyFeature(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for mobileSettings
     *
     * Get Mobile_Settings.
     *
     */
    public function testMobileSettings(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for publicEgressIpAddresses
     *
     * Public Egress IP Addresses.
     *
     */
    public function testPublicEgressIpAddresses(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setSetting
     *
     * Set Setting.
     *
     */
    public function testSetSetting(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setSmtpSettings
     *
     * Set SMTP Setting.
     *
     */
    public function testSetSmtpSettings(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for smtpStatus
     *
     * Get SMTP Status.
     *
     */
    public function testSmtpStatus(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateCloudStorageConfiguration
     *
     * Update Cloud Storage.
     *
     */
    public function testUpdateCloudStorageConfiguration(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateCustomWelcomeEmail
     *
     * Update Custom Welcome Email Content.
     *
     */
    public function testUpdateCustomWelcomeEmail(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateCustomWelcomeEmailTest
     *
     * Send a test welcome email to the currently logged in user with the supplied content.
     *
     */
    public function testUpdateCustomWelcomeEmailTest(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDigestEmailsEnabled
     *
     * Update Digest_emails.
     *
     */
    public function testUpdateDigestEmailsEnabled(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateInternalHelpResources
     *
     * Update internal help resources configuration.
     *
     */
    public function testUpdateInternalHelpResources(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateInternalHelpResourcesContent
     *
     * Update internal help resources content.
     *
     */
    public function testUpdateInternalHelpResourcesContent(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateLegacyFeature
     *
     * Update Legacy Feature.
     *
     */
    public function testUpdateLegacyFeature(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWhitelabelConfiguration
     *
     * Update Private label configuration.
     *
     */
    public function testUpdateWhitelabelConfiguration(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for versions
     *
     * Get ApiVersion.
     *
     */
    public function testVersions(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for whitelabelConfiguration
     *
     * Get Private label configuration.
     *
     */
    public function testWhitelabelConfiguration(): void
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
