import { c as constructFrom, g as getDefaultOptions, e as enUS, a as compareAsc, n as normalizeDates, d as differenceInSeconds, b as getTimezoneOffsetInMilliseconds, m as minutesInDay, f as minutesInMonth, h as differenceInMonths, i as addDays, j as addHours, _ as _export_sfc, k as createBlock, w as withCtx, V as VContainer, o as openBlock, l as createVNode, p as VDataTableServer, q as VDataTable, r as createBaseVNode, s as VBtn, t as createTextVNode, u as VCheckbox, v as createElementBlock, x as createCommentVNode, y as toDisplayString, z as renderSlot, A as normalizeClass, B as VAutocomplete, C as resolveComponent, D as VForm, E as VCard, F as VCardTitle, G as VCardText, H as VAlert, I as VRow, J as VCol, K as VSelect, L as VSwitch, M as VTextField, N as VCardActions, O as VSpacer, P as VExpansionPanel, Q as VExpansionPanelTitle, R as VExpansionPanelText, S as Fragment, T as renderList, U as VDialog, W as withDirectives, X as VProgressLinear, Y as Touch, Z as VMenu, $ as VDatePicker, a0 as mergeProps, a1 as format, a2 as VBtnGroup, a3 as VTooltip, a4 as VTable, a5 as VExpansionPanels, a6 as VFileInput, a7 as useGoTo, a8 as VToolbar, a9 as VAppBar, aa as VTabs, ab as VTab, ac as Scroll, ad as VChip, ae as VBtnToggle, af as VRadioGroup, ag as VRadio, ah as VBottomNavigation, ai as withKeys, aj as VDataTableFooter, ak as VLayout, al as startOfDay, am as VOverlay, an as formatISO, ao as VProgressCircular, ap as VDivider, aq as VLabel, ar as VCheckboxBtn, as as withModifiers, at as vShow, au as axios$1, av as VImg, aw as VTextarea, ax as VRating, ay as VIcon, az as VList, aA as VListItem, aB as VListItemTitle, aC as normalizeStyle, aD as vModelCheckbox, aE as resolveDirective, aF as VPagination, aG as createRouter, aH as createWebHistory, aI as VNavigationDrawer, aJ as VToolbarTitle, aK as VToolbarItems, aL as VAppBarNavIcon, aM as VApp, aN as createApp, aO as vuetify } from "./vuetify-EeS5qzD-.js";
import "./bootstrap-DAzZxGcG.js";
import { c as clone, a as cloneDeep, d as debounce } from "./debounce-DRMZstlG.js";
import { N as NewReportsComponent, c as createStore } from "./vuex.esm-bundler-qMrLOoJO.js";
import { F as FooterComponent } from "./FooterComponent-CXNDXtA5.js";
import "./bootstrap-BJGpzKVK.js";
import "./_commonjsHelpers-DyYX6rOH.js";
import "./_Uint8Array-C929yYkW.js";
function constructNow(date) {
  return constructFrom(date, Date.now());
}
function formatDistance(laterDate, earlierDate, options) {
  const defaultOptions = getDefaultOptions();
  const locale = (options == null ? void 0 : options.locale) ?? defaultOptions.locale ?? enUS;
  const minutesInAlmostTwoDays = 2520;
  const comparison = compareAsc(laterDate, earlierDate);
  if (isNaN(comparison)) throw new RangeError("Invalid time value");
  const localizeOptions = Object.assign({}, options, {
    addSuffix: options == null ? void 0 : options.addSuffix,
    comparison
  });
  const [laterDate_, earlierDate_] = normalizeDates(
    options == null ? void 0 : options.in,
    ...comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]
  );
  const seconds = differenceInSeconds(earlierDate_, laterDate_);
  const offsetInSeconds = (getTimezoneOffsetInMilliseconds(earlierDate_) - getTimezoneOffsetInMilliseconds(laterDate_)) / 1e3;
  const minutes = Math.round((seconds - offsetInSeconds) / 60);
  let months;
  if (minutes < 2) {
    if (options == null ? void 0 : options.includeSeconds) {
      if (seconds < 5) {
        return locale.formatDistance("lessThanXSeconds", 5, localizeOptions);
      } else if (seconds < 10) {
        return locale.formatDistance("lessThanXSeconds", 10, localizeOptions);
      } else if (seconds < 20) {
        return locale.formatDistance("lessThanXSeconds", 20, localizeOptions);
      } else if (seconds < 40) {
        return locale.formatDistance("halfAMinute", 0, localizeOptions);
      } else if (seconds < 60) {
        return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale.formatDistance("xMinutes", 1, localizeOptions);
      }
    } else {
      if (minutes === 0) {
        return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale.formatDistance("xMinutes", minutes, localizeOptions);
      }
    }
  } else if (minutes < 45) {
    return locale.formatDistance("xMinutes", minutes, localizeOptions);
  } else if (minutes < 90) {
    return locale.formatDistance("aboutXHours", 1, localizeOptions);
  } else if (minutes < minutesInDay) {
    const hours = Math.round(minutes / 60);
    return locale.formatDistance("aboutXHours", hours, localizeOptions);
  } else if (minutes < minutesInAlmostTwoDays) {
    return locale.formatDistance("xDays", 1, localizeOptions);
  } else if (minutes < minutesInMonth) {
    const days = Math.round(minutes / minutesInDay);
    return locale.formatDistance("xDays", days, localizeOptions);
  } else if (minutes < minutesInMonth * 2) {
    months = Math.round(minutes / minutesInMonth);
    return locale.formatDistance("aboutXMonths", months, localizeOptions);
  }
  months = differenceInMonths(earlierDate_, laterDate_);
  if (months < 12) {
    const nearestMonth = Math.round(minutes / minutesInMonth);
    return locale.formatDistance("xMonths", nearestMonth, localizeOptions);
  } else {
    const monthsSinceStartOfYear = months % 12;
    const years = Math.trunc(months / 12);
    if (monthsSinceStartOfYear < 3) {
      return locale.formatDistance("aboutXYears", years, localizeOptions);
    } else if (monthsSinceStartOfYear < 9) {
      return locale.formatDistance("overXYears", years, localizeOptions);
    } else {
      return locale.formatDistance("almostXYears", years + 1, localizeOptions);
    }
  }
}
function formatDistanceToNow(date, options) {
  return formatDistance(date, constructNow(date), options);
}
function subDays(date, amount, options) {
  return addDays(date, -1, options);
}
function subHours(date, amount, options) {
  return addHours(date, -5);
}
const _sfc_main$2b = {
  name: "AddressListComponent",
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  data: () => ({
    totalAddresses: 0,
    addresses: [],
    loading: true,
    headers: [
      {
        text: "ID",
        value: "AddressId",
        align: "left",
        sortable: false
      },
      { text: "AddressLine1", value: "AddressLine1" },
      { text: "AddressLine2", value: "AddressLine2" },
      { text: "City", value: "City" },
      { text: "PostalCode", value: "PostalCode" }
    ]
  }),
  mounted() {
    this.getDataFromApi();
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/affiliate/" + this.affiliateId + "?with=addresses";
      return axios.get(url).then((response) => {
        this.addresses = response.data.addresses;
        this.totalAddresses = response.data.addresses.length;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
function _sfc_render$2b(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VDataTableServer, {
        headers: _ctx.headers,
        items: _ctx.addresses,
        "items-length": _ctx.totalAddresses,
        loading: _ctx.loading,
        class: "v-outlined"
      }, null, 8, ["headers", "items", "items-length", "loading"])
    ]),
    _: 1
    /* STABLE */
  });
}
const AddressListComponent = /* @__PURE__ */ _export_sfc(_sfc_main$2b, [["render", _sfc_render$2b], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/AddressListComponent.vue"]]);
const _sfc_main$2a = {
  name: "ContactAddressListComponent",
  props: {
    addressheaders: {
      type: Array,
      required: true
    },
    addresses: {
      type: Array,
      required: true
    }
  }
};
const _hoisted_1$1y = { key: 0 };
const _hoisted_2$1f = { key: 0 };
function _sfc_render$2a(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VDataTable, {
    "hide-default-footer": true,
    headers: $props.addressheaders,
    items: $props.addresses,
    class: "mobile-global-card-table",
    "mobile-breakpoint": 992
  }, {
    [`item.Address`]: withCtx(({ item }) => [
      createBaseVNode(
        "p",
        null,
        toDisplayString(item.AddressLine1),
        1
        /* TEXT */
      ),
      createBaseVNode(
        "p",
        null,
        toDisplayString(item.AddressLine2),
        1
        /* TEXT */
      ),
      createBaseVNode(
        "p",
        null,
        toDisplayString(item.City) + ", " + toDisplayString(item.StateTerritory ? item.StateTerritory.StateTerritoryCode : "") + ", " + toDisplayString(item.PostalCode),
        1
        /* TEXT */
      )
    ]),
    [`item.ContactStatus`]: withCtx(({ item }) => [
      item.ContactStatus ? (openBlock(), createElementBlock(
        "span",
        _hoisted_1$1y,
        toDisplayString(item.ContactStatus.ContactStatusName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.ContactSource`]: withCtx(({ item }) => [
      item.ContactSource ? (openBlock(), createElementBlock(
        "span",
        _hoisted_2$1f,
        toDisplayString(item.ContactSource.ContactSourceName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.IsPreferred`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VCheckbox, {
          "model-value": item.IsPreferred,
          disabled: ""
        }, null, 8, ["model-value"])
      ])
    ]),
    [`item.AffiliateAddressId`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VBtn, {
          onClick: ($event) => _ctx.$emit("edit-address", item)
        }, {
          default: withCtx(() => _cache[0] || (_cache[0] = [
            createTextVNode("Edit")
          ])),
          _: 2
          /* DYNAMIC */
        }, 1032, ["onClick"])
      ])
    ]),
    _: 2
    /* DYNAMIC */
  }, 1032, ["headers", "items"]);
}
const ContactAddressListComponent$2 = /* @__PURE__ */ _export_sfc(_sfc_main$2a, [["render", _sfc_render$2a], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/Contact/ContactAddressListComponent.vue"]]);
const _sfc_main$29 = {
  name: "FlipCard",
  props: {
    flipped: {
      type: Boolean,
      required: true,
      default: false
    }
  }
};
const _hoisted_1$1x = { class: "front" };
const _hoisted_2$1e = { class: "back" };
function _sfc_render$29(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    "div",
    {
      class: normalizeClass($props.flipped ? "flip-container flipped" : "flip-container")
    },
    [
      createBaseVNode("div", _hoisted_1$1x, [
        renderSlot(_ctx.$slots, "front", {}, void 0, true)
      ]),
      createBaseVNode("div", _hoisted_2$1e, [
        renderSlot(_ctx.$slots, "back", {}, void 0, true)
      ])
    ],
    2
    /* CLASS */
  );
}
const FlipCard = /* @__PURE__ */ _export_sfc(_sfc_main$29, [["render", _sfc_render$29], ["__scopeId", "data-v-df0c4243"], ["__file", "/var/www/html/resources/js/components/Common/Card/FlipCard.vue"]]);
const emptySelectMixin = {
  methods: {
    addEmptyElement(data, labelName, valueName) {
      const empty = {};
      empty[labelName] = "";
      empty[valueName] = "";
      data.unshift(empty);
      return data;
    }
  }
};
const _sfc_main$28 = {
  name: "StateTerritorySelectComponent",
  mixins: [emptySelectMixin],
  props: {
    label: {
      default: "State"
    },
    itemValue: {
      default: "StateTerritoryId"
    },
    itemText: {
      default: "StateTerritoryName"
    },
    value: {
      required: true
    },
    rules: {
      type: Array,
      default: () => [true],
      required: false
    }
  },
  created() {
    this.$store.dispatch("stateTerritory/getStateTerritories");
  },
  computed: {
    model: {
      get() {
        return this.value;
      },
      set(newValue) {
        this.$emit("input", newValue);
      }
    },
    stateTerritories() {
      return this.addEmptyElement(this.$store.getters["stateTerritory/stateTerritories"], this.itemText, this.itemValue);
    }
  }
};
const _hoisted_1$1w = {
  key: 0,
  class: "text-red"
};
function _sfc_render$28(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VAutocomplete, {
    items: $options.stateTerritories,
    "item-value": $props.itemValue,
    "item-title": $props.itemText,
    modelValue: $options.model,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $options.model = $event),
    rules: $props.rules,
    variant: "underlined"
  }, {
    label: withCtx(() => [
      $props.rules[0] ? (openBlock(), createElementBlock("span", _hoisted_1$1w, "* ")) : createCommentVNode("v-if", true),
      createTextVNode(
        toDisplayString($props.label),
        1
        /* TEXT */
      )
    ]),
    _: 1
    /* STABLE */
  }, 8, ["items", "item-value", "item-title", "modelValue", "rules"]);
}
const StateTerritorySelectComponent = /* @__PURE__ */ _export_sfc(_sfc_main$28, [["render", _sfc_render$28], ["__file", "/var/www/html/resources/js/components/Common/StateTerritorySelectComponent.vue"]]);
const _sfc_main$27 = {
  name: "AffiliateAddressComponent",
  components: { StateTerritorySelectComponent },
  props: {
    affiliate: {
      type: Object,
      required: true
    },
    savedAddress: {
      type: Object,
      required: false
    }
  },
  computed: {
    saveButtonLabel() {
      return this.savedAddress ? "Save" : "save and close";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    savedAddress: {
      handler(data) {
        this.setEditAddress();
      },
      deep: true
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/AffiliateAddressType").then((response) => {
      this.addressTypes = response.data.data;
    });
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      addressTypes: [],
      address: { ContactStatusId: 4 },
      rules: {
        required: (value) => !!value || "Required."
      },
      emptyAddress: {
        AffiliateAddressTypeId: null,
        ContactStatusId: 4,
        ContactSourceId: null,
        IsPreferred: false,
        AddressLine1: null,
        AddressLine2: null,
        City: null,
        StateTerritoryId: null,
        PostalCode: null,
        AffiliateId: this.affiliate.AffiliateId
      }
    };
  },
  methods: {
    saveNewAddress() {
      if (!this.$refs.form.validate()) {
        return;
      }
      this.address.AffiliateId = this.affiliate.AffiliateId;
      if (this.address.ContactStatusId === 4) {
        this.address.IsPreferred = typeof this.address.IsPreferred === "undefined" || this.address.IsPreferred === null ? false : this.address.IsPreferred;
      } else {
        if (this.address.IsPreferred) {
          this.alert = true;
          this.alertType = "error";
          this.alertText = "Address must be in verified status, to be marked as preferred.";
          return;
        }
      }
      if (this.savedAddress) {
        axios.put("/api/v2/AffiliateAddress/" + this.savedAddress.AffiliateAddressId + "?include=ContactStatus,ContactSource", this.address).then((response) => {
          this.handleAddressSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/AffiliateAddress?include=ContactStatus,ContactSource", this.address).then((response) => {
          this.resetAddress();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Address saved.";
          this.handleAddressSaved(response.data.data, false, true);
        });
      }
    },
    saveCloseAddress() {
      if (!this.$refs.form.validate()) {
        return;
      }
      this.address.AffiliateId = this.affiliate.AffiliateId;
      if (this.address.ContactStatusId === 4) {
        this.address.IsPreferred = typeof this.address.IsPreferred === "undefined" || this.address.IsPreferred === null ? false : this.address.IsPreferred;
      } else {
        if (this.address.IsPreferred) {
          this.alert = true;
          this.alertType = "error";
          this.alertText = "Address must be in verified status, to be marked as preferred.";
          return;
        }
      }
      if (this.savedAddress) {
        axios.put("/api/v2/AffiliateAddress/" + this.savedAddress.AffiliateAddressId + "?include=ContactStatus,ContactSource", this.address).then((response) => {
          this.handleAddressSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/AffiliateAddress?include=ContactStatus,ContactSource", this.address).then((response) => {
          this.resetAddress();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Address saved.";
          this.handleAddressSaved(response.data.data, true, true);
        });
      }
    },
    cancel() {
      this.setEditAddress();
      this.$emit("cancel-add-address");
    },
    handleAddressSaved(addressData, flip, isNew) {
      this.$emit("saved-address", { address: addressData, flip, isNew });
    },
    resetAddress() {
      for (const field in this.emptyAddress) {
        if (this.emptyAddress.hasOwnProperty(field)) {
          this.address[field] = this.emptyAddress[field];
        }
      }
    },
    setEditAddress() {
      this.address = clone(this.savedAddress) || clone(this.emptyAddress);
    }
  }
};
const _hoisted_1$1v = { class: "data-container" };
const _hoisted_2$1d = { class: "data-container" };
const _hoisted_3$_ = { class: "data-container" };
const _hoisted_4$P = { class: "data-container" };
function _sfc_render$27(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_StateTerritorySelectComponent = resolveComponent("StateTerritorySelectComponent");
  return openBlock(), createBlock(VForm, {
    ref: "form",
    modelValue: $data.valid,
    "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => $data.valid = $event)
  }, {
    default: withCtx(() => [
      createVNode(VCard, null, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => _cache[14] || (_cache[14] = [
              createTextVNode("New Address")
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              createVNode(VAlert, {
                type: $data.alertType,
                modelValue: $data.alert,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
                closable: "",
                "close-text": "Dismiss"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($data.alertText),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }, 8, ["type", "modelValue"]),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "3"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_1$1v, [
                        createVNode(VSelect, {
                          items: $data.addressTypes,
                          label: "Address Type",
                          "item-value": "AffiliateAddressTypeId",
                          "item-title": "AffiliateAddressTypeName",
                          modelValue: $data.address.AffiliateAddressTypeId,
                          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.address.AffiliateAddressTypeId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "3"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_2$1d, [
                        createVNode(VSelect, {
                          items: $options.contactStatus,
                          label: "Address Status",
                          "item-value": "ContactStatusId",
                          "item-title": "ContactStatusName",
                          modelValue: $data.address.ContactStatusId,
                          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.address.ContactStatusId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_3$_, [
                        createVNode(VSelect, {
                          items: $options.contactSources,
                          "item-value": "ContactSourceId",
                          "item-title": "ContactSourceName",
                          label: "Address Source",
                          modelValue: $data.address.ContactSourceId,
                          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.address.ContactSourceId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "2",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Preferred Address",
                        modelValue: $data.address.IsPreferred,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.address.IsPreferred = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "8"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Street Address",
                        rules: [$data.rules.required],
                        modelValue: $data.address.AddressLine1,
                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.address.AddressLine1 = $event),
                        maxlength: 200,
                        variant: "underlined"
                      }, null, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Suite/Apt",
                        modelValue: $data.address.AddressLine2,
                        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.address.AddressLine2 = $event),
                        maxlength: 200,
                        variant: "underlined"
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "City",
                        rules: [$data.rules.required],
                        modelValue: $data.address.City,
                        "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.address.City = $event),
                        maxlength: 100,
                        variant: "underlined"
                      }, null, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_4$P, [
                        createVNode(_component_StateTerritorySelectComponent, {
                          "item-text": "StateTerritoryName",
                          "item-value": "StateTerritoryId",
                          label: "State",
                          modelValue: $data.address.StateTerritoryId,
                          "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.address.StateTerritoryId = $event)
                        }, null, 8, ["modelValue"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Zip Code",
                        rules: [$data.rules.required],
                        modelValue: $data.address.PostalCode,
                        "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.address.PostalCode = $event),
                        maxlength: 15,
                        variant: "underlined"
                      }, null, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardActions, null, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                onClick: _cache[10] || (_cache[10] = ($event) => $options.cancel()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[15] || (_cache[15] = [
                  createTextVNode("Cancel")
                ])),
                _: 1
                /* STABLE */
              }),
              !this.savedAddress ? (openBlock(), createBlock(VBtn, {
                key: 0,
                color: "secondary",
                href: "",
                onClick: _cache[11] || (_cache[11] = ($event) => $options.saveNewAddress()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[16] || (_cache[16] = [
                  createTextVNode("save and continue adding...")
                ])),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              createVNode(VBtn, {
                color: "success",
                href: "",
                onClick: _cache[12] || (_cache[12] = ($event) => $options.saveCloseAddress()),
                variant: "elevated"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($options.saveButtonLabel),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue"]);
}
const AffiliateAddressComponent = /* @__PURE__ */ _export_sfc(_sfc_main$27, [["render", _sfc_render$27], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/Edit/Contact/AffiliateAddressComponent.vue"]]);
const markAsPreferredMixin = {
  methods: {
    handleIsPreferred(items, changedItem, comparisonField, secondaryComparisonField) {
      if (!changedItem.IsPreferred) {
        return;
      }
      items.filter((item) => {
        if (secondaryComparisonField && secondaryComparisonField !== "") {
          return item.IsPreferred && item[comparisonField] !== changedItem[comparisonField] && item[secondaryComparisonField] === changedItem[secondaryComparisonField];
        } else {
          return item.IsPreferred && item[comparisonField] !== changedItem[comparisonField];
        }
      }).forEach((preferredItem) => {
        preferredItem.IsPreferred = false;
      });
    }
  }
};
const contactsMixin = {
  data() {
    return {
      alert: false,
      alertType: "success",
      alertText: ""
    };
  },
  methods: {
    onAdd() {
      this.alert = false;
      this.selected = null;
      this.flipped = true;
    },
    onEdit(event) {
      this.alert = false;
      this.selected = event;
      this.flipped = true;
    },
    alertSuccessMessageForSave(contactTypeName) {
      this.alert = true;
      this.alertType = "success";
      this.alertText = contactTypeName + " saved.";
    }
  }
};
const _sfc_main$26 = {
  name: "AddressInformationComponent",
  components: { AffiliateAddressComponent, FlipCard, ContactAddressListComponent: ContactAddressListComponent$2, AddressListComponent },
  mixins: [markAsPreferredMixin, contactsMixin],
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  beforeMount() {
    axios.get("/api/v2/affiliateAddressType").then((response) => {
      this.addressTypes = response.data.data;
    });
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/affiliate/" + this.affiliateId + "?scope=global&include=affiliateAddresses,affiliateAddresses.StateTerritory,affiliateAddresses.ContactSource,affiliateAddresses.ContactStatus").then((response) => {
        this.addresses = response.data.data.affiliateAddresses;
        this.affiliate = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    getAddressTypeByName(name) {
      const matchingAddressTypes = this.addressTypes.filter((addressType) => addressType.AffiliateAddressTypeName === name);
      if (matchingAddressTypes.length > 0) {
        return matchingAddressTypes[0].AffiliateAddressTypeId;
      }
      return 0;
    },
    getAddressesByType(typeId, ignoreTypes) {
      return this.addresses.filter((address) => {
        return ignoreTypes.length > 0 ? !address.AffiliateAddressTypeId || ignoreTypes.indexOf(address.AffiliateAddressTypeId) === -1 : address.AffiliateAddressTypeId && address.AffiliateAddressTypeId === typeId;
      });
    },
    onAddressSaved(event) {
      if (!event.address) {
        return;
      }
      if (event.isNew) {
        this.addresses.push(event.address);
      } else {
        const index = this.addresses.findIndex((address) => {
          return address.AffiliateAddressId === event.address.AffiliateAddressId;
        });
        if (index >= 0) {
          this.addresses[index] = event.address;
        }
      }
      this.handleIsPreferred(this.addresses, event.address, "AffiliateAddressId", "AffiliateAddressTypeId");
      this.addresses = [...this.addresses];
      this.alertSuccessMessageForSave("Address");
      if (event.flip) {
        this.flipped = false;
      }
    }
  },
  data() {
    return {
      addresses: [],
      affiliate: {},
      flipped: false,
      addressheaders: [
        { title: "Address", value: "Address" },
        { title: "Status", value: "ContactStatus" },
        { title: "Source", value: "ContactSource" },
        { title: "Preferred", value: "IsPreferred" },
        { title: "Action", value: "AffiliateAddressId" }
      ],
      addressTypes: [],
      selected: null
    };
  }
};
function _sfc_render$26(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_contact_address_list_component = resolveComponent("contact-address-list-component");
  const _component_affiliate_address_component = resolveComponent("affiliate-address-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[2] || (_cache[2] = [
          createTextVNode(" Address ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        onClick: _ctx.onAdd
                      }, {
                        default: withCtx(() => _cache[3] || (_cache[3] = [
                          createTextVNode("Add address")
                        ])),
                        _: 1
                        /* STABLE */
                      }, 8, ["onClick"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(VAlert, {
                        type: _ctx.alertType,
                        modelValue: _ctx.alert,
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.alert = $event),
                        closable: "",
                        "close-text": "Dismiss"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(_ctx.alertText),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["type", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      _cache[4] || (_cache[4] = createBaseVNode(
                        "h4",
                        null,
                        "Main",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_address_list_component, {
                        addresses: $options.getAddressesByType($options.getAddressTypeByName("Main"), []),
                        addressheaders: $data.addressheaders,
                        onEditAddress: _ctx.onEdit
                      }, null, 8, ["addresses", "addressheaders", "onEditAddress"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      _cache[5] || (_cache[5] = createBaseVNode(
                        "h4",
                        null,
                        "Per Capita Billing",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_address_list_component, {
                        addresses: $options.getAddressesByType($options.getAddressTypeByName("Per Capita Billing Address"), []),
                        addressheaders: $data.addressheaders,
                        onEditAddress: _ctx.onEdit
                      }, null, 8, ["addresses", "addressheaders", "onEditAddress"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      _cache[6] || (_cache[6] = createBaseVNode(
                        "h4",
                        null,
                        "Other",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_address_list_component, {
                        addresses: $options.getAddressesByType($options.getAddressTypeByName("Other"), []),
                        addressheaders: $data.addressheaders,
                        onEditAddress: _ctx.onEdit
                      }, null, 8, ["addresses", "addressheaders", "onEditAddress"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            back: withCtx(() => [
              createVNode(_component_affiliate_address_component, {
                affiliate: $data.affiliate,
                "saved-address": $data.selected,
                onSavedAddress: $options.onAddressSaved,
                onCancelAddAddress: _cache[1] || (_cache[1] = ($event) => $data.flipped = false)
              }, null, 8, ["affiliate", "saved-address", "onSavedAddress"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const AddressInformationComponent$2 = /* @__PURE__ */ _export_sfc(_sfc_main$26, [["render", _sfc_render$26], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/Contact/AddressInformationComponent.vue"]]);
const _sfc_main$25 = {
  name: "ContactEmailListComponent",
  props: {
    emailheaders: {
      type: Array,
      required: true
    },
    emails: {
      type: Array,
      required: true
    }
  }
};
const _hoisted_1$1u = { key: 0 };
const _hoisted_2$1c = { key: 0 };
function _sfc_render$25(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VDataTable, {
    "hide-default-footer": true,
    headers: $props.emailheaders,
    items: $props.emails,
    class: "mobile-global-card-table",
    "mobile-breakpoint": 992
  }, {
    [`item.Email`]: withCtx(({ item }) => [
      createBaseVNode(
        "span",
        null,
        toDisplayString(item.Email),
        1
        /* TEXT */
      )
    ]),
    [`item.ContactStatus`]: withCtx(({ item }) => [
      item.ContactStatus ? (openBlock(), createElementBlock(
        "span",
        _hoisted_1$1u,
        toDisplayString(item.ContactStatus.ContactStatusName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.ContactSource`]: withCtx(({ item }) => [
      item.ContactSource ? (openBlock(), createElementBlock(
        "span",
        _hoisted_2$1c,
        toDisplayString(item.ContactSource.ContactSourceName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.IsPreferred`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        item.IsPreferred == 1 ? (openBlock(), createBlock(VCheckbox, {
          key: 0,
          "model-value": "true",
          disabled: ""
        })) : createCommentVNode("v-if", true),
        item.IsPreferred == 0 ? (openBlock(), createBlock(VCheckbox, {
          key: 1,
          value: "",
          disabled: ""
        })) : createCommentVNode("v-if", true)
      ])
    ]),
    [`item.CanContact`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VCheckbox, {
          "model-value": item.CanContact,
          disabled: ""
        }, null, 8, ["model-value"])
      ])
    ]),
    [`item.AffiliateEmailId`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VBtn, {
          onClick: ($event) => _ctx.$emit("edit-email", item)
        }, {
          default: withCtx(() => _cache[0] || (_cache[0] = [
            createTextVNode("Edit")
          ])),
          _: 2
          /* DYNAMIC */
        }, 1032, ["onClick"])
      ])
    ]),
    _: 2
    /* DYNAMIC */
  }, 1032, ["headers", "items"]);
}
const ContactEmailListComponent$2 = /* @__PURE__ */ _export_sfc(_sfc_main$25, [["render", _sfc_render$25], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/Contact/ContactEmailListComponent.vue"]]);
const _sfc_main$24 = {
  name: "AffiliateEmailComponent",
  props: {
    affiliate: {
      type: Object,
      required: true
    },
    savedEmail: {
      type: Object,
      required: false
    }
  },
  computed: {
    saveButtonLabel() {
      return this.savedEmail ? "Save" : "save and close";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    savedEmail: {
      handler(data) {
        this.setEditEmail();
      },
      deep: true
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/AffiliateEmailType").then((response) => {
      this.emailTypes = response.data.data;
    });
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      emailTypes: [],
      email: { ContactStatusId: 4 },
      rules: {
        required: (value) => !!value || "Required.",
        email: (value) => {
          const pattern = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
          return pattern.test(value) || "Invalid e-mail.";
        }
      },
      emptyEmail: {
        AffiliateEmailTypeId: null,
        ContactStatusId: 4,
        ContactSourceId: null,
        IsPreferred: false,
        CanContact: false,
        Email: null,
        AffiliateId: this.affiliate.AffiliateId
      }
    };
  },
  methods: {
    saveNewEmail() {
      if (!this.$refs.form.validate()) {
        return;
      }
      this.email.AffiliateId = this.affiliate.AffiliateId;
      this.email.CanContact = typeof this.email.CanContact === "undefined" || this.email.CanContact === null ? false : this.email.CanContact;
      if (this.email.ContactStatusId === 4) {
        this.email.IsPreferred = typeof this.email.IsPreferred === "undefined" || this.email.IsPreferred === null ? false : this.email.IsPreferred;
      } else {
        if (this.email.IsPreferred) {
          this.alert = true;
          this.alertType = "error";
          this.alertText = "Email must be in verified status, to be marked as preferred.";
          return;
        }
      }
      this.email.CanContactRestrictionId = 1;
      if (this.savedEmail) {
        axios.put("/api/v2/AffiliateEmail/" + this.savedEmail.AffiliateEmailId + "?include=ContactStatus,ContactSource", this.email).then((response) => {
          this.handleEmailSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/AffiliateEmail?include=ContactStatus,ContactSource", this.email).then((response) => {
          this.resetEmail();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Email saved.";
          this.handleEmailSaved(response.data.data, false, true);
        });
      }
    },
    saveCloseEmail() {
      if (!this.$refs.form.validate()) {
        return;
      }
      this.email.AffiliateId = this.affiliate.AffiliateId;
      this.email.CanContact = typeof this.email.CanContact === "undefined" || this.email.CanContact === null ? false : this.email.CanContact;
      if (this.email.ContactStatusId === 4) {
        this.email.IsPreferred = typeof this.email.IsPreferred === "undefined" || this.email.IsPreferred === null ? false : this.email.IsPreferred;
      } else {
        if (this.email.IsPreferred) {
          this.alert = true;
          this.alertType = "error";
          this.alertText = "Email must be in verified status, to be marked as preferred.";
          return;
        }
      }
      this.email.CanContactRestrictionId = 1;
      if (this.savedEmail) {
        axios.put("/api/v2/AffiliateEmail/" + this.savedEmail.AffiliateEmailId + "?include=ContactStatus,ContactSource", this.email).then((response) => {
          this.handleEmailSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/AffiliateEmail?include=ContactStatus,ContactSource", this.email).then((response) => {
          this.resetEmail();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Email saved.";
          this.handleEmailSaved(response.data.data, true, true);
        });
      }
    },
    cancel() {
      this.setEditEmail();
      this.$emit("cancel-add-email");
    },
    handleEmailSaved(emailData, flip, isNew) {
      this.$emit("saved-email", { email: emailData, flip, isNew });
    },
    resetEmail() {
      for (const field in this.emptyEmail) {
        if (this.emptyEmail.hasOwnProperty(field)) {
          this.email[field] = this.emptyEmail[field];
        }
      }
    },
    setEditEmail() {
      this.email = clone(this.savedEmail) || clone(this.emptyEmail);
    }
  }
};
const _hoisted_1$1t = { class: "data-container" };
const _hoisted_2$1b = { class: "data-container" };
const _hoisted_3$Z = { class: "data-container" };
function _sfc_render$24(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VForm, {
    ref: "form",
    modelValue: $data.valid,
    "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $data.valid = $event)
  }, {
    default: withCtx(() => [
      createVNode(VCard, null, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => _cache[11] || (_cache[11] = [
              createTextVNode("New Email")
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              createVNode(VAlert, {
                type: $data.alertType,
                modelValue: $data.alert,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
                closable: "",
                "close-text": "Dismiss"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($data.alertText),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }, 8, ["type", "modelValue"]),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_1$1t, [
                        createVNode(VSelect, {
                          items: $data.emailTypes,
                          label: "Email Type",
                          "item-value": "AffiliateEmailTypeId",
                          "item-title": "AffiliateEmailTypeName",
                          modelValue: $data.email.AffiliateEmailTypeId,
                          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.email.AffiliateEmailTypeId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_2$1b, [
                        createVNode(VSelect, {
                          items: $options.contactStatus,
                          label: "Email Status",
                          "item-value": "ContactStatusId",
                          "item-title": "ContactStatusName",
                          modelValue: $data.email.ContactStatusId,
                          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.email.ContactStatusId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_3$Z, [
                        createVNode(VSelect, {
                          items: $options.contactSources,
                          "item-value": "ContactSourceId",
                          "item-title": "ContactSourceName",
                          label: "Email Source",
                          modelValue: $data.email.ContactSourceId,
                          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.email.ContactSourceId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Preferred Email",
                        modelValue: $data.email.IsPreferred,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.email.IsPreferred = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Can Contact",
                        modelValue: $data.email.CanContact,
                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.email.CanContact = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Email",
                        rules: [$data.rules.required, $data.rules.email],
                        modelValue: $data.email.Email,
                        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.email.Email = $event),
                        maxlength: 200,
                        variant: "underlined"
                      }, null, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardActions, null, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                onClick: _cache[7] || (_cache[7] = ($event) => $options.cancel()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[12] || (_cache[12] = [
                  createTextVNode("Cancel")
                ])),
                _: 1
                /* STABLE */
              }),
              !this.savedEmail ? (openBlock(), createBlock(VBtn, {
                key: 0,
                color: "secondary",
                href: "",
                onClick: _cache[8] || (_cache[8] = ($event) => $options.saveNewEmail()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[13] || (_cache[13] = [
                  createTextVNode("save and continue adding...")
                ])),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              createVNode(VBtn, {
                color: "success",
                href: "",
                onClick: _cache[9] || (_cache[9] = ($event) => $options.saveCloseEmail()),
                variant: "elevated"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($options.saveButtonLabel),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue"]);
}
const AffiliateEmailComponent = /* @__PURE__ */ _export_sfc(_sfc_main$24, [["render", _sfc_render$24], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/Edit/Contact/AffiliateEmailComponent.vue"]]);
const _sfc_main$23 = {
  name: "EmailInformationComponent",
  components: {
    AffiliateEmailComponent,
    ContactEmailListComponent: ContactEmailListComponent$2,
    FlipCard
  },
  mixins: [markAsPreferredMixin, contactsMixin],
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/affiliate/" + this.affiliateId + "?scope=global&include=affiliateEmails,affiliateEmails.ContactSource,affiliateEmails.ContactStatus").then((response) => {
        this.emails = response.data.data.affiliateEmails;
        this.affiliate = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    getEmailbyType(typeId, ignoreTypes) {
      return this.emails.filter((address) => {
        return ignoreTypes.length > 0 ? !address.AffiliateEmailTypeId || ignoreTypes.indexOf(address.AffiliateEmailTypeId) === -1 : address.AffiliateEmailTypeId && address.AffiliateEmailTypeId === typeId;
      });
    },
    onEmailSaved(event) {
      if (!event.email) {
        return;
      }
      if (event.isNew) {
        this.emails.push(event.email);
      } else {
        const index = this.emails.findIndex((email) => {
          return email.AffiliateEmailId === event.email.AffiliateEmailId;
        });
        if (index >= 0) {
          this.emails[index] = event.email;
        }
      }
      this.handleIsPreferred(this.emails, event.email, "AffiliateEmailId", "AffiliateEmailTypeId");
      this.emails = [...this.emails];
      this.alertSuccessMessageForSave("Email");
      if (event.flip) {
        this.flipped = false;
      }
    }
  },
  data() {
    return {
      emails: [],
      affiliate: {},
      flipped: false,
      emailheaders: [
        { title: "Email", value: "Email" },
        { title: "Status", value: "ContactStatus" },
        { title: "Source", value: "ContactSource" },
        { title: "Preferred", value: "IsPreferred" },
        { title: "Can Contact", value: "CanContact" },
        { title: "Action", value: "AffiliateEmailId" }
      ],
      selected: null
    };
  }
};
function _sfc_render$23(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_contact_email_list_component = resolveComponent("contact-email-list-component");
  const _component_affiliate_email_component = resolveComponent("affiliate-email-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[3] || (_cache[3] = [
          createTextVNode(" Emails ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.onAdd())
                      }, {
                        default: withCtx(() => _cache[4] || (_cache[4] = [
                          createTextVNode("Add email address")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(VAlert, {
                        type: _ctx.alertType,
                        modelValue: _ctx.alert,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.alert = $event),
                        closable: "",
                        "close-text": "Dismiss"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(_ctx.alertText),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["type", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              _cache[5] || (_cache[5] = createBaseVNode(
                "h4",
                null,
                "Main",
                -1
                /* HOISTED */
              )),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(_component_contact_email_list_component, {
                        emails: $options.getEmailbyType(1, []),
                        emailheaders: $data.emailheaders,
                        onEditEmail: _ctx.onEdit
                      }, null, 8, ["emails", "emailheaders", "onEditEmail"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              _cache[6] || (_cache[6] = createBaseVNode(
                "h4",
                null,
                "Per Capita Billing",
                -1
                /* HOISTED */
              )),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(_component_contact_email_list_component, {
                        emails: $options.getEmailbyType(3, []),
                        emailheaders: $data.emailheaders,
                        onEditEmail: _ctx.onEdit
                      }, null, 8, ["emails", "emailheaders", "onEditEmail"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              _cache[7] || (_cache[7] = createBaseVNode(
                "h4",
                null,
                "Other",
                -1
                /* HOISTED */
              )),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(_component_contact_email_list_component, {
                        emails: $options.getEmailbyType(2, []),
                        emailheaders: $data.emailheaders,
                        onEditEmail: _ctx.onEdit
                      }, null, 8, ["emails", "emailheaders", "onEditEmail"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            back: withCtx(() => [
              createVNode(_component_affiliate_email_component, {
                affiliate: $data.affiliate,
                "saved-email": $data.selected,
                onSavedEmail: $options.onEmailSaved,
                onCancelAddEmail: _cache[2] || (_cache[2] = ($event) => $data.flipped = false)
              }, null, 8, ["affiliate", "saved-email", "onSavedEmail"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const EmailInformationComponent$2 = /* @__PURE__ */ _export_sfc(_sfc_main$23, [["render", _sfc_render$23], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/Contact/EmailInformationComponent.vue"]]);
const _sfc_main$22 = {
  name: "PhoneListComponent",
  props: {
    phoneHeaders: {
      type: Array,
      required: true
    },
    phones: {
      type: Array,
      required: true
    }
  }
};
const _hoisted_1$1s = { key: 0 };
const _hoisted_2$1a = { key: 0 };
function _sfc_render$22(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VDataTable, {
    "hide-default-footer": true,
    headers: $props.phoneHeaders,
    items: $props.phones,
    class: "mobile-global-card-table",
    "mobile-breakpoint": 992
  }, {
    [`item.fullPhone`]: withCtx(({ item }) => [
      createBaseVNode(
        "span",
        null,
        toDisplayString(item.fullPhone),
        1
        /* TEXT */
      )
    ]),
    [`item.ContactStatus`]: withCtx(({ item }) => [
      item.ContactStatus ? (openBlock(), createElementBlock(
        "span",
        _hoisted_1$1s,
        toDisplayString(item.ContactStatus.ContactStatusName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.ContactSource`]: withCtx(({ item }) => [
      item.ContactSource ? (openBlock(), createElementBlock(
        "span",
        _hoisted_2$1a,
        toDisplayString(item.ContactSource.ContactSourceName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.CanTextRestrictionId`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VCheckbox, {
          "model-value": item.CanTextRestrictionId,
          disabled: ""
        }, null, 8, ["model-value"])
      ])
    ]),
    [`item.IsPreferred`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VCheckbox, {
          "model-value": item.IsPreferred,
          disabled: ""
        }, null, 8, ["model-value"])
      ])
    ]),
    [`item.CanCallRestrictionId`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VCheckbox, {
          "model-value": item.CanCallRestrictionId,
          disabled: ""
        }, null, 8, ["model-value"])
      ])
    ]),
    [`item.AffiliatePhoneId`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VBtn, {
          onClick: ($event) => _ctx.$emit("edit-phone", item)
        }, {
          default: withCtx(() => _cache[0] || (_cache[0] = [
            createTextVNode("Edit")
          ])),
          _: 2
          /* DYNAMIC */
        }, 1032, ["onClick"])
      ])
    ]),
    _: 2
    /* DYNAMIC */
  }, 1032, ["headers", "items"]);
}
const PhoneListComponent$2 = /* @__PURE__ */ _export_sfc(_sfc_main$22, [["render", _sfc_render$22], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/Contact/PhoneListComponent.vue"]]);
const _sfc_main$21 = {
  name: "AffiliatePhoneComponent",
  props: {
    affiliate: {
      type: Object,
      required: true
    },
    savedPhone: {
      type: Object,
      required: false
    }
  },
  computed: {
    saveButtonLabel() {
      return this.savedPhone ? "Save" : "save and close";
    },
    pageTitle() {
      return this.savedPhone ? "Edit Phone" : "New Phone";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    savedPhone() {
      this.setEditPhone();
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/AffiliatePhoneType").then((response) => {
      this.phoneTypes = response.data.data;
    });
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      phoneTypes: [],
      phone: { ContactStatusId: 4 },
      rules: {
        required: (value) => !!value || "Required.",
        phone: (value) => {
          const pattern = /^([0-9\(\)\/\+ \-]*)$/;
          return pattern.test(value) || "Please enter a valid phone number.";
        }
      },
      emptyPhone: {
        AffiliatePhoneTypeId: null,
        ContactStatusId: 4,
        ContactSourceId: null,
        IsPreferred: false,
        isTextAllowed: false,
        CanContact: false,
        PhoneNumber: null,
        Extension: null,
        CanCallRestrictionId: null,
        AffiliateId: this.affiliate.AffiliateId
      }
    };
  },
  methods: {
    saveNewPhone() {
      if (!this.$refs.form.validate()) {
        return;
      }
      this.phone.AffiliateId = this.affiliate.AffiliateId;
      if (this.phone.ContactStatusId === 4) {
        this.phone.IsPreferred = typeof this.phone.IsPreferred === "undefined" || this.phone.IsPreferred === null ? false : this.phone.IsPreferred;
      } else {
        if (this.phone.IsPreferred) {
          this.alert = true;
          this.alertType = "error";
          this.alertText = "Phone must be in verified status, to be marked as preferred.";
          return;
        }
      }
      this.phone.CanTextRestrictionId = this.phone.isTextAllowed === true ? 1 : 2;
      this.phone.CanCallRestrictionId = this.phone.isCallAllowed === true ? 1 : 2;
      if (this.savedPhone) {
        axios.put("/api/v2/AffiliatePhone/" + this.savedPhone.AffiliatePhoneId + "?include=ContactStatus,ContactSource", this.phone).then((response) => {
          this.handlePhoneSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/AffiliatePhone?include=ContactStatus,ContactSource", this.phone).then((response) => {
          this.resetPhone();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Phone saved.";
          this.handlePhoneSaved(response.data.data, false, true);
        });
      }
    },
    saveClosePhone() {
      if (!this.$refs.form.validate()) {
        return;
      }
      this.phone.AffiliateId = this.affiliate.AffiliateId;
      if (this.phone.ContactStatusId === 4) {
        this.phone.IsPreferred = typeof this.phone.IsPreferred === "undefined" || this.phone.IsPreferred === null ? false : this.phone.IsPreferred;
      } else {
        if (this.phone.IsPreferred) {
          this.alert = true;
          this.alertType = "error";
          this.alertText = "Phone must be in verified status, to be marked as preferred.";
          return;
        }
      }
      this.phone.CanTextRestrictionId = this.phone.isTextAllowed === true ? 1 : 2;
      this.phone.CanCallRestrictionId = this.phone.isCallAllowed === true ? 1 : 2;
      if (this.savedPhone) {
        axios.put("/api/v2/AffiliatePhone/" + this.savedPhone.AffiliatePhoneId + "?include=ContactStatus,ContactSource", this.phone).then((response) => {
          this.handlePhoneSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/AffiliatePhone?include=ContactStatus,ContactSource", this.phone).then((response) => {
          this.resetPhone();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Phone saved.";
          this.handlePhoneSaved(response.data.data, true, true);
        });
      }
    },
    cancel() {
      this.setEditPhone();
      this.$emit("cancel-add-phone");
    },
    handlePhoneSaved(phoneData, flip, isNew) {
      this.$emit("saved-phone", { phone: phoneData, flip, isNew });
    },
    resetPhone() {
      for (const field in this.emptyPhone) {
        if (this.emptyPhone.hasOwnProperty(field)) {
          this.phone[field] = this.emptyPhone[field];
        }
      }
    },
    setEditPhone() {
      var _a2, _b;
      if (this.savedPhone) {
        this.phone = clone(this.savedPhone);
        this.phone.isTextAllowed = ((_a2 = this.savedPhone) == null ? void 0 : _a2.CanTextRestrictionId) === 1;
        this.phone.isCallAllowed = ((_b = this.savedPhone) == null ? void 0 : _b.CanCallRestrictionId) === 1;
      } else {
        this.phone = clone(this.emptyPhone);
      }
    }
  }
};
const _hoisted_1$1r = { class: "data-container" };
const _hoisted_2$19 = { class: "data-container" };
const _hoisted_3$Y = { class: "data-container" };
function _sfc_render$21(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VForm, {
    ref: "form",
    modelValue: $data.valid,
    "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => $data.valid = $event)
  }, {
    default: withCtx(() => [
      createVNode(VCard, null, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($options.pageTitle),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              createVNode(VAlert, {
                type: $data.alertType,
                modelValue: $data.alert,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
                closable: "",
                "close-text": "Dismiss"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($data.alertText),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }, 8, ["type", "modelValue"]),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_1$1r, [
                        createVNode(VSelect, {
                          items: $data.phoneTypes,
                          label: "Phone Type",
                          "item-value": "AffiliatePhoneTypeId",
                          "item-title": "AffiliatePhoneTypeName",
                          modelValue: $data.phone.AffiliatePhoneTypeId,
                          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.phone.AffiliatePhoneTypeId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_2$19, [
                        createVNode(VSelect, {
                          items: $options.contactStatus,
                          label: "Phone Status",
                          "item-value": "ContactStatusId",
                          "item-title": "ContactStatusName",
                          modelValue: $data.phone.ContactStatusId,
                          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.phone.ContactStatusId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_3$Y, [
                        createVNode(VSelect, {
                          items: $options.contactSources,
                          "item-value": "ContactSourceId",
                          "item-title": "ContactSourceName",
                          label: "Phone Source",
                          modelValue: $data.phone.ContactSourceId,
                          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.phone.ContactSourceId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Phone Number",
                        rules: [$data.rules.required, $data.rules.phone],
                        modelValue: $data.phone.PhoneNumber,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.phone.PhoneNumber = $event),
                        maxlength: 20,
                        variant: "underlined"
                      }, null, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Extension",
                        modelValue: $data.phone.Extension,
                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.phone.Extension = $event),
                        maxlength: 10,
                        variant: "underlined"
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Preferred",
                        modelValue: $data.phone.IsPreferred,
                        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.phone.IsPreferred = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Text Allowed",
                        modelValue: $data.phone.isTextAllowed,
                        "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.phone.isTextAllowed = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Do Not Call",
                        modelValue: $data.phone.isCallAllowed,
                        "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.phone.isCallAllowed = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardActions, null, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                onClick: _cache[9] || (_cache[9] = ($event) => $options.cancel()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[13] || (_cache[13] = [
                  createTextVNode("Cancel")
                ])),
                _: 1
                /* STABLE */
              }),
              !this.savedPhone ? (openBlock(), createBlock(VBtn, {
                key: 0,
                color: "secondary",
                href: "",
                onClick: _cache[10] || (_cache[10] = ($event) => $options.saveNewPhone()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[14] || (_cache[14] = [
                  createTextVNode("save and continue adding...")
                ])),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              createVNode(VBtn, {
                color: "success",
                href: "",
                onClick: _cache[11] || (_cache[11] = ($event) => $options.saveClosePhone()),
                variant: "elevated"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($options.saveButtonLabel),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue"]);
}
const AffiliatePhoneComponent = /* @__PURE__ */ _export_sfc(_sfc_main$21, [["render", _sfc_render$21], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/Edit/Contact/AffiliatePhoneComponent.vue"]]);
const _sfc_main$20 = {
  name: "PhoneInformationComponent",
  components: {
    AffiliatePhoneComponent,
    PhoneListComponent: PhoneListComponent$2,
    FlipCard
  },
  mixins: [markAsPreferredMixin, contactsMixin],
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/affiliate/" + this.affiliateId + "?scope=global&include=affiliatePhones,affiliatePhones.ContactSource").then((response) => {
        this.phones = response.data.data.affiliatePhones;
        this.affiliate = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    getPhonesByType(typeId, ignoreTypes) {
      return this.phones.filter((address) => {
        return ignoreTypes.length > 0 ? !address.AffiliatePhoneTypeId || ignoreTypes.indexOf(address.AffiliatePhoneTypeId) === -1 : address.AffiliatePhoneTypeId && address.AffiliatePhoneTypeId === typeId;
      });
    },
    onPhoneSaved(event) {
      if (!event.phone) {
        return;
      }
      if (event.isNew) {
        this.phones.push(event.phone);
      } else {
        const index = this.phones.findIndex((phone) => {
          return phone.AffiliatePhoneId === event.phone.AffiliatePhoneId;
        });
        if (index >= 0) {
          this.phones[index] = event.phone;
        }
      }
      this.handleIsPreferred(this.phones, event.phone, "AffiliatePhoneId", "AffiliatePhoneTypeId");
      this.phones = [...this.phones];
      this.alertSuccessMessageForSave("Phone");
      if (event.flip) {
        this.flipped = false;
      }
    }
  },
  data() {
    return {
      phones: [],
      affiliate: {},
      flipped: false,
      phoneheaders: [
        { title: "Phone Number", value: "fullPhone" },
        { title: "Status", value: "ContactStatus" },
        { title: "Source", value: "ContactSource" },
        { title: "Preferred", value: "IsPreferred" },
        { title: "Text Allowed", value: "CanTextRestrictionId" },
        { title: "Do Not Call", value: "CanCallRestrictionId" },
        { title: "Action", value: "AffiliatePhoneId" }
      ],
      selected: null
    };
  }
};
function _sfc_render$20(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_phone_list_component = resolveComponent("phone-list-component");
  const _component_affiliate_phone_component = resolveComponent("affiliate-phone-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[3] || (_cache[3] = [
          createTextVNode(" Phones ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.onAdd())
                      }, {
                        default: withCtx(() => _cache[4] || (_cache[4] = [
                          createTextVNode("Add new phone")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(VAlert, {
                        type: _ctx.alertType,
                        modelValue: _ctx.alert,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.alert = $event),
                        closable: "",
                        "close-text": "Dismiss"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(_ctx.alertText),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["type", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              _cache[5] || (_cache[5] = createBaseVNode(
                "h4",
                null,
                "Main",
                -1
                /* HOISTED */
              )),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(_component_phone_list_component, {
                        phones: $options.getPhonesByType(1, []),
                        "phone-headers": $data.phoneheaders,
                        onEditPhone: _ctx.onEdit
                      }, null, 8, ["phones", "phone-headers", "onEditPhone"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              _cache[6] || (_cache[6] = createBaseVNode(
                "h4",
                null,
                "Other",
                -1
                /* HOISTED */
              )),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(_component_phone_list_component, {
                        phones: $options.getPhonesByType(2, []),
                        "phone-headers": $data.phoneheaders,
                        onEditPhone: _ctx.onEdit
                      }, null, 8, ["phones", "phone-headers", "onEditPhone"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              _cache[7] || (_cache[7] = createBaseVNode(
                "h4",
                null,
                "Fax",
                -1
                /* HOISTED */
              )),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(_component_phone_list_component, {
                        phones: $options.getPhonesByType(3, []),
                        "phone-headers": $data.phoneheaders,
                        onEditPhone: _ctx.onEdit
                      }, null, 8, ["phones", "phone-headers", "onEditPhone"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            back: withCtx(() => [
              createVNode(_component_affiliate_phone_component, {
                affiliate: $data.affiliate,
                "saved-phone": $data.selected,
                onSavedPhone: $options.onPhoneSaved,
                onCancelAddPhone: _cache[2] || (_cache[2] = ($event) => $data.flipped = false)
              }, null, 8, ["affiliate", "saved-phone", "onSavedPhone"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const PhoneInformationComponent$2 = /* @__PURE__ */ _export_sfc(_sfc_main$20, [["render", _sfc_render$20], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/Contact/PhoneInformationComponent.vue"]]);
const _sfc_main$1$ = {
  name: "SocialMediaListComponent",
  props: {
    socialMediaHeaders: {
      type: Array,
      required: true
    },
    socialMedia: {
      type: Array,
      required: true
    }
  }
};
const _hoisted_1$1q = { key: 0 };
const _hoisted_2$18 = { key: 0 };
const _hoisted_3$X = { key: 0 };
function _sfc_render$1$(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VDataTable, {
    "hide-default-footer": true,
    headers: $props.socialMediaHeaders,
    items: $props.socialMedia,
    class: "mobile-global-card-table",
    "mobile-breakpoint": 992
  }, {
    [`item.URL`]: withCtx(({ item }) => [
      createBaseVNode(
        "span",
        null,
        toDisplayString(item.URL),
        1
        /* TEXT */
      )
    ]),
    [`item.ContactStatus`]: withCtx(({ item }) => [
      item.ContactStatus ? (openBlock(), createElementBlock(
        "span",
        _hoisted_1$1q,
        toDisplayString(item.ContactStatus.ContactStatusName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.ContactSource`]: withCtx(({ item }) => [
      item.ContactSource ? (openBlock(), createElementBlock(
        "span",
        _hoisted_2$18,
        toDisplayString(item.ContactSource.ContactSourceName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.AffiliateSocialMediaType`]: withCtx(({ item }) => [
      _ctx.iaType.item.AffiliateSocialMediaType ? (openBlock(), createElementBlock(
        "span",
        _hoisted_3$X,
        toDisplayString(item.AffiliateSocialMediaType.AffiliateSocialMediaTypeName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.AffiliateSocialMediaId`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VBtn, {
          onClick: ($event) => _ctx.$emit("edit-social-media", item)
        }, {
          default: withCtx(() => _cache[0] || (_cache[0] = [
            createTextVNode("Edit")
          ])),
          _: 2
          /* DYNAMIC */
        }, 1032, ["onClick"])
      ])
    ]),
    _: 2
    /* DYNAMIC */
  }, 1032, ["headers", "items"]);
}
const SocialMediaListComponent$1 = /* @__PURE__ */ _export_sfc(_sfc_main$1$, [["render", _sfc_render$1$], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/Contact/SocialMediaListComponent.vue"]]);
const _sfc_main$1_ = {
  name: "AffiliateSocialMediaComponent",
  props: {
    affiliate: {
      type: Object,
      required: true
    },
    savedSocialMedia: {
      type: Object,
      required: false
    }
  },
  computed: {
    saveButtonLabel() {
      return this.savedSocialMedia ? "Save" : "save and close";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    savedSocialMedia: {
      handler(data) {
        this.savedSocialMedia = data;
        this.setEdit();
      },
      deep: true
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/AffiliateSocialMediaType").then((response) => {
      this.socialMediaTypes = response.data.data;
    });
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      socialMediaTypes: [],
      socialMedia: { ContactStatusId: 4 },
      rules: {
        required: (value) => !!value || "Required."
      },
      emptySocialMedia: {
        AffiliateSocialMediaTypeId: null,
        ContactStatusId: 4,
        ContactSourceId: null,
        URL: null,
        AffiliateId: this.affiliate.AffiliateId
      }
    };
  },
  methods: {
    saveNew() {
      if (!this.$refs.form.validate()) {
        return;
      }
      this.socialMedia.AffiliateId = this.affiliate.AffiliateId;
      if (this.savedSocialMedia) {
        axios.put("/api/v2/AffiliateSocialMedia/" + this.savedSocialMedia.AffiliateSocialMediaId + "?include=ContactStatus,ContactSource,AffiliateSocialMediaType", this.socialMedia).then((response) => {
          this.handleSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/AffiliateSocialMedia?include=ContactStatus,ContactSource,AffiliateSocialMediaType", this.socialMedia).then((response) => {
          this.reset();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Social media entry saved.";
          this.handleSaved(response.data.data, false, true);
        });
      }
    },
    saveClose() {
      if (!this.$refs.form.validate()) {
        return;
      }
      this.socialMedia.AffiliateId = this.affiliate.AffiliateId;
      if (this.savedSocialMedia) {
        axios.put("/api/v2/AffiliateSocialMedia/" + this.savedSocialMedia.AffiliateSocialMediaId + "?include=ContactStatus,ContactSource,AffiliateSocialMediaType", this.socialMedia).then((response) => {
          this.handleSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/AffiliateSocialMedia?include=ContactStatus,ContactSource,AffiliateSocialMediaType", this.socialMedia).then((response) => {
          this.reset();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Social media entry saved.";
          this.handleSaved(response.data.data, true, true);
        });
      }
    },
    cancel() {
      this.setEdit();
      this.$emit("cancel-add-social-media");
    },
    handleSaved(socialMediaData, flip, isNew) {
      this.$emit("saved-social-media", { socialMedia: socialMediaData, flip, isNew });
    },
    reset() {
      for (const field in this.emptySocialMedia) {
        if (this.emptySocialMedia.hasOwnProperty(field)) {
          this.socialMedia[field] = this.emptySocialMedia[field];
        }
      }
    },
    setEdit() {
      this.socialMedia = clone(this.savedSocialMedia) || clone(this.emptySocialMedia);
    }
  }
};
const _hoisted_1$1p = { class: "data-container" };
const _hoisted_2$17 = { class: "data-container" };
const _hoisted_3$W = { class: "data-container" };
function _sfc_render$1_(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VForm, {
    ref: "form",
    modelValue: $data.valid,
    "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.valid = $event)
  }, {
    default: withCtx(() => [
      createVNode(VCard, null, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => _cache[9] || (_cache[9] = [
              createTextVNode("Social Media")
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              createVNode(VAlert, {
                type: $data.alertType,
                modelValue: $data.alert,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
                closable: "",
                "close-text": "Dismiss"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($data.alertText),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }, 8, ["type", "modelValue"]),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_1$1p, [
                        createVNode(VSelect, {
                          items: $data.socialMediaTypes,
                          label: "Type",
                          "item-value": "AffiliateSocialMediaTypeId",
                          "item-title": "AffiliateSocialMediaTypeName",
                          modelValue: $data.socialMedia.AffiliateSocialMediaTypeId,
                          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.socialMedia.AffiliateSocialMediaTypeId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_2$17, [
                        createVNode(VSelect, {
                          items: $options.contactStatus,
                          label: "Status",
                          "item-value": "ContactStatusId",
                          "item-title": "ContactStatusName",
                          modelValue: $data.socialMedia.ContactStatusId,
                          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.socialMedia.ContactStatusId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_3$W, [
                        createVNode(VSelect, {
                          items: $options.contactSources,
                          "item-value": "ContactSourceId",
                          "item-title": "ContactSourceName",
                          label: "Source",
                          modelValue: $data.socialMedia.ContactSourceId,
                          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.socialMedia.ContactSourceId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Handle",
                        rules: [$data.rules.required],
                        modelValue: $data.socialMedia.URL,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.socialMedia.URL = $event),
                        maxlength: 400,
                        variant: "underlined"
                      }, null, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardActions, null, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                onClick: _cache[5] || (_cache[5] = ($event) => $options.cancel()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[10] || (_cache[10] = [
                  createTextVNode("Cancel")
                ])),
                _: 1
                /* STABLE */
              }),
              !this.savedSocialMedia ? (openBlock(), createBlock(VBtn, {
                key: 0,
                color: "secondary",
                href: "",
                onClick: _cache[6] || (_cache[6] = ($event) => $options.saveNew()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[11] || (_cache[11] = [
                  createTextVNode("save and continue adding...")
                ])),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              createVNode(VBtn, {
                color: "success",
                href: "",
                onClick: _cache[7] || (_cache[7] = ($event) => $options.saveClose()),
                variant: "elevated"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($options.saveButtonLabel),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue"]);
}
const AffiliateSocialMediaComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1_, [["render", _sfc_render$1_], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/Edit/Contact/AffiliateSocialMediaComponent.vue"]]);
const _sfc_main$1Z = {
  name: "SocialMediaInformationComponent",
  components: {
    AffiliateSocialMediaComponent,
    SocialMediaListComponent: SocialMediaListComponent$1,
    FlipCard
  },
  mixins: [contactsMixin],
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/affiliate/" + this.affiliateId + "?scope=global&include=affiliateSocialmedia,affiliateSocialmedia.AffiliateSocialMediaType,affiliateSocialmedia.ContactSource,affiliateSocialmedia.ContactStatus").then((response) => {
        this.socialMedia = response.data.data.affiliateSocialmedia;
        this.affiliate = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    onSaved(event) {
      if (!event.socialMedia) {
        return;
      }
      if (event.isNew) {
        this.socialMedia.push(event.socialMedia);
      } else {
        const index = this.socialMedia.findIndex((socialMedia) => socialMedia.AffiliateSocialMediaId === event.socialMedia.AffiliateSocialMediaId);
        if (index !== -1) {
          this.socialMedia[index] = event.socialMedia;
        }
      }
      this.socialMedia = [...this.socialMedia];
      this.alertSuccessMessageForSave("Social media");
      if (event.flip) {
        this.flipped = false;
      }
    }
  },
  data() {
    return {
      socialMedia: [],
      affiliate: {},
      flipped: false,
      socialMediaHeaders: [
        { title: "Handle", value: "URL" },
        { title: "Type", value: "AffiliateSocialMediaType" },
        { title: "Status", value: "ContactStatus" },
        { title: "Source", value: "ContactSource" },
        { title: "Action", value: "AffiliateSocialMediaId" }
      ],
      selected: null
    };
  }
};
function _sfc_render$1Z(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_social_media_list_component = resolveComponent("social-media-list-component");
  const _component_affiliate_social_media_component = resolveComponent("affiliate-social-media-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[3] || (_cache[3] = [
          createTextVNode(" Social Media ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.onAdd())
                      }, {
                        default: withCtx(() => _cache[4] || (_cache[4] = [
                          createTextVNode("Add social media")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(VAlert, {
                        type: _ctx.alertType,
                        modelValue: _ctx.alert,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.alert = $event),
                        closable: "",
                        "close-text": "Dismiss"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(_ctx.alertText),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["type", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(_component_social_media_list_component, {
                        "social-media": $data.socialMedia,
                        "social-media-headers": $data.socialMediaHeaders,
                        onEditSocialMedia: _ctx.onEdit
                      }, null, 8, ["social-media", "social-media-headers", "onEditSocialMedia"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            back: withCtx(() => [
              createVNode(_component_affiliate_social_media_component, {
                affiliate: $data.affiliate,
                "saved-social-media": $data.selected,
                onSavedSocialMedia: $options.onSaved,
                onCancelAddSocialMedia: _cache[2] || (_cache[2] = ($event) => $data.flipped = false)
              }, null, 8, ["affiliate", "saved-social-media", "onSavedSocialMedia"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const SocialMediaInformationComponent$1 = /* @__PURE__ */ _export_sfc(_sfc_main$1Z, [["render", _sfc_render$1Z], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/Contact/SocialMediaInformationComponent.vue"]]);
const _sfc_main$1Y = {
  name: "AffiliateUnionCountComponent",
  props: {
    affiliateId: {
      required: true
    }
  },
  data: () => ({
    affiliates: []
  }),
  mounted() {
    this.getDataFromApi();
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/aggregate/affiliate/unioncount/" + this.affiliateId + "?scope=global";
      return axios.get(url).then((response) => {
        this.affiliates = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$1o = { class: "data-container" };
function _sfc_render$1Y(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VCard, null, {
    default: withCtx(() => [
      createVNode(VCardTitle, null, {
        default: withCtx(() => _cache[0] || (_cache[0] = [
          createTextVNode("Counts of Individuals by Union Relationship")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VCardText, null, {
        default: withCtx(() => [
          createBaseVNode("div", _hoisted_1$1o, [
            (openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(_ctx.affiliates, (affiliate, index) => {
                return openBlock(), createElementBlock(
                  "div",
                  {
                    class: "counts",
                    key: index
                  },
                  toDisplayString(affiliate.UnionRelationshipTypeName) + " - " + toDisplayString(affiliate.UnionRelationship),
                  1
                  /* TEXT */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const AffiliateUnionCountComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1Y, [["render", _sfc_render$1Y], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/AffiliateUnionCountComponent.vue"]]);
const _sfc_main$1X = {
  name: "AffiliateSwitchComponent",
  props: {
    componentName: {
      required: true
    },
    paramName: {
      required: false
    },
    paramValue: {
      required: false
    },
    displayValue: {
      required: true
    },
    affiliateId: {
      required: true
    },
    affiliateName: {},
    affiliateNumber: {}
  },
  data: () => ({
    visible: false,
    same: false
  }),
  watch: {
    paramValue: {
      handler: function handler() {
        this.same = this.affiliateId === this.getAffiliateId();
      }
    }
  },
  computed: {
    params() {
      const param = {};
      param[this.paramName] = this.paramValue;
      return param;
    }
  },
  mounted() {
    this.params[this.paramName] = this.paramValue;
    this.same = this.affiliateId === this.getAffiliateId();
  },
  methods: {
    getAffiliateId() {
      return this.$store.getters["user/selectedAffiliate"].AffiliateId;
    },
    doSwitch() {
      this.visible = false;
      this.$store.dispatch("user/setUserSelectedEntity", this.affiliateId).then((res) => {
        this.$router.push({ name: this.componentName, params: this.params });
      });
    }
  }
};
const _hoisted_1$1n = { key: 0 };
const _hoisted_2$16 = { key: 1 };
function _sfc_render$1X(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_router_link = resolveComponent("router-link");
  return openBlock(), createElementBlock("div", null, [
    createVNode(VDialog, {
      modelValue: _ctx.visible,
      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.visible = $event),
      width: "500"
    }, {
      default: withCtx(() => [
        createVNode(VCard, { class: "v-card--outlined v-sheet--tile mt-4 pa-4" }, {
          default: withCtx(() => [
            createVNode(VCardText, null, {
              default: withCtx(() => [
                createTextVNode(
                  "You are now switching to view data under [" + toDisplayString($props.affiliateName) + "] [" + toDisplayString($props.affiliateNumber) + "]?",
                  1
                  /* TEXT */
                )
              ]),
              _: 1
              /* STABLE */
            }),
            createVNode(VCardActions, null, {
              default: withCtx(() => [
                createVNode(VSpacer),
                createVNode(VBtn, {
                  size: "small",
                  color: "default",
                  onClick: _cache[0] || (_cache[0] = ($event) => _ctx.visible = false)
                }, {
                  default: withCtx(() => _cache[4] || (_cache[4] = [
                    createTextVNode("Cancel")
                  ])),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VBtn, {
                  size: "small",
                  color: "primary",
                  onClick: _cache[1] || (_cache[1] = ($event) => $options.doSwitch())
                }, {
                  default: withCtx(() => _cache[5] || (_cache[5] = [
                    createTextVNode("OK")
                  ])),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          _: 1
          /* STABLE */
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["modelValue"]),
    _ctx.same ? (openBlock(), createElementBlock("div", _hoisted_1$1n, [
      createVNode(_component_router_link, {
        to: { name: this.componentName, params: $options.params }
      }, {
        default: withCtx(() => [
          createTextVNode(
            toDisplayString($props.displayValue),
            1
            /* TEXT */
          )
        ]),
        _: 1
        /* STABLE */
      }, 8, ["to"])
    ])) : (openBlock(), createElementBlock("div", _hoisted_2$16, [
      createBaseVNode(
        "span",
        {
          class: "affiliate-switch",
          onClick: _cache[3] || (_cache[3] = ($event) => _ctx.visible = true)
        },
        toDisplayString($props.displayValue),
        1
        /* TEXT */
      )
    ]))
  ]);
}
const AffiliateSwitchComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1X, [["render", _sfc_render$1X], ["__file", "/var/www/html/resources/js/components/Affiliate/AffiliateSwitchComponent.vue"]]);
const _sfc_main$1W = {
  name: "AffiliateDetailComponent",
  components: {
    "union-count-component": AffiliateUnionCountComponent,
    AffiliateSwitchComponent
  },
  props: {
    affiliateId: {
      type: Number,
      required: true
    },
    shouldDisplayDataComponent: {
      type: Boolean,
      default: true
    }
  },
  data: () => ({
    affiliate: {},
    affiliateOfficers: [],
    loading: false,
    loadingOfficers: false,
    options: {
      sortBy: [{ key: "AffiliateOfficerRole.officerRoleTitle.DisplayOrder", order: "asc" }]
    },
    headers: [
      { title: "Officer Name", value: "Individual.FullName" },
      { title: "Officer Roles", value: "AffiliateOfficerRole.AffiliateOfficerRoleName" },
      { title: "Start Date", value: "StartDate" },
      { title: "Phone", value: "Individual.individualPhonesOrdered[0].PhoneNumber" },
      { title: "Email", value: "Individual.individualEmailsOrdered[0].Email" }
    ]
  }),
  mounted() {
    this.getDataFromApi();
    this.getCurrentOfficersFromApi();
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/aggregate/affiliate/detail/" + this.affiliateId + "?scope=global";
      return axios.get(url).then((response) => {
        this.affiliate = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    getCurrentOfficersFromApi() {
      this.loadingOfficers = true;
      let url = "/api/v2/affiliate/" + this.affiliateId + "?include=currentAffiliateOfficers.AffiliateOfficerRole.officerRoleTitle,currentAffiliateOfficers.Individual.individualEmailsOrdered,currentAffiliateOfficers.Individual.individualPhonesOrdered";
      return axios.get(url).then((response) => {
        this.affiliateOfficers = response.data.data.currentAffiliateOfficers;
      }).finally(() => {
        this.loadingOfficers = false;
      });
    },
    openDetails() {
      this.$emit("open-details");
    }
  }
};
const _hoisted_1$1m = { key: 0 };
const _hoisted_2$15 = { class: "details-header mobile-word-break" };
const _hoisted_3$V = { class: "data-container" };
const _hoisted_4$O = {
  key: 0,
  class: "data-value"
};
const _hoisted_5$K = {
  key: 1,
  class: "data-value"
};
const _hoisted_6$E = { class: "data-container" };
const _hoisted_7$z = {
  key: 0,
  class: "data-value"
};
const _hoisted_8$s = { class: "data-container" };
const _hoisted_9$r = { key: 0 };
const _hoisted_10$o = { key: 1 };
const _hoisted_11$l = { class: "data-container" };
const _hoisted_12$l = { key: 0 };
const _hoisted_13$i = { key: 1 };
const _hoisted_14$h = { class: "data-container" };
const _hoisted_15$h = { key: 0 };
const _hoisted_16$h = { key: 1 };
const _hoisted_17$g = { class: "data-container" };
const _hoisted_18$f = { key: 0 };
const _hoisted_19$f = { key: 1 };
const _hoisted_20$e = { class: "data-container" };
const _hoisted_21$e = {
  key: 0,
  class: "maps"
};
const _hoisted_22$c = ["href"];
const _hoisted_23$c = ["src"];
const _hoisted_24$b = { key: 0 };
const _hoisted_25$a = {
  key: 1,
  class: "hidden-lg-and-up"
};
const _hoisted_26$a = { class: "mobile-data-container mobile-link-style" };
const _hoisted_27$a = { class: "data-container mobile-data-container" };
const _hoisted_28$a = { class: "data-value" };
const _hoisted_29$a = { key: 0 };
const _hoisted_30$a = { key: 1 };
const _hoisted_31$a = { class: "data-container mobile-data-container" };
const _hoisted_32$8 = { class: "data-value" };
const _hoisted_33$8 = { key: 0 };
const _hoisted_34$7 = { key: 1 };
const _hoisted_35$7 = { class: "data-container mobile-data-container" };
const _hoisted_36$7 = { class: "data-value" };
const _hoisted_37$7 = { key: 0 };
const _hoisted_38$6 = { key: 1 };
const _hoisted_39$6 = { class: "data-container mobile-data-container" };
const _hoisted_40$6 = { class: "data-value" };
const _hoisted_41$6 = { key: 0 };
const _hoisted_42$6 = { key: 1 };
const _hoisted_43$6 = { class: "data-container mobile-data-container" };
const _hoisted_44$6 = { class: "data-value" };
const _hoisted_45$6 = { key: 0 };
const _hoisted_46$6 = { key: 1 };
const _hoisted_47$6 = { class: "data-container mobile-data-container" };
const _hoisted_48$6 = { class: "data-value" };
const _hoisted_49$6 = { key: 0 };
const _hoisted_50$6 = { key: 1 };
const _hoisted_51$6 = { class: "data-container mobile-data-container" };
const _hoisted_52$6 = { class: "data-value" };
const _hoisted_53$6 = { key: 0 };
const _hoisted_54$6 = { key: 1 };
const _hoisted_55$6 = { class: "data-container mobile-data-container" };
const _hoisted_56$6 = { class: "data-value" };
const _hoisted_57$6 = { key: 0 };
const _hoisted_58$6 = { key: 1 };
const _hoisted_59$6 = { class: "data-container mobile-data-container" };
const _hoisted_60$6 = { class: "data-value" };
const _hoisted_61$6 = { key: 0 };
const _hoisted_62$6 = { key: 1 };
const _hoisted_63$6 = { class: "data-container mobile-data-container" };
const _hoisted_64$6 = { class: "data-value" };
const _hoisted_65$6 = { key: 0 };
const _hoisted_66$6 = { key: 1 };
const _hoisted_67$6 = { class: "data-container mobile-data-container" };
const _hoisted_68$4 = { class: "data-value" };
const _hoisted_69$3 = { key: 0 };
const _hoisted_70$3 = { key: 1 };
function _sfc_render$1W(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_router_link = resolveComponent("router-link");
  const _component_union_count_component = resolveComponent("union-count-component");
  const _component_AffiliateSwitchComponent = resolveComponent("AffiliateSwitchComponent");
  return openBlock(), createElementBlock("div", null, [
    $props.shouldDisplayDataComponent ? (openBlock(), createElementBlock("div", _hoisted_1$1m, [
      createVNode(VContainer, null, {
        default: withCtx(() => [
          createVNode(VProgressLinear, {
            active: _ctx.loading,
            indeterminate: true,
            color: "#7bb8da"
          }, null, 8, ["active"]),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { cols: "10" }, {
                default: withCtx(() => [
                  createBaseVNode(
                    "h3",
                    _hoisted_2$15,
                    toDisplayString(_ctx.affiliate.AffiliateName) + " - " + toDisplayString(_ctx.affiliate.AffiliateNumber),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "2",
                class: "hidden-md-and-down"
              }, {
                default: withCtx(() => [
                  createVNode(VBtn, {
                    href: "#Details",
                    size: "small",
                    onClick: _cache[0] || (_cache[0] = ($event) => $options.openDetails())
                  }, {
                    default: withCtx(() => _cache[3] || (_cache[3] = [
                      createTextVNode("View Details")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "8"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_3$V, [
                    _cache[4] || (_cache[4] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Affiliate Number:",
                      -1
                      /* HOISTED */
                    )),
                    _ctx.affiliate.AffiliateNumber ? (openBlock(), createElementBlock(
                      "span",
                      _hoisted_4$O,
                      toDisplayString(_ctx.affiliate.AffiliateNumber),
                      1
                      /* TEXT */
                    )) : (openBlock(), createElementBlock("span", _hoisted_5$K, "N/A"))
                  ]),
                  createBaseVNode("div", _hoisted_6$E, [
                    _cache[5] || (_cache[5] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "PIN:",
                      -1
                      /* HOISTED */
                    )),
                    _ctx.affiliate ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_7$z,
                      toDisplayString(_ctx.affiliate.AffiliatePerCapitaPIN),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_8$s, [
                    _cache[6] || (_cache[6] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Phone Number:",
                      -1
                      /* HOISTED */
                    )),
                    _ctx.affiliate && _ctx.affiliate.affiliatePhonesOrdered && _ctx.affiliate.affiliatePhonesOrdered.length > 0 ? (openBlock(), createElementBlock(
                      "span",
                      _hoisted_9$r,
                      toDisplayString(_ctx.affiliate.affiliatePhonesOrdered[0].PhoneNumber),
                      1
                      /* TEXT */
                    )) : (openBlock(), createElementBlock("span", _hoisted_10$o, "N/A"))
                  ]),
                  createBaseVNode("div", _hoisted_11$l, [
                    _cache[7] || (_cache[7] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Email:",
                      -1
                      /* HOISTED */
                    )),
                    _ctx.affiliate && _ctx.affiliate.affiliateEmailsOrdered && _ctx.affiliate.affiliateEmailsOrdered.length > 0 ? (openBlock(), createElementBlock(
                      "span",
                      _hoisted_12$l,
                      toDisplayString(_ctx.affiliate.affiliateEmailsOrdered[0].Email),
                      1
                      /* TEXT */
                    )) : (openBlock(), createElementBlock("span", _hoisted_13$i, "N/A"))
                  ]),
                  createBaseVNode("div", _hoisted_14$h, [
                    _cache[8] || (_cache[8] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Website:",
                      -1
                      /* HOISTED */
                    )),
                    _ctx.affiliate.AffiliateWebsite ? (openBlock(), createElementBlock(
                      "span",
                      _hoisted_15$h,
                      toDisplayString(_ctx.affiliate.AffiliateWebsite),
                      1
                      /* TEXT */
                    )) : (openBlock(), createElementBlock("span", _hoisted_16$h, "N/A"))
                  ]),
                  createBaseVNode("div", _hoisted_17$g, [
                    _cache[9] || (_cache[9] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Address:",
                      -1
                      /* HOISTED */
                    )),
                    _ctx.affiliate && _ctx.affiliate.affiliateAddressesOrdered && _ctx.affiliate.affiliateAddressesOrdered.length > 0 ? (openBlock(), createElementBlock(
                      "span",
                      _hoisted_18$f,
                      toDisplayString(_ctx.affiliate.affiliateAddressesOrdered[0].AddressLine1) + ", " + toDisplayString(_ctx.affiliate.affiliateAddressesOrdered[0].AddressLine2 && _ctx.affiliate.affiliateAddressesOrdered[0].AddressLine2.trim().length > 0 ? _ctx.affiliate.affiliateAddressesOrdered[0].AddressLine2 + ", " : "") + " " + toDisplayString(_ctx.affiliate.affiliateAddressesOrdered[0].City) + ", " + toDisplayString(_ctx.affiliate.affiliateAddressesOrdered[0].StateTerritory ? _ctx.affiliate.affiliateAddressesOrdered[0].StateTerritory.StateTerritoryCode : "") + ", " + toDisplayString(_ctx.affiliate.affiliateAddressesOrdered[0].PostalCode),
                      1
                      /* TEXT */
                    )) : (openBlock(), createElementBlock("span", _hoisted_19$f, "N/A"))
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, { class: "hidden-lg-and-up" }, {
                default: withCtx(() => [
                  createVNode(VBtn, {
                    href: "#Details",
                    size: "small",
                    onClick: _cache[1] || (_cache[1] = ($event) => $options.openDetails())
                  }, {
                    default: withCtx(() => _cache[10] || (_cache[10] = [
                      createTextVNode("View Details")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_20$e, [
                    _ctx.affiliate.affiliateAddressesOrdered && _ctx.affiliate.affiliateAddressesOrdered.length > 0 ? (openBlock(), createElementBlock("span", _hoisted_21$e, [
                      createBaseVNode("a", {
                        href: "https://www.google.com/maps/search/?api=1&query=" + _ctx.affiliate.affiliateAddressesOrdered[0].AddressLine1 + "," + _ctx.affiliate.affiliateAddressesOrdered[0].City + "," + _ctx.affiliate.affiliateAddressesOrdered[0].StateTerritory.StateTerritoryCode,
                        target: "_blank"
                      }, [
                        createBaseVNode("img", {
                          alt: "Map",
                          src: "https://maps.google.com/maps/api/staticmap?center=" + _ctx.affiliate.affiliateAddressesOrdered[0].AddressLine1 + _ctx.affiliate.affiliateAddressesOrdered[0].City + _ctx.affiliate.affiliateAddressesOrdered[0].StateTerritory.StateTerritoryCode + "&zoom=18&size=480x320&sensor=false&maptype=roadmap&style=feature:landscape%7Ccolor:0xb3d9ff&style=feature:water%7Ccolor:0x4285f4&key=AIzaSyDuVjkyWXQcFLS0f7Y8OxftR0m08cwWf5Q"
                        }, null, 8, _hoisted_23$c)
                      ], 8, _hoisted_22$c)
                    ])) : createCommentVNode("v-if", true)
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { cols: "12" }, {
                default: withCtx(() => [
                  createVNode(VDataTable, {
                    headers: _ctx.headers,
                    options: _ctx.options,
                    "onUpdate:options": _cache[2] || (_cache[2] = ($event) => _ctx.options = $event),
                    loading: _ctx.loadingOfficers,
                    items: _ctx.affiliateOfficers,
                    "mobile-breakpoint": 992,
                    class: "mobile-global-card-table"
                  }, {
                    [`item.Individual.FullName`]: withCtx(({ item }) => [
                      item.Individual ? (openBlock(), createElementBlock("span", _hoisted_24$b, [
                        createVNode(_component_router_link, {
                          to: { name: "IndividualDetails", params: { id: item.Individual.IndividualId } }
                        }, {
                          default: withCtx(() => [
                            createTextVNode(
                              toDisplayString(item.Individual.FullName),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        }, 1032, ["to"])
                      ])) : createCommentVNode("v-if", true)
                    ]),
                    [`item.StartDate`]: withCtx(({ item }) => [
                      createTextVNode(
                        toDisplayString(_ctx.$filters.formatDate(item.TermStartDate)),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["headers", "options", "loading", "items"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createVNode(_component_union_count_component, { affiliateId: $props.affiliateId }, null, 8, ["affiliateId"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ])) : createCommentVNode("v-if", true),
    createCommentVNode(" MOBILE Breakpoint "),
    !$props.shouldDisplayDataComponent ? (openBlock(), createElementBlock("div", _hoisted_25$a, [
      createVNode(VProgressLinear, {
        active: _ctx.loading,
        indeterminate: true,
        color: "#7bb8da"
      }, null, 8, ["active"]),
      withDirectives((openBlock(), createBlock(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, null, {
            default: withCtx(() => [
              createBaseVNode("h3", _hoisted_26$a, [
                createVNode(_component_AffiliateSwitchComponent, {
                  "component-name": "AffiliateDisplay",
                  "param-name": "id",
                  "param-value": _ctx.affiliate.AffiliateId,
                  "display-value": _ctx.affiliate.AffiliateName,
                  "affiliate-id": _ctx.affiliate.AffiliateId,
                  "affiliate-name": _ctx.affiliate.AffiliateName,
                  "affiliate-number": _ctx.affiliate.AffiliateNumber
                }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])
              ]),
              _cache[22] || (_cache[22] = createBaseVNode(
                "div",
                { class: "mobile-link-note-container" },
                [
                  createBaseVNode("div", { class: "data-value" }, [
                    createBaseVNode("span", null, "Click on the name to view and edit the affiliate record.")
                  ])
                ],
                -1
                /* HOISTED */
              )),
              createBaseVNode("div", _hoisted_27$a, [
                createBaseVNode("div", _hoisted_28$a, [
                  _cache[11] || (_cache[11] = createBaseVNode(
                    "span",
                    { class: "mobile-detail-column-name" },
                    "Affiliate Number: ",
                    -1
                    /* HOISTED */
                  )),
                  _ctx.affiliate.AffiliateNumber ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_29$a,
                    toDisplayString(_ctx.affiliate.AffiliateNumber),
                    1
                    /* TEXT */
                  )) : (openBlock(), createElementBlock("span", _hoisted_30$a, "N/A"))
                ])
              ]),
              createBaseVNode("div", _hoisted_31$a, [
                createBaseVNode("div", _hoisted_32$8, [
                  _cache[12] || (_cache[12] = createBaseVNode(
                    "span",
                    { class: "mobile-detail-column-name" },
                    "Abbreviated Name: ",
                    -1
                    /* HOISTED */
                  )),
                  _ctx.affiliate.AffiliateAbbreviatedName ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_33$8,
                    toDisplayString(_ctx.affiliate.AffiliateAbbreviatedName),
                    1
                    /* TEXT */
                  )) : (openBlock(), createElementBlock("span", _hoisted_34$7, "N/A"))
                ])
              ]),
              createBaseVNode("div", _hoisted_35$7, [
                createBaseVNode("div", _hoisted_36$7, [
                  _cache[13] || (_cache[13] = createBaseVNode(
                    "span",
                    { class: "mobile-detail-column-name" },
                    "Acronym: ",
                    -1
                    /* HOISTED */
                  )),
                  _ctx.affiliate.AffiliateAcronym ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_37$7,
                    toDisplayString(_ctx.affiliate.AffiliateAcronym),
                    1
                    /* TEXT */
                  )) : (openBlock(), createElementBlock("span", _hoisted_38$6, "N/A"))
                ])
              ]),
              createBaseVNode("div", _hoisted_39$6, [
                createBaseVNode("div", _hoisted_40$6, [
                  _cache[14] || (_cache[14] = createBaseVNode(
                    "span",
                    { class: "mobile-detail-column-name" },
                    "Affiliate EIN: ",
                    -1
                    /* HOISTED */
                  )),
                  _ctx.affiliate.AffiliateEIN ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_41$6,
                    toDisplayString(_ctx.affiliate.AffiliateEIN),
                    1
                    /* TEXT */
                  )) : (openBlock(), createElementBlock("span", _hoisted_42$6, "N/A"))
                ])
              ]),
              createBaseVNode("div", _hoisted_43$6, [
                createBaseVNode("div", _hoisted_44$6, [
                  _cache[15] || (_cache[15] = createBaseVNode(
                    "span",
                    { class: "mobile-detail-column-name" },
                    "Affiliate GUID: ",
                    -1
                    /* HOISTED */
                  )),
                  _ctx.affiliate.AffiliateGuid ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_45$6,
                    toDisplayString(_ctx.affiliate.AffiliateGuid),
                    1
                    /* TEXT */
                  )) : (openBlock(), createElementBlock("span", _hoisted_46$6, "N/A"))
                ])
              ]),
              createBaseVNode("div", _hoisted_47$6, [
                createBaseVNode("div", _hoisted_48$6, [
                  _cache[16] || (_cache[16] = createBaseVNode(
                    "span",
                    { class: "mobile-detail-column-name" },
                    "Affiliate Type: ",
                    -1
                    /* HOISTED */
                  )),
                  _ctx.affiliate.AffiliateType ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_49$6,
                    toDisplayString(_ctx.affiliate.AffiliateType.AffiliateTypeName),
                    1
                    /* TEXT */
                  )) : (openBlock(), createElementBlock("span", _hoisted_50$6, "N/A"))
                ])
              ]),
              createBaseVNode("div", _hoisted_51$6, [
                createBaseVNode("div", _hoisted_52$6, [
                  _cache[17] || (_cache[17] = createBaseVNode(
                    "span",
                    { class: "mobile-detail-column-name" },
                    "BillHighwayGroupId: ",
                    -1
                    /* HOISTED */
                  )),
                  _ctx.affiliate.BillHighwayGroupId ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_53$6,
                    toDisplayString(_ctx.affiliate.BillHighwayGroupId),
                    1
                    /* TEXT */
                  )) : (openBlock(), createElementBlock("span", _hoisted_54$6, "N/A"))
                ])
              ]),
              createBaseVNode("div", _hoisted_55$6, [
                createBaseVNode("div", _hoisted_56$6, [
                  _cache[18] || (_cache[18] = createBaseVNode(
                    "span",
                    { class: "mobile-detail-column-name" },
                    "Affiliate CharterDate: ",
                    -1
                    /* HOISTED */
                  )),
                  _ctx.affiliate.CharterDate ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_57$6,
                    toDisplayString(_ctx.$filters.formatDate(_ctx.affiliate.CharterDate)),
                    1
                    /* TEXT */
                  )) : (openBlock(), createElementBlock("span", _hoisted_58$6, "N/A"))
                ])
              ]),
              createBaseVNode("div", _hoisted_59$6, [
                createBaseVNode("div", _hoisted_60$6, [
                  _cache[19] || (_cache[19] = createBaseVNode(
                    "span",
                    { class: "mobile-detail-column-name" },
                    "Address:",
                    -1
                    /* HOISTED */
                  )),
                  _ctx.affiliate && _ctx.affiliate.affiliateAddressesOrdered && _ctx.affiliate.affiliateAddressesOrdered.length > 0 ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_61$6,
                    toDisplayString(_ctx.affiliate.affiliateAddressesOrdered[0].AddressLine1) + ", " + toDisplayString(_ctx.affiliate.affiliateAddressesOrdered[0].City) + ", " + toDisplayString(_ctx.affiliate.affiliateAddressesOrdered[0].StateTerritory ? _ctx.affiliate.affiliateAddressesOrdered[0].StateTerritory.StateTerritoryCode : "") + ", " + toDisplayString(_ctx.affiliate.affiliateAddressesOrdered[0].PostalCode),
                    1
                    /* TEXT */
                  )) : (openBlock(), createElementBlock("span", _hoisted_62$6, "N/A"))
                ])
              ]),
              createBaseVNode("div", _hoisted_63$6, [
                createBaseVNode("div", _hoisted_64$6, [
                  _cache[20] || (_cache[20] = createBaseVNode(
                    "span",
                    { class: "mobile-detail-column-name" },
                    "Phone:",
                    -1
                    /* HOISTED */
                  )),
                  _ctx.affiliate && _ctx.affiliate.affiliatePhonesOrdered && _ctx.affiliate.affiliatePhonesOrdered && _ctx.affiliate.affiliatePhonesOrdered.length > 0 ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_65$6,
                    toDisplayString(_ctx.affiliate.affiliatePhonesOrdered[0].PhoneNumber),
                    1
                    /* TEXT */
                  )) : (openBlock(), createElementBlock("span", _hoisted_66$6, "N/A"))
                ])
              ]),
              createBaseVNode("div", _hoisted_67$6, [
                createBaseVNode("div", _hoisted_68$4, [
                  _cache[21] || (_cache[21] = createBaseVNode(
                    "span",
                    { class: "mobile-detail-column-name" },
                    "Email Address:",
                    -1
                    /* HOISTED */
                  )),
                  _ctx.affiliate && _ctx.affiliate.affiliateEmailsOrdered && _ctx.affiliate.affiliateEmailsOrdered.length > 0 ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_69$3,
                    toDisplayString(_ctx.affiliate.affiliateEmailsOrdered[0].Email),
                    1
                    /* TEXT */
                  )) : (openBlock(), createElementBlock("span", _hoisted_70$3, "N/A"))
                ])
              ])
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })), [
        [Touch, { right: () => _ctx.swipe("right") }]
      ])
    ])) : createCommentVNode("v-if", true)
  ]);
}
const AffiliateDetailComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1W, [["render", _sfc_render$1W], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/AffiliateDetailComponent.vue"]]);
const headersMixin = {
  methods: {
    getHeaders(headers) {
      return headers ? headers.filter((header) => {
        return header.visible;
      }) : [];
    },
    getSortableHeaders(headers) {
      return headers ? headers.filter((header) => {
        return header.sortable !== false;
      }) : [];
    }
  }
};
const _sfc_main$1V = {
  name: "RoleEditorComponent",
  props: {
    affiliateId: {
      type: Number,
      required: true
    },
    isEditMode: {
      type: Boolean,
      default: false
    },
    roleTypes: {
      type: Array
    },
    roleTitles: {
      type: Array
    },
    role: {
      type: Object,
      default: function() {
        return {
          AffiliateOfficerRoleId: 0,
          AffiliateOfficerRoleName: "",
          OfficerRoleTitleId: ""
        };
      }
    }
  },
  data: () => ({
    OfficerRoleTypeId: "",
    filteredTitles: [],
    showDialog: true,
    rules: {
      required: (value) => !!value || "Required."
    },
    valid: true
  }),
  methods: {
    save() {
      if (!this.$refs.form.validate()) {
        return;
      }
      let method = "post";
      let url = "/api/v2/affiliateOfficerRole";
      const role = {
        ...this.role,
        AffiliateId: this.affiliateId
      };
      if (this.isEditMode) {
        method = "put";
        url += "/" + this.role.AffiliateOfficerRoleId;
      }
      if (role.AffiliateOfficerRoleId === 0) {
        delete role.AffiliateOfficerRoleId;
      }
      axios({ method, url, data: role }).then((response) => {
      }).finally((response) => {
        this.$emit("saved");
      });
    },
    cancel() {
      this.$emit("canceled");
    },
    filterTitles() {
      this.filteredTitles = this.roleTitles.filter((v) => v.OfficerRoleTypeId === this.OfficerRoleTypeId);
    },
    getTypeFromTitle() {
      if (this.role.OfficerRoleTitleId !== "") {
        const filtered = this.roleTitles.filter((v) => v.OfficerRoleTitleId === this.role.OfficerRoleTitleId);
        if (filtered && filtered.length > 0) {
          return filtered[0].OfficerRoleTypeId;
        }
      }
      return "";
    }
  },
  beforeMount() {
    this.OfficerRoleTypeId = this.getTypeFromTitle();
    this.filterTitles();
  }
};
const _hoisted_1$1l = { key: 0 };
const _hoisted_2$14 = { key: 1 };
const _hoisted_3$U = {
  key: 0,
  class: "text-red"
};
const _hoisted_4$N = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$J = {
  key: 0,
  class: "text-red"
};
function _sfc_render$1V(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VDialog, {
    modelValue: _ctx.showDialog,
    "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => _ctx.showDialog = $event),
    width: "500"
  }, {
    default: withCtx(() => [
      createVNode(VForm, {
        ref: "form",
        modelValue: _ctx.valid,
        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => _ctx.valid = $event)
      }, {
        default: withCtx(() => [
          createVNode(VCard, null, {
            default: withCtx(() => [
              createVNode(VCardTitle, null, {
                default: withCtx(() => [
                  $props.isEditMode ? (openBlock(), createElementBlock("span", _hoisted_1$1l, "Edit")) : (openBlock(), createElementBlock("span", _hoisted_2$14, "Add")),
                  _cache[8] || (_cache[8] = createTextVNode(" Officer Role"))
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardText, null, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    key: "text-role-name",
                    modelValue: $props.role.AffiliateOfficerRoleName,
                    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $props.role.AffiliateOfficerRoleName = $event),
                    rules: [_ctx.rules.required],
                    variant: "underlined"
                  }, {
                    label: withCtx(() => [
                      _ctx.rules.required ? (openBlock(), createElementBlock("span", _hoisted_3$U, "* ")) : createCommentVNode("v-if", true),
                      _cache[9] || (_cache[9] = createTextVNode("Name "))
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["modelValue", "rules"]),
                  createVNode(VSelect, {
                    modelValue: _ctx.OfficerRoleTypeId,
                    "onUpdate:modelValue": [
                      _cache[1] || (_cache[1] = ($event) => _ctx.OfficerRoleTypeId = $event),
                      _cache[2] || (_cache[2] = ($event) => $options.filterTitles())
                    ],
                    items: $props.roleTypes,
                    "item-value": "OfficerRoleTypeId",
                    "item-title": "OfficerRoleTypeName",
                    rules: [_ctx.rules.required],
                    variant: "underlined"
                  }, {
                    label: withCtx(() => [
                      _ctx.rules.required ? (openBlock(), createElementBlock("span", _hoisted_4$N, "* ")) : createCommentVNode("v-if", true),
                      _cache[10] || (_cache[10] = createTextVNode("Type "))
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["modelValue", "items", "rules"]),
                  createVNode(VSelect, {
                    modelValue: $props.role.OfficerRoleTitleId,
                    "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $props.role.OfficerRoleTitleId = $event),
                    "item-title": "OfficerRoleTitleName",
                    "item-value": "OfficerRoleTitleId",
                    items: _ctx.filteredTitles,
                    rules: [_ctx.rules.required],
                    variant: "underlined"
                  }, {
                    label: withCtx(() => [
                      _ctx.rules.required ? (openBlock(), createElementBlock("span", _hoisted_5$J, "* ")) : createCommentVNode("v-if", true),
                      _cache[11] || (_cache[11] = createTextVNode("Title "))
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["modelValue", "items", "rules"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardActions, null, {
                default: withCtx(() => [
                  createVNode(VSpacer),
                  createVNode(VBtn, {
                    elevation: "0",
                    color: "primary",
                    class: "mb-4 btn-block",
                    onClick: _cache[4] || (_cache[4] = ($event) => $options.cancel())
                  }, {
                    default: withCtx(() => _cache[12] || (_cache[12] = [
                      createTextVNode(" Cancel ")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VBtn, {
                    elevation: "0",
                    color: "primary",
                    class: "mb-4 btn-block",
                    onClick: _cache[5] || (_cache[5] = ($event) => $options.save())
                  }, {
                    default: withCtx(() => _cache[13] || (_cache[13] = [
                      createTextVNode(" Save ")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"])
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue"]);
}
const RoleEditorComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1V, [["render", _sfc_render$1V], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/RoleEditorComponent.vue"]]);
const _sfc_main$1U = {
  name: "IndividualAutocomplete",
  props: {
    value: {
      required: true
    },
    individual: {
      default: function() {
        return {
          FirstName: "",
          LastName: ""
        };
      }
    },
    rules: {
      default: function() {
        return [];
      }
    },
    affiliateId: {
      required: true
    },
    affiliateParentFilter: {
      default: false
    },
    label: {
      default: "Individual"
    },
    filter: {
      default: ""
    }
  },
  data: () => ({
    isLoading: false,
    search: "",
    items: []
  }),
  computed: {
    model: {
      get() {
        return this.value;
      },
      set(newValue) {
        this.$emit("input", newValue);
      }
    }
  },
  methods: {
    addLabelToIndividual(individual) {
      if (individual) {
        individual.autoCompleteLabel = individual.FirstName + " " + individual.LastName;
        if (individual.individualMembers && individual.individualMembers.length > 0) {
          individual.autoCompleteLabel += " (" + individual.individualMembers[0].MemberId + ")";
        }
        if (individual.individualAffiliates && individual.individualAffiliates.length > 0) {
          individual.autoCompleteLabel += " (";
          individual.individualAffiliates.forEach((key2, individualAffiliate) => {
            if (individualAffiliate.Affiliate) {
              if (key2 == individual.individualAffiliates.length - 1) {
                individual.autoCompleteLabel += individualAffiliate.Affiliate.AffiliateNumber;
              } else {
                individual.autoCompleteLabel += individualAffiliate.Affiliate.AffiliateNumber + " ,";
              }
            }
          });
          individual.autoCompleteLabel += ")";
        }
      }
      return individual;
    },
    getSearchData(val) {
      this.isLoading = true;
      var url = "";
      url = "/api/v2/aggregate/individual/autocomplete?scope=global&search=" + val + "&affiliateId=" + this.affiliateId + "&filter=" + this.filter + "&affiliateParentFilter=" + this.affiliateParentFilter;
      axios.get(url).then(this.mapResponseToData).catch((err) => {
        console.log(err);
      }).finally(() => this.isLoading = false);
    },
    mapResponseToData(res) {
      this.count = res.data.meta.total;
      this.items = res.data.data.map((c2) => {
        return this.addLabelToIndividual(c2);
      });
    },
    doSearch(val) {
      if (this.isLoading) return;
      if (!val) val = "";
      const selected = this.items.filter((v) => v.autoCompleteLabel === val);
      if (selected && selected.length > 0) return;
      clearTimeout(this._timerId);
      this._timerId = setTimeout(() => {
        this.getSearchData(val);
      }, 500);
    },
    loadSingle() {
      this.isLoading = true;
      axios.get("/api/v2/aggregate/individual/autocomplete?scope=global&id=" + this.value + "&affiliateId=" + this.affiliateId).then(this.mapResponseToData).then(() => {
        if (this.items.length > 0) {
          this.model = this.items[0].IndividualId;
        }
      }).catch((err) => {
        console.log(err);
      }).finally(() => this.isLoading = false);
    }
  },
  watch: {
    search(val) {
      this.doSearch(val);
    },
    affiliateId: {
      handler: function(val, oldVal) {
        this.getSearchData("");
      }
    },
    model: {
      handler: function(val, oldVal) {
        this.loadSingle();
      }
    }
  },
  beforeMount() {
    if (this.value) {
      this.loadSingle();
    }
  }
};
const _hoisted_1$1k = {
  key: 0,
  class: "text-red"
};
function _sfc_render$1U(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VAutocomplete, {
    modelValue: $options.model,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $options.model = $event),
    items: _ctx.items,
    loading: _ctx.isLoading,
    search: _ctx.search,
    "onUpdate:search": _cache[1] || (_cache[1] = ($event) => _ctx.search = $event),
    "item-title": "autoCompleteLabel",
    "item-value": "IndividualId",
    hint: "First Name or Last Name or MemberId",
    "hide-no-data": "",
    "no-filter": "",
    "persistent-hint": "",
    rules: $props.rules,
    variant: "underlined"
  }, {
    label: withCtx(() => [
      $props.rules ? (openBlock(), createElementBlock("span", _hoisted_1$1k, "* ")) : createCommentVNode("v-if", true),
      createTextVNode(
        toDisplayString($props.label),
        1
        /* TEXT */
      )
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue", "items", "loading", "search", "rules"]);
}
const IndividualAutocomplete = /* @__PURE__ */ _export_sfc(_sfc_main$1U, [["render", _sfc_render$1U], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/IndividualAutocomplete.vue"]]);
const _sfc_main$1T = {
  name: "RolePersonEditorComponent",
  components: { IndividualAutocomplete },
  props: {
    isEditMode: {
      type: Boolean,
      default: false
    },
    roles: {
      type: Array
    },
    affiliateOfficer: {
      type: Object,
      default: function() {
        return {
          AffiliateOfficerId: 0,
          AffiliateOfficerRoleId: "",
          IndividualId: "",
          TermStartDate: "",
          TermEndDate: "",
          IsElected: false,
          IsCurrent: true,
          IsPreferredTitle: false,
          AffiliateId: 0
        };
      }
    },
    affiliateId: {
      required: true
    },
    individuals: {
      type: Object | Array,
      default: "",
      required: false
    }
  },
  data: () => ({
    pickerStartDate: false,
    pickerEndDate: false,
    showDialog: true,
    rules: {
      required: (value) => !!value || "Required."
    },
    valid: true,
    isElectedCheckbox: false,
    termEndDate: "",
    termStartDate: ""
  }),
  methods: {
    save() {
      if (this.individuals) {
        const allIndividuals = Object.values(this.individuals).flat();
        const isDuplicateWithoutEndDate = allIndividuals.some((individual) => {
          return individual.Id == this.affiliateOfficer.IndividualId && individual.AffiliateOfficerRoleId == this.affiliateOfficer.AffiliateOfficerRoleId && !individual.TermEndDate;
        });
        if (isDuplicateWithoutEndDate) {
          alert("This individual is already assigned to this role without an end date.");
          return;
        }
      }
      if (!this.$refs.form.validate()) {
        return;
      }
      let method = "post";
      let url = "/api/v2/affiliateOfficer";
      this.affiliateOfficer.IsElected = this.isElectedCheckbox ? 1 : 0;
      this.affiliateOfficer.TermEndDate = this.termEndDate;
      this.affiliateOfficer.TermStartDate = this.termStartDate;
      const affiliateOfficer = {
        ...this.affiliateOfficer,
        AffiliateId: this.affiliateId
      };
      if (this.isEditMode) {
        method = "put";
        url += "/" + this.affiliateOfficer.AffiliateOfficerId;
      }
      if (affiliateOfficer.AffiliateOfficerId === 0) {
        delete affiliateOfficer.AffiliateOfficerId;
      }
      axios({ method, url, data: affiliateOfficer }).then((response) => {
      }).finally(() => {
        this.$emit("saved");
      });
    },
    cancel() {
      this.$emit("canceled");
    }
  },
  beforeMount() {
    if (this.isEditMode) {
      this.affiliateOfficer.AffiliateOfficerRoleId = Number(this.affiliateOfficer.AffiliateOfficerRoleId);
      this.affiliateOfficer.IndividualId = Number(this.affiliateOfficer.Id);
      this.isElectedCheckbox = this.affiliateOfficer.IsElected == 1;
    }
  },
  watch: {
    "affiliateOfficer.IsElected": {
      immediate: true,
      handler(newVal) {
        this.isElectedCheckbox = newVal === 1;
      }
    },
    "affiliateOfficer.TermEndDate": {
      immediate: true,
      handler(newVal) {
        this.termEndDate = newVal || "";
      }
    },
    "affiliateOfficer.TermStartDate": {
      immediate: true,
      handler(newVal) {
        this.termStartDate = newVal || "";
      }
    }
  }
};
const _hoisted_1$1j = { key: 0 };
const _hoisted_2$13 = { key: 1 };
const _hoisted_3$T = {
  key: 0,
  class: "text-red"
};
const _hoisted_4$M = { class: "data-container" };
const _hoisted_5$I = { class: "data-container" };
function _sfc_render$1T(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_IndividualAutocomplete = resolveComponent("IndividualAutocomplete");
  return openBlock(), createBlock(VDialog, {
    modelValue: _ctx.showDialog,
    "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => _ctx.showDialog = $event),
    width: "500"
  }, {
    default: withCtx(() => [
      createVNode(VForm, {
        ref: "form",
        modelValue: _ctx.valid,
        "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => _ctx.valid = $event)
      }, {
        default: withCtx(() => [
          createVNode(VCard, null, {
            default: withCtx(() => [
              createVNode(VCardTitle, null, {
                default: withCtx(() => [
                  $props.isEditMode ? (openBlock(), createElementBlock("span", _hoisted_1$1j, "Edit")) : (openBlock(), createElementBlock("span", _hoisted_2$13, "Add")),
                  _cache[15] || (_cache[15] = createTextVNode(" Person to Role"))
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardText, null, {
                default: withCtx(() => [
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      createVNode(VCol, null, {
                        default: withCtx(() => [
                          createVNode(VSelect, {
                            modelValue: $props.affiliateOfficer.AffiliateOfficerRoleId,
                            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $props.affiliateOfficer.AffiliateOfficerRoleId = $event),
                            "item-title": "AffiliateOfficerRoleName",
                            "item-value": "AffiliateOfficerRoleId",
                            items: $props.roles,
                            affiliateId: $props.affiliateId,
                            rules: [_ctx.rules.required],
                            variant: "underlined"
                          }, {
                            label: withCtx(() => [
                              _ctx.rules.required ? (openBlock(), createElementBlock("span", _hoisted_3$T, "* ")) : createCommentVNode("v-if", true),
                              _cache[16] || (_cache[16] = createTextVNode("Role "))
                            ]),
                            _: 1
                            /* STABLE */
                          }, 8, ["modelValue", "items", "affiliateId", "rules"]),
                          createVNode(_component_IndividualAutocomplete, {
                            modelValue: $props.affiliateOfficer.IndividualId,
                            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $props.affiliateOfficer.IndividualId = $event),
                            individual: $props.affiliateOfficer,
                            rules: [_ctx.rules.required],
                            affiliateId: $props.affiliateId,
                            filter: "member"
                          }, null, 8, ["modelValue", "individual", "rules", "affiliateId"])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      createVNode(VCol, {
                        cols: "12",
                        lg: "6"
                      }, {
                        default: withCtx(() => [
                          createBaseVNode("div", _hoisted_4$M, [
                            createVNode(VMenu, {
                              modelValue: _ctx.pickerStartDate,
                              "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => _ctx.pickerStartDate = $event),
                              "close-on-content-click": false,
                              offset: 40,
                              transition: "scale-transition",
                              "min-width": "290px"
                            }, {
                              activator: withCtx(({ props }) => [
                                createVNode(VTextField, mergeProps({
                                  modelValue: _ctx.termStartDate,
                                  "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.termStartDate = $event),
                                  hint: "YYYY-MM-DD",
                                  label: "Start Date:"
                                }, props, { variant: "underlined" }), null, 16, ["modelValue"])
                              ]),
                              default: withCtx(() => [
                                createVNode(VDatePicker, {
                                  modelValue: _ctx.termStartDate,
                                  "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => _ctx.termStartDate = $event),
                                  onInput: _cache[4] || (_cache[4] = ($event) => _ctx.pickerStartDate = false)
                                }, null, 8, ["modelValue"])
                              ]),
                              _: 1
                              /* STABLE */
                            }, 8, ["modelValue"])
                          ])
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VCol, {
                        cols: "12",
                        lg: "6"
                      }, {
                        default: withCtx(() => [
                          createBaseVNode("div", _hoisted_5$I, [
                            createVNode(VMenu, {
                              modelValue: _ctx.pickerEndDate,
                              "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => _ctx.pickerEndDate = $event),
                              "close-on-content-click": false,
                              offset: 40,
                              transition: "scale-transition",
                              "min-width": "290px"
                            }, {
                              activator: withCtx(({ props }) => [
                                createVNode(VTextField, mergeProps({
                                  modelValue: _ctx.termEndDate,
                                  "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => _ctx.termEndDate = $event),
                                  hint: "YYYY-MM-DD",
                                  label: "End Date:"
                                }, props, { variant: "underlined" }), null, 16, ["modelValue"])
                              ]),
                              default: withCtx(() => [
                                createVNode(VDatePicker, {
                                  modelValue: _ctx.termEndDate,
                                  "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => _ctx.termEndDate = $event),
                                  onInput: _cache[8] || (_cache[8] = ($event) => _ctx.pickerEndDate = false)
                                }, null, 8, ["modelValue"])
                              ]),
                              _: 1
                              /* STABLE */
                            }, 8, ["modelValue"])
                          ])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      createVNode(VCol, null, {
                        default: withCtx(() => [
                          createVNode(VCheckbox, {
                            key: "text-is-elected",
                            label: "Elected Position",
                            modelValue: _ctx.isElectedCheckbox,
                            "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => _ctx.isElectedCheckbox = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardActions, null, {
                default: withCtx(() => [
                  createVNode(VSpacer),
                  createVNode(VBtn, {
                    color: "default",
                    variant: "elevated",
                    onClick: _cache[11] || (_cache[11] = ($event) => $options.cancel())
                  }, {
                    default: withCtx(() => _cache[17] || (_cache[17] = [
                      createTextVNode(" Cancel ")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VBtn, {
                    elevation: "0",
                    color: "primary",
                    variant: "elevated",
                    onClick: _cache[12] || (_cache[12] = ($event) => $options.save())
                  }, {
                    default: withCtx(() => _cache[18] || (_cache[18] = [
                      createTextVNode(" Save ")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"])
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue"]);
}
const RolePersonEditorComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1T, [["render", _sfc_render$1T], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/RolePersonEditorComponent.vue"]]);
const _sfc_main$1S = {
  name: "AffiliateOfficerRoleListComponent",
  components: { RoleEditorComponent, RolePersonEditorComponent },
  mixins: [headersMixin],
  props: {
    role: {},
    individuals: {},
    roleTypes: {},
    roleTitles: {},
    roleObject: {},
    roles: {
      type: Array
    },
    affiliateId: {
      required: true
    },
    noDataText: {
      type: String,
      required: false
    },
    disabled: {
      type: Boolean,
      default: false
    }
  },
  data: () => ({
    headers: [
      { title: "Name", value: "name", visible: true, sortable: false },
      { title: "Is Elected", value: "IsElected", visible: true, sortable: false },
      { title: "Start Date", value: "TermStartDate", visible: true, sortable: false },
      { title: "End Date", value: "TermEndDate", visible: true, sortable: true },
      { title: "", value: "actions", visible: true, sortable: false }
    ],
    editRole: false,
    deleteDialog: false,
    editIndividual: false,
    selectedIndividual: {},
    pageSize: 10,
    currentDate: format(/* @__PURE__ */ new Date(), "MMM dd, yyyy")
    // moment: 'MMM DD,YYYY'
  }),
  methods: {
    checkDate(endDate) {
      return !endDate || compareAsc(new Date(endDate), /* @__PURE__ */ new Date()) === 1;
    },
    hideFooter() {
      return this.individuals != null && this.individuals.length > 0 ? false : true;
    },
    deleteAffiliateOfficerRole(item) {
      if (confirm("are you sure you want to delete individual assignment for " + item.FirstName + " " + item.LastName + "?")) {
        axios.delete("/api/v2/affiliateOfficer/" + item.AffiliateOfficerId).finally(() => {
          this.$emit("role-deleted");
        });
      }
    },
    deleteRole() {
      if (this.individuals && this.individuals.length > 0) {
        alert("There are individuals assigned to the role " + this.roleObject.AffiliateOfficerRoleName + ". Please remove the individuals and try again.");
      } else {
        if (confirm("are you sure you want to delete role " + this.roleObject.AffiliateOfficerRoleName)) {
          axios.delete("/api/v2/affiliateOfficerRole/" + this.roleObject.AffiliateOfficerRoleId).finally(() => {
            this.$emit("role-deleted");
            this.deleteDialog = false;
          });
        }
      }
    },
    getNoDataText() {
      if (this.noDataText) {
        return this.noDataText;
      }
      return "There are no individuals in the " + this.roleObject.AffiliateOfficerRoleName + " role.";
    },
    selectIndividualForEdit(individual) {
      this.selectedIndividual = individual;
      this.editIndividual = true;
    }
  }
};
const _hoisted_1$1i = { class: "mb-4" };
const _hoisted_2$12 = { class: "d-flex align-center ga-2" };
const _hoisted_3$S = { class: "data-value" };
const _hoisted_4$L = { class: "data-value" };
function _sfc_render$1S(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_RoleEditorComponent = resolveComponent("RoleEditorComponent");
  const _component_RolePersonEditorComponent = resolveComponent("RolePersonEditorComponent");
  return openBlock(), createElementBlock("div", _hoisted_1$1i, [
    createBaseVNode("h5", _hoisted_2$12, [
      createTextVNode(
        toDisplayString($props.roleObject.AffiliateOfficerRoleName) + " ",
        1
        /* TEXT */
      ),
      createVNode(VBtnGroup, null, {
        default: withCtx(() => [
          createVNode(VBtn, {
            size: "small",
            icon: "fa-edit",
            onClick: _cache[0] || (_cache[0] = ($event) => _ctx.editRole = !_ctx.editRole),
            variant: "elevated"
          }),
          createVNode(VBtn, {
            size: "small",
            icon: "fa-trash",
            disabled: Boolean($props.individuals),
            onClick: _cache[1] || (_cache[1] = ($event) => _ctx.deleteDialog = !_ctx.deleteDialog),
            variant: "elevated"
          }, null, 8, ["disabled"])
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VTooltip, {
        location: "right",
        color: "primary-darken-2"
      }, {
        activator: withCtx(({ props }) => [
          createVNode(
            VBtn,
            mergeProps({
              variant: "text",
              color: "primary-darken-1",
              class: "btn-tooltip ml-4"
            }, props, {
              size: "small",
              icon: "mdi:mdi-information-outline"
            }),
            null,
            16
            /* FULL_PROPS */
          )
        ]),
        default: withCtx(() => [
          _cache[9] || (_cache[9] = createBaseVNode(
            "span",
            null,
            "Officer role can not be deleted if an individual is associated with the role.",
            -1
            /* HOISTED */
          ))
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _ctx.editRole ? (openBlock(), createBlock(_component_RoleEditorComponent, {
      key: 0,
      onCanceled: _cache[2] || (_cache[2] = ($event) => _ctx.editRole = false),
      onSaved: _cache[3] || (_cache[3] = ($event) => _ctx.editRole = false),
      "is-edit-mode": true,
      roleTypes: $props.roleTypes,
      roleTitles: $props.roleTitles,
      role: $props.roleObject,
      affiliateId: $props.affiliateId
    }, null, 8, ["roleTypes", "roleTitles", "role", "affiliateId"])) : createCommentVNode("v-if", true),
    createVNode(VDialog, {
      modelValue: _ctx.deleteDialog,
      "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => _ctx.deleteDialog = $event),
      width: "500"
    }, {
      default: withCtx(() => [
        createVNode(VCard, null, {
          default: withCtx(() => [
            createVNode(VCardTitle, null, {
              default: withCtx(() => _cache[10] || (_cache[10] = [
                createTextVNode("Delete Officer Role")
              ])),
              _: 1
              /* STABLE */
            }),
            createVNode(VCardText, null, {
              default: withCtx(() => [
                createTextVNode(
                  " Delete role " + toDisplayString($props.roleObject.AffiliateOfficerRoleName),
                  1
                  /* TEXT */
                )
              ]),
              _: 1
              /* STABLE */
            }),
            createVNode(VCardActions, null, {
              default: withCtx(() => [
                createVNode(VSpacer),
                createVNode(VBtn, {
                  onClick: _cache[4] || (_cache[4] = ($event) => _ctx.deleteDialog = false),
                  variant: "elevated"
                }, {
                  default: withCtx(() => _cache[11] || (_cache[11] = [
                    createTextVNode("Cancel")
                  ])),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VBtn, {
                  onClick: _cache[5] || (_cache[5] = ($event) => $options.deleteRole()),
                  color: "red",
                  variant: "elevated"
                }, {
                  default: withCtx(() => _cache[12] || (_cache[12] = [
                    createTextVNode("Delete")
                  ])),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          _: 1
          /* STABLE */
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["modelValue"]),
    _ctx.editIndividual ? (openBlock(), createBlock(_component_RolePersonEditorComponent, {
      key: 1,
      onCanceled: _cache[7] || (_cache[7] = ($event) => _ctx.editIndividual = false),
      onSaved: _cache[8] || (_cache[8] = ($event) => _ctx.editIndividual = false),
      "is-edit-mode": true,
      roles: $props.roles,
      affiliateOfficer: _ctx.selectedIndividual,
      affiliateId: $props.affiliateId
    }, null, 8, ["roles", "affiliateOfficer", "affiliateId"])) : createCommentVNode("v-if", true),
    createVNode(VDataTable, {
      headers: _ctx.getHeaders(_ctx.headers),
      items: $props.individuals,
      "hide-default-footer": $options.hideFooter(),
      class: "elevation-1",
      "no-data-text": $options.getNoDataText()
    }, {
      [`item.actions`]: withCtx(({ item }) => [
        createBaseVNode("div", null, [
          createVNode(VBtn, {
            size: "small",
            icon: "fa-edit",
            onClick: ($event) => $options.selectIndividualForEdit(item),
            variant: "text"
          }, null, 8, ["onClick"]),
          createCommentVNode(` <v-btn small :disabled="checkDate(props.item.TermEndDate)" @click="deleteAffiliateOfficerRole(props.item)">
                        <i class="fa fa-trash"/>

                    </v-btn>
                    <v-tooltip
                        right
                        color="primary darken-2"
                    >
                        <template #activator="{ on, attrs }">
                            <v-btn
                                color="primary"
                                icon
                                v-bind="attrs"
                                class="btn-tooltip ml-4"
                                v-on="on"
                            >
                                <v-icon
                                    small
                                    color="primary darken-1"
                                >
                                    mdi-information-outline
                                </v-icon>
                            </v-btn>
                        </template>
                        <span>Individual can not be deleted from the officer role without an end date. End date must be today's date or earlier to delete an officer.</span>
                    </v-tooltip> `)
        ])
      ]),
      [`item.name`]: withCtx(({ item }) => [
        createBaseVNode(
          "div",
          null,
          toDisplayString(item.FirstName) + " " + toDisplayString(item.LastName),
          1
          /* TEXT */
        )
      ]),
      [`item.TermStartDate`]: withCtx(({ item }) => [
        createBaseVNode(
          "div",
          _hoisted_3$S,
          toDisplayString(_ctx.$filters.formatDate(item.TermStartDate)),
          1
          /* TEXT */
        )
      ]),
      [`item.TermEndDate`]: withCtx(({ item }) => [
        createBaseVNode(
          "div",
          _hoisted_4$L,
          toDisplayString(_ctx.$filters.formatDate(item.TermEndDate)),
          1
          /* TEXT */
        )
      ]),
      _: 2
      /* DYNAMIC */
    }, 1032, ["headers", "items", "hide-default-footer", "no-data-text"])
  ]);
}
const AffiliateOfficerRoleListComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1S, [["render", _sfc_render$1S], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/AffiliateOfficerRoleListComponent.vue"]]);
const _sfc_main$1R = {
  name: "OfficerRolesEditComponent",
  components: {
    AffiliateOfficerRoleListComponent,
    RoleEditorComponent,
    RolePersonEditorComponent
  },
  props: {
    roles: {},
    individuals: {
      type: Object | Array,
      default: "",
      required: false
    },
    roleTypes: {},
    roleTitles: {},
    affiliateId: {
      required: true
    }
  },
  data: () => ({
    filter: {
      firstName: "",
      lastName: ""
    },
    alertRole: false,
    alertTypeRole: "success",
    alertTextRole: "",
    alertPersonToRole: false,
    alertTypePersonToRole: "success",
    alertTextPersonToRole: "",
    showAddRole: false,
    showAddPersonToRole: false,
    filteredIndividuals: {},
    noDataText: ""
  }),
  methods: {
    search() {
      if (this.filter.firstName !== "" || this.filter.lastName !== "") {
        this.filteredIndividuals = {};
        for (const role in this.individuals) {
          if (this.individuals.hasOwnProperty(role)) {
            this.filteredIndividuals[role] = this.individuals[role].filter((v) => {
              return (this.filter.firstName === "" || v.FirstName.toLowerCase().includes(this.filter.firstName.toLowerCase())) && (this.filter.lastName === "" || v.LastName.toLowerCase().includes(this.filter.lastName.toLowerCase()));
            });
          }
        }
        this.noDataText = "No results found for '[" + this.filter.firstName + "] + [" + this.filter.lastName + "]' name search.";
      } else {
        this.clear();
      }
    },
    clear() {
      this.filter = {
        firstName: "",
        lastName: ""
      };
      this.filteredIndividuals = this.individuals;
      this.noDataText = "";
    },
    emitReload() {
      this.$emit("reload");
    },
    getDataFromApi() {
    },
    roleSaved() {
      this.alertRole = true;
      this.alertTypeRole = "success";
      this.alertTextRole = "Role saved.";
      this.emitReload();
      this.showAddRole = false;
    },
    personToRoleSaved() {
      this.alertPersonToRole = true;
      this.alertTypePersonToRole = "success";
      this.alertTextPersonToRole = "Person to role saved";
      this.emitReload();
      this.showAddPersonToRole = false;
    }
  },
  watch: {
    individuals: function(newVal) {
      this.filteredIndividuals = newVal;
    }
  }
};
function _sfc_render$1R(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_RoleEditorComponent = resolveComponent("RoleEditorComponent");
  const _component_RolePersonEditorComponent = resolveComponent("RolePersonEditorComponent");
  const _component_AffiliateOfficerRoleListComponent = resolveComponent("AffiliateOfficerRoleListComponent");
  return openBlock(), createElementBlock(
    Fragment,
    null,
    [
      createVNode(VCard, { class: "mb-4" }, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => _cache[10] || (_cache[10] = [
              createTextVNode(" Search for Officers ")
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        key: "text-first-name",
                        label: "First Name",
                        modelValue: _ctx.filter.firstName,
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.filter.firstName = $event),
                        variant: "underlined"
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        key: "text-last-name",
                        label: "Last Name",
                        modelValue: _ctx.filter.lastName,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.filter.lastName = $event),
                        variant: "underlined"
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "d-flex justify-end ga-2" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        elevation: "0",
                        color: "primary",
                        class: "mb-4 btn-block",
                        onClick: _cache[2] || (_cache[2] = ($event) => $options.search())
                      }, {
                        default: withCtx(() => _cache[11] || (_cache[11] = [
                          createTextVNode("Search")
                        ])),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VBtn, {
                        elevation: "0",
                        color: "default",
                        class: "mb-4 btn-block",
                        onClick: _cache[3] || (_cache[3] = ($event) => $options.clear())
                      }, {
                        default: withCtx(() => _cache[12] || (_cache[12] = [
                          createTextVNode("Clear")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardActions, null, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                color: "primary",
                onClick: _cache[4] || (_cache[4] = ($event) => _ctx.showAddRole = true),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[13] || (_cache[13] = [
                  createTextVNode("Add Role")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VBtn, {
                color: "primary",
                onClick: _cache[5] || (_cache[5] = ($event) => _ctx.showAddPersonToRole = true),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[14] || (_cache[14] = [
                  createTextVNode("Add Person to Role")
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      _ctx.showAddRole ? (openBlock(), createBlock(_component_RoleEditorComponent, {
        key: 0,
        onCanceled: _cache[6] || (_cache[6] = ($event) => _ctx.showAddRole = false),
        onSaved: $options.roleSaved,
        roleTypes: $props.roleTypes,
        roleTitles: $props.roleTitles,
        affiliateId: $props.affiliateId
      }, null, 8, ["onSaved", "roleTypes", "roleTitles", "affiliateId"])) : createCommentVNode("v-if", true),
      createVNode(VAlert, {
        type: _ctx.alertTypeRole,
        modelValue: _ctx.alertRole,
        "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => _ctx.alertRole = $event),
        closable: "",
        "close-text": "Dismiss"
      }, {
        default: withCtx(() => [
          createTextVNode(
            toDisplayString(_ctx.alertTextRole),
            1
            /* TEXT */
          )
        ]),
        _: 1
        /* STABLE */
      }, 8, ["type", "modelValue"]),
      _ctx.showAddPersonToRole ? (openBlock(), createBlock(_component_RolePersonEditorComponent, {
        key: 1,
        onCanceled: _cache[8] || (_cache[8] = ($event) => _ctx.showAddPersonToRole = false),
        onSaved: $options.personToRoleSaved,
        roles: $props.roles,
        affiliateId: $props.affiliateId,
        individuals: _ctx.filteredIndividuals
      }, null, 8, ["onSaved", "roles", "affiliateId", "individuals"])) : createCommentVNode("v-if", true),
      createVNode(VAlert, {
        type: _ctx.alertTypePersonToRole,
        modelValue: _ctx.alertPersonToRole,
        "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => _ctx.alertPersonToRole = $event),
        closable: "",
        "close-text": "Dismiss"
      }, {
        default: withCtx(() => [
          createTextVNode(
            toDisplayString(_ctx.alertTextPersonToRole),
            1
            /* TEXT */
          )
        ]),
        _: 1
        /* STABLE */
      }, 8, ["type", "modelValue"]),
      (openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList($props.roles, (role) => {
          return openBlock(), createBlock(_component_AffiliateOfficerRoleListComponent, {
            key: role.AffiliateOfficerRoleId,
            role: role.AffiliateOfficerRoleName,
            individuals: _ctx.filteredIndividuals[role.AffiliateOfficerRoleName],
            roleTypes: $props.roleTypes,
            roleTitles: $props.roleTitles,
            roleObject: role,
            roles: $props.roles,
            affiliateId: $props.affiliateId,
            onRoleDeleted: $options.emitReload,
            noDataText: _ctx.noDataText
          }, null, 8, ["role", "individuals", "roleTypes", "roleTitles", "roleObject", "roles", "affiliateId", "onRoleDeleted", "noDataText"]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))
    ],
    64
    /* STABLE_FRAGMENT */
  );
}
const OfficerRolesEditComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1R, [["render", _sfc_render$1R], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/OfficerRolesEditComponent.vue"]]);
const _sfc_main$1Q = {
  name: "OfficerRolesListComponent",
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  data: () => ({
    affiliateOfficers: [],
    loading: true,
    options: {
      sortBy: [{ key: "AffiliateOfficerRole.officerRoleTitle.DisplayOrder", order: "asc" }]
    },
    headers: [
      { title: "Officer Name", value: "Individual.FullName" },
      { title: "Officer Roles", value: "AffiliateOfficerRole.AffiliateOfficerRoleName" },
      { title: "Start Date", value: "StartDate" },
      { title: "Phone Number", value: "Individual.individualPhones[0].PhoneNumber" },
      { title: "Email", value: "Individual.individualEmails[0].Email" }
    ]
  }),
  mounted() {
    this.getDataFromApi();
  },
  watch: {
    options: {
      handler() {
        this.getDataFromApi();
      },
      deep: true,
      immediate: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/affiliate/" + this.affiliateId + "?include=affiliateOfficerRoles.officerRoleTitle,currentAffiliateOfficers.AffiliateOfficerRole,currentAffiliateOfficers.Individual.individualEmails,currentAffiliateOfficers.Individual.individualPhones";
      return axios.get(url).then((response) => {
        this.affiliateOfficers = response.data.data.currentAffiliateOfficers;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$1h = { key: 0 };
function _sfc_render$1Q(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_router_link = resolveComponent("router-link");
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VDataTable, {
        headers: _ctx.headers,
        options: _ctx.options,
        "onUpdate:options": _cache[0] || (_cache[0] = ($event) => _ctx.options = $event),
        loading: _ctx.loading,
        items: _ctx.affiliateOfficers,
        class: "mobile-global-card-table",
        "mobile-breakpoint": 992
      }, {
        [`item.Individual.FullName`]: withCtx(({ item }) => [
          item.Individual ? (openBlock(), createElementBlock("span", _hoisted_1$1h, [
            createVNode(_component_router_link, {
              to: { name: "IndividualDetails", params: { id: item.Individual.IndividualId } }
            }, {
              default: withCtx(() => [
                createTextVNode(
                  toDisplayString(item.Individual.FullName),
                  1
                  /* TEXT */
                )
              ]),
              _: 2
              /* DYNAMIC */
            }, 1032, ["to"])
          ])) : createCommentVNode("v-if", true)
        ]),
        [`item.StartDate`]: withCtx(({ item }) => [
          createTextVNode(
            toDisplayString(_ctx.$filters.formatDate(item.TermStartDate)),
            1
            /* TEXT */
          )
        ]),
        _: 2
        /* DYNAMIC */
      }, 1032, ["headers", "options", "loading", "items"])
    ]),
    _: 1
    /* STABLE */
  });
}
const OfficerRolesListComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1Q, [["render", _sfc_render$1Q], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/OfficerRolesListComponent.vue"]]);
const _sfc_main$1P = {
  name: "OfficerRolesComponent",
  components: {
    FlipCard,
    OfficerRolesEditComponent,
    OfficerRolesListComponent
  },
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  data: () => ({
    roles: [],
    individuals: {},
    loading: true,
    flipped: false,
    roleTypes: [],
    roleTitles: [],
    rolesObjects: [],
    panel: []
  }),
  methods: {
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    onCancel() {
      this.flipped = false;
      this.$refs.officerlist.getDataFromApi();
    },
    getDataFromApi() {
      axios.get("/api/v2/officerRoleType?per_page=50").then((response) => {
        this.roleTypes = response.data.data;
      });
      axios.get("/api/v2/officerRoleTitle?per_page=50").then((response) => {
        this.roleTitles = response.data.data;
      });
      this.loading = true;
      let url = "/api/v2/affiliateOfficerRole/" + this.affiliateId + "?scope=global";
      return axios.get(url).then((response) => {
        this.roles = [];
        for (const role in response.data.data) {
          if (response.data.data.hasOwnProperty(role)) {
            this.roles.push(role);
          }
        }
        this.individuals = response.data.data;
        this.rolesObjects = response.data.roles;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
function _sfc_render$1P(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_officer_roles_list_component = resolveComponent("officer-roles-list-component");
  const _component_OfficerRolesEditComponent = resolveComponent("OfficerRolesEditComponent");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, {
    value: "officerRole",
    "onGroup:selected": $options.onExpand
  }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[2] || (_cache[2] = [
          createTextVNode(" Officer Roles ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: _ctx.flipped }, {
            front: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        color: "primary",
                        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.flipped = true)
                      }, {
                        default: withCtx(() => _cache[3] || (_cache[3] = [
                          createTextVNode("Manage")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(_component_officer_roles_list_component, {
                        affiliateId: $props.affiliateId,
                        ref: "officerlist"
                      }, null, 8, ["affiliateId"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            back: withCtx(() => [
              createVNode(VRow, { class: "mb-4" }, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        color: "primary",
                        onClick: $options.onCancel
                      }, {
                        default: withCtx(() => _cache[4] || (_cache[4] = [
                          createTextVNode("Cancel")
                        ])),
                        _: 1
                        /* STABLE */
                      }, 8, ["onClick"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(_component_OfficerRolesEditComponent, {
                onCancelEditOfficerRolesManager: _cache[1] || (_cache[1] = ($event) => _ctx.flipped = false),
                roles: _ctx.rolesObjects,
                individuals: _ctx.individuals,
                roleTypes: _ctx.roleTypes,
                roleTitles: _ctx.roleTitles,
                affiliateId: $props.affiliateId,
                onReload: $options.getDataFromApi
              }, null, 8, ["roles", "individuals", "roleTypes", "roleTitles", "affiliateId", "onReload"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const OfficerRolesComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1P, [["render", _sfc_render$1P], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/OfficerRolesComponent.vue"]]);
const _sfc_main$1O = {
  name: "AffiliateSummaryComponent",
  data() {
    return {
      affiliate: [],
      parentAffiliate: [],
      retireeDestinationName: "",
      loading: false
    };
  },
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  methods: {
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/aggregate/affiliate/summary/" + this.affiliateId + "?scope=global";
      return axios.get(url).then((response) => {
        this.affiliate = response.data.data;
        if (this.affiliate.ParentAffiliateId && this.affiliate.ParentAffiliateId !== this.affiliateId) {
          axios.get("/api/v2/aggregate/affiliate/summary/" + this.affiliate.ParentAffiliateId + "?scope=global").then((parentResponse) => {
            this.parentAffiliate = parentResponse.data.data;
          });
        }
        if (this.affiliate.RetireeEntityType && this.affiliate.RetireeEntityType.EntityTypeName === "Unit") {
          axios.get("/api/v2/unit/" + this.affiliate.RetireeDestinationId + "?include=LocalAgreement.Employer.Chapter.Affiliate&scope=global").then((retireeUnitResponse) => {
            this.retireeDestinationName = retireeUnitResponse.data.data ? retireeUnitResponse.data.data.UnitName + " (Affiliate: " + retireeUnitResponse.data.data.LocalAgreement.Employer.Chapter.Affiliate.AffiliateName + " - " + retireeUnitResponse.data.data.LocalAgreement.Employer.Chapter.Affiliate.AffiliateNumber + ")" : "";
          });
        } else if (this.affiliate.RetireeEntityType && this.affiliate.RetireeEntityType.EntityTypeName === "Affiliate") {
          axios.get("/api/v2/affiliate/" + this.affiliate.RetireeDestinationId + "?scope=global&include=affiliateCommittee").then((retireeAffiliateResponse) => {
            this.retireeDestinationName = retireeAffiliateResponse.data.data ? retireeAffiliateResponse.data.data.AffiliateName + " (" + retireeAffiliateResponse.data.data.AffiliateNumber + ")" : "";
          });
        }
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$1g = { class: "data-container" };
const _hoisted_2$11 = {
  key: 0,
  class: "data-value"
};
const _hoisted_3$R = { class: "data-container" };
const _hoisted_4$K = {
  key: 0,
  class: "data-value"
};
const _hoisted_5$H = { class: "data-container" };
const _hoisted_6$D = {
  key: 0,
  class: "data-value"
};
const _hoisted_7$y = { class: "data-container" };
const _hoisted_8$r = {
  key: 0,
  class: "data-value"
};
const _hoisted_9$q = { class: "data-container" };
const _hoisted_10$n = {
  key: 0,
  class: "data-value"
};
const _hoisted_11$k = {
  key: 0,
  class: "data-container"
};
const _hoisted_12$k = {
  key: 0,
  class: "data-value"
};
const _hoisted_13$h = { class: "data-container" };
const _hoisted_14$g = {
  key: 0,
  class: "data-value"
};
const _hoisted_15$g = { class: "data-container" };
const _hoisted_16$g = {
  key: 0,
  class: "data-value"
};
const _hoisted_17$f = { class: "data-container" };
const _hoisted_18$e = {
  key: 0,
  class: "data-value"
};
const _hoisted_19$e = { class: "data-container" };
const _hoisted_20$d = {
  key: 0,
  class: "data-value"
};
const _hoisted_21$d = { class: "data-container" };
const _hoisted_22$b = {
  key: 0,
  class: "data-value"
};
const _hoisted_23$b = {
  key: 1,
  class: "data-value"
};
const _hoisted_24$a = { class: "data-container" };
const _hoisted_25$9 = {
  key: 0,
  class: "data-value"
};
const _hoisted_26$9 = { class: "data-container" };
const _hoisted_27$9 = {
  key: 0,
  class: "data-value"
};
const _hoisted_28$9 = { class: "data-container" };
const _hoisted_29$9 = { class: "data-container" };
const _hoisted_30$9 = {
  key: 0,
  class: "data-value"
};
const _hoisted_31$9 = {
  key: 1,
  class: "data-value"
};
const _hoisted_32$7 = { class: "data-container" };
const _hoisted_33$7 = {
  key: 0,
  class: "data-value"
};
const _hoisted_34$6 = { class: "data-container" };
const _hoisted_35$6 = {
  key: 0,
  class: "data-value"
};
const _hoisted_36$6 = { class: "data-container" };
const _hoisted_37$6 = {
  key: 0,
  class: "data-value"
};
const _hoisted_38$5 = { class: "data-container" };
const _hoisted_39$5 = {
  key: 0,
  class: "data-value"
};
const _hoisted_40$5 = { class: "data-container" };
const _hoisted_41$5 = {
  key: 0,
  class: "data-value"
};
const _hoisted_42$5 = { class: "data-container" };
const _hoisted_43$5 = {
  key: 0,
  class: "data-value"
};
const _hoisted_44$5 = { class: "data-container" };
const _hoisted_45$5 = {
  key: 0,
  class: "data-value"
};
const _hoisted_46$5 = { class: "data-container" };
const _hoisted_47$5 = {
  key: 0,
  class: "data-value"
};
const _hoisted_48$5 = {
  key: 1,
  class: "data-value"
};
const _hoisted_49$5 = { class: "data-container" };
const _hoisted_50$5 = {
  key: 0,
  class: "data-value"
};
const _hoisted_51$5 = {
  key: 1,
  class: "data-value"
};
const _hoisted_52$5 = { class: "data-container" };
const _hoisted_53$5 = {
  key: 0,
  class: "data-value"
};
const _hoisted_54$5 = {
  key: 1,
  class: "data-value"
};
const _hoisted_55$5 = { class: "data-container" };
const _hoisted_56$5 = {
  key: 0,
  class: "data-value"
};
const _hoisted_57$5 = {
  key: 1,
  class: "data-value"
};
const _hoisted_58$5 = { class: "data-container" };
const _hoisted_59$5 = {
  key: 0,
  class: "data-value"
};
const _hoisted_60$5 = { class: "data-container" };
const _hoisted_61$5 = {
  key: 0,
  class: "data-value"
};
const _hoisted_62$5 = {
  key: 1,
  class: "data-value"
};
const _hoisted_63$5 = {
  key: 2,
  class: "data-value"
};
const _hoisted_64$5 = { class: "data-container" };
const _hoisted_65$5 = {
  key: 0,
  class: "data-value"
};
const _hoisted_66$5 = { class: "data-container" };
const _hoisted_67$5 = {
  key: 0,
  class: "data-value"
};
const _hoisted_68$3 = {
  key: 1,
  class: "data-value"
};
const _hoisted_69$2 = { class: "data-container" };
const _hoisted_70$2 = {
  key: 0,
  class: "data-value"
};
const _hoisted_71$2 = {
  key: 1,
  class: "data-value"
};
const _hoisted_72$2 = { class: "data-container" };
const _hoisted_73$2 = {
  key: 0,
  class: "data-value"
};
const _hoisted_74$2 = {
  key: 1,
  class: "data-value"
};
const _hoisted_75$2 = { class: "data-container" };
const _hoisted_76$2 = {
  key: 0,
  class: "data-value"
};
const _hoisted_77$2 = {
  key: 1,
  class: "data-value"
};
const _hoisted_78$2 = { class: "data-container" };
const _hoisted_79$2 = {
  key: 0,
  class: "data-value"
};
const _hoisted_80$2 = {
  key: 1,
  class: "data-value"
};
const _hoisted_81$2 = { class: "data-container" };
const _hoisted_82$2 = {
  key: 0,
  class: "data-value"
};
const _hoisted_83$1 = {
  key: 1,
  class: "data-value"
};
const _hoisted_84$1 = { class: "data-container" };
const _hoisted_85$1 = {
  key: 0,
  class: "data-value"
};
const _hoisted_86$1 = {
  key: 1,
  class: "data-value"
};
const _hoisted_87$1 = { class: "data-container" };
const _hoisted_88$1 = {
  key: 0,
  class: "data-value"
};
function _sfc_render$1O(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanel, {
    id: "Details",
    value: "Details",
    "onGroup:selected": $options.onExpand
  }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[0] || (_cache[0] = [
          createTextVNode(" Affiliate Summary ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VCard, null, {
            loader: withCtx(() => [
              createVNode(VProgressLinear, {
                active: $data.loading,
                indeterminate: true,
                color: "#7bb8da"
              }, null, 8, ["active"])
            ]),
            default: withCtx(() => [
              createVNode(VCardText, null, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_1$1g, [
                    _cache[1] || (_cache[1] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Affiliate Name:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_2$11,
                      toDisplayString($data.affiliate.AffiliateName),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_3$R, [
                    _cache[2] || (_cache[2] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Affiliate Number:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_4$K,
                      toDisplayString($data.affiliate.AffiliateNumber),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_5$H, [
                    _cache[3] || (_cache[3] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Abbreviated Name:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_6$D,
                      toDisplayString($data.affiliate.AffiliateAbbreviatedName),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_7$y, [
                    _cache[4] || (_cache[4] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Acronym:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_8$r,
                      toDisplayString($data.affiliate.AffiliateAcronym),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_9$q, [
                    _cache[5] || (_cache[5] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "EIN:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_10$n,
                      toDisplayString($data.affiliate.AffiliateEIN),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  $data.affiliate.AffiliatePerCapitaPIN ? (openBlock(), createElementBlock("div", _hoisted_11$k, [
                    _cache[6] || (_cache[6] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "PIN:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_12$k,
                      toDisplayString($data.affiliate.AffiliatePerCapitaPIN),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ])) : createCommentVNode("v-if", true),
                  createBaseVNode("div", _hoisted_13$h, [
                    _cache[7] || (_cache[7] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "BillHighway Group ID:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_14$g,
                      toDisplayString($data.affiliate.BillHighwayGroupId),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_15$g, [
                    _cache[8] || (_cache[8] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Affiliate Type:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliateType ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_16$g,
                      toDisplayString($data.affiliate.AffiliateType.AffiliateTypeName),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_17$f, [
                    _cache[9] || (_cache[9] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Affiliate Designation:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliateDesignation ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_18$e,
                      toDisplayString($data.affiliate.AffiliateDesignation.AffiliateDesignationName),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_19$e, [
                    _cache[11] || (_cache[11] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Notes:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliateNotes ? (openBlock(), createElementBlock("div", _hoisted_20$d, [
                      createTextVNode(
                        toDisplayString($data.affiliate.AffiliateNotes.AffiliateNotes),
                        1
                        /* TEXT */
                      ),
                      _cache[10] || (_cache[10] = createBaseVNode(
                        "br",
                        null,
                        null,
                        -1
                        /* HOISTED */
                      )),
                      createTextVNode(
                        " Notes Date: " + toDisplayString($data.affiliate.AffiliateNotes.AffiliateNotesDate),
                        1
                        /* TEXT */
                      )
                    ])) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_21$d, [
                    _cache[12] || (_cache[12] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Affiliate Status:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.IsAffiliateActive ? (openBlock(), createElementBlock("div", _hoisted_22$b, " Active ")) : (openBlock(), createElementBlock("div", _hoisted_23$b, " Inactive "))
                  ]),
                  createBaseVNode("div", _hoisted_24$a, [
                    _cache[13] || (_cache[13] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Permitted Membership Types:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate ? (openBlock(), createElementBlock("div", _hoisted_25$9, " N/A ")) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_26$9, [
                    _cache[14] || (_cache[14] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Geographical Jurisdiction:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliateGeoReach ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_27$9,
                      toDisplayString($data.affiliate.AffiliateGeoReach.AffiliateGeoReachName),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_28$9, [
                    _cache[15] || (_cache[15] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Sectors Represented:",
                      -1
                      /* HOISTED */
                    )),
                    (openBlock(true), createElementBlock(
                      Fragment,
                      null,
                      renderList($data.affiliate.AffiliateSector, (affSector, index) => {
                        return openBlock(), createElementBlock(
                          "div",
                          {
                            class: "data-value",
                            key: index
                          },
                          toDisplayString(affSector.Sector.SectorName),
                          1
                          /* TEXT */
                        );
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]),
                  createBaseVNode("div", _hoisted_29$9, [
                    _cache[16] || (_cache[16] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Is chartered:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.IsChartered ? (openBlock(), createElementBlock("div", _hoisted_30$9, " Yes ")) : (openBlock(), createElementBlock("div", _hoisted_31$9, " No "))
                  ]),
                  createBaseVNode("div", _hoisted_32$7, [
                    _cache[17] || (_cache[17] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Charter date:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.IsChartered ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_33$7,
                      toDisplayString(_ctx.$filters.formatDate($data.affiliate.CharterDate)),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_34$6, [
                    _cache[18] || (_cache[18] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Affiliate Relationship:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate ? (openBlock(), createElementBlock("div", _hoisted_35$6)) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_36$6, [
                    _cache[19] || (_cache[19] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Local:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_37$6,
                      toDisplayString($data.affiliate.AffiliateNumber),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_38$5, [
                    _cache[20] || (_cache[20] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Region:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.Region ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_39$5,
                      toDisplayString($data.affiliate.Region.RegionName),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_40$5, [
                    _cache[21] || (_cache[21] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "State Federation:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.parentAffiliate ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_41$5,
                      toDisplayString($data.parentAffiliate.AffiliateName) + " - " + toDisplayString($data.parentAffiliate.AffiliateNumber),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_42$5, [
                    _cache[22] || (_cache[22] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Merged Organizations:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliateMergedOrganization && $data.affiliate.AffiliateMergedOrganization.MergedOrganization ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_43$5,
                      toDisplayString($data.affiliate.AffiliateMergedOrganization.MergedOrganization.MergedOrganizationName) + " - " + toDisplayString($data.affiliate.AffiliateMergedOrganization.MergedOrganization.MergedOrganizationCode),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_44$5, [
                    _cache[23] || (_cache[23] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Fiscal year end (mm/dd):",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliatePerCapita ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_45$5,
                      toDisplayString($data.affiliate.AffiliatePerCapita.FiscalYearEndMonth) + "/" + toDisplayString($data.affiliate.AffiliatePerCapita.FiscalYearEndDay),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_46$5, [
                    _cache[24] || (_cache[24] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Does affiliate pay per-caps to AFT:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliatePerCapita && $data.affiliate.AffiliatePerCapita.PayPerCapitaToAFT ? (openBlock(), createElementBlock("div", _hoisted_47$5, " Yes ")) : (openBlock(), createElementBlock("div", _hoisted_48$5, " No "))
                  ]),
                  createBaseVNode("div", _hoisted_49$5, [
                    _cache[25] || (_cache[25] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Is the affiliate invoiced by AFT:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliatePerCapita && $data.affiliate.AffiliatePerCapita.InvoicedByAFT ? (openBlock(), createElementBlock("div", _hoisted_50$5, " Yes ")) : (openBlock(), createElementBlock("div", _hoisted_51$5, " No "))
                  ]),
                  createBaseVNode("div", _hoisted_52$5, [
                    _cache[26] || (_cache[26] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Are State Federation per-caps included:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliatePerCapita && $data.affiliate.AffiliatePerCapita.IncludeStatePerCapita ? (openBlock(), createElementBlock("div", _hoisted_53$5, " Yes ")) : (openBlock(), createElementBlock("div", _hoisted_54$5, " No "))
                  ]),
                  createBaseVNode("div", _hoisted_55$5, [
                    _cache[27] || (_cache[27] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Include AFL-CIO per-caps:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliatePerCapita && $data.affiliate.AffiliatePerCapita.IncludeAFLCIOPerCapita ? (openBlock(), createElementBlock("div", _hoisted_56$5, " Yes ")) : (openBlock(), createElementBlock("div", _hoisted_57$5, " No "))
                  ]),
                  createBaseVNode("div", _hoisted_58$5, [
                    _cache[28] || (_cache[28] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Invoice frequency:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate ? (openBlock(), createElementBlock("div", _hoisted_59$5)) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_60$5, [
                    _cache[29] || (_cache[29] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "AFT insurance eligible?:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliatePerCapita && $data.affiliate.AffiliatePerCapita.HasOccupationalLiabilityInsurance ? (openBlock(), createElementBlock("div", _hoisted_61$5, " Does the affiliate have liability insurance?: Yes ")) : (openBlock(), createElementBlock("div", _hoisted_62$5, " Does the affiliate have liability insurance?: No ")),
                    $data.affiliate && $data.affiliate.AffiliatePerCapita ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_63$5,
                      " Number of AD&D units: " + toDisplayString($data.affiliate.AffiliatePerCapita.AccidentInsuranceUnits),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_64$5, [
                    _cache[30] || (_cache[30] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Fiduciary Bond Coverage:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliatePerCapita && $data.affiliate.AffiliatePerCapita.FiduciaryBondCoverage ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_65$5,
                      toDisplayString($data.affiliate.AffiliatePerCapita.FiduciaryBondCoverage.FiduciaryBondCoverageName),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_66$5, [
                    _cache[31] || (_cache[31] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Has COPE Program:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliatePerCapita && $data.affiliate.AffiliatePerCapita.HasCope ? (openBlock(), createElementBlock("div", _hoisted_67$5, " Yes ")) : (openBlock(), createElementBlock("div", _hoisted_68$3, " No "))
                  ]),
                  createBaseVNode("div", _hoisted_69$2, [
                    _cache[32] || (_cache[32] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Include in AFT member counts:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.IsAffiliateActive && !$data.affiliate.IsDeleted && ($data.affiliate.AffiliateType && $data.affiliate.AffiliateType.AffiliateTypeName == "Local" || $data.affiliate.AffiliateType && $data.affiliate.AffiliateType.AffiliateTypeName == "Federated Local" || $data.affiliate.AffiliateType && $data.affiliate.AffiliateType.AffiliateTypeName == "State Federation") ? (openBlock(), createElementBlock("div", _hoisted_70$2, " Yes ")) : (openBlock(), createElementBlock("div", _hoisted_71$2, " No "))
                  ]),
                  createBaseVNode("div", _hoisted_72$2, [
                    _cache[33] || (_cache[33] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "AFT member card eligible:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.IsAffiliateActive && !$data.affiliate.IsDeleted && ($data.affiliate.AffiliateType && $data.affiliate.AffiliateType.AffiliateTypeName == "Local" || $data.affiliate.AffiliateType && $data.affiliate.AffiliateType.AffiliateTypeName == "Federated Local" || $data.affiliate.AffiliateType && $data.affiliate.AffiliateType.AffiliateTypeName == "State Federation") ? (openBlock(), createElementBlock("div", _hoisted_73$2, " Yes ")) : (openBlock(), createElementBlock("div", _hoisted_74$2, " No "))
                  ]),
                  createBaseVNode("div", _hoisted_75$2, [
                    _cache[34] || (_cache[34] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Directly engages in bargaining:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliatePerCapita && $data.affiliate.AffiliatePerCapita.IsDirectBargaining ? (openBlock(), createElementBlock("div", _hoisted_76$2, " Yes ")) : (openBlock(), createElementBlock("div", _hoisted_77$2, " No "))
                  ]),
                  createBaseVNode("div", _hoisted_78$2, [
                    _cache[35] || (_cache[35] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Eligible for AFT convention delegates:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliatePerCapita && $data.affiliate.AffiliatePerCapita.ConventionDelegationEligibility ? (openBlock(), createElementBlock("div", _hoisted_79$2, " Yes ")) : (openBlock(), createElementBlock("div", _hoisted_80$2, " No "))
                  ]),
                  createBaseVNode("div", _hoisted_81$2, [
                    _cache[36] || (_cache[36] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "AFT member ID assigned:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.UsesAftMemberId ? (openBlock(), createElementBlock("div", _hoisted_82$2, " Yes ")) : (openBlock(), createElementBlock("div", _hoisted_83$1, " No "))
                  ]),
                  createBaseVNode("div", _hoisted_84$1, [
                    _cache[37] || (_cache[37] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Stateweb access?:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.AffiliatePerCapita && $data.affiliate.AffiliatePerCapita.HasStateWebAccess ? (openBlock(), createElementBlock("div", _hoisted_85$1, " Yes ")) : (openBlock(), createElementBlock("div", _hoisted_86$1, " No "))
                  ]),
                  createBaseVNode("div", _hoisted_87$1, [
                    _cache[38] || (_cache[38] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Retiree Options:",
                      -1
                      /* HOISTED */
                    )),
                    $data.affiliate && $data.affiliate.RetireeEntityType ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_88$1,
                      " Move Retirees to " + toDisplayString($data.affiliate.RetireeEntityType.EntityTypeName) + " " + toDisplayString(this.retireeDestinationName),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const AffiliateSummaryComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1O, [["render", _sfc_render$1O], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/AffiliateSummaryComponent.vue"]]);
const _sfc_main$1N = {
  name: "AffiliateStaffEditorComponent",
  components: { IndividualAutocomplete },
  props: {
    isEditMode: {
      type: Boolean,
      default: false
    },
    editedStaff: {
      type: Object,
      required: false
    },
    departments: {
      required: true,
      type: Array
    },
    affiliateId: {
      required: true,
      type: Number
    }
  },
  data: () => ({
    showDialog: true,
    pickerStartDate: false,
    pickerEndDate: false,
    AffiliateStaff: {},
    rules: {
      required: (value) => !!value || "Required."
    },
    valid: true
  }),
  beforeMount() {
    if (this.editedStaff) {
      this.AffiliateStaff = clone(this.editedStaff);
      this.AffiliateStaff.StaffDepartmentId = this.AffiliateStaff.StaffDepartment.StaffDepartmentId;
      this.AffiliateStaff.IndividualId = this.AffiliateStaff.Individual.IndividualId;
      this.AffiliateStaff.TermStartDate = this.AffiliateStaff.TermStartDate.split("T")[0];
      this.AffiliateStaff.TermEndDate = this.AffiliateStaff.TermEndDate.split("T")[0];
    }
  },
  watch: {
    editedStaff: {
      handler(data) {
        this.AffiliateStaff = clone(this.editedStaff);
      },
      deep: true
    }
  },
  methods: {
    cancel() {
      this.AffiliateStaff = {};
      this.$emit("canceled");
    },
    save() {
      if (!this.$refs.form.validate()) {
        return;
      }
      const AffiliateStaff = {
        ...this.AffiliateStaff,
        AffiliateId: this.affiliateId
      };
      let method = "post";
      let url = "/api/v2/affiliateStaff";
      if (this.isEditMode) {
        method = "put";
        url += "/" + AffiliateStaff.AffiliateStaffId;
      }
      let saved = null;
      axios({ method, url, data: AffiliateStaff }).then((response) => {
        saved = response.data;
      }).finally(() => {
        this.$emit("saved", saved);
      });
    }
  }
};
const _hoisted_1$1f = { key: 0 };
const _hoisted_2$10 = { key: 1 };
const _hoisted_3$Q = {
  key: 0,
  class: "text-red"
};
const _hoisted_4$J = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$G = { class: "data-container" };
const _hoisted_6$C = {
  key: 0,
  class: "text-red"
};
const _hoisted_7$x = { class: "data-container" };
function _sfc_render$1N(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_IndividualAutocomplete = resolveComponent("IndividualAutocomplete");
  return openBlock(), createBlock(VDialog, {
    modelValue: _ctx.showDialog,
    "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => _ctx.showDialog = $event),
    width: "500"
  }, {
    default: withCtx(() => [
      createVNode(VForm, {
        ref: "form",
        modelValue: _ctx.valid,
        "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => _ctx.valid = $event)
      }, {
        default: withCtx(() => [
          createVNode(VCard, { class: "v-card--outlined v-sheet--tile mt-4 pa-4" }, {
            default: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createBaseVNode("h5", null, [
                        $props.isEditMode ? (openBlock(), createElementBlock("span", _hoisted_1$1f, "Edit")) : (openBlock(), createElementBlock("span", _hoisted_2$10, "Add")),
                        _cache[15] || (_cache[15] = createTextVNode(" Staff Member"))
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VSelect, {
                        key: "text-department",
                        modelValue: _ctx.AffiliateStaff.StaffDepartmentId,
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.AffiliateStaff.StaffDepartmentId = $event),
                        items: $props.departments,
                        "item-title": "StaffDepartmentName",
                        "item-value": "StaffDepartmentId",
                        rules: [_ctx.rules.required]
                      }, {
                        label: withCtx(() => [
                          _ctx.rules.required ? (openBlock(), createElementBlock("span", _hoisted_3$Q, "* ")) : createCommentVNode("v-if", true),
                          _cache[16] || (_cache[16] = createTextVNode("Department "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["modelValue", "items", "rules"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        modelValue: _ctx.AffiliateStaff.StaffTitle,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.AffiliateStaff.StaffTitle = $event),
                        rules: [_ctx.rules.required]
                      }, {
                        label: withCtx(() => [
                          _ctx.rules.required ? (openBlock(), createElementBlock("span", _hoisted_4$J, "* ")) : createCommentVNode("v-if", true),
                          _cache[17] || (_cache[17] = createTextVNode("Title "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["modelValue", "rules"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(_component_IndividualAutocomplete, {
                        modelValue: _ctx.AffiliateStaff.IndividualId,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.AffiliateStaff.IndividualId = $event),
                        individual: _ctx.AffiliateStaff.Individual,
                        rules: [_ctx.rules.required],
                        affiliateId: this.affiliateId,
                        filter: "current"
                      }, null, 8, ["modelValue", "individual", "rules", "affiliateId"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "6"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_5$G, [
                        createVNode(VMenu, {
                          modelValue: _ctx.pickerStartDate,
                          "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => _ctx.pickerStartDate = $event),
                          "close-on-content-click": false,
                          offset: 40,
                          transition: "scale-transition",
                          "min-width": "290px"
                        }, {
                          activator: withCtx(({ props }) => [
                            createVNode(VTextField, mergeProps({
                              modelValue: _ctx.AffiliateStaff.TermStartDate,
                              "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => _ctx.AffiliateStaff.TermStartDate = $event),
                              hint: "YYYY-MM-DD"
                            }, props, {
                              rules: [_ctx.rules.required]
                            }), {
                              label: withCtx(() => [
                                _ctx.rules.required ? (openBlock(), createElementBlock("span", _hoisted_6$C, "* ")) : createCommentVNode("v-if", true),
                                _cache[18] || (_cache[18] = createTextVNode("Start Date: "))
                              ]),
                              _: 2
                              /* DYNAMIC */
                            }, 1040, ["modelValue", "rules"])
                          ]),
                          default: withCtx(() => [
                            createVNode(VDatePicker, {
                              modelValue: _ctx.AffiliateStaff.TermStartDate,
                              "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => _ctx.AffiliateStaff.TermStartDate = $event),
                              onInput: _cache[5] || (_cache[5] = ($event) => _ctx.pickerStartDate = false)
                            }, null, 8, ["modelValue"])
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["modelValue"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "6"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_7$x, [
                        createVNode(VMenu, {
                          modelValue: _ctx.pickerEndDate,
                          "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => _ctx.pickerEndDate = $event),
                          "close-on-content-click": false,
                          offset: 40,
                          transition: "scale-transition",
                          "min-width": "290px"
                        }, {
                          activator: withCtx(({ props }) => [
                            createVNode(VTextField, mergeProps({
                              modelValue: _ctx.AffiliateStaff.TermEndDate,
                              "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => _ctx.AffiliateStaff.TermEndDate = $event),
                              hint: "YYYY-MM-DD",
                              label: "End Date:"
                            }, props), null, 16, ["modelValue"])
                          ]),
                          default: withCtx(() => [
                            createVNode(VDatePicker, {
                              modelValue: _ctx.AffiliateStaff.TermEndDate,
                              "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => _ctx.AffiliateStaff.TermEndDate = $event),
                              onInput: _cache[9] || (_cache[9] = ($event) => _ctx.pickerEndDate = false)
                            }, null, 8, ["modelValue"])
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["modelValue"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        elevation: "0",
                        color: "default",
                        class: "mb-4 btn-block",
                        onClick: _cache[11] || (_cache[11] = ($event) => $options.cancel())
                      }, {
                        default: withCtx(() => _cache[19] || (_cache[19] = [
                          createTextVNode(" Cancel ")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        elevation: "0",
                        color: "primary",
                        class: "mb-4 btn-block",
                        onClick: _cache[12] || (_cache[12] = ($event) => $options.save())
                      }, {
                        default: withCtx(() => _cache[20] || (_cache[20] = [
                          createTextVNode(" Save ")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"])
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue"]);
}
const AffiliateStaffEditorComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1N, [["render", _sfc_render$1N], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/AffiliateStaffEditorComponent.vue"]]);
const _sfc_main$1M = {
  name: "StaffDepartmentTableComponent",
  components: { AffiliateStaffEditorComponent },
  mixins: [headersMixin],
  props: {
    department: {
      required: true,
      type: String
    },
    departments: {
      required: true,
      type: Array
    },
    individuals: {
      required: false,
      type: Array,
      default: () => []
    },
    affiliateId: {
      required: true,
      type: Number
    }
  },
  data: () => ({
    headers: [
      { title: "Title", value: "StaffTitle", visible: true },
      { title: "Staff Name", value: "FullName", visible: true },
      { title: "Phone", value: "Phone", visible: true },
      { title: "Email", value: "Email", visible: true },
      { title: "Start date", value: "TermStartDate", visible: true },
      { title: "End date", value: "TermEndDate", visible: true },
      { title: "", value: "actions", visible: true, sortable: false }
    ],
    showAddIndividualStaff: false,
    editedStaff: null
  }),
  methods: {
    getNoDataText() {
      if (this.noDataText) {
        return this.noDataText;
      }
      return "There are no individuals in the " + this.department + " department.";
    },
    editItem(item) {
      this.editedStaff = item;
      this.showAddIndividualStaff = true;
    },
    deleteItem(item) {
      if (confirm("are you sure you want to delete affiliate staff " + item.Individual.FirstName + " " + item.Individual.FirstName + " from department " + this.department)) {
        axios.delete("/api/v2/affiliateStaff/" + item.AffiliateStaffId).finally(() => {
          this.$emit("staffDeleted");
        });
      }
    },
    updatedStaff(data) {
      this.showAddIndividualStaff = false;
      this.$emit("savedStaff", data);
    }
  }
};
const _hoisted_1$1e = { class: "mb-4" };
const _hoisted_2$$ = { class: "d-flex align-center ga-2" };
function _sfc_render$1M(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_AffiliateStaffEditorComponent = resolveComponent("AffiliateStaffEditorComponent");
  const _component_router_link = resolveComponent("router-link");
  return openBlock(), createElementBlock("div", _hoisted_1$1e, [
    createBaseVNode(
      "h5",
      _hoisted_2$$,
      toDisplayString($props.department),
      1
      /* TEXT */
    ),
    _ctx.showAddIndividualStaff ? (openBlock(), createBlock(_component_AffiliateStaffEditorComponent, {
      key: 0,
      departments: $props.departments,
      affiliateId: $props.affiliateId,
      "is-edit-mode": true,
      editedStaff: _ctx.editedStaff,
      onCanceled: _cache[0] || (_cache[0] = ($event) => _ctx.showAddIndividualStaff = false),
      onSaved: $options.updatedStaff
    }, null, 8, ["departments", "affiliateId", "editedStaff", "onSaved"])) : createCommentVNode("v-if", true),
    createVNode(VDataTable, {
      headers: _ctx.getHeaders(_ctx.headers),
      items: $props.individuals,
      "hide-default-footer": true,
      class: "elevation-1 mobile-global-card-table",
      "mobile-breakpoint": 992,
      "disable-pagination": true,
      "no-data-text": $options.getNoDataText()
    }, {
      [`item.FullName`]: withCtx(({ item }) => [
        createVNode(_component_router_link, {
          to: { name: "IndividualDetails", params: { id: item.Individual.IndividualId } }
        }, {
          default: withCtx(() => [
            createTextVNode(
              toDisplayString(item.Individual.FirstName) + " " + toDisplayString(item.Individual.LastName),
              1
              /* TEXT */
            )
          ]),
          _: 2
          /* DYNAMIC */
        }, 1032, ["to"])
      ]),
      [`item.TermStartDate`]: withCtx(({ item }) => [
        createTextVNode(
          toDisplayString(_ctx.$filters.formatDate(item.TermStartDate)),
          1
          /* TEXT */
        )
      ]),
      [`item.TermEndDate`]: withCtx(({ item }) => [
        createTextVNode(
          toDisplayString(_ctx.$filters.formatDate(item.TermEndDate)),
          1
          /* TEXT */
        )
      ]),
      [`item.Phone`]: withCtx(({ item }) => [
        (openBlock(true), createElementBlock(
          Fragment,
          null,
          renderList(item.Individual.individualPhonesOrdered, (phone) => {
            return openBlock(), createElementBlock(
              "span",
              mergeProps({ ref_for: true }, phone, {
                key: phone.IndividualPhoneId
              }),
              toDisplayString(phone.PhoneNumber),
              17
              /* TEXT, FULL_PROPS */
            );
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      [`item.Email`]: withCtx(({ item }) => [
        (openBlock(true), createElementBlock(
          Fragment,
          null,
          renderList(item.Individual.individualEmailsOrdered, (email) => {
            return openBlock(), createElementBlock(
              "span",
              mergeProps({ ref_for: true }, email, {
                key: email.IndividualEmailId
              }),
              toDisplayString(email.Email),
              17
              /* TEXT, FULL_PROPS */
            );
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      [`item.actions`]: withCtx(({ item }) => [
        createVNode(
          VBtnGroup,
          null,
          {
            default: withCtx(() => [
              createVNode(VBtn, {
                size: "small",
                icon: "fa-edit",
                onClick: ($event) => $options.editItem(item)
              }, null, 8, ["onClick"]),
              createVNode(VBtn, {
                size: "small",
                icon: "fa-trash",
                onClick: ($event) => $options.deleteItem(item)
              }, null, 8, ["onClick"])
            ]),
            _: 2
            /* DYNAMIC */
          },
          1024
          /* DYNAMIC_SLOTS */
        )
      ]),
      _: 2
      /* DYNAMIC */
    }, 1032, ["headers", "items", "no-data-text"])
  ]);
}
const StaffDepartmentTableComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1M, [["render", _sfc_render$1M], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/StaffDepartmentTableComponent.vue"]]);
const _sfc_main$1L = {
  name: "StaffEditorComponent",
  components: { AffiliateStaffEditorComponent, StaffDepartmentTableComponent },
  props: {
    affiliateStaff: {
      required: true,
      type: Array
    },
    affiliateId: {
      required: true,
      type: Number
    }
  },
  data: () => ({
    noDataText: "",
    departments: [],
    filter: {
      firstName: "",
      lastName: "",
      department: 0
    },
    individuals: {},
    filteredIndividuals: {},
    showAddIndividualStaff: false
  }),
  watch: {
    affiliateStaff: {
      handler(data) {
        this.individuals = {};
        data.map((staff) => {
          if (!this.individuals.hasOwnProperty(staff.StaffDepartment.StaffDepartmentName)) {
            this.individuals[staff.StaffDepartment.StaffDepartmentName] = [];
          }
          let count = staff.Individual.individualEmailsOrdered.length;
          for (let i = count; i > 0; i--) {
            if (staff.Individual.individualEmailsOrdered[i]) {
              staff.Individual.individualEmailsOrdered[i].Email = "";
            }
          }
          count = staff.Individual.individualPhonesOrdered.length;
          for (let i = count; i > 0; i--) {
            if (staff.Individual.individualPhonesOrdered[i]) {
              staff.Individual.individualPhonesOrdered[i].PhoneNumber = "";
            }
          }
          this.individuals[staff.StaffDepartment.StaffDepartmentName].push(staff);
        });
        this.filteredIndividuals = clone(this.individuals);
      },
      deep: true
    }
  },
  mounted() {
    axios.get("/api/v2/StaffDepartment?per_page=50").then((response) => {
      this.departments = response.data.data;
    });
  },
  methods: {
    search() {
      if (this.filter.firstName !== "" || this.filter.lastName !== "" || this.filter.department !== 0) {
        this.filteredIndividuals = {};
        for (const department in this.individuals) {
          if (this.individuals.hasOwnProperty(department)) {
            this.filteredIndividuals[department] = this.individuals[department].filter((v) => {
              return (this.filter.firstName === "" || v.Individual.FirstName.toLowerCase().includes(this.filter.firstName.toLowerCase())) && (this.filter.lastName === "" || v.Individual.LastName.toLowerCase().includes(this.filter.lastName.toLowerCase())) && (this.filter.department === 0 || v.StaffDepartment.StaffDepartmentId === this.filter.department);
            });
          }
        }
        this.noDataText = "No results found for '[" + this.filter.firstName + "] + [" + this.filter.lastName + "]' name search.";
      } else {
        this.clear();
      }
    },
    clear() {
      this.filter = {
        firstName: "",
        lastName: "",
        department: 0
      };
      this.filteredIndividuals = clone(this.individuals);
      this.noDataText = "";
    },
    addNewStaff() {
      this.showAddIndividualStaff = true;
    },
    addedNewStaff(data) {
      this.showAddIndividualStaff = false;
      this.$emit("savedStaff", data);
    }
  }
};
function _sfc_render$1L(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_StaffDepartmentTableComponent = resolveComponent("StaffDepartmentTableComponent");
  const _component_AffiliateStaffEditorComponent = resolveComponent("AffiliateStaffEditorComponent");
  return openBlock(), createElementBlock(
    Fragment,
    null,
    [
      createVNode(VCard, { class: "mb-4" }, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => _cache[9] || (_cache[9] = [
              createTextVNode("Search for Staff")
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        key: "text-first-name",
                        label: "First Name",
                        modelValue: _ctx.filter.firstName,
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.filter.firstName = $event),
                        variant: "underlined"
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        key: "text-last-name",
                        label: "Last Name",
                        modelValue: _ctx.filter.lastName,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.filter.lastName = $event),
                        variant: "underlined"
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VSelect, {
                        key: "text-department",
                        label: "Department",
                        modelValue: _ctx.filter.department,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.filter.department = $event),
                        items: _ctx.departments,
                        "item-title": "StaffDepartmentName",
                        "item-value": "StaffDepartmentId",
                        variant: "underlined"
                      }, null, 8, ["modelValue", "items"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "d-flex justify-end ga-2" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        color: "primary",
                        onClick: _cache[3] || (_cache[3] = ($event) => $options.search())
                      }, {
                        default: withCtx(() => _cache[10] || (_cache[10] = [
                          createTextVNode("Search")
                        ])),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VBtn, {
                        color: "default",
                        onClick: _cache[4] || (_cache[4] = ($event) => $options.clear())
                      }, {
                        default: withCtx(() => _cache[11] || (_cache[11] = [
                          createTextVNode("Clear")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardActions, null, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                color: "primary",
                onClick: _cache[5] || (_cache[5] = ($event) => $options.addNewStaff()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[12] || (_cache[12] = [
                  createTextVNode("Add Staff Member")
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      (openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.departments, (department) => {
          return openBlock(), createBlock(_component_StaffDepartmentTableComponent, {
            key: "department-table-" + department.StaffDepartmentName,
            department: department.StaffDepartmentName,
            individuals: _ctx.filteredIndividuals[department.StaffDepartmentName],
            noDataText: _ctx.noDataText,
            departments: _ctx.departments,
            affiliateId: $props.affiliateId,
            onStaffDeleted: _cache[6] || (_cache[6] = ($event) => _ctx.$emit("savedStaff")),
            onSavedStaff: _cache[7] || (_cache[7] = ($event) => _ctx.$emit("savedStaff"))
          }, null, 8, ["department", "individuals", "noDataText", "departments", "affiliateId"]);
        }),
        128
        /* KEYED_FRAGMENT */
      )),
      _ctx.showAddIndividualStaff ? (openBlock(), createBlock(_component_AffiliateStaffEditorComponent, {
        key: 0,
        departments: _ctx.departments,
        affiliateId: $props.affiliateId,
        onCanceled: _cache[8] || (_cache[8] = ($event) => _ctx.showAddIndividualStaff = false),
        onSaved: $options.addedNewStaff
      }, null, 8, ["departments", "affiliateId", "onSaved"])) : createCommentVNode("v-if", true)
    ],
    64
    /* STABLE_FRAGMENT */
  );
}
const StaffEditorComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1L, [["render", _sfc_render$1L], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/StaffEditorComponent.vue"]]);
const _sfc_main$1K = {
  name: "AffiliateStaffComponent",
  components: { StaffEditorComponent, FlipCard },
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  data: () => ({
    id: "",
    affiliateStaff: [],
    currentAffiliateStaff: [],
    loading: true,
    staffroles: [
      { title: "Staff Name", value: "FullName", sortable: false },
      { title: "Function area", value: "StaffDepartment.StaffDepartmentName", sortable: true },
      { title: "Staff Role Title", value: "StaffTitle", sortable: true },
      { title: "Start date", value: "TermStartDate", sortable: true }
    ],
    options: {
      sortBy: [{ key: "StaffDepartment.StaffDepartmentName", order: "asc" }]
    },
    flipped: false,
    panel: []
  }),
  methods: {
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/aggregate/affiliate/staff/" + this.affiliateId + "?scope=global";
      axios.get(url).then((response) => {
        this.affiliateStaff = response.data.data;
        this.currentAffiliateStaff = this.getCurrentStaff();
      }).finally(() => {
        this.loading = false;
      });
    },
    getCurrentStaff() {
      return this.affiliateStaff.filter(
        (staff) => (
          // moment(staff.TermStartDate).isSameOrAfter(moment())
          staff.TermEndDate === "" || compareAsc(new Date(staff.TermEndDate), /* @__PURE__ */ new Date()) >= 0
        )
      );
    }
  }
};
function _sfc_render$1K(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_router_link = resolveComponent("router-link");
  const _component_StaffEditorComponent = resolveComponent("StaffEditorComponent");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, {
    value: "staffRole",
    "onGroup:selected": $options.onExpand
  }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[3] || (_cache[3] = [
          createTextVNode(" Staff Roles ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: _ctx.flipped }, {
            front: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        color: "primary",
                        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.flipped = true)
                      }, {
                        default: withCtx(() => _cache[4] || (_cache[4] = [
                          createTextVNode("Manage")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VDataTable, {
                        headers: _ctx.staffroles,
                        loading: _ctx.loading,
                        items: _ctx.currentAffiliateStaff,
                        options: _ctx.options,
                        "onUpdate:options": _cache[1] || (_cache[1] = ($event) => _ctx.options = $event),
                        class: "mobile-global-card-table",
                        "mobile-breakpoint": 992
                      }, {
                        [`item.FullName`]: withCtx(({ item }) => [
                          createVNode(_component_router_link, {
                            to: { name: "IndividualDetails", params: { id: item.Individual.IndividualId } }
                          }, {
                            default: withCtx(() => [
                              createTextVNode(
                                toDisplayString(item.Individual.FirstName) + " " + toDisplayString(item.Individual.LastName),
                                1
                                /* TEXT */
                              )
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["to"])
                        ]),
                        [`item.TermStartDate`]: withCtx(({ item }) => [
                          createTextVNode(
                            toDisplayString(_ctx.$filters.formatDate(item.TermStartDate)),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["headers", "loading", "items", "options"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            back: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        color: "primary",
                        onClick: _cache[2] || (_cache[2] = ($event) => _ctx.flipped = false)
                      }, {
                        default: withCtx(() => _cache[5] || (_cache[5] = [
                          createTextVNode("Cancel")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(_component_StaffEditorComponent, {
                        affiliateStaff: _ctx.affiliateStaff,
                        onSavedStaff: $options.getDataFromApi,
                        affiliateId: $props.affiliateId
                      }, null, 8, ["affiliateStaff", "onSavedStaff", "affiliateId"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const AffiliateStaffComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1K, [["render", _sfc_render$1K], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/AffiliateStaffComponent.vue"]]);
const _sfc_main$1J = {
  name: "LocalDuesCategoryComponent",
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  data: () => ({
    id: "",
    affiliate: {},
    loading: false
  }),
  methods: {
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/affiliate/" + this.affiliateId + "?include=affiliateDuesCategory,affiliateDuesCategory.StatePerCapita,affiliateDuesCategory.NationalPerCapita,affiliateDuesCategory.PaymentFrequency&scope=global";
      return axios.get(url).then((response) => {
        this.affiliate = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    navigateToIndividuals(localDuesCategoryId) {
      const urlParams = new URLSearchParams({
        sortByField: "FullName",
        sortDirection: "false",
        page: "1",
        itemsPerPage: "10",
        "filter:activeIndividualAffiliates.LocalDuesCategoryId": localDuesCategoryId
      });
      this.$router.push({ path: "Individuals", query: Object.fromEntries(urlParams) });
    }
  }
};
const _hoisted_1$1d = { key: 0 };
const _hoisted_2$_ = { key: 1 };
const _hoisted_3$P = { key: 0 };
const _hoisted_4$I = { key: 1 };
const _hoisted_5$F = { key: 0 };
const _hoisted_6$B = { key: 1 };
const _hoisted_7$w = { key: 0 };
const _hoisted_8$q = { key: 1 };
const _hoisted_9$p = { key: 0 };
const _hoisted_10$m = { key: 1 };
const _hoisted_11$j = ["onClick"];
const _hoisted_12$j = { key: 0 };
const _hoisted_13$g = { key: 1 };
function _sfc_render$1J(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[0] || (_cache[0] = [
          createTextVNode(" Local Dues Category ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VProgressLinear, {
            active: _ctx.loading,
            indeterminate: true,
            color: "#7bb8da"
          }, null, 8, ["active"]),
          createVNode(VTable, null, {
            default: withCtx(() => [
              _cache[1] || (_cache[1] = createBaseVNode(
                "thead",
                null,
                [
                  createBaseVNode("tr", { style: { "background-color": "#092A5C", "color": "#7AB8DA" } }, [
                    createBaseVNode("th", null, "Category Name:"),
                    createBaseVNode("th", null, "National Per-Capita Category:"),
                    createBaseVNode("th", null, "State Per-Capita Category:"),
                    createBaseVNode("th", null, "Amount/Percentage:"),
                    createBaseVNode("th", null, "Frequency:"),
                    createBaseVNode("th", null, "Start Date:"),
                    createBaseVNode("th", null, "End Date:"),
                    createBaseVNode("th", null, "Active Individuals:")
                  ])
                ],
                -1
                /* HOISTED */
              )),
              createBaseVNode("tbody", null, [
                (openBlock(true), createElementBlock(
                  Fragment,
                  null,
                  renderList(_ctx.affiliate.affiliateDuesCategory, (affiliateduescategry) => {
                    return openBlock(), createElementBlock("tr", {
                      key: affiliateduescategry.LocalDuesCategoryId
                    }, [
                      createBaseVNode(
                        "td",
                        null,
                        toDisplayString(affiliateduescategry.LocalDuesCategoryName),
                        1
                        /* TEXT */
                      ),
                      createBaseVNode(
                        "td",
                        null,
                        toDisplayString(affiliateduescategry.NationalPerCapita.NationalPerCapitaName),
                        1
                        /* TEXT */
                      ),
                      createBaseVNode("td", null, [
                        affiliateduescategry.StatePerCapita ? (openBlock(), createElementBlock(
                          "span",
                          _hoisted_1$1d,
                          toDisplayString(affiliateduescategry.StatePerCapita.StatePerCapitaName),
                          1
                          /* TEXT */
                        )) : (openBlock(), createElementBlock("span", _hoisted_2$_, "Null"))
                      ]),
                      createBaseVNode("td", null, [
                        affiliateduescategry.LocalDuesPercentage == "" ? (openBlock(), createElementBlock(
                          "span",
                          _hoisted_3$P,
                          " $" + toDisplayString(affiliateduescategry.LocalDuesAmount),
                          1
                          /* TEXT */
                        )) : (openBlock(), createElementBlock(
                          "span",
                          _hoisted_4$I,
                          "%" + toDisplayString(affiliateduescategry.LocalDuesPercentage),
                          1
                          /* TEXT */
                        ))
                      ]),
                      createBaseVNode("td", null, [
                        affiliateduescategry.PaymentFrequency ? (openBlock(), createElementBlock(
                          "span",
                          _hoisted_5$F,
                          toDisplayString(affiliateduescategry.PaymentFrequency.PaymentFrequencyName),
                          1
                          /* TEXT */
                        )) : (openBlock(), createElementBlock("span", _hoisted_6$B, " Null "))
                      ]),
                      createBaseVNode("td", null, [
                        affiliateduescategry.StartDate ? (openBlock(), createElementBlock(
                          "span",
                          _hoisted_7$w,
                          toDisplayString(_ctx.$filters.formatDate(affiliateduescategry.StartDate)),
                          1
                          /* TEXT */
                        )) : (openBlock(), createElementBlock("span", _hoisted_8$q, " Null "))
                      ]),
                      createBaseVNode("td", null, [
                        affiliateduescategry.EndDate ? (openBlock(), createElementBlock(
                          "span",
                          _hoisted_9$p,
                          toDisplayString(_ctx.$filters.formatDate(affiliateduescategry.EndDate)),
                          1
                          /* TEXT */
                        )) : (openBlock(), createElementBlock("span", _hoisted_10$m, " Null "))
                      ]),
                      createBaseVNode("td", {
                        onClick: ($event) => $options.navigateToIndividuals(affiliateduescategry.LocalDuesCategoryId),
                        style: { "cursor": "pointer" }
                      }, [
                        affiliateduescategry.ActiveIndividuals ? (openBlock(), createElementBlock(
                          "div",
                          _hoisted_12$j,
                          toDisplayString(affiliateduescategry.ActiveIndividuals),
                          1
                          /* TEXT */
                        )) : (openBlock(), createElementBlock("div", _hoisted_13$g, "Null"))
                      ], 8, _hoisted_11$j)
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const LocalDuesCategoryComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1J, [["render", _sfc_render$1J], ["__scopeId", "data-v-56f7754d"], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/LocalDuesCategoryComponent.vue"]]);
const _sfc_main$1I = {
  name: "AffiliateCommitteesEditorComponent",
  components: { IndividualAutocomplete },
  props: {
    committees: {
      required: true,
      type: Array
    },
    isEditMode: {
      type: Boolean,
      default: false
    },
    editedCommittee: {
      type: Object,
      required: false
    },
    affiliateId: {
      required: true,
      type: Number
    }
  },
  data: () => ({
    showDialog: true,
    pickerStartDate: false,
    pickerEndDate: false,
    AffiliateCommiteeMember: {},
    CommitteeMemberTypes: [],
    rules: {
      required: (value) => !!value || "Required."
    },
    valid: true
  }),
  mounted() {
    axios.get("/api/v2/aggregate/committee-member-type/list?scope=global").then((response) => {
      this.CommitteeMemberTypes = response.data.data;
    });
  },
  beforeMount() {
    if (this.editedCommittee) {
      this.AffiliateCommiteeMember = clone(this.editedCommittee);
      this.AffiliateCommiteeMember.StartDate = this.AffiliateCommiteeMember.StartDate.split("T")[0];
      this.AffiliateCommiteeMember.EndDate = this.AffiliateCommiteeMember.EndDate.split("T")[0];
    }
  },
  watch: {
    editedCommittee: {
      handler(data) {
        this.AffiliateCommiteeMember = clone(this.editedCommittee);
      },
      deep: true
    }
  },
  methods: {
    cancel() {
      this.AffiliateCommiteeMember = {};
      this.$emit("canceled");
    },
    save() {
      if (!this.$refs.form.validate()) {
        return;
      }
      const AffiliateCommiteeMember = {
        ...this.AffiliateCommiteeMember,
        AffiliateId: this.affiliateId
      };
      let method = "post";
      let url = "/api/v2/affiliateCommitteeMember";
      if (this.isEditMode) {
        method = "put";
        url += "/" + AffiliateCommiteeMember.AffiliateCommitteeMemberId;
      }
      let saved = null;
      axios({ method, url, data: AffiliateCommiteeMember }).then((response) => {
        saved = response.data;
      }).finally(() => {
        this.$emit("saved", saved);
      });
    }
  }
};
const _hoisted_1$1c = { key: 0 };
const _hoisted_2$Z = { key: 1 };
const _hoisted_3$O = {
  key: 0,
  class: "text-red"
};
const _hoisted_4$H = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$E = { class: "data-container" };
const _hoisted_6$A = { class: "data-container" };
function _sfc_render$1I(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_IndividualAutocomplete = resolveComponent("IndividualAutocomplete");
  return openBlock(), createBlock(VDialog, {
    modelValue: _ctx.showDialog,
    "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => _ctx.showDialog = $event),
    width: "500"
  }, {
    default: withCtx(() => [
      createVNode(VForm, {
        ref: "form",
        modelValue: _ctx.valid,
        "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => _ctx.valid = $event)
      }, {
        default: withCtx(() => [
          createVNode(VCard, null, {
            default: withCtx(() => [
              createVNode(VCardTitle, null, {
                default: withCtx(() => [
                  $props.isEditMode ? (openBlock(), createElementBlock("span", _hoisted_1$1c, "Edit")) : (openBlock(), createElementBlock("span", _hoisted_2$Z, "Add")),
                  _cache[15] || (_cache[15] = createTextVNode(" Committee Member"))
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardText, null, {
                default: withCtx(() => [
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      createVNode(VCol, null, {
                        default: withCtx(() => [
                          createVNode(VSelect, {
                            key: "text-committee",
                            modelValue: _ctx.AffiliateCommiteeMember.AffiliateCommitteeId,
                            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.AffiliateCommiteeMember.AffiliateCommitteeId = $event),
                            items: $props.committees,
                            "item-title": "AffiliateCommitteeName",
                            "item-value": "AffiliateCommitteeId",
                            rules: [_ctx.rules.required],
                            variant: "underlined"
                          }, {
                            label: withCtx(() => [
                              _ctx.rules.required ? (openBlock(), createElementBlock("span", _hoisted_3$O, "* ")) : createCommentVNode("v-if", true),
                              _cache[16] || (_cache[16] = createTextVNode("Committee Name "))
                            ]),
                            _: 1
                            /* STABLE */
                          }, 8, ["modelValue", "items", "rules"]),
                          createVNode(VSelect, {
                            key: "text-committee-member-type",
                            modelValue: _ctx.AffiliateCommiteeMember.CommitteeMemberTypeId,
                            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.AffiliateCommiteeMember.CommitteeMemberTypeId = $event),
                            items: _ctx.CommitteeMemberTypes,
                            "item-title": "CommitteeMemberTypeName",
                            "item-value": "CommitteeMemberTypeId",
                            rules: [_ctx.rules.required],
                            variant: "underlined"
                          }, {
                            label: withCtx(() => [
                              _ctx.rules.required ? (openBlock(), createElementBlock("span", _hoisted_4$H, "* ")) : createCommentVNode("v-if", true),
                              _cache[17] || (_cache[17] = createTextVNode("Committee Member Type "))
                            ]),
                            _: 1
                            /* STABLE */
                          }, 8, ["modelValue", "items", "rules"]),
                          createVNode(_component_IndividualAutocomplete, {
                            modelValue: _ctx.AffiliateCommiteeMember.IndividualId,
                            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.AffiliateCommiteeMember.IndividualId = $event),
                            individual: _ctx.AffiliateCommiteeMember.Individual,
                            rules: [_ctx.rules.required],
                            affiliateId: this.affiliateId,
                            filter: "current"
                          }, null, 8, ["modelValue", "individual", "rules", "affiliateId"])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      createVNode(VCol, {
                        cols: "12",
                        lg: "6"
                      }, {
                        default: withCtx(() => [
                          createBaseVNode("div", _hoisted_5$E, [
                            createVNode(VMenu, {
                              modelValue: _ctx.pickerStartDate,
                              "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => _ctx.pickerStartDate = $event),
                              "close-on-content-click": false,
                              offset: 40,
                              transition: "scale-transition",
                              "min-width": "290px"
                            }, {
                              activator: withCtx(({ props }) => [
                                createVNode(VTextField, mergeProps({
                                  modelValue: _ctx.AffiliateCommiteeMember.StartDate,
                                  "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => _ctx.AffiliateCommiteeMember.StartDate = $event),
                                  hint: "YYYY-MM-DD",
                                  label: "Start Date:"
                                }, props, { variant: "underlined" }), null, 16, ["modelValue"])
                              ]),
                              default: withCtx(() => [
                                createVNode(VDatePicker, {
                                  modelValue: _ctx.AffiliateCommiteeMember.StartDate,
                                  "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => _ctx.AffiliateCommiteeMember.StartDate = $event),
                                  onInput: _cache[5] || (_cache[5] = ($event) => _ctx.pickerStartDate = false)
                                }, null, 8, ["modelValue"])
                              ]),
                              _: 1
                              /* STABLE */
                            }, 8, ["modelValue"])
                          ])
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VCol, {
                        cols: "12",
                        lg: "6"
                      }, {
                        default: withCtx(() => [
                          createBaseVNode("div", _hoisted_6$A, [
                            createVNode(VMenu, {
                              modelValue: _ctx.pickerEndDate,
                              "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => _ctx.pickerEndDate = $event),
                              "close-on-content-click": false,
                              offset: 40,
                              transition: "scale-transition",
                              "min-width": "290px"
                            }, {
                              activator: withCtx(({ props }) => [
                                createVNode(VTextField, mergeProps({
                                  modelValue: _ctx.AffiliateCommiteeMember.EndDate,
                                  "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => _ctx.AffiliateCommiteeMember.EndDate = $event),
                                  hint: "YYYY-MM-DD",
                                  label: "End Date:"
                                }, props, { variant: "underlined" }), null, 16, ["modelValue"])
                              ]),
                              default: withCtx(() => [
                                createVNode(VDatePicker, {
                                  modelValue: _ctx.AffiliateCommiteeMember.EndDate,
                                  "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => _ctx.AffiliateCommiteeMember.EndDate = $event),
                                  onInput: _cache[9] || (_cache[9] = ($event) => _ctx.pickerEndDate = false)
                                }, null, 8, ["modelValue"])
                              ]),
                              _: 1
                              /* STABLE */
                            }, 8, ["modelValue"])
                          ])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardActions, null, {
                default: withCtx(() => [
                  createVNode(VSpacer),
                  createVNode(VBtn, {
                    color: "default",
                    variant: "elevated",
                    onClick: _cache[11] || (_cache[11] = ($event) => $options.cancel())
                  }, {
                    default: withCtx(() => _cache[18] || (_cache[18] = [
                      createTextVNode(" Cancel ")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VBtn, {
                    color: "primary",
                    variant: "elevated",
                    onClick: _cache[12] || (_cache[12] = ($event) => $options.save())
                  }, {
                    default: withCtx(() => _cache[19] || (_cache[19] = [
                      createTextVNode(" Save ")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"])
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue"]);
}
const AffiliateCommitteesEditorComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1I, [["render", _sfc_render$1I], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/AffiliateCommitteesEditorComponent.vue"]]);
const _sfc_main$1H = {
  name: "CommitteesNameTableComponent",
  components: { AffiliateCommitteesEditorComponent },
  mixins: [headersMixin],
  props: {
    committee: {
      required: true,
      type: String
    },
    committeeId: {
      required: true,
      type: Number
    },
    committees: {
      required: true,
      type: Array
    },
    individuals: {
      required: false,
      type: Array,
      default: () => []
    },
    affiliateId: {
      required: true,
      type: Number
    }
  },
  data: () => ({
    headers: [
      { title: "Name", value: "FullName", visible: true },
      { title: "Committee Member Type", value: "CommitteeMemberTypeName", visible: true },
      { title: "Start Date", value: "StartDate", visible: true },
      { title: "End Date", value: "EndDate", visible: true },
      { title: "", value: "actions", visible: true, sortable: false }
    ],
    showAddIndividualCommittee: false,
    editedCommittee: null
  }),
  methods: {
    getNoDataText() {
      if (this.noDataText) {
        return this.noDataText;
      }
      return "There are no individuals in the " + this.committee + " committee.";
    },
    editItem(item) {
      this.editedCommittee = item;
      this.showAddIndividualCommittee = true;
    },
    deleteItem(item) {
      if (confirm("are you sure you want to delete affiliate committee member " + item.FullName + " from committee " + this.committee)) {
        axios.delete("/api/v2/affiliateCommitteeMember/" + item.AffiliateCommitteeMemberId).finally(() => {
          this.$emit("committeeDeleted");
        });
      }
    },
    updatedCommittee(data) {
      this.showAddIndividualCommittee = false;
      this.$emit("savedCommittee", data);
    }
  }
};
const _hoisted_1$1b = { key: 0 };
const _hoisted_2$Y = { key: 0 };
function _sfc_render$1H(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_AffiliateCommitteesEditorComponent = resolveComponent("AffiliateCommitteesEditorComponent");
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, null, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($props.committee),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, null, {
            default: withCtx(() => [
              _ctx.showAddIndividualCommittee ? (openBlock(), createBlock(_component_AffiliateCommitteesEditorComponent, {
                key: 0,
                committees: $props.committees,
                affiliateId: $props.affiliateId,
                "is-edit-mode": true,
                editedCommittee: _ctx.editedCommittee,
                onCanceled: _cache[0] || (_cache[0] = ($event) => _ctx.showAddIndividualCommittee = false),
                onSaved: $options.updatedCommittee
              }, null, 8, ["committees", "affiliateId", "editedCommittee", "onSaved"])) : createCommentVNode("v-if", true),
              createVNode(VDataTable, {
                headers: _ctx.getHeaders(_ctx.headers),
                items: $props.individuals,
                "hide-default-footer": true,
                class: "elevation-1 mobile-global-card-table",
                "mobile-breakpoint": 992,
                "disable-pagination": true,
                "no-data-text": $options.getNoDataText()
              }, {
                [`item.StartDate`]: withCtx(({ item }) => [
                  item ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_1$1b,
                    toDisplayString(_ctx.$filters.formatDate(item.StartDate)),
                    1
                    /* TEXT */
                  )) : createCommentVNode("v-if", true)
                ]),
                [`item.EndDate`]: withCtx(({ item }) => [
                  item ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_2$Y,
                    toDisplayString(_ctx.$filters.formatDate(item.EndDate)),
                    1
                    /* TEXT */
                  )) : createCommentVNode("v-if", true)
                ]),
                [`item.actions`]: withCtx(({ item }) => [
                  createVNode(
                    VBtnGroup,
                    null,
                    {
                      default: withCtx(() => [
                        createVNode(VBtn, {
                          size: "small",
                          icon: "fa-edit",
                          onClick: ($event) => $options.editItem(item)
                        }, null, 8, ["onClick"]),
                        createVNode(VBtn, {
                          size: "small",
                          icon: "fa-trash",
                          onClick: ($event) => $options.deleteItem(item)
                        }, null, 8, ["onClick"])
                      ]),
                      _: 2
                      /* DYNAMIC */
                    },
                    1024
                    /* DYNAMIC_SLOTS */
                  )
                ]),
                _: 2
                /* DYNAMIC */
              }, 1032, ["headers", "items", "no-data-text"])
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const CommitteesNameTableComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1H, [["render", _sfc_render$1H], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/CommitteesNameTableComponent.vue"]]);
const _sfc_main$1G = {
  name: "CommitteesEditorComponent",
  components: { CommitteesNameTableComponent, AffiliateCommitteesEditorComponent },
  props: {
    affiliateCommittee: {
      required: true,
      type: Array
    },
    affiliateId: {
      required: true,
      type: Number
    }
  },
  data: () => ({
    noDataText: "",
    committees: [],
    filter: {
      firstName: "",
      lastName: "",
      committeeName: 0
    },
    individuals: {},
    filteredIndividuals: {},
    showAddIndividualCommittee: false
  }),
  watch: {
    affiliateCommittee: {
      handler(data) {
        if (this.affiliateCommittee) {
          let committeeCount = this.affiliateCommittee.length;
          for (let i = 0; i < committeeCount; i++) {
            let committee = this.affiliateCommittee[i];
            let committeeMemberCount = committee.affiliateCommitteeMember.length;
            this.individuals[committee.AffiliateCommitteeName] = [];
            if (!this.individuals.hasOwnProperty(committee.AffiliateCommitteeName)) {
              this.individuals[committee.AffiliateCommitteeName] = [];
            }
            if (committeeMemberCount > 0) {
              for (let j = 0; j < committeeMemberCount; j++) {
                if (committee.affiliateCommitteeMember[j]) {
                  let individual = {};
                  let committeeMember = committee.affiliateCommitteeMember[j];
                  if (committeeMember.Individual) {
                    individual["AffiliateCommitteeMemberId"] = committeeMember.AffiliateCommitteeMemberId;
                    individual["AffiliateCommitteeId"] = committee.AffiliateCommitteeId;
                    individual["CommitteeMemberTypeId"] = committeeMember.CommitteeMemberType.CommitteeMemberTypeId;
                    individual["IndividualId"] = committeeMember.Individual.IndividualId;
                    individual["FullName"] = committeeMember.Individual.FullName;
                    individual["Individual"] = committeeMember.Individual;
                    individual["StartDate"] = committeeMember.StartDate;
                    individual["EndDate"] = committeeMember.EndDate;
                    individual["CommitteeMemberTypeName"] = committeeMember.CommitteeMemberType.CommitteeMemberTypeName;
                  }
                  this.individuals[committee.AffiliateCommitteeName].push(individual);
                }
              }
            }
          }
          this.filteredIndividuals = clone(this.individuals);
        }
      },
      deep: true
    }
  },
  mounted() {
    axios.get("/api/v2/AffiliateCommittee?include=CommitteeType&per_page=50").then((response) => {
      this.committees = response.data.data;
    });
  },
  methods: {
    search() {
      if (this.filter.firstName !== "" || this.filter.lastName !== "" || this.filter.committeeName !== 0) {
        this.filteredIndividuals = {};
        for (const committeeName in this.individuals) {
          if (this.individuals.hasOwnProperty(committeeName)) {
            this.filteredIndividuals[committeeName] = this.individuals[committeeName].filter((v) => {
              return (this.filter.firstName === "" || v.Individual.FirstName.toLowerCase().includes(this.filter.firstName.toLowerCase())) && (this.filter.lastName === "" || v.Individual.LastName.toLowerCase().includes(this.filter.lastName.toLowerCase())) && (this.filter.committeeName === 0 || v.AffiliateCommitteeId === this.filter.committeeName);
            });
          }
        }
        this.noDataText = "No results found for '[" + this.filter.firstName + "] + [" + this.filter.lastName + "]' name search.";
      } else {
        this.clear();
      }
    },
    clear() {
      this.filter = {
        firstName: "",
        lastName: "",
        committeeName: 0
      };
      this.filteredIndividuals = clone(this.individuals);
      this.noDataText = "";
    },
    addNewCommittee() {
      this.showAddIndividualCommittee = true;
    },
    addedNewCommittee(data) {
      this.showAddIndividualCommittee = false;
      this.$emit("savedCommittee", data);
    }
  }
};
function _sfc_render$1G(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_AffiliateCommitteesEditorComponent = resolveComponent("AffiliateCommitteesEditorComponent");
  const _component_CommitteesNameTableComponent = resolveComponent("CommitteesNameTableComponent");
  return openBlock(), createElementBlock(
    Fragment,
    null,
    [
      createVNode(VCard, { class: "mb-4" }, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => _cache[9] || (_cache[9] = [
              createTextVNode("Search for Committees")
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        key: "text-first-name",
                        label: "First Name",
                        modelValue: _ctx.filter.firstName,
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.filter.firstName = $event),
                        variant: "underlined"
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        key: "text-last-name",
                        label: "Last Name",
                        modelValue: _ctx.filter.lastName,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.filter.lastName = $event),
                        variant: "underlined"
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VSelect, {
                        key: "text-department",
                        label: "Committee Name",
                        modelValue: _ctx.filter.committeeName,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.filter.committeeName = $event),
                        items: _ctx.committees,
                        "item-title": "AffiliateCommitteeName",
                        "item-value": "AffiliateCommitteeId",
                        variant: "underlined"
                      }, null, 8, ["modelValue", "items"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, { class: "d-flex justify-end ga-2" }, {
                default: withCtx(() => [
                  createVNode(VBtn, {
                    color: "primary",
                    variant: "elevated",
                    onClick: _cache[3] || (_cache[3] = ($event) => $options.search())
                  }, {
                    default: withCtx(() => _cache[10] || (_cache[10] = [
                      createTextVNode("Search")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VBtn, {
                    color: "default",
                    variant: "elevated",
                    onClick: _cache[4] || (_cache[4] = ($event) => $options.clear())
                  }, {
                    default: withCtx(() => _cache[11] || (_cache[11] = [
                      createTextVNode("Reset")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardActions, null, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                color: "primary",
                variant: "elevated",
                onClick: _cache[5] || (_cache[5] = ($event) => $options.addNewCommittee())
              }, {
                default: withCtx(() => _cache[12] || (_cache[12] = [
                  createTextVNode("Add Committee Member")
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          _ctx.showAddIndividualCommittee ? (openBlock(), createBlock(_component_AffiliateCommitteesEditorComponent, {
            key: 0,
            committees: _ctx.committees,
            affiliateId: $props.affiliateId,
            onCanceled: _cache[6] || (_cache[6] = ($event) => _ctx.showAddIndividualCommittee = false),
            onSaved: $options.addedNewCommittee
          }, null, 8, ["committees", "affiliateId", "onSaved"])) : createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      }),
      (openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.committees, (committee) => {
          return openBlock(), createBlock(_component_CommitteesNameTableComponent, {
            key: "committeetype-table-" + committee.AffiliateCommitteeName,
            committee: committee.AffiliateCommitteeName,
            committeeId: committee.AffiliateCommitteeId,
            individuals: _ctx.filteredIndividuals[committee.AffiliateCommitteeName],
            noDataText: _ctx.noDataText,
            committees: _ctx.committees,
            affiliateId: $props.affiliateId,
            onCommitteeDeleted: _cache[7] || (_cache[7] = ($event) => _ctx.$emit("savedCommittee")),
            onSavedCommittee: _cache[8] || (_cache[8] = ($event) => _ctx.$emit("savedCommittee"))
          }, null, 8, ["committee", "committeeId", "individuals", "noDataText", "committees", "affiliateId"]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))
    ],
    64
    /* STABLE_FRAGMENT */
  );
}
const CommitteesEditorComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1G, [["render", _sfc_render$1G], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/CommitteesEditorComponent.vue"]]);
const _sfc_main$1F = {
  name: "AffiliateCommitteesComponent",
  components: { CommitteesEditorComponent, FlipCard },
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  data: () => ({
    id: "",
    affiliate: {},
    affiliateCommittee: [],
    loading: false,
    flipped: false,
    panel: []
  }),
  methods: {
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/affiliate/" + this.affiliateId + "?scope=global&include=affiliateCommittee,affiliateCommittee.CommitteeType,affiliateCommittee.affiliateCommitteeMember.CommitteeMemberType,affiliateCommittee.affiliateCommitteeMember.Individual";
      console.log("getting data");
      return axios.get(url).then((response) => {
        console.log({ response: response.data });
        this.affiliate = response.data.data;
        this.affiliateCommittee = response.data.data.affiliateCommittee;
      }).finally(() => {
        console.log("finally??");
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$1a = { class: "data-container" };
function _sfc_render$1F(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_CommitteesEditorComponent = resolveComponent("CommitteesEditorComponent");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, {
    value: "committee",
    "onGroup:selected": $options.onExpand
  }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[2] || (_cache[2] = [
          createTextVNode(" Committees ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: _ctx.flipped }, {
            front: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createBaseVNode("div", null, [
                        createVNode(VBtn, {
                          size: "small",
                          color: "primary",
                          onClick: _cache[0] || (_cache[0] = ($event) => _ctx.flipped = true)
                        }, {
                          default: withCtx(() => _cache[3] || (_cache[3] = [
                            createTextVNode("Manage")
                          ])),
                          _: 1
                          /* STABLE */
                        })
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VProgressLinear, {
                        active: _ctx.loading,
                        indeterminate: true,
                        color: "#7bb8da"
                      }, null, 8, ["active"]),
                      createBaseVNode("div", _hoisted_1$1a, [
                        (openBlock(true), createElementBlock(
                          Fragment,
                          null,
                          renderList(_ctx.affiliate.affiliateCommittee, (affiliateCommittee) => {
                            return openBlock(), createElementBlock("div", {
                              class: "dues",
                              key: affiliateCommittee.AffiliateCommitteeId
                            }, [
                              _cache[4] || (_cache[4] = createBaseVNode(
                                "div",
                                { class: "data-tag" },
                                "Name:",
                                -1
                                /* HOISTED */
                              )),
                              createTextVNode(
                                " " + toDisplayString(affiliateCommittee.AffiliateCommitteeName) + " ",
                                1
                                /* TEXT */
                              ),
                              _cache[5] || (_cache[5] = createBaseVNode(
                                "br",
                                null,
                                null,
                                -1
                                /* HOISTED */
                              )),
                              _cache[6] || (_cache[6] = createBaseVNode(
                                "div",
                                { class: "data-tag" },
                                "Committee Type:",
                                -1
                                /* HOISTED */
                              )),
                              createTextVNode(
                                " " + toDisplayString(affiliateCommittee.CommitteeType.CommitteeTypeName) + " ",
                                1
                                /* TEXT */
                              ),
                              _cache[7] || (_cache[7] = createBaseVNode(
                                "br",
                                null,
                                null,
                                -1
                                /* HOISTED */
                              ))
                            ]);
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            back: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        color: "primary",
                        onClick: _cache[1] || (_cache[1] = ($event) => _ctx.flipped = false)
                      }, {
                        default: withCtx(() => _cache[8] || (_cache[8] = [
                          createTextVNode("Cancel")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(_component_CommitteesEditorComponent, {
                        affiliateCommittee: _ctx.affiliateCommittee,
                        onSavedCommittee: $options.getDataFromApi,
                        affiliateId: $props.affiliateId
                      }, null, 8, ["affiliateCommittee", "onSavedCommittee", "affiliateId"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const AffiliateCommitteesComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1F, [["render", _sfc_render$1F], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/AffiliateCommitteesComponent.vue"]]);
const _sfc_main$1E = {
  name: "AffiliateChapterComponent",
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  data: () => ({
    id: "",
    affiliate: {},
    loading: false
  }),
  methods: {
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/affiliate/" + this.affiliateId + "?scope=global&include=chapter";
      return axios.get(url).then((response) => {
        this.affiliate = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    hasNonStructuralChapters() {
      if (this.affiliate.chapter == null)
        return false;
      else
        return this.affiliate.chapter.filter((ch) => !ch.IsStructural).length > 0 ? true : false;
    },
    structuralChapters(chapters) {
      return chapters.filter((chapter) => chapter.IsStructural);
    }
  }
};
const _hoisted_1$19 = { class: "data-container" };
const _hoisted_2$X = {
  key: 0,
  class: "greyed-out"
};
function _sfc_render$1E(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[0] || (_cache[0] = [
          createTextVNode(" Chapter ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VProgressLinear, {
            active: _ctx.loading,
            indeterminate: ""
          }, null, 8, ["active"]),
          createBaseVNode("div", _hoisted_1$19, [
            !$options.hasNonStructuralChapters() ? (openBlock(), createElementBlock("div", _hoisted_2$X, "No data available")) : createCommentVNode("v-if", true),
            (openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList($options.structuralChapters(_ctx.affiliate.chapter), (chapter) => {
                return openBlock(), createElementBlock("div", {
                  class: "dues",
                  key: chapter.ChapterId
                }, [
                  _cache[1] || (_cache[1] = createBaseVNode(
                    "div",
                    { class: "data-tag" },
                    "Chapter Name:",
                    -1
                    /* HOISTED */
                  )),
                  createTextVNode(
                    " " + toDisplayString(chapter.ChapterName) + " ",
                    1
                    /* TEXT */
                  ),
                  _cache[2] || (_cache[2] = createBaseVNode(
                    "br",
                    null,
                    null,
                    -1
                    /* HOISTED */
                  )),
                  _cache[3] || (_cache[3] = createBaseVNode(
                    "div",
                    { class: "data-tag" },
                    "Chapter Number:",
                    -1
                    /* HOISTED */
                  )),
                  createTextVNode(
                    " " + toDisplayString(chapter.ChapterNumber) + " ",
                    1
                    /* TEXT */
                  ),
                  _cache[4] || (_cache[4] = createBaseVNode(
                    "br",
                    null,
                    null,
                    -1
                    /* HOISTED */
                  ))
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const AffiliateChapterComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1E, [["render", _sfc_render$1E], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/AffiliateChapterComponent.vue"]]);
const _sfc_main$1D = {
  name: "AffiliateEmployerComponent",
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  data: () => ({
    id: "",
    employersCount: 0,
    affiliate: {},
    loading: false
  }),
  methods: {
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    getEmployersCount(affiliate) {
      this.employersCount = 0;
      affiliate.chapter.forEach((chapter) => {
        this.employersCount += chapter.nonStructuralEmployer.length;
      });
    },
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/affiliate/" + this.affiliateId + "?scope=global&include=chapter.nonStructuralEmployer";
      return axios.get(url).then((response) => {
        this.affiliate = response.data.data;
        this.getEmployersCount(this.affiliate);
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$18 = { class: "data-container" };
const _hoisted_2$W = { class: "count" };
function _sfc_render$1D(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_router_link = resolveComponent("router-link");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[0] || (_cache[0] = [
          createTextVNode(" Employer ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VProgressLinear, {
            active: _ctx.loading,
            indeterminate: true,
            color: "#7bb8da"
          }, null, 8, ["active"]),
          createBaseVNode("div", _hoisted_1$18, [
            createBaseVNode(
              "div",
              _hoisted_2$W,
              "Total Employers : " + toDisplayString(_ctx.employersCount),
              1
              /* TEXT */
            ),
            (openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(_ctx.affiliate.chapter, (chapter) => {
                return openBlock(), createElementBlock("div", {
                  key: chapter.ChapterId
                }, [
                  (openBlock(true), createElementBlock(
                    Fragment,
                    null,
                    renderList(chapter.nonStructuralEmployer, (employer) => {
                      return openBlock(), createElementBlock("div", {
                        key: employer.EmployerId
                      }, [
                        _cache[1] || (_cache[1] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          null,
                          -1
                          /* HOISTED */
                        )),
                        createVNode(_component_router_link, {
                          to: { name: "EmployerDetails", params: { id: employer.EmployerId } }
                        }, {
                          default: withCtx(() => [
                            createTextVNode(
                              toDisplayString(employer.EmployerName),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        }, 1032, ["to"])
                      ]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const AffiliateEmployerComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1D, [["render", _sfc_render$1D], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/AffiliateEmployerComponent.vue"]]);
const _sfc_main$1C = {
  name: "AffiliateOptionsComponent",
  data() {
    return {
      affiliate: [],
      manageAffiliateOptionsMessage: ""
    };
  },
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  methods: {
    onExpand() {
      if (!this.expanded) {
        this.expanded = true;
        this.getDataFromApi();
      }
      this.manageAffiliateOptionsMessage = "";
    },
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/affiliate/" + this.affiliateId + "?include=AffiliatePerCapita";
      return axios.get(url).then((response) => {
        this.affiliate = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    showAffiliateOptionsMessage() {
      this.manageAffiliateOptionsMessage = "To modify Affiliate Options please contact AFTmembership@aft.org";
    }
  }
};
const _hoisted_1$17 = { class: "error-message" };
const _hoisted_2$V = { class: "data-container" };
const _hoisted_3$N = {
  key: 0,
  class: "data-value"
};
const _hoisted_4$G = {
  key: 1,
  class: "data-value"
};
const _hoisted_5$D = {
  key: 2,
  class: "data-value"
};
const _hoisted_6$z = {
  key: 3,
  class: "data-value"
};
const _hoisted_7$v = {
  key: 4,
  class: "data-value"
};
const _hoisted_8$p = {
  key: 5,
  class: "data-value"
};
const _hoisted_9$o = {
  key: 6,
  class: "data-value"
};
const _hoisted_10$l = {
  key: 7,
  class: "data-value"
};
const _hoisted_11$i = { class: "data-container" };
const _hoisted_12$i = {
  key: 0,
  class: "data-value"
};
const _hoisted_13$f = {
  key: 1,
  class: "data-value"
};
const _hoisted_14$f = { class: "data-container" };
const _hoisted_15$f = {
  key: 0,
  class: "data-value"
};
const _hoisted_16$f = {
  key: 1,
  class: "data-value"
};
const _hoisted_17$e = {
  key: 2,
  class: "data-value"
};
const _hoisted_18$d = {
  key: 3,
  class: "data-value"
};
const _hoisted_19$d = {
  key: 4,
  class: "data-value"
};
const _hoisted_20$c = {
  key: 5,
  class: "data-value"
};
const _hoisted_21$c = {
  key: 6,
  class: "data-value"
};
const _hoisted_22$a = {
  key: 7,
  class: "data-value"
};
const _hoisted_23$a = {
  key: 8,
  class: "data-value"
};
const _hoisted_24$9 = {
  key: 9,
  class: "data-value"
};
function _sfc_render$1C(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanels, null, {
    default: withCtx(() => [
      createVNode(VExpansionPanel, {
        "onGroup:selected": _cache[0] || (_cache[0] = ($event) => $options.onExpand())
      }, {
        default: withCtx(() => [
          createVNode(VExpansionPanelTitle, null, {
            default: withCtx(() => _cache[1] || (_cache[1] = [
              createBaseVNode(
                "h4",
                null,
                "Affiliate Options",
                -1
                /* HOISTED */
              )
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VExpansionPanelText, null, {
            default: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createBaseVNode("div", null, [
                        createVNode(VBtn, {
                          size: "small",
                          color: "primary",
                          onClick: $options.showAffiliateOptionsMessage
                        }, {
                          default: withCtx(() => _cache[2] || (_cache[2] = [
                            createTextVNode("Manage Affiliate Options")
                          ])),
                          _: 1
                          /* STABLE */
                        }, 8, ["onClick"])
                      ]),
                      createBaseVNode(
                        "div",
                        _hoisted_1$17,
                        toDisplayString($data.manageAffiliateOptionsMessage),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VCard, { class: "v-card--outlined v-sheet--tile px-6" }, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_2$V, [
                                    _cache[3] || (_cache[3] = createBaseVNode(
                                      "div",
                                      { class: "data-tag" },
                                      "Retiree options:",
                                      -1
                                      /* HOISTED */
                                    )),
                                    $data.affiliate && $data.affiliate.RetireeStaysLocal == "1" ? (openBlock(), createElementBlock("div", _hoisted_3$N, " Move Retirees to Retiree Unit within the same local: Yes ")) : (openBlock(), createElementBlock("div", _hoisted_4$G, " Move Retirees to Retiree Unit within the same local: No ")),
                                    $data.affiliate ? (openBlock(), createElementBlock("div", _hoisted_5$D, " Move Retirees to Charted Retiree Local: N/A ")) : (openBlock(), createElementBlock("div", _hoisted_6$z, " Move Retirees to Charted Retiree Local: No ")),
                                    $data.affiliate ? (openBlock(), createElementBlock("div", _hoisted_7$v, " Move Retirees to Retiree Unit of the State Federation: N/A ")) : (openBlock(), createElementBlock("div", _hoisted_8$p, " Move Retirees to Retiree Unit of the State Federation: No ")),
                                    $data.affiliate ? (openBlock(), createElementBlock("div", _hoisted_9$o, " Move to Retiree at large Local, Local 09005: N/A ")) : (openBlock(), createElementBlock("div", _hoisted_10$l, " Move to Retiree at large Local, Local 09005: No "))
                                  ]),
                                  _cache[6] || (_cache[6] = createBaseVNode(
                                    "br",
                                    null,
                                    null,
                                    -1
                                    /* HOISTED */
                                  )),
                                  createBaseVNode("div", _hoisted_11$i, [
                                    _cache[4] || (_cache[4] = createBaseVNode(
                                      "div",
                                      { class: "data-tag" },
                                      "Financial data:",
                                      -1
                                      /* HOISTED */
                                    )),
                                    $data.affiliate ? (openBlock(), createElementBlock(
                                      "div",
                                      _hoisted_12$i,
                                      " Affiliate EIN number: " + toDisplayString($data.affiliate.AffiliateEIN),
                                      1
                                      /* TEXT */
                                    )) : createCommentVNode("v-if", true),
                                    $data.affiliate && $data.affiliate.AffiliatePerCapita ? (openBlock(), createElementBlock(
                                      "div",
                                      _hoisted_13$f,
                                      " Fiscal Year End (mm/dd): " + toDisplayString($data.affiliate.AffiliatePerCapita.FiscalYearEndMonth) + "/" + toDisplayString($data.affiliate.AffiliatePerCapita.FiscalYearEndDay),
                                      1
                                      /* TEXT */
                                    )) : createCommentVNode("v-if", true)
                                  ]),
                                  _cache[7] || (_cache[7] = createBaseVNode(
                                    "br",
                                    null,
                                    null,
                                    -1
                                    /* HOISTED */
                                  )),
                                  createBaseVNode("div", _hoisted_14$f, [
                                    _cache[5] || (_cache[5] = createBaseVNode(
                                      "div",
                                      { class: "data-tag" },
                                      "External Data Options:",
                                      -1
                                      /* HOISTED */
                                    )),
                                    $data.affiliate && $data.affiliate.NoNcoaUpdate == "1" ? (openBlock(), createElementBlock("div", _hoisted_15$f, " Prevent NCOA Update: Yes ")) : (openBlock(), createElementBlock("div", _hoisted_16$f, " Prevent NCOA Update: No ")),
                                    $data.affiliate && $data.affiliate.NoNationalUpdate == "1" ? (openBlock(), createElementBlock("div", _hoisted_17$e, " Prevent National Updates: Yes ")) : (openBlock(), createElementBlock("div", _hoisted_18$d, " Prevent National Updates: No ")),
                                    $data.affiliate && $data.affiliate.NoStateUpdate == "1" ? (openBlock(), createElementBlock("div", _hoisted_19$d, " Prevent State Updates: Yes ")) : (openBlock(), createElementBlock("div", _hoisted_20$c, " Prevent State Updates: No ")),
                                    $data.affiliate && $data.affiliate.NoExternalUpdate == "1" ? (openBlock(), createElementBlock("div", _hoisted_21$c, " Disable External Updates: Yes ")) : (openBlock(), createElementBlock("div", _hoisted_22$a, " Disable External Updates: No ")),
                                    $data.affiliate && $data.affiliate.NoLanWanUpdate == "1" ? (openBlock(), createElementBlock("div", _hoisted_23$a, " Prevent LAN/WAN Updates: Yes ")) : (openBlock(), createElementBlock("div", _hoisted_24$9, " Prevent LAN/WAN Updates: No "))
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const AffiliateOptionsComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1C, [["render", _sfc_render$1C], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/AffiliateOptionsComponent.vue"]]);
const _sfc_main$1B = {
  name: "AffiliateUnitComponent",
  data() {
    return {
      unit: [],
      headers: [
        { title: "Unit Name", value: "UnitName" },
        { title: "Agreement/Contract", value: "LocalAgreementName" },
        { title: "Employer", value: "EmployerName" }
      ]
    };
  },
  props: {
    affiliateId: {
      type: Number,
      required: true
    }
  },
  beforeMount() {
    if (this.$store.getters["user/selectedAffiliate"].hasChapters) {
      this.headers.push(
        { text: "Chapter", value: "ChapterName" }
      );
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/aggregate/affiliate/unit/" + this.affiliateId + "?scope=global";
      return axios.get(url).then((response) => {
        this.unit = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    }
  }
};
function _sfc_render$1B(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[0] || (_cache[0] = [
          createTextVNode(" Unit ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VDataTable, {
            headers: $data.headers,
            items: $data.unit,
            class: "v-outlined mobile-global-card-table",
            "mobile-breakpoint": 992
          }, null, 8, ["headers", "items"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const AffiliateUnitComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1B, [["render", _sfc_render$1B], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/AffiliateUnitComponent.vue"]]);
const _sfc_main$1A = {
  name: "UserAccountsComponent",
  data: () => ({
    loading: false,
    headers: [
      { title: "Name", value: "name" },
      { title: "Email", value: "email" },
      { title: "Access", value: "authorizations" },
      { title: "MFP Access", value: "memberFormAccess" },
      { title: "Last Login", value: "last_login_at" }
    ],
    users: [],
    userTotal: 0
  }),
  mounted() {
    this.id = this.$route.params.id;
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/user/affiliate-user-list").then((response) => {
        this.users = response.data.data;
        this.users = this.users.map((user) => {
          const userAbilities = user.AuthUserAbilities ? user.AuthUserAbilities : [];
          if (userAbilities && userAbilities.length) {
            const memberFormAccess = userAbilities.find((ability) => {
              var _a2;
              return ((_a2 = ability == null ? void 0 : ability.AuthAbility) == null ? void 0 : _a2.type) === "memberforms";
            });
            user.memberFormAccess = memberFormAccess ? true : false;
          } else {
            user.memberFormAccess = false;
          }
          return user;
        });
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    }
  }
};
const _hoisted_1$16 = { key: 0 };
const _hoisted_2$U = {
  key: 0,
  src: "/images/check.png",
  alt: "yes",
  style: { "width": "30px", "margin-right": "3px" }
};
const _hoisted_3$M = {
  key: 1,
  src: "/images/delete.png",
  alt: "no",
  style: { "width": "15px", "margin-left": "5px" }
};
function _sfc_render$1A(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[0] || (_cache[0] = [
          createTextVNode(" User Accounts ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VDataTable, {
            loading: _ctx.loading,
            headers: _ctx.headers,
            items: _ctx.users,
            "item-key": _ctx.users.id,
            "disable-sort": ""
          }, {
            [`item.authorizations`]: withCtx(({ item }) => [
              (openBlock(true), createElementBlock(
                Fragment,
                null,
                renderList(item.authorizations, (auth) => {
                  return openBlock(), createElementBlock("div", {
                    key: auth.entity_id
                  }, [
                    auth.entity_id === 0 ? (openBlock(), createElementBlock(
                      Fragment,
                      { key: 0 },
                      [
                        createTextVNode(
                          toDisplayString(auth.role.name) + ": Global " + toDisplayString(auth.entity_type.substring(auth.entity_type.lastIndexOf("\\") + 1)),
                          1
                          /* TEXT */
                        )
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    )) : (openBlock(), createElementBlock(
                      Fragment,
                      { key: 1 },
                      [
                        auth.entity ? (openBlock(), createElementBlock(
                          "span",
                          _hoisted_1$16,
                          toDisplayString(auth.role.name) + ": " + toDisplayString(auth.entity.label) + " " + toDisplayString(auth.entity.display_name),
                          1
                          /* TEXT */
                        )) : createCommentVNode("v-if", true)
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    ))
                  ]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ]),
            [`item.last_login_at`]: withCtx(({ item }) => [
              createTextVNode(
                toDisplayString(_ctx.$filters.formatDateTime(item.last_login_at)),
                1
                /* TEXT */
              )
            ]),
            [`item.memberFormAccess`]: withCtx(({ item }) => [
              item.memberFormAccess ? (openBlock(), createElementBlock("img", _hoisted_2$U)) : (openBlock(), createElementBlock("img", _hoisted_3$M))
            ]),
            _: 2
            /* DYNAMIC */
          }, 1032, ["loading", "headers", "items", "item-key"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const UserAccountsComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1A, [["render", _sfc_render$1A], ["__file", "/var/www/html/resources/js/components/Affiliate/Partial/UserAccountsComponent.vue"]]);
const _sfc_main$1z = {
  name: "FileAttachmentComponent",
  components: { FlipCard },
  data() {
    return {
      alert: false,
      alertType: "success",
      alertText: "",
      file: null,
      affiliate: {},
      selectedAffiliateId: null,
      description: "",
      options: {
        sortBy: [{ key: "CreatedAt", order: "asc" }]
      },
      loading: false,
      fileAttachments: [],
      totalFileAttachments: 0,
      headers: [
        { title: "File Name", value: "OriginalFileName" },
        { title: "Description", value: "Description" },
        { title: "Uploaded On", value: "CreatedAt" }
      ],
      panel: null,
      flipped: false
    };
  },
  props: {
    title: {
      type: String,
      required: false,
      default: "File Attachment"
    },
    isDownloadEnabled: {
      type: Boolean,
      required: false,
      default: true
    },
    fileAttachmentTypeName: {
      type: String,
      required: true
    },
    entityId: {
      type: Number,
      required: true
    },
    allowedFileExtensions: {
      type: String,
      required: true
    }
  },
  watch: {
    openPanel: {
      handler(data) {
        this.panel = 0;
        this.onExpand();
      }
    }
  },
  mounted() {
    const affiliate = this.$store.getters["user/selectedAffiliate"];
    if (affiliate) {
      this.selectedAffiliateId = affiliate.AffiliateId;
    }
  },
  methods: {
    onExpand() {
      if (!this.expanded) {
        this.expanded = true;
      }
    },
    onDownloadView() {
      this.getDataFromApi();
      this.flipped = true;
    },
    onUploadView() {
      this.flipped = false;
      this.alert = false;
      this.alertType = "success";
      this.alertText = "";
    },
    fileSelection(e) {
      this.file = e;
    },
    uploadFile() {
      if (this.selectedAffiliateId != null && this.file != null) {
        let url = "/api/v2/fileAttachment/uploadFile";
        let formData = new FormData();
        formData.append("file", this.file);
        formData.append("fileAttachmentType", this.fileAttachmentTypeName);
        formData.append("entityId", this.entityId);
        formData.append("description", this.description);
        axios.post(
          url,
          formData,
          {
            headers: { "Content-Type": "multipart/form-data" }
          }
        ).then((data) => {
          this.alert = true;
          this.alertType = "success";
          this.alertText = "File uploaded.";
          this.file = null;
          this.description = "";
        }).catch(function() {
        });
      }
    },
    downloadFile(fileOptions) {
      console.log("test Am in" + fileOptions.id);
      let url = "/api/v2/fileAttachment/downloadFile/" + fileOptions.id;
      return axios({
        url,
        method: "GET",
        responseType: "blob"
      }).then((response) => {
        const fileURL = window.URL.createObjectURL(new Blob([response.data]));
        const fileLink = document.createElement("a");
        fileLink.href = fileURL;
        let filename = fileOptions.OriginalFileName;
        const disposition = response.headers["content-disposition"];
        if (disposition && disposition.indexOf("attachment") !== -1) {
          const filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
          const matches = filenameRegex.exec(disposition);
          if (matches != null && matches[1]) {
            filename = matches[1].replace(/['"]/g, "");
          }
        }
        fileLink.setAttribute("download", filename);
        document.body.appendChild(fileLink);
        fileLink.click();
        fileLink.remove();
      }).catch(
        function(error) {
          if (axios.isCancel(error)) ;
          else {
            console.log(error);
          }
        }
      );
    },
    getDataFromApi() {
      this.loading = true;
      const { sortBy, page, itemsPerPage } = this.options;
      const sortDefault = sortBy[0] ?? { key: "CreatedAt", order: "asc" };
      const sortByField = sortDefault.key ?? "CreatedAt";
      const sortDirection = sortDefault.order === "asc" ? "" : "-";
      let url = "/api/v2/fileAttachment/getFiles?page=" + page + "&per_page=" + itemsPerPage + "&sort=" + sortDirection + sortByField;
      let formData = new FormData();
      formData.append("fileAttachmentType", this.fileAttachmentTypeName);
      formData.append("entityId", this.entityId);
      return axios.post(url, formData).then((response) => {
        this.fileAttachments = response.data;
        this.totalFileAttachments = response.data.length;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$15 = { class: "data-container" };
const _hoisted_2$T = ["onClick"];
function _sfc_render$1z(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanels, {
    modelValue: $data.panel,
    "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.panel = $event)
  }, {
    default: withCtx(() => [
      createVNode(VExpansionPanel, {
        "onGroup:selected": _cache[4] || (_cache[4] = ($event) => $options.onExpand())
      }, {
        default: withCtx(() => [
          createVNode(VExpansionPanelTitle, null, {
            default: withCtx(() => [
              createBaseVNode(
                "h4",
                null,
                toDisplayString($props.title),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VExpansionPanelText, null, {
            default: withCtx(() => [
              createVNode(_component_FlipCard, { flipped: $data.flipped }, {
                front: withCtx(() => [
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      $props.isDownloadEnabled ? (openBlock(), createBlock(VCol, {
                        key: 0,
                        class: "text-right"
                      }, {
                        default: withCtx(() => [
                          createVNode(VBtn, {
                            size: "small",
                            onClick: $options.onDownloadView
                          }, {
                            default: withCtx(() => _cache[6] || (_cache[6] = [
                              createTextVNode("Download files")
                            ])),
                            _: 1
                            /* STABLE */
                          }, 8, ["onClick"])
                        ]),
                        _: 1
                        /* STABLE */
                      })) : createCommentVNode("v-if", true)
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      createVNode(VCol, null, {
                        default: withCtx(() => [
                          createVNode(VProgressLinear, {
                            active: $data.loading,
                            indeterminate: true,
                            color: "#7bb8da"
                          }, null, 8, ["active"]),
                          createVNode(VAlert, {
                            type: $data.alertType,
                            modelValue: $data.alert,
                            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
                            closable: "",
                            "close-text": "Dismiss"
                          }, {
                            default: withCtx(() => [
                              createTextVNode(
                                toDisplayString($data.alertText),
                                1
                                /* TEXT */
                              )
                            ]),
                            _: 1
                            /* STABLE */
                          }, 8, ["type", "modelValue"]),
                          createVNode(VCard, { class: "v-card--outlined v-sheet--tile p-4" }, {
                            default: withCtx(() => [
                              _cache[8] || (_cache[8] = createTextVNode(" Upload a file ")),
                              createBaseVNode("div", _hoisted_1$15, [
                                createVNode(VFileInput, {
                                  label: "Select a file",
                                  accept: $props.allowedFileExtensions,
                                  onChange: $options.fileSelection,
                                  modelValue: $data.file,
                                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.file = $event)
                                }, null, 8, ["accept", "onChange", "modelValue"]),
                                createVNode(VTextField, {
                                  label: "File description",
                                  size: "500",
                                  modelValue: $data.description,
                                  "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.description = $event)
                                }, null, 8, ["modelValue"])
                              ]),
                              createBaseVNode("div", null, [
                                createVNode(VBtn, {
                                  size: "small",
                                  color: "primary",
                                  onClick: $options.uploadFile
                                }, {
                                  default: withCtx(() => _cache[7] || (_cache[7] = [
                                    createTextVNode("Upload")
                                  ])),
                                  _: 1
                                  /* STABLE */
                                }, 8, ["onClick"])
                              ])
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                back: withCtx(() => [
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      createVNode(VCol, { class: "text-right" }, {
                        default: withCtx(() => [
                          createVNode(VBtn, {
                            size: "small",
                            onClick: $options.onUploadView
                          }, {
                            default: withCtx(() => _cache[9] || (_cache[9] = [
                              createTextVNode("Back to upload")
                            ])),
                            _: 1
                            /* STABLE */
                          }, 8, ["onClick"])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      createVNode(VCol, null, {
                        default: withCtx(() => [
                          createBaseVNode("div", null, [
                            createVNode(VDataTableServer, {
                              headers: $data.headers,
                              items: $data.fileAttachments,
                              options: $data.options,
                              "onUpdate:options": _cache[3] || (_cache[3] = ($event) => $data.options = $event),
                              "items-length": $data.totalFileAttachments,
                              loading: $data.loading,
                              class: "v-outlined"
                            }, {
                              progress: withCtx(() => [
                                createVNode(VProgressLinear, {
                                  indeterminate: "",
                                  height: "8",
                                  color: "#3f98c9"
                                })
                              ]),
                              [`item.OriginalFileName`]: withCtx(({ item }) => [
                                createBaseVNode("a", {
                                  href: "javascript:void(0);",
                                  onClick: ($event) => {
                                    $options.downloadFile(item);
                                  }
                                }, toDisplayString(item.OriginalFileName), 9, _hoisted_2$T)
                              ]),
                              _: 2
                              /* DYNAMIC */
                            }, 1032, ["headers", "items", "options", "items-length", "loading"])
                          ])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }, 8, ["flipped"])
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue"]);
}
const FileAttachmentComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1z, [["render", _sfc_render$1z], ["__file", "/var/www/html/resources/js/components/Common/FileAttachmentComponent.vue"]]);
const _sfc_main$1y = {
  name: "AffiliateDisplayComponent",
  components: {
    "affiliate-detail-component": AffiliateDetailComponent,
    "address-information-component": AddressInformationComponent$2,
    "email-information-component": EmailInformationComponent$2,
    "phone-information-component": PhoneInformationComponent$2,
    "social-media-information-component": SocialMediaInformationComponent$1,
    "officer-roles": OfficerRolesComponent,
    "affiliate-summary-component": AffiliateSummaryComponent,
    "affiliate-staff": AffiliateStaffComponent,
    "local-dues": LocalDuesCategoryComponent,
    "affiliate-committees": AffiliateCommitteesComponent,
    "affiliate-chapter": AffiliateChapterComponent,
    "affiliate-employer": AffiliateEmployerComponent,
    "affiliate-options-component": AffiliateOptionsComponent,
    "affiliate-unit-component": AffiliateUnitComponent,
    "user-accounts-component": UserAccountsComponent,
    "file-attachment-component": FileAttachmentComponent
  },
  data: () => ({
    id: 0,
    affiliate: {},
    panels: [],
    notAllowed: false
  }),
  computed: {
    addingNew() {
      return this.id === null;
    }
  },
  beforeMount() {
    if (this.$route.params.id) {
      this.id = parseInt(this.$route.params.id);
      if (this.id !== this.getAffiliateId()) {
        this.notAllowed = true;
      }
    } else {
      this.id = this.getAffiliateId();
    }
  },
  mounted() {
    if (!this.notAllowed) {
      this.getDataFromApi();
    }
    if (this.$route.hash) {
      this.panels = [this.$route.hash.substring(1)];
    }
  },
  methods: {
    getAffiliateId() {
      return this.$store.getters["user/selectedAffiliate"].AffiliateId;
    },
    getDataFromApi() {
      let url = "/api/v2/affiliate/" + this.id + "?include=AffiliateType&scope=global";
      return axios.get(url).then((response) => {
        this.affiliate = response.data.data;
      }).finally(() => {
      });
    },
    emitReload() {
      this.panels = ["Details"];
    }
  }
};
const _hoisted_1$14 = { class: "pt-4" };
function _sfc_render$1y(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_affiliate_detail_component = resolveComponent("affiliate-detail-component");
  const _component_address_information_component = resolveComponent("address-information-component");
  const _component_email_information_component = resolveComponent("email-information-component");
  const _component_phone_information_component = resolveComponent("phone-information-component");
  const _component_social_media_information_component = resolveComponent("social-media-information-component");
  const _component_officer_roles = resolveComponent("officer-roles");
  const _component_affiliate_staff = resolveComponent("affiliate-staff");
  const _component_affiliate_summary_component = resolveComponent("affiliate-summary-component");
  const _component_local_dues = resolveComponent("local-dues");
  const _component_affiliate_committees = resolveComponent("affiliate-committees");
  const _component_affiliate_chapter = resolveComponent("affiliate-chapter");
  const _component_affiliate_employer = resolveComponent("affiliate-employer");
  const _component_affiliate_unit_component = resolveComponent("affiliate-unit-component");
  const _component_user_accounts_component = resolveComponent("user-accounts-component");
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      _ctx.notAllowed ? (openBlock(), createBlock(VRow, { key: 0 }, {
        default: withCtx(() => [
          createVNode(VCol, null, {
            default: withCtx(() => [
              createVNode(VAlert, {
                type: "error",
                modelValue: _ctx.notAllowed,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.notAllowed = $event)
              }, {
                default: withCtx(() => _cache[2] || (_cache[2] = [
                  createTextVNode("You do not have access to this record. Please check your global filter to ensure you have the correct Affiliate selected.")
                ])),
                _: 1
                /* STABLE */
              }, 8, ["modelValue"])
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })) : (openBlock(), createBlock(VRow, { key: 1 }, {
        default: withCtx(() => [
          createVNode(VCol, null, {
            default: withCtx(() => [
              createVNode(VCard, { class: "v-card--outlined v-sheet--tile px-6 mobile-global-mobile-container" }, {
                default: withCtx(() => [
                  createVNode(_component_affiliate_detail_component, {
                    affiliateId: _ctx.id,
                    onOpenDetails: $options.emitReload
                  }, null, 8, ["affiliateId", "onOpenDetails"])
                ]),
                _: 1
                /* STABLE */
              }),
              createBaseVNode("div", _hoisted_1$14, [
                createVNode(VExpansionPanels, {
                  modelValue: _ctx.panels,
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.panels = $event)
                }, {
                  default: withCtx(() => [
                    !$options.addingNew ? (openBlock(), createBlock(_component_address_information_component, {
                      key: 0,
                      affiliateId: _ctx.id
                    }, null, 8, ["affiliateId"])) : createCommentVNode("v-if", true),
                    !$options.addingNew ? (openBlock(), createBlock(_component_email_information_component, {
                      key: 1,
                      affiliateId: _ctx.id
                    }, null, 8, ["affiliateId"])) : createCommentVNode("v-if", true),
                    !$options.addingNew ? (openBlock(), createBlock(_component_phone_information_component, {
                      key: 2,
                      affiliateId: _ctx.id
                    }, null, 8, ["affiliateId"])) : createCommentVNode("v-if", true),
                    !$options.addingNew ? (openBlock(), createBlock(_component_social_media_information_component, {
                      key: 3,
                      affiliateId: _ctx.id
                    }, null, 8, ["affiliateId"])) : createCommentVNode("v-if", true),
                    createVNode(_component_officer_roles, { affiliateId: _ctx.id }, null, 8, ["affiliateId"]),
                    createVNode(_component_affiliate_staff, { affiliateId: _ctx.id }, null, 8, ["affiliateId"]),
                    createVNode(_component_affiliate_summary_component, { affiliateId: _ctx.id }, null, 8, ["affiliateId"]),
                    createVNode(_component_local_dues, { affiliateId: _ctx.id }, null, 8, ["affiliateId"]),
                    createVNode(_component_affiliate_committees, { affiliateId: _ctx.id }, null, 8, ["affiliateId"]),
                    createVNode(_component_affiliate_chapter, { affiliateId: _ctx.id }, null, 8, ["affiliateId"]),
                    createVNode(_component_affiliate_employer, { affiliateId: _ctx.id }, null, 8, ["affiliateId"]),
                    createVNode(_component_affiliate_unit_component, { affiliateId: _ctx.id }, null, 8, ["affiliateId"]),
                    createVNode(_component_user_accounts_component, { affiliateId: _ctx.id }, null, 8, ["affiliateId"]),
                    createCommentVNode('\n                        <file-attachment-component :entityId="id" fileAttachmentTypeName="Affiliate" allowedFileExtensions=".xls, .xlsx, .csv" v-if="id"></file-attachment-component>\n                        ')
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["modelValue"])
              ])
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }))
    ]),
    _: 1
    /* STABLE */
  });
}
const AffiliateDisplayComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1y, [["render", _sfc_render$1y], ["__file", "/var/www/html/resources/js/components/Affiliate/AffiliateDisplayComponent.vue"]]);
const _sfc_main$1x = {
  name: "FilterChooserComponent",
  props: {
    filters: {
      type: Array,
      required: false
    },
    presets: {
      type: Array,
      required: true
    },
    selectedPreset: {
      type: String,
      default: ""
    }
  },
  data: () => ({
    dialog: false,
    localFilters: [],
    localPreset: "",
    valid: true,
    rules: {
      required: (value) => !!value || "Required."
    },
    existing: false
  }),
  watch: {
    selectedPreset: {
      handler(data) {
        this.localPreset = data;
        this.existing = data !== "";
      }
    },
    filters: {
      handler(data) {
        this.prepare();
      }
    }
  },
  methods: {
    apply() {
      if (!this.$refs.form.validate()) {
        return;
      }
      this.localFilters.forEach((localFilter) => {
        const filter = this.filters.find(function(filter2) {
          return filter2.name === localFilter.name;
        });
        filter.visible = localFilter.visible;
      });
      this.dialog = false;
      this.$emit("filter-chooser-applied", this.localPreset);
    },
    change() {
      this.$emit("presets-load", this.localPreset);
    },
    prepare() {
      this.localFilters = JSON.parse(JSON.stringify(this.filters));
    }
  }
};
function _sfc_render$1x(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VRow, {
    justify: "end",
    class: "px-3"
  }, {
    default: withCtx(() => [
      createVNode(VDialog, {
        modelValue: _ctx.dialog,
        "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => _ctx.dialog = $event),
        scrollable: "",
        persistent: "",
        "max-width": "600px"
      }, {
        activator: withCtx(({ props }) => [
          createVNode(VBtn, mergeProps({ color: "primary" }, props, {
            onClick: $options.prepare,
            icon: "fa-filter",
            class: "elevation-0"
          }), null, 16, ["onClick"])
        ]),
        default: withCtx(() => [
          createVNode(VForm, {
            ref: "form",
            modelValue: _ctx.valid,
            "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => _ctx.valid = $event)
          }, {
            default: withCtx(() => [
              createVNode(VCard, null, {
                default: withCtx(() => [
                  createVNode(VCardTitle, null, {
                    default: withCtx(() => _cache[8] || (_cache[8] = [
                      createBaseVNode(
                        "span",
                        { class: "text-h5" },
                        "Filters",
                        -1
                        /* HOISTED */
                      )
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCardText, null, {
                    default: withCtx(() => [
                      createVNode(VContainer, { fluid: "" }, {
                        default: withCtx(() => [
                          createBaseVNode("div", null, [
                            createVNode(VSwitch, {
                              color: "primary",
                              modelValue: _ctx.existing,
                              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.existing = $event),
                              label: _ctx.existing ? "Select from existing filters" : "Create a new filter"
                            }, null, 8, ["modelValue", "label"]),
                            _ctx.existing ? (openBlock(), createBlock(VSelect, {
                              key: 0,
                              modelValue: _ctx.localPreset,
                              "onUpdate:modelValue": [
                                _cache[1] || (_cache[1] = ($event) => _ctx.localPreset = $event),
                                _cache[2] || (_cache[2] = ($event) => $options.change())
                              ],
                              items: $props.presets,
                              "item-title": "component_key",
                              "item-value": "component_key",
                              label: "Select Preset",
                              rules: [_ctx.rules.required]
                            }, null, 8, ["modelValue", "items", "rules"])) : createCommentVNode("v-if", true),
                            !_ctx.existing ? (openBlock(), createBlock(VTextField, {
                              key: 1,
                              label: "New Preset",
                              modelValue: _ctx.localPreset,
                              "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => _ctx.localPreset = $event),
                              rules: [_ctx.rules.required]
                            }, null, 8, ["modelValue", "rules"])) : createCommentVNode("v-if", true)
                          ]),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(_ctx.localFilters, (filter) => {
                              return openBlock(), createBlock(VCheckbox, {
                                modelValue: filter.visible,
                                "onUpdate:modelValue": ($event) => filter.visible = $event,
                                label: filter.label,
                                key: filter.name
                              }, null, 8, ["modelValue", "onUpdate:modelValue", "label"]);
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCardActions, null, {
                    default: withCtx(() => [
                      createVNode(VSpacer),
                      createVNode(VBtn, {
                        color: "blue-darken-1",
                        variant: "text",
                        onClick: _cache[4] || (_cache[4] = ($event) => _ctx.dialog = false)
                      }, {
                        default: withCtx(() => _cache[9] || (_cache[9] = [
                          createTextVNode("Close")
                        ])),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VBtn, {
                        color: "blue-darken-1",
                        variant: "text",
                        onClick: _cache[5] || (_cache[5] = ($event) => $options.apply())
                      }, {
                        default: withCtx(() => _cache[10] || (_cache[10] = [
                          createTextVNode("Apply")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }, 8, ["modelValue"])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"])
    ]),
    _: 1
    /* STABLE */
  });
}
const FilterChooserComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1x, [["render", _sfc_render$1x], ["__file", "/var/www/html/resources/js/components/Common/Grid/FilterChooserComponent.vue"]]);
const _sfc_main$1w = {
  data: () => ({
    collapsedFilter: false,
    isFilterBarFixed: false,
    showFilters: false,
    showSort: false,
    windowWidth: window.innerWidth,
    radioGroup: "",
    sortingOptions: [
      { text: "asc", value: false },
      { text: "desc", value: true }
    ]
  }),
  computed: {
    is_screen_small() {
      return this.windowWidth < 960 && !this.showFilters;
    },
    visibleFilters() {
      return this.getFilters();
    },
    filterBarTheme() {
      return this.isFilterBarFixed ? "v-app-bar--fixed margin-fix-filter-bar" : "filter-toolbar ";
    },
    collapsedFilterFormTheme() {
      return this.collapsedFilter ? "collapsed-filter-form" : "";
    },
    collapsedFilterHeaderTheme() {
      return this.collapsedFilter ? "collapsed-filter-header" : "";
    },
    collapsedFilterHideTheme() {
      return this.collapsedFilter ? "collapsed-filter-hide" : "";
    },
    collapsedFilterBarTheme() {
      return this.collapsedFilter ? "dense-filter-bar" : "";
    }
  },
  name: "FilterComponent",
  props: {
    filters: {
      type: Array,
      required: false
    },
    presets: {
      type: Array,
      required: true
    },
    mobileIndividualHeaders: {
      type: Array,
      required: false
    },
    selectedPreset: {
      type: String,
      default: ""
    }
  },
  components: {
    "filter-chooser-component": FilterChooserComponent
  },
  mounted() {
    window.addEventListener("resize", () => {
      this.windowWidth = window.innerWidth;
    });
    this.eagerFetch();
  },
  setup() {
    const goTo = useGoTo();
    return { goTo };
  },
  watch: {
    filters: function(newVal, oldVal) {
      this.eagerFetch();
    }
  },
  methods: {
    onCollapseFilter() {
      this.collapsedFilter = !this.collapsedFilter;
      this.$emit("collapsedFilterChanged", this.collapsedFilter);
    },
    onScroll(e) {
      if (typeof window === "undefined") return;
      const top = window.pageYOffset || e.target.scrollTop || 0;
      if (top > 16) {
        this.isFilterBarFixed = true;
      } else {
        this.isFilterBarFixed = false;
      }
    },
    getFilters() {
      return this.filters.filter((filter) => {
        return filter.visible;
      });
    },
    sort(radioGroup) {
      const footerBlock = document.getElementById("main-footer-block");
      footerBlock.style.display = "block";
      this.showSort = false;
    },
    search(val, filter) {
      clearTimeout(this._timerId);
      this._timerId = setTimeout(() => {
        this.searchItems(val, filter);
      }, 500);
    },
    clear() {
      for (const filter of this.filters) {
        filter.value = "";
      }
      this.onHideFilters();
      this.$emit("search");
    },
    clearSort() {
      const footerBlock = document.getElementById("main-footer-block");
      footerBlock.style.display = "block";
      this.radioGroup = "";
      this.sortDesc = false;
      this.showSort = false;
      this.$emit("sort", "", false);
    },
    onShowSort() {
      const footerBlock = document.getElementById("main-footer-block");
      footerBlock.style.display = "none";
      this.showSort = true;
      this.$emit("onShowSort");
    },
    onHideSort() {
      const footerBlock = document.getElementById("main-footer-block");
      footerBlock.style.display = "block";
      this.showSort = false;
      this.$emit("onHideSort");
    },
    onHideFilters() {
      const footerBlock = document.getElementById("main-footer-block");
      footerBlock.style.display = "block";
      this.showFilters = false;
      this.$emit("onHideFilters");
    },
    onShowFilters() {
      const footerBlock = document.getElementById("main-footer-block");
      footerBlock.style.display = "none";
      this.showFilters = true;
      this.$emit("onShowFilters");
    },
    onAddFilters() {
      this.onHideFilters();
      this.$emit("search");
    },
    eagerFetch() {
      for (const filter of this.filters) {
        if (filter.options && filter.options.eager) {
          this.fetchItems(filter);
        }
      }
    },
    fetchItems(filter) {
      if (filter.items.length === 0 && filter.options) {
        this.$store.dispatch("filters/getItems", filter.options.url).then((res) => {
          const items = this.$store.getters["filters/itemsByUrl"](filter.options.url);
          for (const item of items) {
            filter.items.push({
              text: item[filter.options.displayField],
              value: item[filter.options.valueField]
            });
          }
        });
      }
    },
    searchItems(search, filter) {
      if (search && filter.options) {
        var url = filter.options.url;
        if (url.indexOf("?") === -1) {
          url = filter.options.url + "?filter[" + filter.options.searchField + "]=" + search;
        } else {
          url = filter.options.url + "&filter[" + filter.options.searchField + "]=" + search;
        }
        axios.get(url).then((response) => {
          for (const item of response.data.data) {
            filter.items.push({
              text: item[filter.options.displayField],
              value: item[filter.options.valueField]
            });
          }
        });
      }
    },
    onClickSearch() {
      this.goTo(0);
      this.$emit("updateTableOnSearch");
      this.$emit("search");
    }
  }
};
function _sfc_render$1w(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_filter_chooser_component = resolveComponent("filter-chooser-component");
  return openBlock(), createBlock(VCard, {
    class: normalizeClass(["v-card--outlined v-sheet--tile", $options.collapsedFilterHeaderTheme])
  }, {
    default: withCtx(() => [
      createVNode(VToolbar, {
        class: normalizeClass([$options.collapsedFilterBarTheme, "mb-3 hidden-md-and-down"]),
        theme: "primary",
        title: "Filters"
      }, {
        default: withCtx(() => [
          createVNode(_component_filter_chooser_component, {
            class: normalizeClass($options.collapsedFilterHideTheme),
            filters: $props.filters,
            presets: $props.presets,
            selectedPreset: $props.selectedPreset,
            onFilterChooserApplied: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("filter-chooser-applied", $event)),
            onPresetsLoad: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("presets-load", $event))
          }, null, 8, ["class", "filters", "presets", "selectedPreset"]),
          createVNode(VBtn, {
            icon: _ctx.collapsedFilter ? "mdi:mdi-chevron-down " : "mdi:mdi-chevron-up",
            onClick: $options.onCollapseFilter
          }, null, 8, ["icon", "onClick"])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["class"]),
      !_ctx.showFilters && !_ctx.showSort ? withDirectives((openBlock(), createBlock(VAppBar, {
        key: 0,
        class: normalizeClass(["hidden-lg-and-up filter-toolbar", $options.filterBarTheme])
      }, {
        default: withCtx(() => [
          createVNode(VTabs, {
            "fixed-tabs": "",
            "hide-slider": "",
            "align-tabs": "center",
            grow: ""
          }, {
            default: withCtx(() => [
              createVNode(VTab, { onClick: $options.onShowFilters }, {
                default: withCtx(() => _cache[9] || (_cache[9] = [
                  createTextVNode(" Filter ")
                ])),
                _: 1
                /* STABLE */
              }, 8, ["onClick"]),
              createVNode(VTab, { onClick: $options.onShowSort }, {
                default: withCtx(() => _cache[10] || (_cache[10] = [
                  createTextVNode(" Sort ")
                ])),
                _: 1
                /* STABLE */
              }, 8, ["onClick"])
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["class"])), [
        [Scroll, $options.onScroll]
      ]) : createCommentVNode("v-if", true),
      _ctx.showFilters ? (openBlock(), createBlock(VToolbar, {
        key: 1,
        dense: "",
        elevation: "0",
        class: "hidden-lg-and-up mobile-closing-bar"
      }, {
        default: withCtx(() => [
          createVNode(VSpacer),
          createVNode(VBtn, {
            icon: "mdi:mdi-close",
            onClick: $options.onHideFilters
          }, null, 8, ["onClick"])
        ]),
        _: 1
        /* STABLE */
      })) : createCommentVNode("v-if", true),
      _ctx.showSort ? (openBlock(), createBlock(VToolbar, {
        key: 2,
        dense: "",
        elevation: "0",
        class: "hidden-lg-and-up mobile-closing-bar"
      }, {
        default: withCtx(() => [
          createVNode(VSpacer),
          createVNode(VBtn, {
            icon: "mdi:mdi-close",
            onClick: $options.onHideSort
          }, null, 8, ["onClick"])
        ]),
        _: 1
        /* STABLE */
      })) : createCommentVNode("v-if", true),
      !$options.is_screen_small ? (openBlock(), createBlock(VForm, {
        key: 3,
        ref: "form",
        class: normalizeClass(["px-6 mobile-filter-form", $options.collapsedFilterFormTheme]),
        style: { "min-width": "220px" }
      }, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList($options.visibleFilters, (filter) => {
              return openBlock(), createElementBlock(
                Fragment,
                null,
                [
                  filter.type === "text" ? (openBlock(), createBlock(VTextField, {
                    key: "text" + filter.name,
                    label: filter.label,
                    variant: "underlined",
                    modelValue: filter.value,
                    "onUpdate:modelValue": ($event) => filter.value = $event,
                    name: filter.name
                  }, null, 8, ["label", "modelValue", "onUpdate:modelValue", "name"])) : createCommentVNode("v-if", true),
                  filter.type === "select" ? (openBlock(), createBlock(VSelect, {
                    key: "select" + filter.name,
                    label: filter.label,
                    modelValue: filter.value,
                    "onUpdate:modelValue": [
                      ($event) => filter.value = $event,
                      _cache[2] || (_cache[2] = ($event) => _ctx.$emit("change"))
                    ],
                    variant: "underlined",
                    name: filter.name,
                    items: filter.items,
                    onFocus: ($event) => $options.fetchItems(filter)
                  }, null, 8, ["label", "modelValue", "onUpdate:modelValue", "name", "items", "onFocus"])) : createCommentVNode("v-if", true),
                  filter.type === "autocomplete" ? (openBlock(), createBlock(VAutocomplete, {
                    key: "autocomplete" + filter.name,
                    label: filter.label,
                    items: filter.items,
                    variant: "underlined",
                    "item-title": "text",
                    "item-value": "value",
                    multiple: "",
                    chips: "",
                    clearable: "",
                    "closable-chips": "",
                    "onUpdate:search": ($event) => $options.search($event, filter),
                    onFocus: ($event) => $options.fetchItems(filter)
                  }, {
                    chip: withCtx(({ props, item }) => [
                      createVNode(
                        VChip,
                        mergeProps({ ref_for: true }, props, { "close-icon": "fa-times-circle" }),
                        {
                          default: withCtx(() => [
                            createTextVNode(
                              toDisplayString(item.title),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1040
                        /* FULL_PROPS, DYNAMIC_SLOTS */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["label", "items", "onUpdate:search", "onFocus"])) : createCommentVNode("v-if", true),
                  filter.type === "toggle" ? (openBlock(), createElementBlock(
                    "label",
                    {
                      key: "togglelabel" + filter.name
                    },
                    toDisplayString(filter.label),
                    1
                    /* TEXT */
                  )) : createCommentVNode("v-if", true),
                  filter.type === "toggle" ? (openBlock(), createBlock(VBtnToggle, {
                    key: "toggle" + filter.name,
                    modelValue: filter.value,
                    "onUpdate:modelValue": ($event) => filter.value = $event,
                    mandatory: "",
                    theme: "secondary",
                    divided: ""
                  }, {
                    default: withCtx(() => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(filter.items, (item) => {
                          return openBlock(), createBlock(
                            VBtn,
                            mergeProps({
                              variant: "outlined",
                              ref_for: true
                            }, { value: item }, {
                              key: "toggleButton" + item
                            }),
                            {
                              default: withCtx(() => [
                                createTextVNode(
                                  toDisplayString(item),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              _: 2
                              /* DYNAMIC */
                            },
                            1040
                            /* FULL_PROPS, DYNAMIC_SLOTS */
                          );
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("v-if", true)
                ],
                64
                /* STABLE_FRAGMENT */
              );
            }),
            256
            /* UNKEYED_FRAGMENT */
          )),
          createVNode(VRow, { class: "sticky-filter-buttons-row" }, {
            default: withCtx(() => [
              createVNode(VCol, { class: "d-flex justify-space-between" }, {
                default: withCtx(() => [
                  createVNode(VBtn, {
                    variant: "flat",
                    elevation: "0",
                    color: "default",
                    class: "mb-4 hidden-md-and-down filter-buttons",
                    onClick: _cache[3] || (_cache[3] = ($event) => $options.clear())
                  }, {
                    default: withCtx(() => _cache[11] || (_cache[11] = [
                      createTextVNode(" Clear ")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VBtn, {
                    variant: "flat",
                    elevation: "0",
                    color: "primary",
                    class: "mb-4 hidden-md-and-down filter-buttons",
                    onClick: _cache[4] || (_cache[4] = ($event) => $options.onClickSearch())
                  }, {
                    default: withCtx(() => _cache[12] || (_cache[12] = [
                      createTextVNode(" Search ")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["class"])) : createCommentVNode("v-if", true),
      _ctx.showSort ? (openBlock(), createBlock(VContainer, { key: 4 }, {
        default: withCtx(() => [
          createVNode(VRadioGroup, {
            modelValue: _ctx.radioGroup,
            "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => _ctx.radioGroup = $event),
            class: "mobile-sort-radio-group"
          }, {
            default: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList($props.mobileIndividualHeaders, (header) => {
                          return openBlock(), createBlock(VRadio, {
                            key: header.value,
                            label: `${header.title}`,
                            value: header.value
                          }, null, 8, ["label", "value"]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VSelect, {
                        modelValue: _ctx.sortDesc,
                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => _ctx.sortDesc = $event),
                        items: _ctx.sortingOptions,
                        label: "Sorting",
                        "model-value": _ctx.sortingOptions.value,
                        variant: "underlined"
                      }, null, 8, ["modelValue", "items", "model-value"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }, 8, ["modelValue"])
        ]),
        _: 1
        /* STABLE */
      })) : createCommentVNode("v-if", true),
      _ctx.showSort || _ctx.showFilters ? (openBlock(), createBlock(VBottomNavigation, {
        key: 5,
        class: "hidden-lg-and-up position-fixed"
      }, {
        default: withCtx(() => [
          _ctx.showFilters ? (openBlock(), createBlock(VTabs, {
            key: 0,
            "fixed-tabs": "",
            color: "primary",
            "slider-color": "indigo",
            "hide-slider": "",
            optional: ""
          }, {
            default: withCtx(() => [
              createVNode(VTab, {
                onClick: _cache[7] || (_cache[7] = ($event) => $options.clear())
              }, {
                default: withCtx(() => _cache[13] || (_cache[13] = [
                  createTextVNode(" Clear ")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VTab, { onClick: $options.onAddFilters }, {
                default: withCtx(() => _cache[14] || (_cache[14] = [
                  createTextVNode(" Search ")
                ])),
                _: 1
                /* STABLE */
              }, 8, ["onClick"])
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true),
          _ctx.showSort ? (openBlock(), createBlock(VTabs, {
            key: 1,
            "fixed-tabs": "",
            color: "primary",
            "slider-color": "indigo",
            "hide-slider": "",
            optional: ""
          }, {
            default: withCtx(() => [
              createVNode(VTab, {
                onClick: _cache[8] || (_cache[8] = ($event) => $options.clearSort())
              }, {
                default: withCtx(() => _cache[15] || (_cache[15] = [
                  createTextVNode(" Clear ")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VTab, { onClick: $options.sort }, {
                default: withCtx(() => _cache[16] || (_cache[16] = [
                  createTextVNode(" Sort ")
                ])),
                _: 1
                /* STABLE */
              }, 8, ["onClick"])
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      })) : createCommentVNode("v-if", true)
    ]),
    _: 1
    /* STABLE */
  }, 8, ["class"]);
}
const FilterComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1w, [["render", _sfc_render$1w], ["__file", "/var/www/html/resources/js/components/Common/Grid/FilterComponent.vue"]]);
const paginationUrlMixin = {
  methods: {
    parseQueryParams(filters) {
      if (this.$route.query.sortBy) {
        this.options.sortBy = [this.$route.query.sortBy];
      }
      if (this.$route.query.sortDesc) {
        this.options.sortDesc = [JSON.parse(this.$route.query.sortDesc)];
      }
      if (this.$route.query.page) {
        this.options.page = parseInt(this.$route.query.page);
      }
      if (this.$route.query.itemsPerPage) {
        this.options.itemsPerPage = parseInt(this.$route.query.itemsPerPage);
      }
      for (const filterParam in this.$route.query) {
        if (this.$route.query.hasOwnProperty(filterParam) && filterParam.startsWith("filter:")) {
          const filterName = filterParam.substring(7);
          filters.filter((f) => f.name === filterName).map((f) => {
            if (f.options && f.options.type) {
              if (f.options.type === "Number") {
                f.value = parseInt(this.$route.query[filterParam]);
              } else if (f.options.type === "NumberInArray") {
                if (!Array.isArray(f.value)) {
                  f.value = [];
                }
                if (Array.isArray(this.$route.query[filterParam])) {
                  f.value = this.$route.query[filterParam].map((val) => parseInt(val));
                } else {
                  f.value.push(parseInt(this.$route.query[filterParam]));
                }
              } else if (f.options.type === "StringInArray") {
                if (!Array.isArray(f.value)) {
                  f.value = [];
                }
                if (Array.isArray(this.$route.query[filterParam])) {
                  f.value = this.$route.query[filterParam].map((val) => val);
                } else {
                  f.value.push(this.$route.query[filterParam]);
                }
              }
            } else {
              f.value = this.$route.query[filterParam];
            }
          });
        }
      }
      return filters;
    },
    parseHiddenColumn(headers) {
      if (this.$route.query.hideColumn) {
        headers.map((header) => header.visible = true);
        this.$route.query.hideColumn.split(",").map((columnName) => {
          headers.filter((header) => header.value === columnName).map((header) => {
            header.visible = false;
          });
        });
      }
      return headers;
    },
    updateQueryParams(options, filters, headers) {
      const { sortBy, page, itemsPerPage } = options;
      const sortDefault = sortBy[0] ?? { key: "", order: "asc" };
      let sortByField = sortDefault.key ?? "";
      const sortDirection = sortDefault.order === "asc" ? "" : "-";
      const queryParams = { sortByField, sortDirection, page, itemsPerPage };
      filters.filter((filter) => filter.value !== "").map((filter) => {
        queryParams[`filter:${filter.name}`] = filter.value;
      });
      const hideColumn = this.headersToQuery(headers);
      if (hideColumn !== "") {
        queryParams["hideColumn"] = hideColumn;
      }
      this.$router.push({ path: this.$router.path, query: queryParams }).catch((err) => {
      });
    },
    headersToQuery(headers) {
      let hideColumn = "";
      headers.filter((header) => !header.visible).map((header) => {
        if (hideColumn !== "") {
          hideColumn += ",";
        }
        hideColumn += header.value;
      });
      return hideColumn;
    },
    getCommonFooterProps() {
      return { "items-per-page-options": [5, 10, 15, 30, 50] };
    },
    getItemsPerPageOptions() {
      return [
        { value: 5, title: "5" },
        { value: 10, title: "10" },
        { value: 15, title: "15" },
        { value: 30, title: "30" },
        { value: 50, title: "50" }
      ];
    }
  }
};
const _sfc_main$1v = {
  name: "ColumnChooserComponent",
  mixins: [paginationUrlMixin],
  props: {
    columns: {
      type: Array,
      required: false
    },
    displayLabel: {
      type: Boolean,
      required: false
    },
    presets: {
      type: Array,
      required: false
    },
    selectedPreset: {
      type: String,
      default: ""
    },
    mainClass: {
      type: String,
      default: "columnChooser"
    }
  },
  mounted() {
    this.localColumns = JSON.parse(JSON.stringify(this.columns));
  },
  data: () => ({
    dialog: false,
    localDisplayLabel: true,
    localColumns: [],
    localPreset: "",
    existing: false,
    valid: true,
    rules: {
      required: (value) => !!value || "Required."
    }
  }),
  watch: {
    selectedPreset: {
      handler(data) {
        this.localPreset = data;
        this.existing = data !== "";
      }
    },
    columns: {
      handler(data) {
        this.localColumns = JSON.parse(JSON.stringify(data));
      }
    },
    displayLabel: {
      handler(data) {
        if (data == false)
          this.localDisplayLabel = false;
      }
    },
    deep: true
  },
  methods: {
    apply() {
      if (!this.$refs.form.validate()) {
        return;
      }
      this.localColumns.forEach((localColumn) => {
        const column = this.columns.find(function(column2) {
          return column2.value === localColumn.value;
        });
        column.visible = localColumn.visible;
      });
      const hideColumn = this.headersToQuery(this.columns);
      const queryParams = clone(this.$route.query);
      queryParams["hideColumn"] = hideColumn;
      this.$router.push({ path: this.$router.path, query: queryParams }).catch((err) => {
      });
      this.$emit("applied", this.localPreset);
      this.dialog = false;
      this.localDisplayLabel = false;
    },
    changeSelect() {
      this.$emit("preset-load", this.localPreset);
    }
  }
};
const _hoisted_1$13 = { key: 0 };
function _sfc_render$1v(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VForm, {
    ref: "form",
    modelValue: _ctx.valid,
    "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => _ctx.valid = $event)
  }, {
    default: withCtx(() => [
      createBaseVNode(
        "div",
        {
          class: normalizeClass($props.mainClass)
        },
        [
          createVNode(VDialog, {
            modelValue: _ctx.dialog,
            "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => _ctx.dialog = $event),
            scrollable: "",
            persistent: "",
            "max-width": "600px"
          }, {
            activator: withCtx(({ props }) => [
              createVNode(
                VBtn,
                mergeProps({
                  class: "btn-settings elevation-0",
                  icon: "fa-cog"
                }, props),
                null,
                16
                /* FULL_PROPS */
              ),
              _ctx.localDisplayLabel ? (openBlock(), createElementBlock("span", _hoisted_1$13, "Customize table columns")) : createCommentVNode("v-if", true)
            ]),
            default: withCtx(() => [
              createVNode(VCard, null, {
                default: withCtx(() => [
                  createVNode(VCardTitle, null, {
                    default: withCtx(() => _cache[8] || (_cache[8] = [
                      createBaseVNode(
                        "span",
                        { class: "text-h5" },
                        "Columns",
                        -1
                        /* HOISTED */
                      )
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCardText, null, {
                    default: withCtx(() => [
                      createVNode(VContainer, { fluid: "" }, {
                        default: withCtx(() => [
                          createBaseVNode("div", null, [
                            createVNode(VSwitch, {
                              color: "primary",
                              modelValue: _ctx.existing,
                              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.existing = $event),
                              label: _ctx.existing ? "Select from existing filters" : "Create a new filter"
                            }, null, 8, ["modelValue", "label"]),
                            _ctx.existing ? (openBlock(), createBlock(VSelect, {
                              key: 0,
                              modelValue: _ctx.localPreset,
                              "onUpdate:modelValue": [
                                _cache[1] || (_cache[1] = ($event) => _ctx.localPreset = $event),
                                _cache[2] || (_cache[2] = ($event) => $options.changeSelect())
                              ],
                              items: $props.presets,
                              "item-title": "component_key",
                              "item-value": "component_key",
                              label: "Select Preset",
                              rules: [_ctx.rules.required]
                            }, null, 8, ["modelValue", "items", "rules"])) : createCommentVNode("v-if", true),
                            !_ctx.existing ? (openBlock(), createBlock(VTextField, {
                              key: 1,
                              label: "New Preset",
                              modelValue: _ctx.localPreset,
                              "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => _ctx.localPreset = $event),
                              rules: [_ctx.rules.required]
                            }, null, 8, ["modelValue", "rules"])) : createCommentVNode("v-if", true)
                          ]),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(_ctx.localColumns, (locCol) => {
                              return openBlock(), createBlock(VCheckbox, {
                                modelValue: locCol.visible,
                                "onUpdate:modelValue": ($event) => locCol.visible = $event,
                                label: locCol.title,
                                key: locCol.value
                              }, null, 8, ["modelValue", "onUpdate:modelValue", "label"]);
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCardActions, null, {
                    default: withCtx(() => [
                      createVNode(VSpacer),
                      createVNode(VBtn, {
                        color: "blue-darken-1",
                        variant: "text",
                        onClick: _cache[4] || (_cache[4] = ($event) => _ctx.dialog = false)
                      }, {
                        default: withCtx(() => _cache[9] || (_cache[9] = [
                          createTextVNode("Close")
                        ])),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VBtn, {
                        color: "blue-darken-1",
                        variant: "text",
                        onClick: _cache[5] || (_cache[5] = ($event) => $options.apply())
                      }, {
                        default: withCtx(() => _cache[10] || (_cache[10] = [
                          createTextVNode("Apply")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }, 8, ["modelValue"])
        ],
        2
        /* CLASS */
      )
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue"]);
}
const ColumnChooserComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1v, [["render", _sfc_render$1v], ["__file", "/var/www/html/resources/js/components/Common/Grid/ColumnChooserComponent.vue"]]);
const configurationMixin = {
  data: () => ({
    presets: [],
    selectedPreset: ""
  }),
  methods: {
    getConfiguration(model, key2) {
      let url = "/api/v2/ui/component/" + model;
      if (key2 !== "") {
        url += "/" + key2;
      }
      return axios.get(url);
    },
    updateConfiguration(model, key2, settingsKey, settings) {
      const url = "/api/v2/ui/component/" + model + "/" + key2;
      return axios.post(url, { "settings-key": settingsKey, "settings": settings });
    },
    onFilterChangeApplied(componentFilters, model, key2) {
      const filters = [];
      componentFilters.map((filter) => {
        filters.push({ value: filter.name, visible: filter.visible });
      });
      this.updateConfiguration(model, key2, "filters", filters);
      this.updateSelectedPreset(key2);
    },
    onHeaderChangeApplied(model, key2) {
      this.updateConfiguration(model, key2, "fields", this.headers);
      this.updateSelectedPreset(key2);
    },
    updateSelectedPreset(key2) {
      if (!this.presets.find((preset) => preset.component_key === key2)) {
        this.presets.unshift({ component_key: key2 });
      }
      this.selectedPreset = key2;
    },
    setPresetData(data) {
      this.presets = data.presets;
      this.selectedPreset = data.selectedPreset;
    }
  }
};
const dataTablesMixin = {
  data: () => ({
    headerObserver: {},
    minWidth: 0,
    windowWidth: window.innerWidth,
    numberOfCells: 0
  }),
  mounted() {
    this.calculateMinWidth();
  },
  methods: {
    setTableWidth(numberOfCells) {
      if (this.windowWidth !== window.innerWidth) {
        this.calculateBreakPoint();
      }
      if (numberOfCells <= this.calculateBreakPoint()) {
        var calcWidth = this.calculateTableCellWidth(numberOfCells);
        this.cellWidth = calcWidth;
        this.setTableCellWidthForCells(this.cellWidth);
      } else {
        this.removeTdWidths();
      }
      var newWidth = numberOfCells * this.cellWidth;
      this.fixedWidth = newWidth;
      var table = this.getTableFromRef();
      table.style.width = this.fixedWidth + "px";
      document.getElementsByClassName("v-data-table__thead")[0].style.width = this.fixedWidth + "px";
    },
    calculateTableCellWidth(numberOfCells) {
      this.calculateMinWidth();
      return this.minWidth / numberOfCells;
    },
    calculateMinWidth() {
      if (this.collapsedFilter) {
        this.minWidth = this.windowWidth;
      } else {
        this.minWidth = this.windowWidth * 0.8;
      }
    },
    calculateBreakPoint() {
      this.calculateMinWidth();
      return this.minWidth / 100;
    },
    setTableCellWidthForCells(tableCellWidth) {
      var table = this.getTableFromRef();
      var tableTd = table.getElementsByTagName("td");
      for (var i = 0; i < tableTd.length; i++) {
        var td = tableTd[i];
        td.style.width = tableCellWidth + "px";
      }
    },
    handleTableObserver() {
      const targetNode = document.getElementsByClassName("v-data-table__thead")[0];
      if (!targetNode) {
        return;
      }
      const config = { attributes: true, childList: true, subtree: true };
      const self2 = this;
      const callback = function(mutationsList, observer) {
        if (!this.loading) {
          for (let mutation of mutationsList) {
            if (mutation.type === "childList") {
              if (mutation.target.cells) {
                self2.setTableWidth(mutation.target.cells.length);
                self2.numberOfCells = mutation.target.cells.length;
              }
            }
          }
        }
      };
      this.headerObserver = new MutationObserver(callback);
      this.headerObserver.observe(targetNode, config);
    },
    bodyDynamicStyle() {
      document.body.classList.add("max-content-body");
    },
    headerDynamicStyle() {
      var headerElement = document.getElementById("main-header-menu");
      headerElement.classList.add("fixed-menu-header");
    },
    footerDynamicSyle() {
      var footerElement = document.getElementById("main-footer-block");
      footerElement.classList.add("footer-inherit-width");
    },
    destroyDynamicStyle() {
      var headerElement = document.getElementById("main-header-menu");
      var footerElement = document.getElementById("main-footer-block");
      headerElement.classList.remove("fixed-menu-header");
      footerElement.classList.remove("footer-inherit-width");
      document.body.classList.remove("max-content-body");
    },
    removeTdWidths() {
      var table = this.getTableFromRef();
      var tableTd = table.getElementsByTagName("td");
      for (var i = 0; i < tableTd.length; i++) {
        var td = tableTd[i];
        td.style.width = null;
      }
    },
    getTableFromRef() {
      var table = this.$refs.tableContainer.getElementsByTagName("table")[0];
      return table;
    },
    scrollToBeginningOfPage() {
      window.scrollTo({
        top: 0,
        left: 0,
        behavior: "smooth"
      });
    },
    destroyObserver() {
      this.headerObserver.disconnect();
    }
  }
};
const mobileCheckMixin = {
  data: () => ({
    mobileBreakPoint: 960,
    windowWidth: window.innerWidth
  }),
  computed: {
    isOnMobile() {
      if (this.windowWidth < this.mobileBreakPoint) {
        return true;
      }
      return false;
    }
  },
  mounted() {
    window.addEventListener("resize", this.getWindowWith);
  },
  methods: {
    getWindowWith() {
      this.windowWidth = window.innerWidth;
    }
  },
  destroyed() {
    window.removeEventListener("resize", this.getWindowWith);
  }
};
const _sfc_main$1u = {
  name: "AffiliateListComponent",
  mixins: [headersMixin, configurationMixin, paginationUrlMixin, dataTablesMixin, mobileCheckMixin],
  components: {
    "filter-component": FilterComponent,
    "chooser-component": ColumnChooserComponent,
    AffiliateSwitchComponent,
    "affiliate-detail-component": AffiliateDetailComponent
  },
  data: () => ({
    filters: [],
    affiliateId: false,
    affiliateName: "",
    totalAffiliates: 0,
    affiliates: [],
    loading: true,
    showLabel: true,
    options: {
      sortBy: [{ key: "AffiliateId", order: "asc" }],
      page: 1,
      itemsPerPage: 10
    },
    headers: [],
    isShowingFilters: false,
    collapsedFilter: false,
    fixedHeaders: false,
    fixedWidth: 0,
    cellWidth: 100,
    hasSelectedItem: false,
    selectedItem: [],
    shouldHideResults: false
  }),
  computed: {
    collapsedFilterRowTheme() {
      return this.collapsedFilter ? "collapsed-filter-row" : "row-inline-flex";
    },
    collapsedFilterColTheme() {
      return this.collapsedFilter ? "collapsed-filter-col" : "";
    },
    collapsedFilterPaddingColTheme() {
      return this.collapsedFilter ? "collapsed-table-col" : "";
    },
    fixedHeaderTheme() {
      return this.fixedHeaders ? "fixed-table-header" : "";
    }
  },
  mounted() {
    this.initConfiguration();
    this.showLabel = false;
    document.getElementById("main-container").addEventListener("scroll", this.bodyScroll);
    this.initialSetup();
  },
  watch: {
    options: {
      handler() {
        if (this.headers.length > 0 && !this.loading) {
          this.getDataFromApi();
        }
      },
      deep: true,
      immediate: true
    },
    collapsedFilter: {
      handler() {
        if (this.numberOfCells > 0) {
          this.setTableWidth(this.numberOfCells);
        }
        if (this) {
          document.getElementsByClassName("v-data-table__thead")[0].style.left = "0px";
        }
        const rowCollapse = document.querySelector(".table-content-row__right");
        const isCollapsed = rowCollapse.classList.contains("collapsed-table-col");
        const dataTableCollapsed = document.querySelector(".v-data-table");
        if (isCollapsed) {
          dataTableCollapsed.classList.remove("collapse-table");
        } else {
          dataTableCollapsed.classList.add("collapse-table");
        }
      },
      deep: true
    },
    fixedHeaders: {
      handler() {
        if (this) {
          const table = this.$refs.tableContainer.getElementsByTagName("table")[0];
          table.style.width = this.fixedWidth + "px";
          document.getElementsByClassName("v-data-table__thead")[0].style.width = this.fixedWidth + "px";
        }
      },
      deep: true
    }
  },
  methods: {
    loadConfiguration(key2) {
      this.getConfiguration("affiliate", key2).then((response) => {
        this.headers = response.data.fields;
        this.filters = this.parseQueryParams(response.data.filters);
        this.setPresetData(response.data);
        this.selectedPreset = response.data.selectedPreset;
        this.getDataFromApi();
      });
    },
    initConfiguration() {
      this.getConfiguration("affiliate", "").then((response) => {
        this.headers = this.parseHiddenColumn(response.data.fields);
        this.filters = this.parseQueryParams(response.data.filters);
        this.setPresetData(response.data);
        this.selectedPreset = response.data.selectedPreset;
        this.getDataFromApi();
      });
    },
    initialSetup() {
      this.handleTableObserver();
      this.bodyDynamicStyle();
      this.headerDynamicStyle();
      this.footerDynamicSyle();
    },
    bodyScroll() {
      if (!this.loading && !this.collapsedFilter) {
        const leftPosition = this.$refs.tableContainer.getBoundingClientRect().left + 15;
        document.getElementsByClassName("v-data-table__thead")[0].style.left = leftPosition + "px";
      } else {
        document.getElementsByClassName("v-data-table__thead")[0].style.left = this.$refs.tableContainer.getBoundingClientRect().left + "px";
      }
    },
    onScroll(e) {
      if (typeof window === "undefined" || !this.headers) return;
      const top = window.pageYOffset || e.target.scrollTop || 0;
      if (top > 60 && !this.fixedHeaders && this.totalAffiliates !== 0) {
        this.fixedHeaders = true;
      } else if (top < 60 && this.fixedHeaders) {
        this.fixedHeaders = false;
      }
    },
    shouldCollapseFilter(val) {
      this.collapsedFilter = val;
    },
    shouldShowResultsAndSortingTypeText() {
      return !!(this.totalAffiliates && !this.hasSelectedItem && !this.shouldHideResults);
    },
    hideResults() {
      this.shouldHideResults = true;
    },
    mobileSort(sortBy) {
      this.shouldHideResults = false;
      this.options.sortBy = sortBy;
    },
    displaySelectedRow(value) {
      this.hasSelectedItem = true;
      this.selectedItem = value;
    },
    getDataFromApi() {
      this.loading = true;
      const { sortBy, page, itemsPerPage } = this.options;
      const sortDefault = sortBy[0] ?? { key: "", order: "asc" };
      let sortByField = sortDefault.key ?? "";
      const sortDirection = sortDefault.order === "asc" ? "" : "-";
      let url = "/api/v2/affiliate?scope=global&page=" + page + "&per_page=" + itemsPerPage + "&sort=" + sortDirection + sortByField + "&include=affiliateAddressesOrdered,affiliateAddressesOrdered.StateTerritory,affiliatePhonesOrdered,affiliateEmailsOrdered,AffiliateType";
      let filter = "";
      for (const search of this.filters) {
        if (search.value !== "") {
          filter += "&filter[" + search.name + "]=" + search.value;
        }
      }
      if (filter !== "") {
        url += filter;
      }
      this.updateQueryParams(this.options, this.filters, this.headers);
      return axios.get(url).then((response) => {
        this.affiliates = response.data.data;
        this.totalAffiliates = response.data.meta.total;
        if (this.affiliates.length === 0 && page > 0 && this.totalAffiliates > 0) {
          this.options.page = 1;
          this.loading = false;
          this.getDataFromApi();
        }
      }).finally(() => {
        this.loading = false;
      });
    },
    onDestroyComponent() {
      window.removeEventListener("scroll", this.handleScroll);
      document.getElementById("main-container").removeEventListener("scroll", this.bodyScroll);
      this.destroyObserver();
      this.destroyDynamicStyle();
    }
  },
  unmounted() {
    this.onDestroyComponent();
  }
};
const _hoisted_1$12 = {
  key: 0,
  class: "hidden-md-and-down"
};
const _hoisted_2$S = { class: "tableContainer__inner" };
const _hoisted_3$L = { class: "d-flex flex-wrap align-md-center ga-8" };
const _hoisted_4$F = {
  key: 0,
  class: "data-container"
};
const _hoisted_5$C = {
  key: 0,
  class: "data-container"
};
const _hoisted_6$y = {
  key: 0,
  class: "data-container"
};
const _hoisted_7$u = { key: 0 };
const _hoisted_8$o = {
  key: 1,
  class: "hidden-lg-and-up"
};
const _hoisted_9$n = {
  key: 2,
  class: "mobile-displaying-sort-p"
};
const _hoisted_10$k = { class: "tr-mobile-affiliate" };
const _hoisted_11$h = { class: "v-data-table__mobile-row mobile-row-header td-mobile-padding custom-mobile-row" };
const _hoisted_12$h = {
  key: 0,
  class: "v-data-table__mobile-row td-mobile-padding custom-mobile-row"
};
const _hoisted_13$e = {
  key: 1,
  class: "v-data-table__mobile-row custom-mobile-row td-mobile-padding"
};
const _hoisted_14$e = {
  key: 2,
  class: "v-data-table__mobile-row custom-mobile-row td-mobile-padding"
};
const _hoisted_15$e = { class: "td-mobile-padding" };
const _hoisted_16$e = { key: 4 };
const _hoisted_17$d = { class: "mobile-selected-item-container" };
function _sfc_render$1u(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_filter_component = resolveComponent("filter-component");
  const _component_chooser_component = resolveComponent("chooser-component");
  const _component_AffiliateSwitchComponent = resolveComponent("AffiliateSwitchComponent");
  const _component_affiliate_detail_component = resolveComponent("affiliate-detail-component");
  return openBlock(), createElementBlock(
    "div",
    {
      onKeyup: _cache[20] || (_cache[20] = withKeys((...args) => $options.getDataFromApi && $options.getDataFromApi(...args), ["enter"]))
    },
    [
      !_ctx.isOnMobile ? (openBlock(), createElementBlock("div", _hoisted_1$12, [
        createVNode(VContainer, { fluid: "" }, {
          default: withCtx(() => [
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, null, {
                  default: withCtx(() => _cache[21] || (_cache[21] = [
                    createBaseVNode(
                      "h2",
                      { class: "container-title" },
                      "Affiliate Listing",
                      -1
                      /* HOISTED */
                    )
                  ])),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            createVNode(VRow, {
              class: normalizeClass([$options.collapsedFilterRowTheme, "flex-sm-nowrap table-content-row"])
            }, {
              default: withCtx(() => [
                createVNode(VCol, {
                  cols: "12",
                  lg: "2",
                  class: normalizeClass([$options.collapsedFilterColTheme, "table-content-row__left"])
                }, {
                  default: withCtx(() => [
                    createVNode(_component_filter_component, {
                      filters: _ctx.filters,
                      presets: _ctx.presets,
                      selectedPreset: _ctx.selectedPreset,
                      onSearch: _cache[0] || (_cache[0] = ($event) => $options.getDataFromApi()),
                      onCollapsedFilterChanged: $options.shouldCollapseFilter,
                      onFilterChooserApplied: _cache[1] || (_cache[1] = ($event) => _ctx.onFilterChangeApplied(_ctx.filters, "affiliate", $event)),
                      onPresetsLoad: _cache[2] || (_cache[2] = ($event) => $options.loadConfiguration($event))
                    }, null, 8, ["filters", "presets", "selectedPreset", "onCollapsedFilterChanged"])
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["class"]),
                createVNode(VCol, {
                  cols: "10",
                  ref: "tableContainer",
                  class: normalizeClass([[$options.collapsedFilterPaddingColTheme, $options.fixedHeaderTheme], "table-content-row__right"])
                }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_2$S, [
                      createVNode(VDataTableServer, {
                        headers: _ctx.getHeaders(_ctx.headers),
                        items: _ctx.affiliates,
                        options: _ctx.options,
                        "onUpdate:options": _cache[7] || (_cache[7] = ($event) => _ctx.options = $event),
                        "items-length": _ctx.totalAffiliates,
                        loading: _ctx.loading,
                        class: "elevation-1 affiliate-results-table scrollable-table",
                        "fixed-header": "",
                        height: "80dvh",
                        "onUpdate:page": _cache[8] || (_cache[8] = ($event) => _ctx.scrollToBeginningOfPage())
                      }, {
                        top: withCtx(({ pagination, options, updateOptions }) => [
                          createBaseVNode("div", _hoisted_3$L, [
                            createVNode(_component_chooser_component, {
                              columns: _ctx.headers,
                              presets: _ctx.presets,
                              selectedPreset: _ctx.selectedPreset,
                              onApplied: _cache[3] || (_cache[3] = ($event) => _ctx.onHeaderChangeApplied("affiliate", $event)),
                              onPresetLoad: _cache[4] || (_cache[4] = ($event) => $options.loadConfiguration($event))
                            }, null, 8, ["columns", "presets", "selectedPreset"]),
                            createVNode(VDataTableFooter, {
                              pagination,
                              options,
                              "onUpdate:options": updateOptions,
                              "items-per-page-options": [5, 10, 15, 30, 50],
                              "items-per-page-text": "$vuetify.dataTable.itemsPerPageText"
                            }, null, 8, ["pagination", "options", "onUpdate:options"])
                          ]),
                          _cache[22] || (_cache[22] = createBaseVNode(
                            "div",
                            { class: "top-scroller" },
                            [
                              createBaseVNode("div", { class: "inner-scroll i-scroll" })
                            ],
                            -1
                            /* HOISTED */
                          ))
                        ]),
                        loader: withCtx(() => [
                          createVNode(VProgressLinear, {
                            indeterminate: "",
                            height: "8",
                            color: "#3f98c9"
                          })
                        ]),
                        [`item.AffiliateName`]: withCtx(({ item }) => [
                          createVNode(_component_AffiliateSwitchComponent, {
                            "component-name": "AffiliateDisplay",
                            "param-name": "id",
                            "param-value": item.AffiliateId,
                            "display-value": item.AffiliateName,
                            "affiliate-id": item.AffiliateId,
                            "affiliate-name": item.AffiliateName,
                            "affiliate-number": item.AffiliateNumber
                          }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])
                        ]),
                        [`item.Address`]: withCtx(({ item }) => [
                          item && item.affiliateAddressesOrdered && item.affiliateAddressesOrdered.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_4$F,
                            toDisplayString(item.affiliateAddressesOrdered[0].AddressLine1) + ", " + toDisplayString(item.affiliateAddressesOrdered[0].City) + ", " + toDisplayString(item.affiliateAddressesOrdered[0].StateTerritory ? item.affiliateAddressesOrdered[0].StateTerritory.StateTerritoryCode : "") + ", " + toDisplayString(item.affiliateAddressesOrdered[0].PostalCode),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ]),
                        [`item.Phone`]: withCtx(({ item }) => [
                          item && item.affiliatePhonesOrdered && item.affiliatePhonesOrdered.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_5$C,
                            toDisplayString(item.affiliatePhonesOrdered[0].PhoneNumber),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ]),
                        [`item.Email`]: withCtx(({ item }) => [
                          item && item.affiliateEmailsOrdered && item.affiliateEmailsOrdered.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_6$y,
                            toDisplayString(item.affiliateEmailsOrdered[0].Email),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ]),
                        [`item.CharterDate`]: withCtx(({ item }) => [
                          item.CharterDate ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_7$u,
                            toDisplayString(_ctx.$filters.formatDate(item.CharterDate)),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ]),
                        bottom: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, null, {
                                default: withCtx(() => [
                                  createVNode(_component_chooser_component, {
                                    columns: _ctx.headers,
                                    presets: _ctx.presets,
                                    selectedPreset: _ctx.selectedPreset,
                                    onApplied: _cache[5] || (_cache[5] = ($event) => _ctx.onHeaderChangeApplied("affiliate", $event)),
                                    onPresetLoad: _cache[6] || (_cache[6] = ($event) => $options.loadConfiguration($event))
                                  }, null, 8, ["columns", "presets", "selectedPreset"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, null, {
                                default: withCtx(() => [
                                  createVNode(VDataTableFooter)
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["headers", "items", "options", "items-length", "loading"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["class"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["class"])
          ]),
          _: 1
          /* STABLE */
        })
      ])) : createCommentVNode("v-if", true),
      createCommentVNode(" MOBILE Breakpoint "),
      _ctx.isOnMobile ? (openBlock(), createElementBlock("div", _hoisted_8$o, [
        !_ctx.hasSelectedItem ? (openBlock(), createBlock(_component_filter_component, {
          key: 0,
          filters: _ctx.filters,
          presets: _ctx.presets,
          selectedPreset: _ctx.selectedPreset,
          mobileIndividualHeaders: _ctx.getSortableHeaders(_ctx.headers),
          onSearch: _cache[9] || (_cache[9] = ($event) => $options.getDataFromApi()),
          onChange: _cache[10] || (_cache[10] = ($event) => _ctx.updateFilter()),
          onOnShowSort: _cache[11] || (_cache[11] = ($event) => $options.hideResults()),
          onOnHideSort: _cache[12] || (_cache[12] = ($event) => _ctx.shouldHideResults = false),
          onSort: $options.mobileSort,
          onOnShowFilters: _cache[13] || (_cache[13] = ($event) => $options.hideResults()),
          onOnHideFilters: _cache[14] || (_cache[14] = ($event) => _ctx.shouldHideResults = false),
          onFilterChooserApplied: _cache[15] || (_cache[15] = ($event) => _ctx.onFilterChangeApplied(_ctx.filters, "affiliate", $event)),
          onPresetsLoad: _cache[16] || (_cache[16] = ($event) => $options.loadConfiguration($event))
        }, null, 8, ["filters", "presets", "selectedPreset", "mobileIndividualHeaders", "onSort"])) : createCommentVNode("v-if", true),
        _ctx.hasSelectedItem ? (openBlock(), createBlock(VToolbar, {
          key: 1,
          dense: "",
          flat: "",
          class: "hidden-lg-and-up mobile-has-selected-row"
        }, {
          default: withCtx(() => [
            createVNode(VSpacer),
            createVNode(VBtn, {
              icon: "mdi:mdi-close",
              onClick: _cache[17] || (_cache[17] = ($event) => _ctx.hasSelectedItem = false)
            })
          ]),
          _: 1
          /* STABLE */
        })) : createCommentVNode("v-if", true),
        $options.shouldShowResultsAndSortingTypeText() ? (openBlock(), createElementBlock(
          "p",
          _hoisted_9$n,
          "Displaying " + toDisplayString(_ctx.totalAffiliates) + " results.",
          1
          /* TEXT */
        )) : createCommentVNode("v-if", true),
        !_ctx.hasSelectedItem ? (openBlock(), createBlock(
          VCol,
          {
            key: 3,
            ref: "mobileAffiliateTableContainer",
            class: "mobile-affiliate-table"
          },
          {
            default: withCtx(() => [
              !_ctx.shouldHideResults ? (openBlock(), createBlock(VDataTableServer, {
                key: 0,
                items: _ctx.affiliates,
                options: _ctx.options,
                "onUpdate:options": _cache[18] || (_cache[18] = ($event) => _ctx.options = $event),
                page: _ctx.options.page,
                "items-length": _ctx.totalAffiliates,
                loading: _ctx.loading,
                "hide-default-header": "",
                "mobile-breakpoint": 992,
                class: "elevation-1",
                "onClick:row": $options.displaySelectedRow
              }, {
                item: withCtx((row) => [
                  createBaseVNode("tr", _hoisted_10$k, [
                    createBaseVNode(
                      "td",
                      _hoisted_11$h,
                      toDisplayString(row.item.AffiliateName),
                      1
                      /* TEXT */
                    ),
                    row.item.AffiliateNumber ? (openBlock(), createElementBlock(
                      "td",
                      _hoisted_12$h,
                      toDisplayString(row.item.AffiliateNumber),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true),
                    row.item.AffiliateAcronym ? (openBlock(), createElementBlock(
                      "td",
                      _hoisted_13$e,
                      toDisplayString(row.item.AffiliateAcronym),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true),
                    row.item.AffiliateEIN ? (openBlock(), createElementBlock(
                      "td",
                      _hoisted_14$e,
                      toDisplayString(row.item.AffiliateEIN),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true),
                    createBaseVNode("td", _hoisted_15$e, [
                      createVNode(VBtn, {
                        size: "small",
                        icon: "mdi:mdi-menu-down",
                        onClick: ($event) => $options.displaySelectedRow(row.item)
                      }, null, 8, ["onClick"])
                    ])
                  ])
                ]),
                _: 1
                /* STABLE */
              }, 8, ["items", "options", "page", "items-length", "loading", "onClick:row"])) : createCommentVNode("v-if", true)
            ]),
            _: 1
            /* STABLE */
          },
          512
          /* NEED_PATCH */
        )) : createCommentVNode("v-if", true),
        _ctx.hasSelectedItem ? (openBlock(), createElementBlock("div", _hoisted_16$e, [
          createBaseVNode("div", _hoisted_17$d, [
            createVNode(_component_affiliate_detail_component, {
              onSwipeToClose: _cache[19] || (_cache[19] = ($event) => _ctx.hasSelectedItem = false),
              affiliateId: _ctx.selectedItem.AffiliateId,
              shouldDisplayDataComponent: false
            }, null, 8, ["affiliateId"])
          ])
        ])) : createCommentVNode("v-if", true)
      ])) : createCommentVNode("v-if", true)
    ],
    32
    /* NEED_HYDRATION */
  );
}
const AffiliateListComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1u, [["render", _sfc_render$1u], ["__scopeId", "data-v-08b81a5b"], ["__file", "/var/www/html/resources/js/components/Affiliate/AffiliateListComponent.vue"]]);
const _sfc_main$1t = {
  name: "AddDropReportComponent",
  components: {},
  data: () => ({
    reportURL: ""
  }),
  mounted() {
    this.getDataFromApi();
  },
  methods: {
    getDataFromApi() {
      return axios.get("api/sisense/reports?report=addDrop&scope=global").then((response) => {
        this.reportURL = response.data.reportURL;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$11 = ["src"];
function _sfc_render$1t(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VLayout, null, {
    default: withCtx(() => [
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, { cols: "12" }, {
            default: withCtx(() => [
              createBaseVNode("iframe", {
                src: _ctx.reportURL,
                frameborder: "0",
                style: { "display": "block", "border": "50px", "height": "100vh", "width": "100vw" }
              }, null, 8, _hoisted_1$11)
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const AddDropReportComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1t, [["render", _sfc_render$1t], ["__file", "/var/www/html/resources/js/components/Common/AddDropReportComponent.vue"]]);
const _sfc_main$1s = {
  name: "AssessmentReportComponent",
  components: {},
  data: () => ({
    reportURL: ""
  }),
  mounted() {
    this.getDataFromApi();
  },
  methods: {
    getDataFromApi() {
      return axios.get("api/sisense/reports?report=assessment&scope=global").then((response) => {
        this.reportURL = response.data.reportURL;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$10 = ["src"];
function _sfc_render$1s(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VLayout, null, {
    default: withCtx(() => [
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, { cols: "12" }, {
            default: withCtx(() => [
              createBaseVNode("iframe", {
                src: _ctx.reportURL,
                frameborder: "0",
                style: { "display": "block", "border": "50px", "height": "100vh", "width": "100vw" }
              }, null, 8, _hoisted_1$10)
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const AssessmentReportComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1s, [["render", _sfc_render$1s], ["__file", "/var/www/html/resources/js/components/Common/AssessmentReportComponent.vue"]]);
const _sfc_main$1r = {
  name: "CopeReportComponent",
  components: {},
  data: () => ({
    reportURL: ""
  }),
  mounted() {
    this.getDataFromApi();
  },
  methods: {
    getDataFromApi() {
      return axios.get("api/sisense/reports?report=cope&scope=global").then((response) => {
        this.reportURL = response.data.reportURL;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$$ = ["src"];
function _sfc_render$1r(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VLayout, null, {
    default: withCtx(() => [
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, { cols: "12" }, {
            default: withCtx(() => [
              createBaseVNode("iframe", {
                src: _ctx.reportURL,
                frameborder: "0",
                style: { "display": "block", "border": "50px", "height": "100vh", "width": "100vw" }
              }, null, 8, _hoisted_1$$)
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const CopeReportComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1r, [["render", _sfc_render$1r], ["__file", "/var/www/html/resources/js/components/Common/CopeReportComponent.vue"]]);
const _sfc_main$1q = {
  name: "OfficerReportComponent",
  components: {},
  data: () => ({
    reportURL: ""
  }),
  mounted() {
    this.getDataFromApi();
  },
  methods: {
    getDataFromApi() {
      return axios.get("api/sisense/reports?report=officer&scope=global").then((response) => {
        this.reportURL = response.data.reportURL;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$_ = ["src"];
function _sfc_render$1q(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VLayout, null, {
    default: withCtx(() => [
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, { cols: "12" }, {
            default: withCtx(() => [
              createBaseVNode("iframe", {
                src: _ctx.reportURL,
                frameborder: "0",
                style: { "display": "block", "border": "50px", "height": "100vh", "width": "100vw" }
              }, null, 8, _hoisted_1$_)
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const OfficerReportComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1q, [["render", _sfc_render$1q], ["__file", "/var/www/html/resources/js/components/Common/OfficerReportComponent.vue"]]);
const _sfc_main$1p = {
  name: "ReportsComponent",
  components: {}
};
function _sfc_render$1p(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, {
            cols: "12",
            lg: "4"
          }, {
            default: withCtx(() => [
              createVNode(VBtn, {
                variant: "text",
                color: "primary",
                class: "report rounded-circle",
                to: "/unit-report",
                target: "_self"
              }, {
                default: withCtx(() => _cache[0] || (_cache[0] = [
                  createTextVNode("Unit Report ")
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCol, {
            cols: "12",
            lg: "4"
          }, {
            default: withCtx(() => [
              createVNode(VBtn, {
                variant: "text",
                color: "primary",
                class: "report rounded-circle",
                to: "/add-drop-report",
                target: "_self"
              }, {
                default: withCtx(() => _cache[1] || (_cache[1] = [
                  createTextVNode("Add/Drop Report ")
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, {
            cols: "12",
            lg: "4"
          }, {
            default: withCtx(() => [
              createVNode(VBtn, {
                variant: "text",
                color: "primary",
                class: "report rounded-circle",
                to: "/officer-report",
                target: "_self"
              }, {
                default: withCtx(() => _cache[2] || (_cache[2] = [
                  createTextVNode("Officer Report ")
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCol, {
            cols: "12",
            lg: "4"
          }, {
            default: withCtx(() => [
              createVNode(VBtn, {
                variant: "text",
                color: "primary",
                class: "report rounded-circle",
                to: "/assessment-report",
                target: "_self"
              }, {
                default: withCtx(() => _cache[3] || (_cache[3] = [
                  createTextVNode("Assessment Report ")
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, {
            cols: "12",
            lg: "4"
          }, {
            default: withCtx(() => [
              createVNode(VBtn, {
                variant: "text",
                color: "primary rounded-circle",
                class: "report",
                to: "/cope-report",
                target: "_self"
              }, {
                default: withCtx(() => _cache[4] || (_cache[4] = [
                  createTextVNode("Cope Report ")
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const ReportsComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1p, [["render", _sfc_render$1p], ["__file", "/var/www/html/resources/js/components/Common/ReportsComponent.vue"]]);
const _sfc_main$1o = {
  name: "UnitReportComponent",
  components: {},
  data: () => ({
    reportURL: ""
  }),
  mounted() {
    this.getDataFromApi();
  },
  methods: {
    getDataFromApi() {
      return axios.get("api/sisense/reports?report=unit&scope=global").then((response) => {
        this.reportURL = response.data.reportURL;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$Z = ["src"];
function _sfc_render$1o(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VLayout, null, {
    default: withCtx(() => [
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, { cols: "12" }, {
            default: withCtx(() => [
              createBaseVNode("iframe", {
                src: _ctx.reportURL,
                frameborder: "0",
                style: { "display": "block", "border": "50px", "height": "100vh", "width": "100vw" }
              }, null, 8, _hoisted_1$Z)
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const UnitReportComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1o, [["render", _sfc_render$1o], ["__file", "/var/www/html/resources/js/components/Common/UnitReportComponent.vue"]]);
const _sfc_main$1n = {
  name: "ActivitySummaryComponent",
  data: () => ({
    activity: [],
    panel: 0,
    pages: 1
  }),
  mounted: function() {
    axios.get("admin/api/audit").then((response) => {
      this.activity = response.data.data;
      this.pages = response.data.meta.total;
    });
  },
  methods: {
    dateFromNow(date) {
      return formatDistanceToNow(startOfDay(new Date(date)), { addSuffix: true });
    }
  }
};
const _hoisted_1$Y = { class: "hidden-md-and-down display-contents" };
const _hoisted_2$R = { key: 0 };
const _hoisted_3$K = { key: 0 };
const _hoisted_4$E = { key: 1 };
const _hoisted_5$B = { key: 1 };
const _hoisted_6$x = { class: "hidden-lg-and-up display-contents" };
const _hoisted_7$t = { class: "v-data-table__mobile-row" };
const _hoisted_8$n = { class: "v-data-table__mobile-row__wrapper" };
const _hoisted_9$m = { class: "v-data-table__mobile-row__cell" };
const _hoisted_10$j = { class: "v-data-table__mobile-row" };
const _hoisted_11$g = { class: "v-data-table__mobile-row__wrapper" };
const _hoisted_12$g = { class: "v-data-table__mobile-row__cell" };
const _hoisted_13$d = { class: "v-data-table__mobile-row" };
const _hoisted_14$d = { class: "v-data-table__mobile-row__wrapper" };
const _hoisted_15$d = { class: "v-data-table__mobile-row__cell" };
const _hoisted_16$d = { class: "v-data-table__mobile-row" };
const _hoisted_17$c = { class: "v-data-table__mobile-row__wrapper" };
const _hoisted_18$c = { class: "v-data-table__mobile-row__cell" };
const _hoisted_19$c = { class: "v-data-table__mobile-row" };
const _hoisted_20$b = { class: "v-data-table__mobile-row__wrapper" };
const _hoisted_21$b = { class: "v-data-table__mobile-row__cell" };
function _sfc_render$1n(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanels, {
    modelValue: _ctx.panel,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.panel = $event),
    class: "home-activity-list mb-8"
  }, {
    default: withCtx(() => [
      createVNode(VExpansionPanel, null, {
        default: withCtx(() => [
          createVNode(VExpansionPanelTitle, null, {
            default: withCtx(() => _cache[1] || (_cache[1] = [
              createTextVNode(" Recent Activity ")
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VExpansionPanelText, { class: "border-sm" }, {
            default: withCtx(() => [
              createVNode(VCard, {
                variant: "flat",
                class: "p-3"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_1$Y, [
                    createVNode(VTable, {
                      density: "compact",
                      class: "mobile-global-card-table"
                    }, {
                      default: withCtx(() => [
                        _cache[2] || (_cache[2] = createBaseVNode(
                          "thead",
                          null,
                          [
                            createBaseVNode("tr", null, [
                              createBaseVNode("th", null, "Date and Time"),
                              createBaseVNode("th", null, "Affiliate"),
                              createBaseVNode("th", null, "User Name"),
                              createBaseVNode("th", null, "Activity"),
                              createBaseVNode("th", null, "Item")
                            ])
                          ],
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("tbody", null, [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(_ctx.activity, (item) => {
                              return openBlock(), createElementBlock("tr", {
                                key: item.id
                              }, [
                                createBaseVNode(
                                  "td",
                                  null,
                                  toDisplayString($options.dateFromNow(item.created_at)),
                                  1
                                  /* TEXT */
                                ),
                                createBaseVNode(
                                  "td",
                                  null,
                                  toDisplayString(item.owner.AffiliateNumber),
                                  1
                                  /* TEXT */
                                ),
                                createBaseVNode(
                                  "td",
                                  null,
                                  toDisplayString(item.user.name),
                                  1
                                  /* TEXT */
                                ),
                                createBaseVNode(
                                  "td",
                                  null,
                                  toDisplayString(item.event),
                                  1
                                  /* TEXT */
                                ),
                                createBaseVNode("td", null, [
                                  item.auditable_type === "App\\Models\\IndividualAddress" ? (openBlock(), createElementBlock("div", _hoisted_2$R, [
                                    item.auditable ? (openBlock(), createElementBlock(
                                      "div",
                                      _hoisted_3$K,
                                      toDisplayString(item.auditable.AddressLine1) + " " + toDisplayString(item.auditable.AddressLine2) + " " + toDisplayString(item.auditable.City) + " " + toDisplayString(item.auditable.StateTerritory ? item.auditable.StateTerritory.StateTerritoryName : "") + " " + toDisplayString(item.auditable.PostalCode),
                                      1
                                      /* TEXT */
                                    )) : (openBlock(), createElementBlock(
                                      "div",
                                      _hoisted_4$E,
                                      toDisplayString(item.auditable_type),
                                      1
                                      /* TEXT */
                                    ))
                                  ])) : (openBlock(), createElementBlock(
                                    "div",
                                    _hoisted_5$B,
                                    toDisplayString(item.auditable ? item.auditable.display_name : item.auditable_type),
                                    1
                                    /* TEXT */
                                  ))
                                ])
                              ]);
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  createBaseVNode("div", _hoisted_6$x, [
                    createVNode(VTable, null, {
                      default: withCtx(() => [
                        _cache[8] || (_cache[8] = createBaseVNode(
                          "thead",
                          { class: "v-data-table__thead v-data-table-header-mobile" },
                          null,
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("tbody", null, [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(_ctx.activity, (item) => {
                              return openBlock(), createElementBlock("tr", {
                                key: item.id
                              }, [
                                createBaseVNode("td", _hoisted_7$t, [
                                  createBaseVNode("div", _hoisted_8$n, [
                                    _cache[3] || (_cache[3] = createBaseVNode(
                                      "div",
                                      { class: "v-data-table__mobile-row__header" },
                                      " Date and Time ",
                                      -1
                                      /* HOISTED */
                                    )),
                                    createBaseVNode(
                                      "div",
                                      _hoisted_9$m,
                                      toDisplayString($options.dateFromNow(item.created_at)),
                                      1
                                      /* TEXT */
                                    )
                                  ])
                                ]),
                                createBaseVNode("td", _hoisted_10$j, [
                                  createBaseVNode("div", _hoisted_11$g, [
                                    _cache[4] || (_cache[4] = createBaseVNode(
                                      "div",
                                      { class: "v-data-table__mobile-row__header" },
                                      " Affiliate ",
                                      -1
                                      /* HOISTED */
                                    )),
                                    createBaseVNode(
                                      "div",
                                      _hoisted_12$g,
                                      toDisplayString(item.owner.AffiliateNumber),
                                      1
                                      /* TEXT */
                                    )
                                  ])
                                ]),
                                createBaseVNode("td", _hoisted_13$d, [
                                  createBaseVNode("div", _hoisted_14$d, [
                                    _cache[5] || (_cache[5] = createBaseVNode(
                                      "div",
                                      { class: "v-data-table__mobile-row__header" },
                                      " User Name ",
                                      -1
                                      /* HOISTED */
                                    )),
                                    createBaseVNode(
                                      "div",
                                      _hoisted_15$d,
                                      toDisplayString(item.user.name),
                                      1
                                      /* TEXT */
                                    )
                                  ])
                                ]),
                                createBaseVNode("td", _hoisted_16$d, [
                                  createBaseVNode("div", _hoisted_17$c, [
                                    _cache[6] || (_cache[6] = createBaseVNode(
                                      "div",
                                      { class: "v-data-table__mobile-row__header" },
                                      " Activity ",
                                      -1
                                      /* HOISTED */
                                    )),
                                    createBaseVNode(
                                      "div",
                                      _hoisted_18$c,
                                      toDisplayString(item.event),
                                      1
                                      /* TEXT */
                                    )
                                  ])
                                ]),
                                createBaseVNode("td", _hoisted_19$c, [
                                  createBaseVNode("div", _hoisted_20$b, [
                                    _cache[7] || (_cache[7] = createBaseVNode(
                                      "div",
                                      { class: "v-data-table__mobile-row__header" },
                                      " Item ",
                                      -1
                                      /* HOISTED */
                                    )),
                                    createBaseVNode(
                                      "div",
                                      _hoisted_21$b,
                                      toDisplayString(item.auditable ? item.auditable.display_name : item.auditable_type),
                                      1
                                      /* TEXT */
                                    )
                                  ])
                                ])
                              ]);
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  createVNode(VCardActions, null, {
                    default: withCtx(() => [
                      createVNode(VSpacer),
                      createVNode(VBtn, {
                        variant: "elevated",
                        size: "small",
                        to: { name: "Activity" }
                      }, {
                        default: withCtx(() => _cache[9] || (_cache[9] = [
                          createTextVNode("View All Activity")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue"]);
}
const ActivitySummaryComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1n, [["render", _sfc_render$1n], ["__file", "/var/www/html/resources/js/components/Home/ActivitySummaryComponent.vue"]]);
const _sfc_main$1m = {
  props: {
    position: {
      type: String,
      required: false
    }
  },
  data: () => ({
    panel: [],
    announcements: []
  }),
  mounted() {
    this.getAnnouncements();
  },
  methods: {
    getAnnouncements() {
      const isPosition = this.position ? "&position=" + this.position : "";
      axios.get("admin/api/active-content-block?application=connect" + isPosition).then((response) => {
        this.announcements = response.data.data;
      });
    }
  }
};
const _hoisted_1$X = ["innerHTML"];
function _sfc_render$1m(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, [
    (openBlock(true), createElementBlock(
      Fragment,
      null,
      renderList(_ctx.announcements, (announcement) => {
        return openBlock(), createBlock(VExpansionPanels, {
          key: announcement.id,
          modelValue: announcement.expanded,
          "onUpdate:modelValue": ($event) => announcement.expanded = $event,
          class: normalizeClass(["announcement mb-8", "type-" + announcement.type])
        }, {
          default: withCtx(() => [
            createVNode(
              VExpansionPanel,
              null,
              {
                default: withCtx(() => [
                  createVNode(VExpansionPanelTitle, {
                    class: normalizeClass(announcement.priority)
                  }, {
                    default: withCtx(() => [
                      createBaseVNode(
                        "h4",
                        null,
                        toDisplayString(announcement.title),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["class"]),
                  createVNode(
                    VExpansionPanelText,
                    { class: "border-sm" },
                    {
                      default: withCtx(() => [
                        createVNode(
                          VCard,
                          {
                            variant: "flat",
                            class: "p-3"
                          },
                          {
                            default: withCtx(() => [
                              createBaseVNode("span", {
                                innerHTML: announcement.content
                              }, null, 8, _hoisted_1$X)
                            ]),
                            _: 2
                            /* DYNAMIC */
                          },
                          1024
                          /* DYNAMIC_SLOTS */
                        )
                      ]),
                      _: 2
                      /* DYNAMIC */
                    },
                    1024
                    /* DYNAMIC_SLOTS */
                  )
                ]),
                _: 2
                /* DYNAMIC */
              },
              1024
              /* DYNAMIC_SLOTS */
            )
          ]),
          _: 2
          /* DYNAMIC */
        }, 1032, ["modelValue", "onUpdate:modelValue", "class"]);
      }),
      128
      /* KEYED_FRAGMENT */
    ))
  ]);
}
const AnnouncementsComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1m, [["render", _sfc_render$1m], ["__file", "/var/www/html/resources/js/components/Home/AnnouncementsComponent.vue"]]);
const _sfc_main$1l = {
  name: "HomeComponent",
  components: {
    "announcements-component": AnnouncementsComponent,
    "activity-list-component": ActivitySummaryComponent
  },
  data: () => ({
    news: [],
    panel: 0
  }),
  mounted() {
  },
  methods: {
    // getDataFromApi() {
    //     return axios.get("/api/v2/aft/news")
    //         .then(response => {
    //             this.news = response.data.data;
    //         })
    //         .finally(() => {
    //             this.loading = false
    //         });
    // }
  }
};
function _sfc_render$1l(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_announcements_component = resolveComponent("announcements-component");
  const _component_activity_list_component = resolveComponent("activity-list-component");
  return openBlock(), createBlock(VContainer, { class: "mobile-home-container mt-50" }, {
    default: withCtx(() => [
      createVNode(VLayout, null, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "8"
              }, {
                default: withCtx(() => [
                  createVNode(_component_announcements_component, { position: "left" }),
                  createVNode(_component_activity_list_component)
                ]),
                _: 1
                /* STABLE */
              }),
              createCommentVNode('                <v-col cols="4">'),
              createCommentVNode('                <v-expansion-panels v-model="panel">'),
              createCommentVNode("                    <v-expansion-panel>"),
              createCommentVNode('                        <v-expansion-panel-header class="aft-news-header">'),
              createCommentVNode("                            <h4>AFT News</h4>"),
              createCommentVNode("                        </v-expansion-panel-header>"),
              createCommentVNode('                        <v-expansion-panel-content class="aft-news-content">'),
              createCommentVNode('                            <v-card class="v-card&#45;&#45;outlined v-sheet&#45;&#45;tile p-3">'),
              createCommentVNode("                                <div>"),
              createCommentVNode('                                    <p v-if="news.length>0">{{ data.error_message }}</p>'),
              createCommentVNode('                                    <div v-for="item in news.items" v-bind="item"'),
              createCommentVNode('                                                        :key="item.id"  class="aft-news-item">'),
              createCommentVNode('                                        <div class="aft-news-date">'),
              createCommentVNode("                                            <time>{{ item.date }}</time>"),
              createCommentVNode("                                        </div>"),
              createCommentVNode('                                        <div class="aft-news-title">'),
              createCommentVNode("                                            <span>"),
              createCommentVNode(`                                                <b><a :href="'' + item.url" target="_blank">{{ item.title }}</a></b>`),
              createCommentVNode("                                            </span>"),
              createCommentVNode("                                        </div>"),
              createCommentVNode('                                        <div class="aft-news-description">'),
              createCommentVNode("                                            <p>{{ item.description }}</p>"),
              createCommentVNode("                                        </div>"),
              createCommentVNode('                                        <div class="aft-news-read-more">'),
              createCommentVNode("                                            <span>"),
              createCommentVNode(`                                                <a :href="'' + item.url" target="_blank">Read More</a>`),
              createCommentVNode("                                            </span>"),
              createCommentVNode("                                        </div>"),
              createCommentVNode("                                        <v-divider></v-divider>"),
              createCommentVNode("                                    </div>"),
              createCommentVNode("                                </div>"),
              createCommentVNode("                            </v-card>"),
              createCommentVNode("                        </v-expansion-panel-content>"),
              createCommentVNode("                    </v-expansion-panel>"),
              createCommentVNode("                </v-expansion-panels>"),
              createCommentVNode("                </v-col>"),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(_component_announcements_component, { position: "right" })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const HomeComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1l, [["render", _sfc_render$1l], ["__file", "/var/www/html/resources/js/components/HomeComponent.vue"]]);
const _sfc_main$1k = {
  name: "StateTerritorySelectComponent2",
  mixins: [emptySelectMixin],
  props: {
    label: {
      default: "State"
    },
    itemValue: {
      default: "StateTerritoryId"
    },
    itemText: {
      default: "StateTerritoryName"
    },
    value: {
      required: true
    },
    rules: {
      required: false
    },
    stateTerritories: {
      required: true
    }
  },
  computed: {
    model: {
      get() {
        return this.value;
      },
      set(newValue) {
        this.$emit("input", newValue);
      }
    }
  }
};
const _hoisted_1$W = {
  key: 0,
  class: "text-red"
};
function _sfc_render$1k(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VAutocomplete, {
    items: $props.stateTerritories,
    "item-value": $props.itemValue,
    "item-title": $props.itemText,
    modelValue: $options.model,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $options.model = $event),
    rules: $props.rules
  }, {
    label: withCtx(() => [
      $props.rules ? (openBlock(), createElementBlock("span", _hoisted_1$W, "* ")) : createCommentVNode("v-if", true),
      createTextVNode(
        toDisplayString($props.label),
        1
        /* TEXT */
      )
    ]),
    _: 1
    /* STABLE */
  }, 8, ["items", "item-value", "item-title", "modelValue", "rules"]);
}
const StateTerritorySelectComponent2 = /* @__PURE__ */ _export_sfc(_sfc_main$1k, [["render", _sfc_render$1k], ["__file", "/var/www/html/resources/js/components/Common/StateTerritorySelectComponent2.vue"]]);
const _sfc_main$1j = {
  name: "JobClassChooser",
  props: {
    jobClassId: {
      required: true
    },
    jobTitleId: {
      required: true
    },
    unitId: {
      required: true
    },
    rules: {
      default: {}
    }
  },
  data: () => ({
    isLoading: false,
    jobClasses: [],
    jobTitles: [],
    searchTerm: ""
  }),
  computed: {
    localJobClassId: {
      get() {
        return this.jobClassId;
      },
      set(newValue) {
        this.$emit("selected-job-class", newValue);
        this.doLoadJobTitles(newValue);
      }
    },
    selectedJobTitleId: {
      get() {
        return this.jobTitleId;
      },
      set(newValue) {
        this.$emit("selected-job-title", newValue);
      }
    }
  },
  methods: {
    doLoad(val) {
      if (!val) {
        this.jobClasses = [];
        return;
      }
      const nameFilter = this.searchTerm && this.searchTerm != "" ? "&filter[LocalJobClass.LocalJobClassName]=" + this.searchTerm : "";
      axios.get("/api/v2/localJobClass?per_page=200&filter[LocalJobClass.UnitId]=" + this.unitId + nameFilter + "&sort=LocalJobClassName").then((response) => {
        this.jobClasses = response.data.data;
      });
    },
    doLoadJobTitles(jobClassId) {
      if (!jobClassId) {
        this.jobTitles = [];
        return;
      }
      axios.get("/api/v2/jobTitle?per_page=200&filter[LocalJobClassId]=" + jobClassId + "&sort=JobTitleName").then((response) => {
        this.jobTitles = response.data.data;
      });
    }
  },
  watch: {
    unitId(val) {
      this.doLoad(val);
      return val;
    },
    jobClassId(val) {
      this.doLoadJobTitles(val);
    },
    searchTerm(val) {
      this.doLoad(this.unitId);
    }
  }
};
const _hoisted_1$V = {
  key: 0,
  class: "text-red"
};
function _sfc_render$1j(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VRow, null, {
        default: withCtx(() => _cache[3] || (_cache[3] = [
          createBaseVNode(
            "h5",
            null,
            " Job Details ",
            -1
            /* HOISTED */
          )
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VAutocomplete, {
            modelValue: $options.localJobClassId,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $options.localJobClassId = $event),
            search: _ctx.searchTerm,
            "onUpdate:search": _cache[1] || (_cache[1] = ($event) => _ctx.searchTerm = $event),
            items: _ctx.jobClasses,
            "item-title": "LocalJobClassName",
            "item-value": "LocalJobClassId",
            "persistent-hint": "",
            rules: [$props.rules.required],
            variant: "underlined"
          }, {
            label: withCtx(() => [
              $props.rules.required ? (openBlock(), createElementBlock("span", _hoisted_1$V, "* ")) : createCommentVNode("v-if", true),
              _cache[4] || (_cache[4] = createTextVNode("Local Job Class "))
            ]),
            _: 1
            /* STABLE */
          }, 8, ["modelValue", "search", "items", "rules"])
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VAutocomplete, {
            clearable: "",
            label: "Job Title",
            items: _ctx.jobTitles,
            "item-value": "JobTitleId",
            "item-title": "JobTitleName",
            modelValue: $options.selectedJobTitleId,
            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $options.selectedJobTitleId = $event),
            variant: "underlined"
          }, null, 8, ["items", "modelValue"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const JobClassChooser = /* @__PURE__ */ _export_sfc(_sfc_main$1j, [["render", _sfc_render$1j], ["__file", "/var/www/html/resources/js/components/Employer/Partial/JobClassChooser.vue"]]);
const _sfc_main$1i = {
  name: "WorkLocationChooser",
  props: {
    value: {
      required: true
    },
    employerId: {
      required: true
    },
    rules: {
      default: ""
    }
  },
  data: () => ({
    isLoading: false,
    items: [],
    levels: []
  }),
  methods: {
    doLoad(val) {
      if (!val) {
        this.items = [];
        return;
      }
      this.items = [];
      axios.get("/api/v2/aggregate/employer/worklocation/" + this.employerId).then((response) => {
        if (!response.data.data) {
          return;
        }
        for (const label in response.data.data) {
          if (!response.data.data.hasOwnProperty(label)) {
            continue;
          }
          this.items.push({
            label,
            value: null,
            items: response.data.data[label]
          });
        }
        this.setupValues();
        this.items = [...this.items];
      });
    },
    workLocationSelected(worklocationId) {
      this.$emit("selected-work-location", worklocationId);
      this.doLoad(this.employerId);
    },
    doFilter(itemsPerLevel, ParentWorkLocationId, level) {
      var items = [];
      for (const item of itemsPerLevel.items) {
        if (item.ParentWorkLocationId === ParentWorkLocationId) {
          items.push(item);
        }
      }
      this.items[level].items = items;
    },
    setupValues() {
      if (!this.value) {
        return;
      }
      let level = 0;
      for (const itemsPerType of this.items) {
        for (const item of itemsPerType.items) {
          if (item.WorkLocationId === this.value) {
            itemsPerType.value = this.value;
            if (level > 0 && item.ParentWorkLocationId) {
              this.setupLevelValue(this.items[level - 1], item.ParentWorkLocationId, level - 1);
            }
          }
          if (item.WorkLocationId === itemsPerType.value) {
            if (this.items.length > level) {
              this.doFilter(this.items[level + 1], item.WorkLocationId, level + 1);
            }
            if (this.items.length > level + 1) {
              this.doFilter(this.items[level + 2], item.WorkLocationId, level + 2);
            }
          }
        }
        level++;
      }
    },
    setupLevelValue(itemsPerLevel, value, level) {
      itemsPerLevel.value = value;
      let parentId = null;
      if (level > 0) {
        for (const item of itemsPerLevel.items) {
          if (item.WorkLocationId === value && item.ParentWorkLocationId) {
            parentId = item.ParentWorkLocationId;
          }
          if (item.WorkLocationId === value) {
            if (this.items.length > level) {
              this.doFilter(this.items[level + 1], item.WorkLocationId, level + 1);
            }
          }
        }
        if (parentId) {
          this.setupLevelValue(this.items[level - 1], parentId, level - 1);
        }
      } else {
        for (const item of itemsPerLevel.items) {
          if (item.WorkLocationId === value) {
            if (this.items.length > level) {
              this.doFilter(this.items[level + 1], item.WorkLocationId, level + 1);
            }
          }
        }
      }
    }
  },
  watch: {
    employerId(val) {
      this.doLoad(val);
      return val;
    }
  }
};
function _sfc_render$1i(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VRow, null, {
        default: withCtx(() => _cache[1] || (_cache[1] = [
          createBaseVNode(
            "h5",
            null,
            " Work Location ",
            -1
            /* HOISTED */
          )
        ])),
        _: 1
        /* STABLE */
      }),
      (openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.items, (item) => {
          return openBlock(), createBlock(
            VRow,
            mergeProps({ ref_for: true }, item, {
              key: item.label
            }),
            {
              default: withCtx(() => [
                createVNode(VAutocomplete, {
                  clearable: "",
                  label: item.label,
                  items: item.items,
                  "item-value": "WorkLocationId",
                  "item-title": "WorkLocationName",
                  modelValue: item.value,
                  "onUpdate:modelValue": [
                    ($event) => item.value = $event,
                    _cache[0] || (_cache[0] = ($event) => $options.workLocationSelected($event))
                  ],
                  variant: "underlined"
                }, null, 8, ["label", "items", "modelValue", "onUpdate:modelValue"])
              ]),
              _: 2
              /* DYNAMIC */
            },
            1040
            /* FULL_PROPS, DYNAMIC_SLOTS */
          );
        }),
        128
        /* KEYED_FRAGMENT */
      ))
    ]),
    _: 1
    /* STABLE */
  });
}
const WorkLocationChooser = /* @__PURE__ */ _export_sfc(_sfc_main$1i, [["render", _sfc_render$1i], ["__file", "/var/www/html/resources/js/components/Employer/Partial/WorkLocationChooser.vue"]]);
const _sfc_main$1h = {
  name: "WorkStructureChooser",
  props: {
    value: {
      required: true
    },
    employerId: {
      required: true
    },
    rules: {
      default: ""
    }
  },
  data: () => ({
    isLoading: false,
    items: [],
    levels: []
  }),
  methods: {
    doLoad(val) {
      if (!val) return;
      this.items = [];
      axios.get("/api/v2/aggregate/employer/workstructure/" + this.employerId).then((response) => {
        if (!response.data.data) {
          return;
        }
        for (const label in response.data.data) {
          if (!response.data.data.hasOwnProperty(label)) {
            continue;
          }
          this.items.push({
            label,
            value: null,
            items: response.data.data[label]
          });
        }
        this.setupValues();
        this.items = [...this.items];
      });
    },
    workStructureSelected(workStructureId) {
      this.$emit("selected-work-structure", workStructureId);
      this.doLoad(this.employerId);
    },
    doFilter(itemsPerLevel, parentWorkStructureId, level) {
      var items = [];
      for (const item of itemsPerLevel.items) {
        if (item.ParentWorkStructureId === parentWorkStructureId) {
          items.push(item);
        }
      }
      this.items[level].items = items;
    },
    setupValues() {
      if (!this.value) {
        return;
      }
      let level = 0;
      for (const itemsPerType of this.items) {
        for (const item of itemsPerType.items) {
          if (item.WorkStructureId === this.value) {
            itemsPerType.value = this.value;
            if (level > 0 && item.ParentWorkStructureId) {
              this.setupLevelValue(this.items[level - 1], item.ParentWorkStructureId, level - 1);
            }
          }
          if (item.WorkStructureId === itemsPerType.value) {
            if (this.items.length > level) {
              this.doFilter(this.items[level + 1], item.WorkStructureId, level + 1);
            }
            if (this.items.length > level + 1) {
              this.doFilter(this.items[level + 2], item.WorkStructureId, level + 2);
            }
          }
        }
        level++;
      }
    },
    setupLevelValue(itemsPerLevel, value, level) {
      itemsPerLevel.value = value;
      let parentId = null;
      if (level > 0) {
        for (const item of itemsPerLevel.items) {
          if (item.WorkStructureId === value && item.ParentWorkStructureId) {
            parentId = item.ParentWorkStructureId;
          }
          if (item.WorkStructureId === value) {
            if (this.items.length > level) {
              this.doFilter(this.items[level + 1], item.WorkStructureId, level + 1);
            }
          }
        }
        if (parentId) {
          this.setupLevelValue(this.items[level - 1], parentId, level - 1);
        }
      } else {
        for (const item of itemsPerLevel.items) {
          if (item.WorkStructureId === value) {
            if (this.items.length > level) {
              this.doFilter(this.items[level + 1], item.WorkStructureId, level + 1);
            }
          }
        }
      }
    }
  },
  watch: {
    employerId(val) {
      this.doLoad(val);
      return val;
    }
  }
};
function _sfc_render$1h(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VRow, null, {
        default: withCtx(() => _cache[1] || (_cache[1] = [
          createBaseVNode(
            "h5",
            null,
            " Work Structure ",
            -1
            /* HOISTED */
          )
        ])),
        _: 1
        /* STABLE */
      }),
      (openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.items, (item) => {
          return openBlock(), createBlock(
            VRow,
            mergeProps({ ref_for: true }, item, {
              key: item.label
            }),
            {
              default: withCtx(() => [
                createVNode(VAutocomplete, {
                  clearable: "",
                  label: item.label,
                  items: item.items,
                  "item-value": "WorkStructureId",
                  "item-title": "WorkStructureName",
                  modelValue: item.value,
                  "onUpdate:modelValue": [
                    ($event) => item.value = $event,
                    _cache[0] || (_cache[0] = ($event) => $options.workStructureSelected($event))
                  ],
                  variant: "underlined"
                }, null, 8, ["label", "items", "modelValue", "onUpdate:modelValue"])
              ]),
              _: 2
              /* DYNAMIC */
            },
            1040
            /* FULL_PROPS, DYNAMIC_SLOTS */
          );
        }),
        128
        /* KEYED_FRAGMENT */
      ))
    ]),
    _: 1
    /* STABLE */
  });
}
const WorkStructureChooser = /* @__PURE__ */ _export_sfc(_sfc_main$1h, [["render", _sfc_render$1h], ["__file", "/var/www/html/resources/js/components/Employer/Partial/WorkStructureChooser.vue"]]);
const _sfc_main$1g = {
  name: "CompareIndividualComponent",
  components: {
    JobClassChooser,
    WorkStructureChooser,
    WorkLocationChooser,
    StateTerritorySelectComponent,
    StateTerritorySelectComponent2
  },
  data() {
    return {
      id: 0,
      individual: {},
      individualAffiliate: {},
      individualCope: {},
      templateId: 0,
      flipped: false,
      loading: false,
      notAllowed: false,
      valid: true,
      submissionData: [],
      editableIndividual: {},
      prefixes: [],
      suffixes: [],
      item: null,
      index: null,
      FirstName: null,
      individualFirstName: null,
      submissionId: null,
      years: [],
      months: [
        {
          label: "January",
          value: 1
        },
        {
          label: "February",
          value: 2
        },
        {
          label: "March",
          value: 3
        },
        {
          label: "April",
          value: 4
        },
        {
          label: "May",
          value: 5
        },
        {
          label: "June",
          value: 6
        },
        {
          label: "July",
          value: 7
        },
        {
          label: "August",
          value: 8
        },
        {
          label: "September",
          value: 9
        },
        {
          label: "October",
          value: 10
        },
        {
          label: "November",
          value: 11
        },
        {
          label: "December",
          value: 12
        }
      ],
      dates: [],
      genders: [],
      maritalStatus: [],
      educationLevels: [],
      dependents: [],
      unionRelationships: [],
      editableIndividualAffiliate: {},
      editableIndividualCope: {},
      selectedUnionRelationshipTypeId: 2,
      oldUnionRelationshipTypeId: null,
      selectedAffiliateName: "",
      stopReasons: [],
      dialog: false,
      dialog2: false,
      duesCategories: [],
      paymentMethods: [],
      paymentFrequencies: [],
      basicMessage: "",
      demographicMessage: "",
      unionRelationshipMessage: "",
      emailMessage: "",
      email2Message: "",
      phoneMessage: "",
      phone2Message: "",
      phone3Message: "",
      addressMessage: "",
      billingAddressMessage: "",
      basicDisabled: false,
      demographicsDisabled: false,
      unionDisabled: false,
      emailDisabled: false,
      email2Disabled: false,
      phoneDisabled: false,
      phone2Disabled: false,
      phone3Disabled: false,
      addressDisabled: false,
      billingAddressDisabled: false,
      employers: [],
      subjects: [],
      units: [],
      editableIndividualEmployer: {},
      WorkStructureId: null,
      WorkLocationId: null,
      selectedEmployerId: null,
      selectedUnitId: null,
      selectedLocalJobClassId: null,
      selectedJobTitleId: null,
      selectedEmployerName: "",
      selectedUnitName: "",
      employerDisabled: false,
      employerMessage: "",
      individualEmployer: {},
      individualEmployers: [],
      individualAddress: {},
      individualHomeAddresses: [],
      individualBillingAddress: {},
      individualBillingAddresses: [],
      editableIndividualAddress: {},
      editableIndividualBillingAddress: {},
      addressTypes: [],
      emailTypes: [],
      phoneTypes: [],
      contactRestrictions: [],
      individualEmails: [],
      individualEmail1: {},
      individualEmail2: {},
      individualHomeEmails: [],
      individualWorkEmails: [],
      editableIndividualEmail1: {},
      editableIndividualEmail2: {},
      phoneCountries: [],
      individualPhones: [],
      individualPhone1: {},
      individualPhone2: {},
      individualPhone3: {},
      individualHomePhones: [],
      individualWorkPhones: [],
      individualMobilePhones: [],
      editableIndividualPhone1: {},
      editableIndividualPhone2: {},
      editableIndividualPhone3: {},
      homePhoneCountryId: 4,
      mobilePhoneCountryId: 4,
      workPhoneCountryId: 4,
      homePhoneNumber: "",
      mobilePhoneNumber: "",
      workPhoneNumber: "",
      rulesHomePhoneNumber: "",
      rulesMobilePhoneNumber: "",
      rulesWorkPhoneNumber: "",
      hideCancelBtn: false,
      hideBillingCancelBtn: false,
      showCope: true,
      employerRules: {
        required: (value) => !!value || "Required."
      },
      isEduesEligible: false,
      overlay: true
    };
  },
  created() {
    window.addEventListener("beforeunload", (event) => {
      const message = "";
      if (event) {
        console.log(message);
        event.preventDefault();
        event.returnValue = message;
      }
      return message;
    });
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  async mounted() {
    this.individualAffiliate.UnionRelationshipTypeId = this.selectedUnionRelationshipTypeId;
    this.editableIndividualAffiliate.UnionRelationshipTypeId = this.selectedUnionRelationshipTypeId;
    if (this.$route.query.submissionId) {
      this.getFormTemplateDetailsFromSubmission(this.$route.query.submissionId);
    }
    if (this.$route.params.id) {
      this.id = this.$route.params.id;
      await this.getDataFromApi();
    } else {
      this.loading = false;
    }
    if (this.$route.query.submissionId) {
      this.isSubmissionEDuesEligible(this.$route.query.submissionId);
      this.getSubmissionDataFromApi(this.$route.query.submissionId);
    }
    axios.get("/api/v2/gender").then((response) => {
      this.genders = response.data.data;
    });
    axios.get("/api/v2/maritalStatus").then((response) => {
      this.maritalStatus = response.data.data;
    });
    axios.get("/api/v3/memberforms/countries").then((response) => {
      this.phoneCountries = response.data;
    });
    if (this.selectedAffiliate) {
      axios.get("/api/v2/localEducationLevel?filter[AffiliateId]=" + this.selectedAffiliate).then((response) => {
        this.educationLevels = response.data.data;
      });
      axios.get("/api/v2/unionRelationshipType").then((response) => {
        this.unionRelationships = response.data.data;
      });
      axios.get("/api/v2/aggregate/employer/byaffiliate/" + this.selectedAffiliate).then((response) => {
        this.employers = response.data.data;
      });
      axios.get("/api/v2/subject?sort=SubjectName&filter[AffiliateId]" + this.selectedAffiliate).then((response) => {
        this.subjects = response.data.data;
      });
    }
    axios.get("/api/v2/paymentMethod").then((response) => {
      this.paymentMethods = response.data.data;
    });
    axios.get("/api/v2/paymentFrequency").then((response) => {
      this.paymentFrequencies = response.data.data;
    });
    axios.get("/api/v2/custom/individual/stop-reasons/" + this.individualAffiliate.UnionRelationshipTypeId).then((response) => {
      this.stopReasons = response.data.data;
    });
    this.setupStaticData();
    axios.get("/api/v2/IndividualAddressType").then((response) => {
      this.addressTypes = response.data.data;
    });
    axios.get("/api/v2/IndividualEmailType").then((response) => {
      this.emailTypes = response.data.data;
    });
    axios.get("/api/v2/IndividualPhoneType").then((response) => {
      this.phoneTypes = response.data.data;
    });
    axios.get("/api/v2/ContactRestriction").then((response) => {
      this.contactRestrictions = response.data.data;
    }).finally(() => {
      this.overlay = false;
    });
    console.log(this.individualPhones);
  },
  watch: {
    individualAffiliate: {
      handler(value) {
        this.individualAffiliate = value;
        this.editableIndividualAffiliate = clone(value);
        console.log(this.editableIndividualAffiliate);
        if (this.editableIndividualAffiliate.StartDate) {
          this.editableIndividualAffiliate.StartDate = this.editableIndividualAffiliate.StartDate.split("T")[0];
        }
        if (this.editableIndividualAffiliate.EndDate) {
          this.editableIndividualAffiliate.EndDate = this.editableIndividualAffiliate.EndDate.split("T")[0];
        }
        this.setupFormData();
        if (this.individualAffiliate.UnionRelationshipTypeId) {
          this.selectedUnionRelationshipTypeId = this.individualAffiliate.UnionRelationshipTypeId;
          const memberTemplates = [1, 2, 4, 5, 7];
          if (memberTemplates.includes(parseInt(this.templateId, 10))) {
            this.selectedUnionRelationshipTypeId = 2;
          }
        }
      }
    },
    individual: {
      deep: true,
      immediate: false,
      handler(newVal, oldVal) {
        this.$nextTick(() => {
          this.individual = newVal;
        });
      }
    },
    homePhoneCountryId: {
      handler(value) {
        this.editableIndividualPhone1.CountryId = value;
        this.rulesHomePhoneNumber = this.getPhoneRules(value);
      }
    },
    mobilePhoneCountryId: {
      handler(value) {
        this.editableIndividualPhone2.CountryId = value;
        this.rulesMobilePhoneNumber = this.getPhoneRules(value);
      }
    },
    workPhoneCountryId: {
      handler(value) {
        this.editableIndividualPhone3.CountryId = value;
        this.rulesWorkPhoneNumber = this.getPhoneRules(value);
      }
    },
    homePhoneNumber() {
      if (this.homePhoneNumber !== "") {
        this.homePhoneNumber = this.formatPhoneNumber(this.homePhoneNumber, this.homePhoneCountryId);
        this.editableIndividualPhone1.PhoneNumber = this.revertPhoneNumberFormat(this.homePhoneNumber);
      }
    },
    mobilePhoneNumber() {
      if (this.mobilePhoneNumber !== "") {
        this.mobilePhoneNumber = this.formatPhoneNumber(this.mobilePhoneNumber, this.mobilePhoneCountryId);
        this.editableIndividualPhone2.PhoneNumber = this.revertPhoneNumberFormat(this.mobilePhoneNumber);
      }
    },
    workPhoneNumber() {
      if (this.workPhoneNumber !== "") {
        this.workPhoneNumber = this.formatPhoneNumber(this.workPhoneNumber, this.workPhoneCountryId);
        this.editableIndividualPhone3.PhoneNumber = this.revertPhoneNumberFormat(this.workPhoneNumber);
      }
    },
    selectedUnionRelationshipTypeId: {
      handler(value) {
        this.editableIndividualAffiliate.UnionRelationshipTypeId = value;
        console.log(this.editableIndividualAffiliate);
      }
    },
    selectedEmployerId: {
      handler(value) {
        if (value && value !== this.editableIndividualEmployer.EmployerId) {
          this.editableIndividualEmployer.EmployerId = value;
          this.loadOptions(value);
        }
        return value;
      },
      deep: true
    },
    selectedUnitId: {
      handler(value) {
        if (value && value !== this.editableIndividualEmployer.UnitId) {
          this.editableIndividualEmployer.UnitId = value;
          this.selectedLocalJobClassId = null;
          this.selectedJobTitleId = null;
          console.log("Unit", this.editableIndividualEmployer);
        }
      }
    },
    selectedLocalJobClassId: {
      handler(value) {
        if (value && value !== this.editableIndividualEmployer.LocalJobClassId) {
          this.editableIndividualEmployer.LocalJobClassId = value;
          this.selectedJobTitleId = null;
          console.log("LocalJobClass", this.editableIndividualEmployer);
        }
      }
    },
    selectedJobTitleId: {
      handler(value) {
        if (value && value !== this.editableIndividualEmployer.JobTitleId) {
          this.editableIndividualEmployer.JobTitleId = value;
          console.log("JobTitle", this.editableIndividualEmployer);
        }
      }
    },
    $route(to, from) {
      this.id = to.params.id;
    }
  },
  computed: {
    computedDayOfBirth: {
      get() {
        return this.individual.DayOfBirth;
      },
      set(value) {
        this.individual.DayOfBirth = value;
      }
    },
    selectedAffiliate() {
      return this.$store.getters["user/selectedAffiliate"].AffiliateId;
    },
    rules() {
      const rules = {};
      rules["required"] = (value) => !!value || "Required.";
      rules["phone"] = (value) => value ? /^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3}[\s.-]\d{4}$/.test(value) || "Please enter a valid phone number." : true;
      rules["copeAmount"] = (value) => this.editableIndividualCope.CopePaymentMethodId || this.editableIndividualCope.CopePaymentFrequencyId ? !!value || "Required" : true;
      rules["copeDecimal"] = (value) => value ? /^[+-]?(?=.?\d)\d*(\.\d{0,3})?/gm.test(value) || "You cannot add more than 3 decimals" : true;
      rules["stopReasonEndDate"] = (value) => this.editableIndividualAffiliate.IndividualDeactivationReasonId ? !!value || "Required" : true;
      rules["stopReason"] = (value) => this.editableIndividualAffiliate.EndDate ? !!value || "Required" : true;
      rules["startEnd"] = (value) => value && this.editableIndividualAffiliate.EndDate ? compareAsc(value, this.editableIndividualAffiliate.EndDate) < 0 || "Start date should be before end date" : true;
      rules["endStart"] = (value) => value && this.editableIndividualAffiliate.StartDate ? compareAsc(value, this.editableIndividualAffiliate.StartDate) > 0 || "Start date should be before end date" : true;
      return rules;
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    },
    stateTerritories() {
      this.stateTerritoriesList = this.$store.getters["stateTerritory/stateTerritories"];
      return this.stateTerritoriesList;
    }
  },
  methods: {
    async getDataFromApi() {
      this.loading = true;
      this.oldUnionRelationshipTypeId = 0;
      return await axios.get("/api/v2/individual/" + this.id + "?include=individualAffiliates.Affiliate,Gender,MaritalStatus,individualEducationLevels,individualEducationLevels.LocalEducationLevel,individualMembers,activeindividualAffiliates.UnionRelationshipType,activeIndividualAffiliates.LocalDuesCategory,individualAddressesOrdered,individualAddressesOrdered.StateTerritory,individualEmailsOrdered,individualPhonesOrdered,activeIndividualEmployers,activeIndividualEmployers.JobTitle,activeIndividualEmployers.Employer,activeIndividualEmployers.Employer.Chapter,individualQuickComments.IndividualAssessment,PoliticalParty,individualCope,individualEmployers,activeIndividualEmployers.LocalJobClass,activeIndividualEmployers.LocalJobClass.Unit,activeIndividualEmployers.WorkLocation,activeIndividualEmployers.WorkStructure").then((response) => {
        this.individual = response.data.data;
        if (this.individual.activeIndividualAffiliates && this.individual.activeIndividualAffiliates.length > 0) {
          this.individualAffiliate = this.individual.activeIndividualAffiliates[0];
          this.individualAffiliate.StartDate = format(this.individualAffiliate.StartDate, "yyyy-MM-dd");
          if (this.individual.individualCope && this.individual.individualCope.length > 0) {
            this.individualCope = this.individual.individualCope[0];
          }
          let MemberId = "";
          for (let i = 0; i < this.individual.individualMembers.length; i++) {
            const member = this.individual.individualMembers[i].MemberId;
            MemberId = MemberId + "," + member;
          }
          this.individualAffiliate.MemberId = MemberId;
          let Unit = "";
          for (let i = 0; i < this.individual.individualEmployers.length; i++) {
            if (this.individual.individualEmployers[i].hasOwnProperty("LocalJobClass")) {
              const LocalJobClass = this.individual.individualEmployers[i].LocalJobClass;
              const unitObj = LocalJobClass.Unit;
              Unit = Unit + "," + unitObj.UnitName;
            }
          }
          this.individualAffiliate.Unit = Unit;
          this.oldUnionRelationshipTypeId = this.individualAffiliate.UnionRelationshipTypeId;
        }
        this.individualFirstName = this.individual.FirstName;
        this.individualEmployers = this.individual.activeIndividualEmployers;
        for (let i = 0; i < this.individual.activeIndividualEmployers.length; i++) {
          const individualEmployer = this.individual.activeIndividualEmployers[i];
          individualEmployer.HireDate = format(individualEmployer.HireDate, "yyyy-MM-dd");
          individualEmployer.StartDate = format(individualEmployer.StartDate, "yyyy-MM-dd");
          if (individualEmployer.EmployerId) {
            individualEmployer.selectedEmployerName = individualEmployer.Employer ? individualEmployer.Employer.EmployerName : "";
            const unitObj = individualEmployer.LocalJobClass ? individualEmployer.LocalJobClass.Unit : null;
            individualEmployer.selectedUnitName = unitObj ? unitObj.UnitName : null;
            individualEmployer.UnitId = individualEmployer.LocalJobClass ? individualEmployer.LocalJobClass.UnitId : null;
            individualEmployer.LocalJobClassName = individualEmployer.LocalJobClass ? individualEmployer.LocalJobClass.LocalJobClassName : "";
          }
          if (individualEmployer.WorkLocation) {
            individualEmployer.WorkLocationName = individualEmployer.WorkLocation.WorkLocationName;
          }
          if (individualEmployer.WorkStructure) {
            individualEmployer.WorkStructureName = individualEmployer.WorkStructure.WorkStructureName;
          }
        }
        this.individualAddress = this.individual.individualAddressesOrdered ? this.getIndividualAddressByType(1, this.individual.individualAddressesOrdered) : {};
        this.individualHomeAddresses = this.individual.individualAddressesOrdered ? this.getIndividualAddressesByType(1, this.individual.individualAddressesOrdered) : [];
        if (this.individualAddress) {
          this.individualAddress.StateTerritoryName = this.individualAddress.StateTerritory ? this.individualAddress.StateTerritory.StateTerritoryName : "";
        }
        this.individualBillingAddress = this.individual.individualAddressesOrdered ? this.getIndividualAddressByType(3, this.individual.individualAddressesOrdered) : {};
        this.individualBillingAddresses = this.individual.individualAddressesOrdered ? this.getIndividualAddressesByType(3, this.individual.individualAddressesOrdered) : [];
        this.individualBillingAddress.StateTerritoryName = this.individualBillingAddress.StateTerritory ? this.individualBillingAddress.StateTerritory.StateTerritoryName : "";
        this.editableIndividualAddress = clone(this.individualAddress);
        this.editableIndividualAddress ? this.editableIndividualAddress.IndividualAddressTypeId = 1 : "";
        this.editableIndividualBillingAddress = clone(this.individualBillingAddress);
        let individualEmailsTemp = this.individual.individualEmailsOrdered;
        this.individualEmail1.IndividualEmailTypeId = 1;
        this.individualEmail2.IndividualEmailTypeId = 2;
        for (let i = 0; i < individualEmailsTemp.length; i++) {
          if (individualEmailsTemp[i].IndividualEmailTypeId == 1) {
            this.individualEmail1 = individualEmailsTemp[i];
          }
          if (individualEmailsTemp[i].IndividualEmailTypeId == 2) {
            this.individualEmail2 = individualEmailsTemp[i];
          }
        }
        this.individualEmails.push(this.individualEmail1);
        this.individualEmails.push(this.individualEmail2);
        this.individualHomeEmails = this.individual.individualEmailsOrdered ? this.getIndividualEmailsByType(1, this.individual.individualEmailsOrdered) : [];
        this.individualWorkEmails = this.individual.individualEmailsOrdered ? this.getIndividualEmailsByType(2, this.individual.individualEmailsOrdered) : [];
        let individualPhonesTemp = this.individual.individualPhonesOrdered;
        this.individualPhone1.IndividualPhoneTypeId = 1;
        this.individualPhone2.IndividualPhoneTypeId = 2;
        this.individualPhone3.IndividualPhoneTypeId = 3;
        for (let i = 0; i < individualPhonesTemp.length; i++) {
          if (individualPhonesTemp[i].IndividualPhoneTypeId == 1) {
            this.individualPhone1 = individualPhonesTemp[i];
            this.individualPhone1.isTextAllowed = individualPhonesTemp[i].CanTextRestrictionId ? true : false;
            this.individualPhone1.isDoNotCall = individualPhonesTemp[i].CanCallRestrictionId ? true : false;
          }
          if (individualPhonesTemp[i].IndividualPhoneTypeId == 2) {
            this.individualPhone2 = individualPhonesTemp[i];
            this.individualPhone2.isTextAllowed = individualPhonesTemp[i].CanTextRestrictionId ? true : false;
            this.individualPhone2.isDoNotCall = individualPhonesTemp[i].CanCallRestrictionId ? true : false;
          }
          if (individualPhonesTemp[i].IndividualPhoneTypeId == 3) {
            this.individualPhone3 = individualPhonesTemp[i];
            this.individualPhone3.isTextAllowed = individualPhonesTemp[i].CanTextRestrictionId ? true : false;
            this.individualPhone3.isDoNotCall = individualPhonesTemp[i].CanCallRestrictionId ? true : false;
          }
        }
        this.individualPhones.push(this.individualPhone1);
        this.individualPhones.push(this.individualPhone2);
        this.individualPhones.push(this.individualPhone3);
        this.addPhoneRestrictionAttributes(this.individual.individualPhonesOrdered);
        this.individualHomePhones = this.individual.individualPhonesOrdered ? this.getIndividualPhonesByType(1, this.individual.individualPhonesOrdered) : [];
        this.individualWorkPhones = this.individual.individualPhonesOrdered ? this.getIndividualPhonesByType(2, this.individual.individualPhonesOrdered) : [];
        this.individualMobilePhones = this.individual.individualPhonesOrdered ? this.getIndividualPhonesByType(3, this.individual.individualPhonesOrdered) : [];
        this.setupFormData();
      }).catch((err) => {
      }).finally(() => {
        this.loading = false;
      });
    },
    addPhoneRestrictionAttributes(phones) {
      for (const phone of phones) {
        phone.isTextAllowed = phone.CanTextRestrictionId == 1 ? true : false;
        phone.isDoNotCall = phone.CanCallRestrictionId == 1 ? false : true;
      }
    },
    formatPhoneNumber(phoneNumber, phoneCountryId) {
      const formatApplicableCountryIds = [2, 4];
      if (phoneNumber && phoneNumber !== void 0 && phoneNumber !== null && phoneNumber != "") {
        if (formatApplicableCountryIds.includes(phoneCountryId)) {
          const x2 = phoneNumber.replace(/\D/g, "").match(/(\d{0,3})(\d{0,3})(\d{0,4})/);
          return !x2[2] ? x2[1] : `(${x2[1]}) ${x2[2]}-${x2[3]}`;
        }
      }
      return phoneNumber;
    },
    revertPhoneNumberFormat(formattedPhoneNumber) {
      if (formattedPhoneNumber && formattedPhoneNumber !== void 0 && formattedPhoneNumber !== null && formattedPhoneNumber != "") {
        return formattedPhoneNumber.replace("(", "").replace(")", "").replace("-", "").replace(" ", "");
      }
      return formattedPhoneNumber;
    },
    getSubmissionDataFromApi(id) {
      this.submissionId = id;
      let url = "/api/v3/memberforms/admin/submission/" + id;
      return axios.get(url).then((response) => {
        const submissionDate = response.data.CreatedAt;
        this.submissionData = response.data.FormSubmissionData;
        const form = response.data.Form;
        if (form.form_template_id == 1 || form.form_template_id == 4) {
          this.showCope = false;
        }
        this.FirstName = this.getSubmissionValue("firstName").data_value;
        this.editableIndividual.FirstName = this.getSubmissionValue("firstName").data_value;
        this.editableIndividual.LastName = this.getSubmissionValue("lastName").data_value;
        if (this.getSubmissionValue("middleName")) {
          this.editableIndividual.MiddleName = this.getSubmissionValue("middleName").data_value;
        }
        if (this.getSubmissionValue("preferredName")) {
          this.editableIndividual.PreferredName = this.getSubmissionValue("preferredName").data_value;
        }
        if (this.getSubmissionValue("dateOfBirth")) {
          const dateOfBirth = this.getSubmissionValue("dateOfBirth").data_value;
          var [y, m, d] = dateOfBirth.split("-");
          this.editableIndividual.YearOfBirth = parseInt(y);
          this.editableIndividual.MonthOfBirth = parseInt(m);
          this.editableIndividual.DayOfBirth = parseInt(d);
        }
        this.editableIndividualAffiliate.PaymentFrequencyId = null;
        this.editableIndividualCope.CopePaymentFrequencyId = this.individualCope.CopePaymentFrequencyId;
        if (this.getSubmissionValue("LocalDuesCategory")) {
          this.individual.selectedDuesCategory = parseInt(this.getSubmissionValue("LocalDuesCategory").data_value);
          this.editableIndividualAffiliate.LocalDuesCategoryId = parseInt(this.getSubmissionValue("LocalDuesCategory").data_value);
          const LocalDuesCategoryIdObj = this.getLocalDuesCategory(this.individual.selectedDuesCategory);
          if (LocalDuesCategoryIdObj && LocalDuesCategoryIdObj.PaymentFrequency) {
            if (this.individualAffiliate.PaymentFrequencyId == null || this.individualAffiliate.PaymentFrequencyId == "") {
              this.editableIndividualAffiliate.PaymentFrequencyId = LocalDuesCategoryIdObj.PaymentFrequency.PaymentFrequencyId;
            }
            if (this.individualCope.PaymentFrequencyId == null || this.individualCope.PaymentFrequencyId == "") {
              this.editableIndividualCope.CopePaymentFrequencyId = LocalDuesCategoryIdObj.PaymentFrequency.PaymentFrequencyId;
            }
          }
        }
        if (this.individualAffiliate.PaymentMethodId) {
          this.editableIndividualAffiliate.PaymentMethodId = this.individualAffiliate.PaymentMethodId;
        } else {
          this.editableIndividualAffiliate.PaymentMethodId = 1;
        }
        if (parseInt(this.templateId, 10) === 7) {
          this.editableIndividualAffiliate.PaymentMethodId = 2;
        }
        if (submissionDate) {
          this.editableIndividualAffiliate.StartDate = format(subDays(submissionDate), "yyyy-MM-dd");
          this.editableIndividualAffiliate.EndDate = format(subDays(submissionDate), "yyyy-MM-dd");
        }
        if (this.getSubmissionValue("copeAmount")) {
          this.editableIndividualCope.CopeAmount = this.getSubmissionValue("copeAmount").data_value.replace("$", "");
        }
        if (this.getSubmissionValue("employer")) {
          const EmployerId = parseInt(this.getSubmissionValue("employer").data_value);
          if (this.getIndividualEmployer(EmployerId)) {
            this.individualEmployer = this.getIndividualEmployer(EmployerId);
            this.editableIndividualEmployer = clone(this.individualEmployer);
            this.selectedUnitId = this.editableIndividualEmployer.LocalJobClass ? this.editableIndividualEmployer.LocalJobClass.UnitId : null;
            this.selectedLocalJobClassId = this.editableIndividualEmployer.LocalJobClass ? this.editableIndividualEmployer.LocalJobClassId : null;
          } else {
            if (this.individualEmployers.length > 0) {
              this.selectedLocalJobClassId = this.editableIndividualEmployer.LocalJobClassId = this.individualEmployers[0].LocalJobClassId ? this.individualEmployers[0].LocalJobClassId : null;
              this.selectedUnitId = this.individualEmployers[0].LocalJobClass ? this.individualEmployers[0].LocalJobClass.UnitId : null;
            }
          }
          this.editableIndividualEmployer.EmployerId = EmployerId;
          this.selectedEmployerId = this.editableIndividualEmployer.EmployerId;
          this.loadOptions(this.editableIndividualEmployer.EmployerId);
          this.setWorkLocationId(this.editableIndividualEmployer.EmployerId);
        }
        if (this.getSubmissionValue("workLocation")) {
          this.editableIndividualEmployer.WorkLocationId = parseInt(this.getSubmissionValue("workLocation").data_value);
          this.WorkStructureId = this.editableIndividualEmployer.WorkStructureId;
          this.WorkLocationId = this.editableIndividualEmployer.WorkLocationId;
        }
        if (this.getSubmissionValue("workStructure")) {
          this.editableIndividualEmployer.WorkStructureId = parseInt(this.getSubmissionValue("workStructure").data_value);
          this.WorkStructureId = this.editableIndividualEmployer.WorkStructureId;
          this.WorkLocationId = this.editableIndividualEmployer.WorkLocationId;
        }
        if (this.getSubmissionValue("unit")) {
          this.selectedUnitId = this.editableIndividualEmployer.UnitId = parseInt(this.getSubmissionValue("unit").data_value);
        }
        if (this.getSubmissionValue("localJobClass")) {
          this.selectedLocalJobClassId = this.editableIndividualEmployer.LocalJobClassId = parseInt(this.getSubmissionValue("localJobClass").data_value);
        }
        if (this.getSubmissionValue("jobTitle")) {
          let JobTitleId = parseInt(this.getSubmissionValue("jobTitle").data_value);
          if (JobTitleId) {
            this.selectedJobTitleId = this.editableIndividualEmployer.JobTitleId = JobTitleId;
          }
        }
        if (this.getSubmissionValue("employerHireDate")) {
          this.editableIndividualEmployer.HireDate = format(subDays(this.getSubmissionValue("employerHireDate").data_value), "yyyy-MM-dd");
        } else {
          this.editableIndividualEmployer.HireDate = format(subDays(submissionDate), "yyyy-MM-dd");
        }
        if (this.getSubmissionValue("employerStartDate")) {
          this.editableIndividualEmployer.StartDate = format(subDays(this.getSubmissionValue("employerStartDate").data_value), "yyyy-MM-dd");
        } else {
          this.editableIndividualEmployer.StartDate = format(subDays(submissionDate), "yyyy-MM-dd");
        }
        if (this.getSubmissionValue("employeeID")) {
          this.editableIndividualEmployer.EmployeeId = this.getSubmissionValue("employeeID").data_value;
        }
        if (this.getSubmissionValue("addressLine1")) {
          this.editableIndividualAddress.AddressLine1 = this.getSubmissionValue("addressLine1").data_value;
          this.editableIndividualAddress.ContactSourceId = 1;
          this.editableIndividualAddress.CanSendMailRestrictionId = 1;
        }
        this.editableIndividualAddress.ContactStatusId = 4;
        if (this.getSubmissionValue("addressLine2")) {
          this.editableIndividualAddress.AddressLine2 = this.getSubmissionValue("addressLine2").data_value;
        }
        if (this.getSubmissionValue("city")) {
          this.editableIndividualAddress.City = this.getSubmissionValue("city").data_value;
        }
        if (this.getSubmissionValue("state")) {
          this.editableIndividualAddress.StateTerritoryId = parseInt(this.getSubmissionValue("state").data_value);
        }
        if (this.getSubmissionValue("zip")) {
          this.editableIndividualAddress.PostalCode = this.getSubmissionValue("zip").data_value;
        }
        if (this.getSubmissionValue("addressHomePreferred")) {
          this.editableIndividualAddress.IsPreferred = this.getSubmissionValue("addressHomePreferred").data_value;
        }
        this.editableIndividualBillingAddress ? this.editableIndividualBillingAddress.IndividualAddressTypeId = 3 : "";
        if (this.getSubmissionValue("billingAddressLine1")) {
          this.editableIndividualBillingAddress.AddressLine1 = this.getSubmissionValue("billingAddressLine1").data_value;
          this.editableIndividualBillingAddress.ContactSourceId = 1;
        }
        if (this.getSubmissionValue("billingAddressLine2")) {
          this.editableIndividualBillingAddress.AddressLine2 = this.getSubmissionValue("billingAddressLine2").data_value;
        }
        if (this.getSubmissionValue("billingCity")) {
          this.editableIndividualBillingAddress.City = this.getSubmissionValue("billingCity").data_value;
        }
        if (this.getSubmissionValue("billingState")) {
          this.editableIndividualBillingAddress.StateTerritoryId = parseInt(this.getSubmissionValue("billingState").data_value);
        }
        if (this.getSubmissionValue("billingZip")) {
          this.editableIndividualBillingAddress.PostalCode = this.getSubmissionValue("billingZip").data_value;
        }
        this.editableIndividualBillingAddress.ContactStatusId = 4;
        this.editableIndividualBillingAddress.IsPreferred = false;
        this.editableIndividualBillingAddress.CanSendMailRestrictionId = 1;
        if (this.getSubmissionValue("addressBillingPreferred")) {
          this.editableIndividualBillingAddress.IsPreferred = this.getSubmissionValue("addressBillingPreferred") ? this.getSubmissionValue("addressBillingPreferred").data_value : false;
        }
        if (this.getSubmissionValue("phoneHome")) {
          let individualPhone1 = this.getIndividualPhoneByType(1);
          if (individualPhone1) {
            this.editableIndividualPhone1 = clone(individualPhone1);
          }
          this.editableIndividualPhone1.IndividualPhoneTypeId = 1;
          this.editableIndividualPhone1.ContactSourceId = 1;
          this.editableIndividualPhone1.ContactStatusId = 4;
          this.editableIndividualPhone1.CanContactRestrictionId = 1;
          this.editableIndividualPhone1.IsPreferred = false;
          this.editableIndividualPhone1.CountryId = this.homePhoneCountryId = this.getSubmissionValue("phoneHomeCountry") ? parseInt(this.getSubmissionValue("phoneHomeCountry").data_value, 0) : 4;
          this.editableIndividualPhone1.PhoneNumber = this.getSubmissionValue("phoneHome").data_value;
          this.homePhoneNumber = this.formatPhoneNumber(this.editableIndividualPhone1.PhoneNumber);
          this.rulesHomePhoneNumber = this.getPhoneRules(this.editableIndividualPhone1.CountryId);
          this.editableIndividualPhone1.Extension = this.getSubmissionValue("phoneHomeExt") ? this.getSubmissionValue("phoneHomeExt").data_value : "";
          this.editableIndividualPhone1.IsPreferred = this.getSubmissionValue("phoneHomePreferred") ? this.getSubmissionValue("phoneHomePreferred").data_value : false;
          this.editableIndividualPhone1.isTextAllowed = false;
          this.editableIndividualPhone1.isDoNotCall = false;
        }
        if (this.getSubmissionValue("phoneMobile")) {
          let individualPhone2 = this.getIndividualPhoneByType(2);
          if (individualPhone2) {
            this.editableIndividualPhone2 = clone(individualPhone2);
          }
          this.editableIndividualPhone2.IndividualPhoneTypeId = 3;
          this.editableIndividualPhone2.ContactSourceId = 1;
          this.editableIndividualPhone2.ContactStatusId = 4;
          this.editableIndividualPhone2.CanContactRestrictionId = 1;
          this.editableIndividualPhone2.CountryId = this.mobilePhoneCountryId = this.getSubmissionValue("phoneMobileCountry") ? parseInt(this.getSubmissionValue("phoneMobileCountry").data_value, 0) : 4;
          this.editableIndividualPhone2.PhoneNumber = this.getSubmissionValue("phoneMobile").data_value;
          this.mobilePhoneNumber = this.formatPhoneNumber(this.editableIndividualPhone2.PhoneNumber);
          this.rulesMobilePhoneNumber = this.getPhoneRules(this.editableIndividualPhone2.CountryId);
          this.editableIndividualPhone2.Extension = this.getSubmissionValue("phoneMobileExt") ? this.getSubmissionValue("phoneMobileExt").data_value : "";
          this.editableIndividualPhone2.IsPreferred = this.getSubmissionValue("phoneMobilePreferred") ? this.getSubmissionValue("phoneMobilePreferred").data_value : false;
          this.editableIndividualPhone2.isTextAllowed = !!(this.getSubmissionValue("agree") && this.getSubmissionValue("agree").data_value === "1");
        }
        if (this.getSubmissionValue("phoneWork")) {
          let individualPhone3 = this.getIndividualPhoneByType(3);
          if (individualPhone3) {
            this.editableIndividualPhone3 = clone(individualPhone3);
          }
          this.editableIndividualPhone3.IndividualPhoneTypeId = 2;
          this.editableIndividualPhone3.ContactSourceId = 1;
          this.editableIndividualPhone3.ContactStatusId = 4;
          this.editableIndividualPhone3.CanContactRestrictionId = 1;
          this.editableIndividualPhone3.CountryId = this.workPhoneCountryId = this.getSubmissionValue("phoneWorkCountry") ? parseInt(this.getSubmissionValue("phoneWorkCountry").data_value, 0) : 4;
          this.editableIndividualPhone3.PhoneNumber = this.getSubmissionValue("phoneWork").data_value;
          this.workPhoneNumber = this.formatPhoneNumber(this.editableIndividualPhone3.PhoneNumber);
          this.rulesWorkPhoneNumber = this.getPhoneRules(this.editableIndividualPhone3.CountryId);
          this.editableIndividualPhone3.Extension = this.getSubmissionValue("phoneWorkExt") ? this.getSubmissionValue("phoneWorkExt").data_value : "";
          this.editableIndividualPhone3.IsPreferred = this.getSubmissionValue("phoneWorkPreferred") ? this.getSubmissionValue("phoneWorkPreferred").data_value : false;
        }
        if (this.getSubmissionValue("email")) {
          let individualEmail1 = this.getIndividualEmailByType(1);
          if (individualEmail1) {
            this.editableIndividualEmail1 = clone(individualEmail1);
          }
          this.editableIndividualEmail1.IndividualEmailTypeId = 1;
          this.editableIndividualEmail1.ContactSourceId = 1;
          this.editableIndividualEmail1.ContactStatusId = 4;
          this.editableIndividualEmail1.CanContactRestrictionId = 1;
          this.editableIndividualEmail1.IsPreferred = false;
          this.editableIndividualEmail1.Email = this.getSubmissionValue("email").data_value;
          this.editableIndividualEmail1.IsPreferred = this.getSubmissionValue("emailPersonalPreferred") ? this.getSubmissionValue("emailPersonalPreferred").data_value : false;
        }
        if (this.getSubmissionValue("emailWork")) {
          let individualEmail2 = this.getIndividualEmailByType(2);
          if (individualEmail2) {
            this.editableIndividualEmail2 = clone(individualEmail2);
          }
          this.editableIndividualEmail2.IndividualEmailTypeId = 2;
          this.editableIndividualEmail2.ContactSourceId = 1;
          this.editableIndividualEmail2.ContactStatusId = 4;
          this.editableIndividualEmail2.CanContactRestrictionId = 1;
          this.editableIndividualEmail2.IsPreferred = false;
          this.editableIndividualEmail2.Email = this.getSubmissionValue("emailWork").data_value;
          this.editableIndividualEmail2.IsPreferred = this.getSubmissionValue("emailWorkPreferred") ? this.getSubmissionValue("emailWorkPreferred").data_value : false;
        }
        if (this.getSubmissionValue("Token")) {
          const paymentToken = JSON.parse(this.getSubmissionValue("Token").data_value);
          this.editableIndividualAffiliate.PaymentMethodId = paymentToken.CardDetails ? 4 : 3;
          this.editableIndividualCope.CopePaymentMethodId = paymentToken.CardDetails ? 4 : 3;
        } else {
          if (this.individualCope.CopePaymentMethodId) {
            this.editableIndividualCope.CopePaymentMethodId = this.individualCope.CopePaymentMethodId;
          } else {
            this.editableIndividualCope.CopePaymentMethodId = 1;
          }
          if (parseInt(this.templateId, 10) === 7) {
            this.editableIndividualCope.CopePaymentMethodId = 2;
          }
        }
        if (!this.editableIndividualCope.CopeAmount) {
          this.editableIndividualCope.CopePaymentMethodId = null;
          this.editableIndividualCope.CopePaymentFrequencyId = null;
        }
      }).finally(() => {
        this.loading = false;
      });
    },
    getSubmissionValue(keyt) {
      return this.submissionData.filter((data) => data.data_name === keyt)[0];
    },
    getIndividualEmployer(EmployerId) {
      return this.individualEmployers.filter((data) => data.EmployerId === EmployerId)[0];
    },
    getLocalDuesCategory(LocalDuesCategoryId) {
      return this.duesCategories.filter((data) => data.LocalDuesCategoryId === LocalDuesCategoryId)[0];
    },
    getIndividualEmailByType(typeId) {
      return this.individualEmails.filter((data) => data.IndividualEmailTypeId === typeId)[0];
    },
    getIndividualAddressByType(typeId, individualAddressesOrdered) {
      if (individualAddressesOrdered) {
        let filteredAddress = individualAddressesOrdered.filter((data) => data.IndividualAddressTypeId === typeId);
        if (filteredAddress && filteredAddress.length > 0) {
          return filteredAddress[0];
        } else {
          return {};
        }
      } else {
        return {};
      }
    },
    getIndividualAddressesByType(typeId, individualAddresses) {
      if (individualAddresses) {
        return individualAddresses.filter((data) => data.IndividualAddressTypeId === typeId);
      }
      return [];
    },
    getIndividualPhoneByType(typeId) {
      return this.individualPhones.filter((data) => data.IndividualPhoneTypeId === typeId)[0];
    },
    getIndividualPhonesByType(typeId, individualPhones) {
      if (individualPhones) {
        return individualPhones.filter((data) => data.IndividualPhoneTypeId === typeId);
      }
      return [];
    },
    getEmailTypeName(typeId) {
      const emailType = this.emailTypes.filter((data) => data.IndividualEmailTypeId === typeId)[0];
      if (emailType) {
        return emailType.IndividualEmailTypeName;
      } else {
        return "";
      }
    },
    getIndividualEmailsByType(typeId, individualEmails) {
      if (individualEmails) {
        return individualEmails.filter((data) => data.IndividualEmailTypeId === typeId);
      }
      return [];
    },
    getPhoneTypeName(typeId) {
      const phoneType = this.phoneTypes.filter((data) => data.IndividualPhoneTypeId === typeId)[0];
      if (phoneType) {
        return phoneType.IndividualPhoneTypeName;
      } else {
        return "";
      }
    },
    getPhoneRules(phoneCountryId) {
      const formatApplicableCountryIds = [2, 4];
      if (phoneCountryId && formatApplicableCountryIds.includes(parseInt(phoneCountryId, 0))) {
        return [this.rules.required, this.rules.phone];
      }
      return [this.rules.required];
    },
    onSavedIndividual(individual) {
      this.flipped = false;
      this.individual = individual;
    },
    updateBasicData() {
      this.basicMessage = "";
      let data = {
        FirstName: this.editableIndividual.FirstName,
        LastName: this.editableIndividual.LastName,
        MiddleName: this.editableIndividual.MiddleName,
        PreviousName: this.editableIndividual.PreviousName,
        PreferredName: this.editableIndividual.PreferredName,
        LocalDuesCategoryId: this.editableIndividual.selectedDuesCategory,
        ChapterId: this.editableIndividual.selectedChapter,
        PaymentMethodId: this.editableIndividual.selectedPaymentMethod,
        PaymentFrequencyId: this.editableIndividual.selectedPaymentFrequency,
        AffiliateId: this.selectedAffiliate
      };
      axios.put("/api/v2/individual/" + this.individual.IndividualId, data).then((response) => {
        this.basicMessage = "Successfully Updated Basic Information";
        this.basicDisabled = true;
        this.hideCancelBtn = true;
      }).finally();
    },
    updateDemographics() {
      this.demographicMessage = "";
      axios.put("/api/v2/individual/" + this.individual.IndividualId + "?include=individualAffiliates.Affiliate,Gender,MaritalStatus", {
        MonthOfBirth: this.editableIndividual.MonthOfBirth,
        DayOfBirth: this.editableIndividual.DayOfBirth,
        YearOfBirth: this.editableIndividual.YearOfBirth,
        GenderId: this.editableIndividual.GenderId,
        MaritalStatusId: this.editableIndividual.MaritalStatusId
      }).then((response) => {
        this.demographicMessage = "Successfully Updated Demographics";
        this.demographicsDisabled = true;
        this.hideCancelBtn = true;
      }).finally();
    },
    updateEmployer() {
      if (!this.$refs.employerForm.validate()) {
        return;
      }
      this.employerMessage = "";
      this.editableIndividualEmployer.IndividualId = this.individual.IndividualId;
      this.editableIndividualEmployer.StartDate = this.editableIndividualEmployer.StartDate ? this.editableIndividualEmployer.StartDate : formatISO(/* @__PURE__ */ new Date());
      this.editableIndividualEmployer.HireDate = this.editableIndividualEmployer.HireDate ? this.editableIndividualEmployer.HireDate : formatISO(/* @__PURE__ */ new Date());
      this.editableIndividualEmployer.CurrentlyWorking = this.editableIndividualEmployer.CurrentlyWorking ? this.editableIndividualEmployer.CurrentlyWorking : true;
      this.editableIndividualEmployer.FullTimeEquivalent = this.editableIndividualEmployer.FullTimeEquivalent ? parseInt(this.editableIndividualEmployer.FullTimeEquivalent) : 0;
      this.editableIndividualEmployer.IsPreferred = this.editableIndividualEmployer.IsPreferred ? true : false;
      if (this.doesEmployerAndUnitExistForIndividual(this.editableIndividualEmployer.EmployerId, this.editableIndividualEmployer.UnitId)) {
        axios.put("/api/v2/individualEmployer/" + this.individualEmployer.IndividualEmployerId + "?include=Employer,Subject,Unit,WorkLocation,WorkStructure,LocalJobClass,LocalJobClass.Unit,LocalJobClass.NationalJobClass,JobTitle", this.editableIndividualEmployer).then((response) => {
          this.employerMessage = "Successfully Updated Employer";
          this.employerDisabled = true;
        });
      } else {
        if (this.editableIndividualEmployer && this.editableIndividualEmployer.hasOwnProperty("IndividualEmployerId")) {
          delete this.editableIndividualEmployer.IndividualEmployerId;
        }
        this.editableIndividualEmployer.IsPartTime = !!this.editableIndividualEmployer.IsPartTime;
        this.editableIndividualEmployer.IsTenured = !!this.editableIndividualEmployer.IsTenured;
        this.editableIndividualEmployer.CurrentlyWorking = true;
        axios.post("/api/v2/individualEmployer?include=Employer,Subject,Unit,WorkLocation,WorkStructure,LocalJobClass,LocalJobClass.Unit,LocalJobClass.NationalJobClass,JobTitle", this.editableIndividualEmployer).then((response) => {
          this.employerMessage = "Successfully Created Employer";
          this.employerDisabled = true;
          this.hideCancelBtn = true;
        });
      }
    },
    doesEmployerAndUnitExistForIndividual(EmployerId, UnitId) {
      if (!this.individualEmployers) {
        return false;
      }
      const individualEmployer = this.individualEmployers.filter((ie) => {
        return ie.EmployerId === EmployerId && ie.UnitId === UnitId;
      }).pop();
      return individualEmployer ? true : false;
    },
    getFormTemplateDetailsFromSubmission(submissionId) {
      let url = "/api/v3/memberforms/admin/submission/" + submissionId;
      return axios.get(url).then((response) => {
        const form = response.data.Form;
        this.templateId = form.form_template_id;
      });
    },
    updateUnionRelationship() {
      this.unionRelationshipMessage = "";
      this.editableIndividualAffiliate.IndividualId = this.individual.IndividualId;
      this.editableIndividualAffiliate.AffiliateId = this.selectedAffiliate;
      this.editableIndividualAffiliate.IndividualCope = this.editableIndividualCope;
      this.editableIndividualAffiliate.IndividualCope.IndividualCopeId = this.individualCope.IndividualCopeId;
      this.editableIndividualAffiliate.oldUnionRelationshipTypeId = this.oldUnionRelationshipTypeId;
      this.editableIndividualAffiliate.StartDate = this.editableIndividualAffiliate.StartDate ? this.editableIndividualAffiliate.StartDate : formatISO(/* @__PURE__ */ new Date());
      this.editableIndividualAffiliate.EndDate = this.editableIndividualAffiliate.StartDate ? this.editableIndividualAffiliate.EndDate : formatISO(/* @__PURE__ */ new Date());
      const IndividualAffiliateId = this.individualAffiliate.IndividualAffiliateId ? this.individualAffiliate.IndividualAffiliateId : 0;
      axios.put("/api/v2/custom/individualaffiliate/" + IndividualAffiliateId + "/mfpUpdate?include=Affiliate,UnionRelationshipType,LocalDuesCategory,IndividualDeactivationReason,PaymentMethod,PaymentFrequency&scope=global", this.editableIndividualAffiliate).then((response) => {
        this.unionRelationshipMessage = "Successfully Updated Union Relationship";
        this.unionDisabled = true;
        this.hideCancelBtn = true;
      });
    },
    updateAddress(addressType) {
      if (addressType === "billing") {
        this.billingAddressMessage = "";
        this.editableIndividualBillingAddress.IndividualId = this.individual.IndividualId;
        this.editableIndividualBillingAddress.IsPreferred = !!this.editableIndividualBillingAddress.IsPreferred;
        this.editableIndividualBillingAddress.CanVisitRestrictionId = this.editableIndividualBillingAddress.DoNotVisit === true ? 2 : 1;
        delete this.editableIndividualBillingAddress.IndividualAddressId;
        axios.post("/api/v2/IndividualAddress?include=ContactStatus,ContactSource,StateTerritory,CanSendMailRestriction", this.editableIndividualBillingAddress).then((response) => {
          this.billingAddressMessage = "Successfully Created Billing Address";
          this.billingAddressDisabled = true;
          this.hideCancelBtn = true;
        });
      } else {
        this.addressMessage = "";
        this.editableIndividualAddress.IndividualId = this.individual.IndividualId;
        this.editableIndividualAddress.IsPreferred = !!this.editableIndividualAddress.IsPreferred;
        this.editableIndividualAddress.CanVisitRestrictionId = this.editableIndividualAddress.DoNotVisit === true ? 2 : 1;
        delete this.editableIndividualAddress.IndividualAddressId;
        axios.post("/api/v2/IndividualAddress?include=ContactStatus,ContactSource,StateTerritory,CanSendMailRestriction", this.editableIndividualAddress).then((response) => {
          this.addressMessage = "Successfully Created Address";
          this.addressDisabled = true;
          this.hideCancelBtn = true;
        });
      }
    },
    updateEmail1() {
      this.emailMessage = "";
      this.editableIndividualEmail1.IndividualId = this.individual.IndividualId;
      this.editableIndividualEmail1.IsPreferred = typeof this.editableIndividualEmail1.IsPreferred === "undefined" || this.editableIndividualEmail1.IsPreferred === null ? false : this.editableIndividualEmail1.IsPreferred;
      delete this.editableIndividualEmail1.IndividualEmailId;
      axios.post("/api/v2/IndividualEmail?include=ContactStatus,ContactSource,CanContactRestriction", this.editableIndividualEmail1).then((response) => {
        this.emailMessage = "Successfully Created Email";
        this.emailDisabled = true;
        this.hideCancelBtn = true;
      });
    },
    updateEmail2() {
      this.email2Message = "";
      this.editableIndividualEmail2.IndividualId = this.individual.IndividualId;
      this.editableIndividualEmail2.IsPreferred = typeof this.editableIndividualEmail2.IsPreferred === "undefined" || this.editableIndividualEmail2.IsPreferred === null ? false : this.editableIndividualEmail2.IsPreferred;
      delete this.editableIndividualEmail2.IndividualEmailId;
      axios.post("/api/v2/IndividualEmail?include=ContactStatus,ContactSource,CanContactRestriction", this.editableIndividualEmail2).then((response) => {
        this.email2Message = "Successfully Created Email";
        this.email2Disabled = true;
        this.hideCancelBtn = true;
      });
    },
    updatePhone1() {
      this.phoneMessage = "";
      this.editableIndividualPhone1.IndividualId = this.individual.IndividualId;
      this.editableIndividualPhone1.IsPreferred = typeof this.editableIndividualPhone1.IsPreferred === "undefined" || this.editableIndividualPhone1.IsPreferred === null ? false : this.editableIndividualPhone1.IsPreferred;
      this.editableIndividualPhone1.CanTextRestrictionId = this.editableIndividualPhone1.isTextAllowed === true ? 1 : 2;
      this.editableIndividualPhone1.CanCallRestrictionId = this.editableIndividualPhone1.isDoNotCall === true ? 2 : 1;
      delete this.editableIndividualPhone1.IndividualPhoneId;
      axios.post("/api/v2/IndividualPhone?include=ContactStatus,ContactSource", this.editableIndividualPhone1).then((response) => {
        this.phoneMessage = "Successfully Created Home Phone";
        this.phoneDisabled = true;
        this.hideCancelBtn = true;
      });
    },
    updatePhone2() {
      this.phone2Message = "";
      this.editableIndividualPhone2.IndividualId = this.individual.IndividualId;
      this.editableIndividualPhone2.IsPreferred = typeof this.editableIndividualPhone2.IsPreferred === "undefined" || this.editableIndividualPhone2.IsPreferred === null ? false : this.editableIndividualPhone2.IsPreferred;
      this.editableIndividualPhone2.CanTextRestrictionId = this.editableIndividualPhone2.isTextAllowed === true ? 1 : 2;
      this.editableIndividualPhone2.CanCallRestrictionId = this.editableIndividualPhone2.isDoNotCall === true ? 2 : 1;
      delete this.editableIndividualPhone2.IndividualPhoneId;
      axios.post("/api/v2/IndividualPhone?include=ContactStatus,ContactSource", this.editableIndividualPhone2).then((response) => {
        this.phone2Message = "Successfully Created Mobile Phone";
        this.phone2Disabled = true;
        this.hideCancelBtn = true;
      });
    },
    updatePhone3() {
      this.phone3Message = "";
      this.editableIndividualPhone3.IndividualId = this.individual.IndividualId;
      this.editableIndividualPhone3.IsPreferred = typeof this.editableIndividualPhone3.IsPreferred === "undefined" || this.editableIndividualPhone3.IsPreferred === null ? false : this.editableIndividualPhone3.IsPreferred;
      this.editableIndividualPhone3.CanTextRestrictionId = this.editableIndividualPhone3.isTextAllowed === true ? 1 : 2;
      this.editableIndividualPhone3.CanCallRestrictionId = this.editableIndividualPhone3.isDoNotCall === true ? 2 : 1;
      delete this.editableIndividualPhone3.IndividualPhoneId;
      axios.post("/api/v2/IndividualPhone?include=ContactStatus,ContactSource", this.editableIndividualPhone3).then((response) => {
        this.phone3Message = "Successfully Created Work Phone";
        this.phone3Disabled = true;
        this.hideCancelBtn = true;
      });
    },
    cancelAction() {
      this.$router.push({ name: "Individuals" });
      this.dialog = false;
    },
    openConfirmAction() {
      this.dialog = true;
    },
    saveAction() {
      if (this.isEduesEligible) {
        try {
          this.individualEDuesEnrollment(this.submissionId, this.selectedAffiliate, this.individual);
        } catch {
        }
      }
      axios.get("/api/v3/memberforms/update-existing-individual/" + this.submissionId + "/" + this.individual.IndividualId + "/3").then((response) => {
        this.$router.push({ name: "IndividualDetails", params: { id: this.individual.IndividualId } });
      });
      this.dialog = false;
    },
    isSubmissionEDuesEligible(submissionId) {
      let url = "/api/v3/memberforms/admin/is-edues-eligible/" + submissionId;
      return axios.get(url).then((response) => {
        this.isEduesEligible = response.data.isSubmissionEligibleForEDues;
      }).finally(() => {
      });
    },
    individualEDuesEnrollment(submissionId, affiliateId, individual) {
      let url = "/api/v3/memberforms/admin/edues-enrollment";
      return axios.post(url, {
        IndividualId: individual.IndividualId,
        AffiliateId: affiliateId,
        SubmissionId: submissionId,
        Source: "Membership Forms Portal"
      }).then((response) => {
        console.log(response.data);
      }).finally(() => {
        this.loading = false;
        this.searched = true;
      });
    },
    setupStaticData() {
      for (let i = 1; i <= 31; i++) {
        this.dates.push({
          label: i.toString(),
          value: i
        });
      }
      for (let i = 1; i <= 20; i++) {
        this.dependents.push({
          label: i.toString(),
          value: i
        });
      }
      this.dates = [...this.dates];
      this.dependents = [...this.dependents];
      for (let i = 1900; i <= (/* @__PURE__ */ new Date()).getFullYear(); i++) {
        this.years.push({
          label: i.toString(),
          value: i
        });
      }
      this.years = [...this.years];
    },
    fieldVisible(fieldName) {
      if (!this.individualAffiliate.UnionRelationshipTypeId || this.unionRelationships.length === 0) {
        return false;
      }
      let unionRelationship = this.unionRelationships.filter((unionRelationship2) => {
        return unionRelationship2.UnionRelationshipTypeId === this.individualAffiliate.UnionRelationshipTypeId;
      }).pop();
      if (!unionRelationship) {
        unionRelationship = this.individualAffiliate.UnionRelationshipType;
      }
      if (!unionRelationship) {
        return false;
      }
      switch (fieldName) {
        case "Dues category":
          return unionRelationship.UnionRelationshipTypeName === "Member" || unionRelationship.UnionRelationshipTypeName === "Agency Fee Payer" || unionRelationship.UnionRelationshipTypeName === "Retired Member" || this.isJoiningUnion();
        case "Cope":
          return unionRelationship.UnionRelationshipTypeName === "Member";
        case "Stop Reason":
          return unionRelationship.UnionRelationshipTypeName === "Potential Member";
      }
      return false;
    },
    getSelectedUnionRelationshipLabel() {
      if (this.editableIndividualAffiliate.UnionRelationshipType) {
        return this.editableIndividualAffiliate.UnionRelationshipType.UnionRelationshipTypeName;
      }
      const index = this.unionRelationships.findIndex((unionRelationship) => {
        return unionRelationship.UnionRelationshipTypeId === this.selectedUnionRelationshipTypeId;
      });
      return index >= 0 ? this.unionRelationships[index].UnionRelationshipTypeName : "";
    },
    isJoiningUnion() {
      if (!this.individualAffiliate.IndividualDeactivationReasonId) {
        return false;
      }
      const stopReason = this.stopReasons.find((stopReason2) => {
        return stopReason2.IndividualDeactivationReasonId === this.individualAffiliate.IndividualDeactivationReasonId;
      });
      return stopReason ? stopReason.IndividualDeactivationReasonName.toLowerCase() === "joined union" : false;
    },
    setupFormData() {
      this.selectedAffiliateName = this.$store.getters["user/selectedAffiliate"].AffiliateName;
      this.loadLocalDuesCategories();
    },
    loadLocalDuesCategories() {
      if (this.editableIndividualAffiliate.UnionRelationshipTypeId) {
        axios.get("/api/v2/custom/localduescategory/byunionrelationshiptypewithfrequency/" + this.editableIndividualAffiliate.UnionRelationshipTypeId).then((response) => {
          this.duesCategories = response.data.data;
        });
      }
    },
    loadOptions(employerId) {
      axios.get("/api/v2/aggregate/employer/units/" + employerId).then((response) => {
        this.units = response.data.data;
      });
    },
    setPropertyValue(propertyName, value) {
      this.editableIndividualEmployer[propertyName] = value;
    },
    setWorkStructureId(value) {
      this.editableIndividualEmployer["WorkStructureId"] = value;
      this.WorkStructureId = value;
    },
    setWorkLocationId(value) {
      this.editableIndividualEmployer["WorkLocationId"] = value;
      this.WorkLocationId = value;
    }
  }
  // watch: {
  //     $route(to, from) {
  //         this.id = to.params.id;
  //         //this.getDataFromApi();
  //     }
  // }
};
const _hoisted_1$U = { class: "data-container" };
const _hoisted_2$Q = { class: "data-container" };
const _hoisted_3$J = { class: "data-container" };
const _hoisted_4$D = { class: "data-container" };
const _hoisted_5$A = { class: "data-container" };
const _hoisted_6$w = { class: "data-container" };
const _hoisted_7$s = { class: "data-container" };
const _hoisted_8$m = { class: "data-container" };
const _hoisted_9$l = { class: "data-container" };
const _hoisted_10$i = { class: "data-container" };
const _hoisted_11$f = {
  key: 0,
  class: "success-message"
};
const _hoisted_12$f = { class: "data-container" };
const _hoisted_13$c = { class: "data-container" };
const _hoisted_14$c = { class: "data-container" };
const _hoisted_15$c = {
  key: 0,
  class: "success-message"
};
const _hoisted_16$c = {
  key: 0,
  class: "success-message"
};
const _hoisted_17$b = {
  key: 0,
  class: "text-red"
};
const _hoisted_18$b = {
  key: 0,
  class: "text-red"
};
const _hoisted_19$b = { class: "data-container" };
const _hoisted_20$a = { class: "data-container" };
const _hoisted_21$a = { class: "data-container" };
const _hoisted_22$9 = {
  key: 0,
  class: "success-message"
};
const _hoisted_23$9 = { class: "data-container" };
const _hoisted_24$8 = {
  key: 0,
  class: "text-red"
};
const _hoisted_25$8 = { class: "data-container" };
const _hoisted_26$8 = {
  key: 0,
  class: "text-red"
};
const _hoisted_27$8 = { class: "data-container" };
const _hoisted_28$8 = {
  key: 0,
  class: "text-red"
};
const _hoisted_29$8 = { class: "data-container" };
const _hoisted_30$8 = {
  key: 0,
  class: "text-red"
};
const _hoisted_31$8 = {
  key: 0,
  class: "text-red"
};
const _hoisted_32$6 = {
  key: 0,
  class: "text-red"
};
const _hoisted_33$6 = { class: "data-container" };
const _hoisted_34$5 = {
  key: 0,
  class: "text-red"
};
const _hoisted_35$5 = {
  key: 0,
  class: "text-red"
};
const _hoisted_36$5 = { class: "data-container" };
const _hoisted_37$5 = {
  key: 0,
  class: "text-red"
};
const _hoisted_38$4 = { class: "data-container" };
const _hoisted_39$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_40$4 = { class: "data-container" };
const _hoisted_41$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_42$4 = { class: "data-container" };
const _hoisted_43$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_44$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_45$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_46$4 = { class: "data-container" };
const _hoisted_47$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_48$4 = {
  key: 0,
  class: "success-message"
};
const _hoisted_49$4 = {
  key: 0,
  style: { "border-top": "dotted 2px" }
};
const _hoisted_50$4 = { class: "data-container" };
const _hoisted_51$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_52$4 = { class: "data-container" };
const _hoisted_53$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_54$4 = { class: "data-container" };
const _hoisted_55$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_56$4 = { class: "data-container" };
const _hoisted_57$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_58$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_59$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_60$4 = { class: "data-container" };
const _hoisted_61$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_62$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_63$4 = { class: "data-container" };
const _hoisted_64$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_65$4 = { class: "data-container" };
const _hoisted_66$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_67$4 = { class: "data-container" };
const _hoisted_68$2 = {
  key: 0,
  class: "text-red"
};
const _hoisted_69$1 = { class: "data-container" };
const _hoisted_70$1 = {
  key: 0,
  class: "text-red"
};
const _hoisted_71$1 = {
  key: 0,
  class: "text-red"
};
const _hoisted_72$1 = {
  key: 0,
  class: "text-red"
};
const _hoisted_73$1 = { class: "data-container" };
const _hoisted_74$1 = {
  key: 0,
  class: "text-red"
};
const _hoisted_75$1 = {
  key: 0,
  class: "success-message"
};
const _hoisted_76$1 = { class: "data-container" };
const _hoisted_77$1 = {
  key: 0,
  class: "text-red"
};
const _hoisted_78$1 = { class: "data-container" };
const _hoisted_79$1 = {
  key: 0,
  class: "text-red"
};
const _hoisted_80$1 = { class: "data-container" };
const _hoisted_81$1 = {
  key: 0,
  class: "text-red"
};
const _hoisted_82$1 = {
  key: 0,
  class: "text-red"
};
const _hoisted_83 = { class: "data-container" };
const _hoisted_84 = {
  key: 0,
  class: "text-red"
};
const _hoisted_85 = { class: "data-container" };
const _hoisted_86 = {
  key: 0,
  class: "text-red"
};
const _hoisted_87 = { class: "data-container" };
const _hoisted_88 = {
  key: 0,
  class: "text-red"
};
const _hoisted_89 = { class: "data-container" };
const _hoisted_90 = {
  key: 0,
  class: "text-red"
};
const _hoisted_91 = {
  key: 0,
  class: "text-red"
};
const _hoisted_92 = { class: "data-container" };
const _hoisted_93 = {
  key: 0,
  class: "text-red"
};
const _hoisted_94 = { class: "success-message" };
const _hoisted_95 = { class: "data-container" };
const _hoisted_96 = {
  key: 0,
  class: "text-red"
};
const _hoisted_97 = { class: "data-container" };
const _hoisted_98 = {
  key: 0,
  class: "text-red"
};
const _hoisted_99 = { class: "data-container" };
const _hoisted_100 = {
  key: 0,
  class: "text-red"
};
const _hoisted_101 = {
  key: 0,
  class: "text-red"
};
const _hoisted_102 = { class: "data-container" };
const _hoisted_103 = {
  key: 0,
  class: "text-red"
};
const _hoisted_104 = { class: "data-container" };
const _hoisted_105 = {
  key: 0,
  class: "text-red"
};
const _hoisted_106 = { class: "data-container" };
const _hoisted_107 = {
  key: 0,
  class: "text-red"
};
const _hoisted_108 = { class: "data-container" };
const _hoisted_109 = {
  key: 0,
  class: "text-red"
};
const _hoisted_110 = {
  key: 0,
  class: "text-red"
};
const _hoisted_111 = { class: "data-container" };
const _hoisted_112 = {
  key: 0,
  class: "text-red"
};
const _hoisted_113 = { class: "success-message" };
const _hoisted_114 = { class: "data-container" };
const _hoisted_115 = {
  key: 0,
  class: "text-red"
};
const _hoisted_116 = { class: "data-container" };
const _hoisted_117 = {
  key: 0,
  class: "text-red"
};
const _hoisted_118 = { class: "data-container" };
const _hoisted_119 = {
  key: 0,
  class: "text-red"
};
const _hoisted_120 = {
  key: 0,
  class: "text-red"
};
const _hoisted_121 = { class: "data-container" };
const _hoisted_122 = {
  key: 0,
  class: "text-red"
};
const _hoisted_123 = { class: "data-container" };
const _hoisted_124 = {
  key: 0,
  class: "text-red"
};
const _hoisted_125 = { class: "data-container" };
const _hoisted_126 = {
  key: 0,
  class: "text-red"
};
const _hoisted_127 = {
  key: 0,
  class: "text-red"
};
const _hoisted_128 = {
  key: 0,
  class: "success-message"
};
const _hoisted_129 = { class: "data-container" };
const _hoisted_130 = {
  key: 0,
  class: "text-red"
};
const _hoisted_131 = { class: "data-container" };
const _hoisted_132 = {
  key: 0,
  class: "text-red"
};
const _hoisted_133 = { class: "data-container" };
const _hoisted_134 = {
  key: 0,
  class: "text-red"
};
const _hoisted_135 = {
  key: 0,
  class: "text-red"
};
const _hoisted_136 = { class: "data-container" };
const _hoisted_137 = {
  key: 0,
  class: "text-red"
};
const _hoisted_138 = { class: "data-container" };
const _hoisted_139 = {
  key: 0,
  class: "text-red"
};
const _hoisted_140 = { class: "data-container" };
const _hoisted_141 = {
  key: 0,
  class: "text-red"
};
const _hoisted_142 = {
  key: 0,
  class: "text-red"
};
const _hoisted_143 = {
  key: 0,
  class: "success-message"
};
const _hoisted_144 = { class: "data-container" };
const _hoisted_145 = {
  key: 0,
  class: "text-red"
};
const _hoisted_146 = { class: "data-container" };
const _hoisted_147 = {
  key: 0,
  class: "text-red"
};
const _hoisted_148 = { class: "data-container" };
const _hoisted_149 = {
  key: 0,
  class: "text-red"
};
const _hoisted_150 = {
  key: 0,
  class: "text-red"
};
const _hoisted_151 = { class: "data-container" };
const _hoisted_152 = {
  key: 0,
  class: "text-red"
};
const _hoisted_153 = { class: "data-container" };
const _hoisted_154 = {
  key: 0,
  class: "text-red"
};
const _hoisted_155 = { class: "data-container" };
const _hoisted_156 = {
  key: 0,
  class: "text-red"
};
const _hoisted_157 = {
  key: 0,
  class: "text-red"
};
const _hoisted_158 = {
  key: 0,
  class: "success-message"
};
function _sfc_render$1g(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_work_location_chooser = resolveComponent("work-location-chooser");
  const _component_work_structure_chooser = resolveComponent("work-structure-chooser");
  const _component_job_class_chooser = resolveComponent("job-class-chooser");
  const _component_StateTerritorySelectComponent = resolveComponent("StateTerritorySelectComponent");
  const _component_StateTerritorySelectComponent2 = resolveComponent("StateTerritorySelectComponent2");
  return openBlock(), createElementBlock(
    Fragment,
    null,
    [
      createVNode(VOverlay, {
        opacity: 1,
        "model-value": $data.overlay,
        class: "align-center justify-center"
      }, {
        default: withCtx(() => [
          createVNode(VProgressCircular, {
            indeterminate: "",
            size: 70,
            color: "primary"
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["model-value"]),
      createVNode(VContainer, { class: "compare-container" }, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createVNode(VAlert, {
                    type: "warning",
                    title: "Individual Comparison"
                  }, {
                    default: withCtx(() => _cache[146] || (_cache[146] = [
                      createTextVNode(" Please review each section below. Changes to the individual must be saved at each section. The saved changes will update the individual's record in Connect. After all sections have been reviewed and/or saved, click the Review Completed button at the bottom of the page to move forward. ")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      createVNode(VCol, null, {
                        default: withCtx(() => _cache[147] || (_cache[147] = [
                          createBaseVNode(
                            "h2",
                            { class: "text-center" },
                            "CONNECT",
                            -1
                            /* HOISTED */
                          )
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      createVNode(VCol, null, {
                        default: withCtx(() => _cache[148] || (_cache[148] = [
                          createBaseVNode(
                            "h2",
                            { class: "text-center" },
                            "MEMBERSHIP FORMS PORTAL",
                            -1
                            /* HOISTED */
                          )
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "pt-4" }, {
                default: withCtx(() => [
                  _cache[149] || (_cache[149] = createBaseVNode(
                    "h4",
                    { class: "text-center" },
                    "Individual",
                    -1
                    /* HOISTED */
                  )),
                  createVNode(VDivider)
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, null, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_1$U, [
                                    createVNode(VTextField, {
                                      label: "First name:",
                                      modelValue: $data.individual.FirstName,
                                      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.individual.FirstName = $event),
                                      variant: "underlined",
                                      disabled: ""
                                    }, null, 8, ["modelValue"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_2$Q, [
                                    createVNode(VTextField, {
                                      label: "Middle name:",
                                      modelValue: $data.individual.MiddleName,
                                      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.individual.MiddleName = $event),
                                      variant: "underlined",
                                      disabled: ""
                                    }, null, 8, ["modelValue"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_3$J, [
                                    createVNode(VTextField, {
                                      label: "Last name:",
                                      modelValue: $data.individual.LastName,
                                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.individual.LastName = $event),
                                      variant: "underlined",
                                      disabled: ""
                                    }, null, 8, ["modelValue"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_4$D, [
                                    createVNode(VTextField, {
                                      label: "Preferred name:",
                                      modelValue: $data.individual.PreferredName,
                                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.individual.PreferredName = $event),
                                      variant: "underlined",
                                      disabled: ""
                                    }, null, 8, ["modelValue"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_5$A, [
                                    createVNode(VTextField, {
                                      label: "Original last name:",
                                      modelValue: $data.individual.PreviousName,
                                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.individual.PreviousName = $event),
                                      variant: "underlined",
                                      disabled: ""
                                    }, null, 8, ["modelValue"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => _cache[150] || (_cache[150] = [
                              createBaseVNode(
                                "span",
                                { class: "empty-btn" },
                                null,
                                -1
                                /* HOISTED */
                              )
                            ])),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VDivider, {
                vertical: "",
                blue: ""
              }),
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, null, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_6$w, [
                                    createVNode(VTextField, {
                                      label: "First name:",
                                      modelValue: $data.editableIndividual.FirstName,
                                      "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.editableIndividual.FirstName = $event),
                                      variant: "underlined"
                                    }, null, 8, ["modelValue"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_7$s, [
                                    createVNode(VTextField, {
                                      label: "Middle name:",
                                      modelValue: $data.editableIndividual.MiddleName,
                                      "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.editableIndividual.MiddleName = $event),
                                      variant: "underlined"
                                    }, null, 8, ["modelValue"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_8$m, [
                                    createVNode(VTextField, {
                                      label: "Last name:",
                                      modelValue: $data.editableIndividual.LastName,
                                      "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.editableIndividual.LastName = $event),
                                      variant: "underlined"
                                    }, null, 8, ["modelValue"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_9$l, [
                                    createVNode(VTextField, {
                                      label: "Preferred name:",
                                      modelValue: $data.editableIndividual.PreferredName,
                                      "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.editableIndividual.PreferredName = $event),
                                      variant: "underlined"
                                    }, null, 8, ["modelValue"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_10$i, [
                                    createVNode(VTextField, {
                                      label: "Original last name:",
                                      modelValue: $data.editableIndividual.PreviousName,
                                      "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.editableIndividual.PreviousName = $event),
                                      variant: "underlined"
                                    }, null, 8, ["modelValue"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, { class: "btns-row" }, {
                            default: withCtx(() => [
                              $data.basicMessage ? (openBlock(), createElementBlock(
                                "p",
                                _hoisted_11$f,
                                toDisplayString($data.basicMessage),
                                1
                                /* TEXT */
                              )) : createCommentVNode("v-if", true),
                              createVNode(VCol, {
                                cols: "8",
                                offset: "4",
                                class: "text-right hidden-md-and-down"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    class: "px-4",
                                    href: "",
                                    onClick: _cache[10] || (_cache[10] = ($event) => $options.updateBasicData()),
                                    disabled: $data.basicDisabled
                                  }, {
                                    default: withCtx(() => _cache[151] || (_cache[151] = [
                                      createTextVNode("Update Individual")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { class: "hidden-lg-and-up" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    class: "px-4",
                                    href: "",
                                    onClick: _cache[11] || (_cache[11] = ($event) => $options.updateBasicData()),
                                    disabled: $data.basicDisabled
                                  }, {
                                    default: withCtx(() => _cache[152] || (_cache[152] = [
                                      createTextVNode("Update Individual")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "pt-4" }, {
                default: withCtx(() => [
                  _cache[153] || (_cache[153] = createBaseVNode(
                    "h4",
                    { class: "text-center" },
                    "Demographics",
                    -1
                    /* HOISTED */
                  )),
                  createVNode(VDivider)
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createVNode(VCard, null, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_12$f, [
                                    createVNode(VLabel, null, {
                                      default: withCtx(() => _cache[154] || (_cache[154] = [
                                        createTextVNode("Date of Birth:")
                                      ])),
                                      _: 1
                                      /* STABLE */
                                    }),
                                    createVNode(VRow, null, {
                                      default: withCtx(() => [
                                        createVNode(VCol, { cols: "4" }, {
                                          default: withCtx(() => [
                                            createVNode(VSelect, {
                                              items: $data.months,
                                              label: "Month",
                                              "item-value": "value",
                                              disabled: "",
                                              "item-title": "label",
                                              modelValue: $data.individual.MonthOfBirth,
                                              "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => $data.individual.MonthOfBirth = $event),
                                              variant: "underlined"
                                            }, null, 8, ["items", "modelValue"])
                                          ]),
                                          _: 1
                                          /* STABLE */
                                        }),
                                        createVNode(VCol, { cols: "3" }, {
                                          default: withCtx(() => [
                                            createVNode(VSelect, {
                                              items: $data.dates,
                                              label: "Day",
                                              "item-value": "value",
                                              disabled: "",
                                              "item-title": "label",
                                              modelValue: $options.computedDayOfBirth,
                                              "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => $options.computedDayOfBirth = $event),
                                              variant: "underlined"
                                            }, null, 8, ["items", "modelValue"])
                                          ]),
                                          _: 1
                                          /* STABLE */
                                        }),
                                        createVNode(VCol, { cols: "4" }, {
                                          default: withCtx(() => [
                                            createVNode(VSelect, {
                                              items: $data.years,
                                              label: "Year",
                                              "item-value": "value",
                                              disabled: "",
                                              "item-title": "label",
                                              modelValue: $data.individual.YearOfBirth,
                                              "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => $data.individual.YearOfBirth = $event),
                                              variant: "underlined"
                                            }, null, 8, ["items", "modelValue"])
                                          ]),
                                          _: 1
                                          /* STABLE */
                                        })
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    })
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_13$c, [
                                    createVNode(VSelect, {
                                      label: "Gender",
                                      disabled: "",
                                      items: $data.genders,
                                      "item-value": "GenderId",
                                      "item-title": "GenderName",
                                      modelValue: $data.individual.GenderId,
                                      "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => $data.individual.GenderId = $event),
                                      variant: "underlined"
                                    }, null, 8, ["items", "modelValue"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_14$c, [
                                    createVNode(VSelect, {
                                      label: "Marital Status",
                                      disabled: "",
                                      items: $data.maritalStatus,
                                      "item-value": "MaritalStatusId",
                                      "item-title": "MaritalStatusName",
                                      modelValue: $data.individual.MaritalStatusId,
                                      "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => $data.individual.MaritalStatusId = $event),
                                      variant: "underlined"
                                    }, null, 8, ["items", "modelValue"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => _cache[155] || (_cache[155] = [
                              createBaseVNode(
                                "span",
                                { class: "empty-btn" },
                                null,
                                -1
                                /* HOISTED */
                              )
                            ])),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VDivider, { vertical: "" }),
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, null, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, null, {
                                default: withCtx(() => [
                                  createVNode(VLabel, null, {
                                    default: withCtx(() => _cache[156] || (_cache[156] = [
                                      createTextVNode("Date of Birth:")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VSelect, {
                                            items: $data.months,
                                            label: "Month",
                                            "item-value": "value",
                                            "item-title": "label",
                                            modelValue: $data.editableIndividual.MonthOfBirth,
                                            "onUpdate:modelValue": _cache[17] || (_cache[17] = ($event) => $data.editableIndividual.MonthOfBirth = $event),
                                            variant: "underlined"
                                          }, null, 8, ["items", "modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "3" }, {
                                        default: withCtx(() => [
                                          createVNode(VSelect, {
                                            items: $data.dates,
                                            label: "Day",
                                            "item-value": "value",
                                            "item-title": "label",
                                            modelValue: $data.editableIndividual.DayOfBirth,
                                            "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => $data.editableIndividual.DayOfBirth = $event),
                                            variant: "underlined"
                                          }, null, 8, ["items", "modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VSelect, {
                                            items: $data.years,
                                            label: "Year",
                                            "item-value": "value",
                                            "item-title": "label",
                                            modelValue: $data.editableIndividual.YearOfBirth,
                                            "onUpdate:modelValue": _cache[19] || (_cache[19] = ($event) => $data.editableIndividual.YearOfBirth = $event),
                                            variant: "underlined"
                                          }, null, 8, ["items", "modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VSelect, {
                                    label: "Gender",
                                    items: $data.genders,
                                    "item-value": "GenderId",
                                    "item-title": "GenderName",
                                    modelValue: $data.editableIndividual.GenderId,
                                    "onUpdate:modelValue": _cache[20] || (_cache[20] = ($event) => $data.editableIndividual.GenderId = $event),
                                    variant: "underlined"
                                  }, null, 8, ["items", "modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VSelect, {
                                    label: "Marital Status",
                                    items: $data.maritalStatus,
                                    "item-value": "MaritalStatusId",
                                    "item-title": "MaritalStatusName",
                                    modelValue: $data.editableIndividual.MaritalStatusId,
                                    "onUpdate:modelValue": _cache[21] || (_cache[21] = ($event) => $data.editableIndividual.MaritalStatusId = $event),
                                    variant: "underlined"
                                  }, null, 8, ["items", "modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, { class: "btns-row" }, {
                            default: withCtx(() => [
                              $data.demographicMessage ? (openBlock(), createElementBlock(
                                "p",
                                _hoisted_15$c,
                                toDisplayString($data.demographicMessage),
                                1
                                /* TEXT */
                              )) : createCommentVNode("v-if", true),
                              createVNode(VCol, {
                                cols: "8",
                                offset: "4",
                                class: "text-right hidden-md-and-down"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    class: "px-4",
                                    href: "",
                                    onClick: _cache[22] || (_cache[22] = ($event) => $options.updateDemographics()),
                                    disabled: $data.demographicsDisabled
                                  }, {
                                    default: withCtx(() => _cache[157] || (_cache[157] = [
                                      createTextVNode("Update Demographics")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { class: "hidden-lg-and-up" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    class: "px-4",
                                    href: "",
                                    onClick: _cache[23] || (_cache[23] = ($event) => $options.updateDemographics()),
                                    disabled: $data.demographicsDisabled
                                  }, {
                                    default: withCtx(() => _cache[158] || (_cache[158] = [
                                      createTextVNode("Update Demographics")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "pt-4" }, {
                default: withCtx(() => [
                  _cache[159] || (_cache[159] = createBaseVNode(
                    "h4",
                    { class: "text-center" },
                    "Union Relationship",
                    -1
                    /* HOISTED */
                  )),
                  createVNode(VDivider)
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, { class: "unionRelationships" }, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "8" }, {
                                default: withCtx(() => [
                                  createVNode(VSelect, {
                                    items: $data.unionRelationships,
                                    label: "Union Relationship",
                                    "item-value": "UnionRelationshipTypeId",
                                    "item-title": "UnionRelationshipTypeName",
                                    modelValue: $data.oldUnionRelationshipTypeId,
                                    "onUpdate:modelValue": _cache[24] || (_cache[24] = ($event) => $data.oldUnionRelationshipTypeId = $event),
                                    disabled: "",
                                    variant: "underlined"
                                  }, null, 8, ["items", "modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VTextField, {
                                    label: "Affiliate:",
                                    modelValue: $data.selectedAffiliateName,
                                    "onUpdate:modelValue": _cache[25] || (_cache[25] = ($event) => $data.selectedAffiliateName = $event),
                                    disabled: "",
                                    variant: "underlined"
                                  }, null, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          $options.fieldVisible("Dues category") ? (openBlock(), createBlock(VRow, { key: 0 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VSelect, {
                                    items: $data.duesCategories,
                                    label: "Dues category",
                                    "item-value": "LocalDuesCategoryId",
                                    "item-title": "LocalDuesCategoryName",
                                    modelValue: $data.individualAffiliate.LocalDuesCategoryId,
                                    "onUpdate:modelValue": _cache[26] || (_cache[26] = ($event) => $data.individualAffiliate.LocalDuesCategoryId = $event),
                                    rules: [$options.rules.required],
                                    disabled: "",
                                    variant: "underlined"
                                  }, null, 8, ["items", "modelValue", "rules"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VSelect, {
                                    items: $data.paymentMethods,
                                    label: "Dues Payment Method",
                                    "item-value": "PaymentMethodId",
                                    "item-title": "PaymentMethodName",
                                    modelValue: $data.individualAffiliate.PaymentMethodId,
                                    "onUpdate:modelValue": _cache[27] || (_cache[27] = ($event) => $data.individualAffiliate.PaymentMethodId = $event),
                                    disabled: "",
                                    variant: "underlined"
                                  }, null, 8, ["items", "modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VSelect, {
                                    items: $data.paymentFrequencies,
                                    label: "Dues Payment Frequency",
                                    "item-value": "PaymentFrequencyId",
                                    "item-title": "PaymentFrequencyName",
                                    modelValue: $data.individualAffiliate.PaymentFrequencyId,
                                    "onUpdate:modelValue": _cache[28] || (_cache[28] = ($event) => $data.individualAffiliate.PaymentFrequencyId = $event),
                                    disabled: "",
                                    variant: "underlined"
                                  }, null, 8, ["items", "modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VMenu, {
                                    offset: 40,
                                    transition: "scale-transition",
                                    "min-width": "290px"
                                  }, {
                                    activator: withCtx(({ props }) => [
                                      createVNode(VTextField, mergeProps({
                                        modelValue: $data.individualAffiliate.StartDate,
                                        "onUpdate:modelValue": _cache[29] || (_cache[29] = ($event) => $data.individualAffiliate.StartDate = $event),
                                        hint: "YYYY-MM-DD",
                                        label: "Start date"
                                      }, props, { disabled: "" }), null, 16, ["modelValue"])
                                    ]),
                                    default: withCtx(() => [
                                      createVNode(VDatePicker, {
                                        modelValue: $data.individualAffiliate.StartDate,
                                        "onUpdate:modelValue": _cache[30] || (_cache[30] = ($event) => $data.individualAffiliate.StartDate = $event),
                                        "no-title": "",
                                        scrollable: "",
                                        variant: "underlined"
                                      }, null, 8, ["modelValue"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VTextField, {
                                    label: "MemberId:",
                                    modelValue: $data.individualAffiliate.MemberId,
                                    "onUpdate:modelValue": _cache[31] || (_cache[31] = ($event) => $data.individualAffiliate.MemberId = $event),
                                    disabled: "",
                                    variant: "underlined"
                                  }, null, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VTextField, {
                                    label: "Unit:",
                                    modelValue: $data.individualAffiliate.Unit,
                                    "onUpdate:modelValue": _cache[32] || (_cache[32] = ($event) => $data.individualAffiliate.Unit = $event),
                                    disabled: "",
                                    variant: "underlined"
                                  }, null, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          $options.fieldVisible("Cope") ? (openBlock(), createBlock(VRow, { key: 1 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VTextField, {
                                    label: "COPE Amount:",
                                    modelValue: $data.individualCope.CopeAmount,
                                    "onUpdate:modelValue": _cache[33] || (_cache[33] = ($event) => $data.individualCope.CopeAmount = $event),
                                    prefix: "$",
                                    rules: [$options.rules.copeAmount, $options.rules.copeDecimal],
                                    disabled: "",
                                    variant: "underlined"
                                  }, null, 8, ["modelValue", "rules"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VSelect, {
                                    items: $data.paymentMethods,
                                    label: "COPE Payment Method",
                                    "item-value": "PaymentMethodId",
                                    "item-title": "PaymentMethodName",
                                    modelValue: $data.individualCope.CopePaymentMethodId,
                                    "onUpdate:modelValue": _cache[34] || (_cache[34] = ($event) => $data.individualCope.CopePaymentMethodId = $event),
                                    disabled: "",
                                    variant: "underlined"
                                  }, null, 8, ["items", "modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VSelect, {
                                    items: $data.paymentFrequencies,
                                    label: "COPE Payment Frequency",
                                    "item-value": "PaymentFrequencyId",
                                    "item-title": "PaymentFrequencyName",
                                    modelValue: $data.individualCope.CopePaymentFrequencyId,
                                    "onUpdate:modelValue": _cache[35] || (_cache[35] = ($event) => $data.individualCope.CopePaymentFrequencyId = $event),
                                    disabled: "",
                                    variant: "underlined"
                                  }, null, 8, ["items", "modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true)
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VDivider, { vertical: "" }),
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, { class: "unionRelationships" }, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(
                            VForm,
                            { ref: "form" },
                            {
                              default: withCtx(() => [
                                createVNode(VRow, null, {
                                  default: withCtx(() => [
                                    createVNode(VCol, { cols: "8" }, {
                                      default: withCtx(() => [
                                        createVNode(VSelect, {
                                          items: $data.unionRelationships,
                                          label: "Union Relationship",
                                          "item-value": "UnionRelationshipTypeId",
                                          "item-title": "UnionRelationshipTypeName",
                                          modelValue: $data.selectedUnionRelationshipTypeId,
                                          "onUpdate:modelValue": _cache[36] || (_cache[36] = ($event) => $data.selectedUnionRelationshipTypeId = $event),
                                          disabled: "",
                                          variant: "underlined"
                                        }, null, 8, ["items", "modelValue"])
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }),
                                    createVNode(VCol, { cols: "4" }, {
                                      default: withCtx(() => [
                                        createVNode(VTextField, {
                                          label: "Affiliate:",
                                          modelValue: $data.selectedAffiliateName,
                                          "onUpdate:modelValue": _cache[37] || (_cache[37] = ($event) => $data.selectedAffiliateName = $event),
                                          disabled: "",
                                          variant: "underlined"
                                        }, null, 8, ["modelValue"])
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    })
                                  ]),
                                  _: 1
                                  /* STABLE */
                                }),
                                createVNode(VRow, null, {
                                  default: withCtx(() => [
                                    createVNode(VCol, { cols: "4" }, {
                                      default: withCtx(() => [
                                        createVNode(VSelect, {
                                          items: $data.duesCategories,
                                          label: "Dues category",
                                          "item-value": "LocalDuesCategoryId",
                                          "item-title": "LocalDuesCategoryName",
                                          modelValue: $data.editableIndividualAffiliate.LocalDuesCategoryId,
                                          "onUpdate:modelValue": _cache[38] || (_cache[38] = ($event) => $data.editableIndividualAffiliate.LocalDuesCategoryId = $event),
                                          rules: [$options.rules.required],
                                          disabled: "",
                                          variant: "underlined"
                                        }, null, 8, ["items", "modelValue", "rules"])
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }),
                                    createVNode(VCol, { cols: "4" }, {
                                      default: withCtx(() => [
                                        createVNode(VSelect, {
                                          items: $data.paymentMethods,
                                          label: "Dues Payment Method",
                                          "item-value": "PaymentMethodId",
                                          "item-title": "PaymentMethodName",
                                          modelValue: $data.editableIndividualAffiliate.PaymentMethodId,
                                          "onUpdate:modelValue": _cache[39] || (_cache[39] = ($event) => $data.editableIndividualAffiliate.PaymentMethodId = $event),
                                          disabled: "",
                                          variant: "underlined"
                                        }, null, 8, ["items", "modelValue"])
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }),
                                    createVNode(VCol, { cols: "4" }, {
                                      default: withCtx(() => [
                                        createVNode(VSelect, {
                                          items: $data.paymentFrequencies,
                                          label: "Dues Payment Frequency",
                                          "item-value": "PaymentFrequencyId",
                                          "item-title": "PaymentFrequencyName",
                                          modelValue: $data.editableIndividualAffiliate.PaymentFrequencyId,
                                          "onUpdate:modelValue": _cache[40] || (_cache[40] = ($event) => $data.editableIndividualAffiliate.PaymentFrequencyId = $event),
                                          disabled: "",
                                          variant: "underlined"
                                        }, null, 8, ["items", "modelValue"])
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    })
                                  ]),
                                  _: 1
                                  /* STABLE */
                                }),
                                $options.fieldVisible("Stop Reason") ? (openBlock(), createBlock(VRow, { key: 0 }, {
                                  default: withCtx(() => [
                                    createVNode(VCol, { cols: "4" }, {
                                      default: withCtx(() => [
                                        createVNode(VMenu, {
                                          offset: 40,
                                          transition: "scale-transition",
                                          "min-width": "290px"
                                        }, {
                                          activator: withCtx(({ props }) => [
                                            createVNode(VTextField, mergeProps({
                                              modelValue: $data.editableIndividualAffiliate.StartDate,
                                              "onUpdate:modelValue": _cache[41] || (_cache[41] = ($event) => $data.editableIndividualAffiliate.StartDate = $event),
                                              hint: "YYYY-MM-DD",
                                              label: "Start date"
                                            }, props, { variant: "underlined" }), null, 16, ["modelValue"])
                                          ]),
                                          default: withCtx(() => [
                                            createVNode(VDatePicker, {
                                              modelValue: $data.editableIndividualAffiliate.StartDate,
                                              "onUpdate:modelValue": _cache[42] || (_cache[42] = ($event) => $data.editableIndividualAffiliate.StartDate = $event),
                                              "no-title": "",
                                              scrollable: ""
                                            }, null, 8, ["modelValue"])
                                          ]),
                                          _: 1
                                          /* STABLE */
                                        })
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }),
                                    createVNode(VCol, { cols: "4" })
                                  ]),
                                  _: 1
                                  /* STABLE */
                                })) : createCommentVNode("v-if", true),
                                $data.showCope ? (openBlock(), createBlock(VRow, { key: 1 }, {
                                  default: withCtx(() => [
                                    createVNode(VCol, { cols: "4" }, {
                                      default: withCtx(() => [
                                        createVNode(VTextField, {
                                          label: "COPE Amount:",
                                          modelValue: $data.editableIndividualCope.CopeAmount,
                                          "onUpdate:modelValue": _cache[43] || (_cache[43] = ($event) => $data.editableIndividualCope.CopeAmount = $event),
                                          prefix: "$",
                                          rules: [$options.rules.copeAmount, $options.rules.copeDecimal],
                                          disabled: "",
                                          variant: "underlined"
                                        }, null, 8, ["modelValue", "rules"])
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }),
                                    createVNode(VCol, { cols: "4" }, {
                                      default: withCtx(() => [
                                        createVNode(VSelect, {
                                          items: $data.paymentMethods,
                                          label: "COPE Payment Method",
                                          "item-value": "PaymentMethodId",
                                          "item-title": "PaymentMethodName",
                                          modelValue: $data.editableIndividualCope.CopePaymentMethodId,
                                          "onUpdate:modelValue": _cache[44] || (_cache[44] = ($event) => $data.editableIndividualCope.CopePaymentMethodId = $event),
                                          disabled: "",
                                          variant: "underlined"
                                        }, null, 8, ["items", "modelValue"])
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }),
                                    createVNode(VCol, { cols: "4" }, {
                                      default: withCtx(() => [
                                        createVNode(VSelect, {
                                          items: $data.paymentFrequencies,
                                          label: "COPE Payment Frequency",
                                          "item-value": "PaymentFrequencyId",
                                          "item-title": "PaymentFrequencyName",
                                          modelValue: $data.editableIndividualCope.CopePaymentFrequencyId,
                                          "onUpdate:modelValue": _cache[45] || (_cache[45] = ($event) => $data.editableIndividualCope.CopePaymentFrequencyId = $event),
                                          disabled: "",
                                          variant: "underlined"
                                        }, null, 8, ["items", "modelValue"])
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    })
                                  ]),
                                  _: 1
                                  /* STABLE */
                                })) : createCommentVNode("v-if", true),
                                createVNode(VRow, { class: "btns-row" }, {
                                  default: withCtx(() => [
                                    $data.unionRelationshipMessage ? (openBlock(), createElementBlock(
                                      "p",
                                      _hoisted_16$c,
                                      toDisplayString($data.unionRelationshipMessage),
                                      1
                                      /* TEXT */
                                    )) : createCommentVNode("v-if", true),
                                    createVNode(VCol, {
                                      cols: "8",
                                      offset: "4",
                                      class: "text-right hidden-md-and-down"
                                    }, {
                                      default: withCtx(() => [
                                        createVNode(VBtn, {
                                          color: "primary",
                                          class: "px-4",
                                          href: "",
                                          onClick: _cache[46] || (_cache[46] = ($event) => $options.updateUnionRelationship()),
                                          disabled: $data.unionDisabled
                                        }, {
                                          default: withCtx(() => _cache[160] || (_cache[160] = [
                                            createTextVNode("Update Union Relationship")
                                          ])),
                                          _: 1
                                          /* STABLE */
                                        }, 8, ["disabled"])
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }),
                                    createVNode(VCol, { class: "hidden-lg-and-up" }, {
                                      default: withCtx(() => [
                                        createVNode(VBtn, {
                                          color: "primary",
                                          class: "px-4",
                                          href: "",
                                          onClick: _cache[47] || (_cache[47] = ($event) => $options.updateUnionRelationship()),
                                          disabled: $data.unionDisabled
                                        }, {
                                          default: withCtx(() => _cache[161] || (_cache[161] = [
                                            createTextVNode("Update Union Relationship")
                                          ])),
                                          _: 1
                                          /* STABLE */
                                        }, 8, ["disabled"])
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    })
                                  ]),
                                  _: 1
                                  /* STABLE */
                                })
                              ]),
                              _: 1
                              /* STABLE */
                            },
                            512
                            /* NEED_PATCH */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          parseInt($data.templateId, 10) != 9 ? (openBlock(), createElementBlock(
            Fragment,
            { key: 0 },
            [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "pt-4" }, {
                    default: withCtx(() => [
                      _cache[162] || (_cache[162] = createBaseVNode(
                        "h4",
                        { class: "text-center" },
                        "Employer",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(VDivider)
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "p-4" }, {
                    default: withCtx(() => [
                      createVNode(VCard, {
                        class: "employer",
                        style: { "overflow-y": "scroll" }
                      }, {
                        default: withCtx(() => [
                          createVNode(VCardText, null, {
                            default: withCtx(() => [
                              (openBlock(true), createElementBlock(
                                Fragment,
                                null,
                                renderList($data.individualEmployers, (individualEmployer) => {
                                  return openBlock(), createBlock(
                                    VRow,
                                    {
                                      key: individualEmployer.IndividualEmployerId
                                    },
                                    {
                                      default: withCtx(() => [
                                        createVNode(
                                          VCol,
                                          { cols: "12" },
                                          {
                                            default: withCtx(() => [
                                              createVNode(
                                                VRow,
                                                null,
                                                {
                                                  default: withCtx(() => [
                                                    createVNode(
                                                      VCol,
                                                      { cols: "8" },
                                                      {
                                                        default: withCtx(() => [
                                                          createVNode(VTextField, {
                                                            label: "Employer",
                                                            modelValue: individualEmployer.selectedEmployerName,
                                                            "onUpdate:modelValue": ($event) => individualEmployer.selectedEmployerName = $event,
                                                            disabled: "",
                                                            variant: "underlined"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      },
                                                      1024
                                                      /* DYNAMIC_SLOTS */
                                                    ),
                                                    createVNode(
                                                      VCol,
                                                      { cols: "4" },
                                                      {
                                                        default: withCtx(() => [
                                                          createVNode(VTextField, {
                                                            label: "Unit",
                                                            modelValue: individualEmployer.selectedUnitName,
                                                            "onUpdate:modelValue": ($event) => individualEmployer.selectedUnitName = $event,
                                                            disabled: "",
                                                            variant: "underlined"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      },
                                                      1024
                                                      /* DYNAMIC_SLOTS */
                                                    )
                                                  ]),
                                                  _: 2
                                                  /* DYNAMIC */
                                                },
                                                1024
                                                /* DYNAMIC_SLOTS */
                                              ),
                                              createVNode(
                                                VRow,
                                                null,
                                                {
                                                  default: withCtx(() => [
                                                    createVNode(
                                                      VCol,
                                                      { cols: "4" },
                                                      {
                                                        default: withCtx(() => [
                                                          createVNode(VTextField, {
                                                            label: "Work Location",
                                                            modelValue: individualEmployer.WorkLocationName,
                                                            "onUpdate:modelValue": ($event) => individualEmployer.WorkLocationName = $event,
                                                            disabled: "",
                                                            variant: "underlined"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      },
                                                      1024
                                                      /* DYNAMIC_SLOTS */
                                                    ),
                                                    createVNode(
                                                      VCol,
                                                      { cols: "4" },
                                                      {
                                                        default: withCtx(() => [
                                                          createVNode(VTextField, {
                                                            label: "Work Structure",
                                                            modelValue: individualEmployer.WorkStructureName,
                                                            "onUpdate:modelValue": ($event) => individualEmployer.WorkStructureName = $event,
                                                            disabled: "",
                                                            variant: "underlined"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      },
                                                      1024
                                                      /* DYNAMIC_SLOTS */
                                                    ),
                                                    createVNode(
                                                      VCol,
                                                      { cols: "4" },
                                                      {
                                                        default: withCtx(() => [
                                                          createVNode(VTextField, {
                                                            label: "Job Details",
                                                            modelValue: individualEmployer.LocalJobClassName,
                                                            "onUpdate:modelValue": ($event) => individualEmployer.LocalJobClassName = $event,
                                                            disabled: "",
                                                            variant: "underlined"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      },
                                                      1024
                                                      /* DYNAMIC_SLOTS */
                                                    )
                                                  ]),
                                                  _: 2
                                                  /* DYNAMIC */
                                                },
                                                1024
                                                /* DYNAMIC_SLOTS */
                                              ),
                                              createVNode(
                                                VRow,
                                                null,
                                                {
                                                  default: withCtx(() => [
                                                    createVNode(
                                                      VCol,
                                                      { cols: "4" },
                                                      {
                                                        default: withCtx(() => [
                                                          createVNode(VTextField, {
                                                            label: "Employee ID",
                                                            modelValue: individualEmployer.EmployeeId,
                                                            "onUpdate:modelValue": ($event) => individualEmployer.EmployeeId = $event,
                                                            disabled: "",
                                                            variant: "underlined"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      },
                                                      1024
                                                      /* DYNAMIC_SLOTS */
                                                    ),
                                                    createVNode(
                                                      VCol,
                                                      { cols: "4" },
                                                      {
                                                        default: withCtx(() => [
                                                          createVNode(VTextField, {
                                                            label: "Job Description",
                                                            modelValue: individualEmployer.JobDescription,
                                                            "onUpdate:modelValue": ($event) => individualEmployer.JobDescription = $event,
                                                            disabled: "",
                                                            variant: "underlined"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      },
                                                      1024
                                                      /* DYNAMIC_SLOTS */
                                                    ),
                                                    createVNode(
                                                      VCol,
                                                      { cols: "4" },
                                                      {
                                                        default: withCtx(() => [
                                                          createVNode(VTextField, {
                                                            label: "Room Number",
                                                            modelValue: individualEmployer.RoomNumber,
                                                            "onUpdate:modelValue": ($event) => individualEmployer.RoomNumber = $event,
                                                            disabled: "",
                                                            variant: "underlined"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      },
                                                      1024
                                                      /* DYNAMIC_SLOTS */
                                                    )
                                                  ]),
                                                  _: 2
                                                  /* DYNAMIC */
                                                },
                                                1024
                                                /* DYNAMIC_SLOTS */
                                              ),
                                              createVNode(
                                                VRow,
                                                null,
                                                {
                                                  default: withCtx(() => [
                                                    createVNode(
                                                      VCol,
                                                      { cols: "4" },
                                                      {
                                                        default: withCtx(() => [
                                                          createVNode(VTextField, {
                                                            modelValue: individualEmployer.HireDate,
                                                            "onUpdate:modelValue": ($event) => individualEmployer.HireDate = $event,
                                                            hint: "YYYY-MM-DD",
                                                            label: "Hire Date",
                                                            disabled: "",
                                                            variant: "underlined"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      },
                                                      1024
                                                      /* DYNAMIC_SLOTS */
                                                    ),
                                                    createVNode(
                                                      VCol,
                                                      { cols: "4" },
                                                      {
                                                        default: withCtx(() => [
                                                          createVNode(VTextField, {
                                                            modelValue: individualEmployer.StartDate,
                                                            "onUpdate:modelValue": ($event) => individualEmployer.StartDate = $event,
                                                            hint: "YYYY-MM-DD",
                                                            label: "Start Date",
                                                            disabled: "",
                                                            variant: "underlined"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      },
                                                      1024
                                                      /* DYNAMIC_SLOTS */
                                                    ),
                                                    createVNode(
                                                      VCol,
                                                      { cols: "4" },
                                                      {
                                                        default: withCtx(() => [
                                                          createVNode(VTextField, {
                                                            modelValue: individualEmployer.EndDate,
                                                            "onUpdate:modelValue": ($event) => individualEmployer.EndDate = $event,
                                                            hint: "YYYY-MM-DD",
                                                            label: "End Date",
                                                            disabled: "",
                                                            variant: "underlined"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      },
                                                      1024
                                                      /* DYNAMIC_SLOTS */
                                                    )
                                                  ]),
                                                  _: 2
                                                  /* DYNAMIC */
                                                },
                                                1024
                                                /* DYNAMIC_SLOTS */
                                              )
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  );
                                }),
                                128
                                /* KEYED_FRAGMENT */
                              ))
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VDivider, { vertical: "" }),
                  createVNode(VCol, { class: "p-4" }, {
                    default: withCtx(() => [
                      createVNode(VCard, null, {
                        default: withCtx(() => [
                          createVNode(VCardText, null, {
                            default: withCtx(() => [
                              createVNode(VForm, {
                                ref: "employerForm",
                                modelValue: $data.valid,
                                "onUpdate:modelValue": _cache[65] || (_cache[65] = ($event) => $data.valid = $event)
                              }, {
                                default: withCtx(() => [
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { cols: "8" }, {
                                        default: withCtx(() => [
                                          createVNode(VAutocomplete, {
                                            modelValue: $data.selectedEmployerId,
                                            "onUpdate:modelValue": _cache[48] || (_cache[48] = ($event) => $data.selectedEmployerId = $event),
                                            items: $data.employers,
                                            "item-title": "EmployerName",
                                            "item-value": "EmployerId",
                                            "persistent-hint": "",
                                            rules: [$options.rules.required],
                                            variant: "underlined"
                                          }, {
                                            label: withCtx(() => [
                                              $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_17$b, "* ")) : createCommentVNode("v-if", true),
                                              _cache[163] || (_cache[163] = createTextVNode("Search for an employer "))
                                            ]),
                                            _: 1
                                            /* STABLE */
                                          }, 8, ["modelValue", "items", "rules"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VSelect, {
                                            items: $data.units,
                                            "item-value": "UnitId",
                                            "item-title": "UnitName",
                                            modelValue: $data.selectedUnitId,
                                            "onUpdate:modelValue": _cache[49] || (_cache[49] = ($event) => $data.selectedUnitId = $event),
                                            rules: [$options.rules.required],
                                            variant: "underlined"
                                          }, {
                                            label: withCtx(() => [
                                              $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_18$b, "* ")) : createCommentVNode("v-if", true),
                                              _cache[164] || (_cache[164] = createTextVNode("Unit "))
                                            ]),
                                            _: 1
                                            /* STABLE */
                                          }, 8, ["items", "modelValue", "rules"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(_component_work_location_chooser, {
                                            "employer-id": $data.selectedEmployerId,
                                            value: $data.WorkLocationId,
                                            onSelectedWorkLocation: _cache[50] || (_cache[50] = ($event) => $options.setWorkLocationId($event))
                                          }, null, 8, ["employer-id", "value"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(_component_work_structure_chooser, {
                                            "employer-id": $data.selectedEmployerId,
                                            value: $data.WorkStructureId,
                                            onSelectedWorkStructure: _cache[51] || (_cache[51] = ($event) => $options.setWorkStructureId($event))
                                          }, null, 8, ["employer-id", "value"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(_component_job_class_chooser, {
                                            "unit-id": $data.selectedUnitId,
                                            "job-class-id": $data.selectedLocalJobClassId,
                                            "job-title-id": $data.selectedJobTitleId,
                                            rules: $options.rules,
                                            onSelectedJobClass: _cache[52] || (_cache[52] = ($event) => $options.setPropertyValue("LocalJobClassId", $event)),
                                            onSelectedJobTitle: _cache[53] || (_cache[53] = ($event) => $options.setPropertyValue("JobTitleId", $event))
                                          }, null, 8, ["unit-id", "job-class-id", "job-title-id", "rules"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VTextField, {
                                            label: "Employee ID",
                                            modelValue: $data.editableIndividualEmployer.EmployeeId,
                                            "onUpdate:modelValue": _cache[54] || (_cache[54] = ($event) => $data.editableIndividualEmployer.EmployeeId = $event),
                                            variant: "underlined"
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VTextField, {
                                            label: "Job Description",
                                            modelValue: $data.editableIndividualEmployer.JobDescription,
                                            "onUpdate:modelValue": _cache[55] || (_cache[55] = ($event) => $data.editableIndividualEmployer.JobDescription = $event),
                                            variant: "underlined"
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VTextField, {
                                            label: "Room Number",
                                            modelValue: $data.editableIndividualEmployer.RoomNumber,
                                            "onUpdate:modelValue": _cache[56] || (_cache[56] = ($event) => $data.editableIndividualEmployer.RoomNumber = $event),
                                            variant: "underlined"
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_19$b, [
                                            createVNode(VMenu, {
                                              offset: 40,
                                              transition: "scale-transition",
                                              "min-width": "290px"
                                            }, {
                                              activator: withCtx(({ props }) => [
                                                createVNode(VTextField, mergeProps({
                                                  modelValue: $data.editableIndividualEmployer.HireDate,
                                                  "onUpdate:modelValue": _cache[57] || (_cache[57] = ($event) => $data.editableIndividualEmployer.HireDate = $event),
                                                  hint: "YYYY-MM-DD",
                                                  label: "Hire Date"
                                                }, props, { variant: "underlined" }), null, 16, ["modelValue"])
                                              ]),
                                              default: withCtx(() => [
                                                createVNode(VDatePicker, {
                                                  modelValue: $data.editableIndividualEmployer.HireDate,
                                                  "onUpdate:modelValue": _cache[58] || (_cache[58] = ($event) => $data.editableIndividualEmployer.HireDate = $event),
                                                  "no-title": "",
                                                  scrollable: ""
                                                }, null, 8, ["modelValue"])
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            })
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_20$a, [
                                            createVNode(VMenu, {
                                              offset: 40,
                                              transition: "scale-transition",
                                              "min-width": "290px"
                                            }, {
                                              activator: withCtx(({ props }) => [
                                                createVNode(VTextField, mergeProps({
                                                  modelValue: $data.editableIndividualEmployer.StartDate,
                                                  "onUpdate:modelValue": _cache[59] || (_cache[59] = ($event) => $data.editableIndividualEmployer.StartDate = $event),
                                                  hint: "YYYY-MM-DD",
                                                  label: "Start Date"
                                                }, props, { variant: "underlined" }), null, 16, ["modelValue"])
                                              ]),
                                              default: withCtx(() => [
                                                createVNode(VDatePicker, {
                                                  modelValue: $data.editableIndividualEmployer.StartDate,
                                                  "onUpdate:modelValue": _cache[60] || (_cache[60] = ($event) => $data.editableIndividualEmployer.StartDate = $event),
                                                  "no-title": "",
                                                  scrollable: ""
                                                }, null, 8, ["modelValue"])
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            })
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_21$a, [
                                            createVNode(VMenu, {
                                              offset: 40,
                                              transition: "scale-transition",
                                              "min-width": "290px"
                                            }, {
                                              activator: withCtx(({ props }) => [
                                                createVNode(VTextField, mergeProps({
                                                  modelValue: $data.editableIndividualEmployer.EndDate,
                                                  "onUpdate:modelValue": _cache[61] || (_cache[61] = ($event) => $data.editableIndividualEmployer.EndDate = $event),
                                                  hint: "YYYY-MM-DD",
                                                  label: "End Date"
                                                }, props, { variant: "underlined" }), null, 16, ["modelValue"])
                                              ]),
                                              default: withCtx(() => [
                                                createVNode(VDatePicker, {
                                                  modelValue: $data.editableIndividualEmployer.EndDate,
                                                  "onUpdate:modelValue": _cache[62] || (_cache[62] = ($event) => $data.editableIndividualEmployer.EndDate = $event),
                                                  "no-title": "",
                                                  scrollable: ""
                                                }, null, 8, ["modelValue"])
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            })
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VRow, { class: "btns-row" }, {
                                    default: withCtx(() => [
                                      $data.employerMessage ? (openBlock(), createElementBlock(
                                        "p",
                                        _hoisted_22$9,
                                        toDisplayString($data.employerMessage),
                                        1
                                        /* TEXT */
                                      )) : createCommentVNode("v-if", true),
                                      createVNode(VCol, {
                                        cols: "8",
                                        offset: "4",
                                        class: "text-right hidden-md-and-down"
                                      }, {
                                        default: withCtx(() => [
                                          createVNode(VBtn, {
                                            color: "primary",
                                            class: "px-4",
                                            href: "",
                                            onClick: _cache[63] || (_cache[63] = ($event) => $options.updateEmployer()),
                                            disabled: $data.employerDisabled
                                          }, {
                                            default: withCtx(() => _cache[165] || (_cache[165] = [
                                              createTextVNode("Update Employer")
                                            ])),
                                            _: 1
                                            /* STABLE */
                                          }, 8, ["disabled"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { class: "hidden-lg-and-up" }, {
                                        default: withCtx(() => [
                                          createVNode(VBtn, {
                                            color: "primary",
                                            class: "px-4",
                                            href: "",
                                            onClick: _cache[64] || (_cache[64] = ($event) => $options.updateEmployer()),
                                            disabled: $data.employerDisabled
                                          }, {
                                            default: withCtx(() => _cache[166] || (_cache[166] = [
                                              createTextVNode("Update Employer")
                                            ])),
                                            _: 1
                                            /* STABLE */
                                          }, 8, ["disabled"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }, 8, ["modelValue"])
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ],
            64
            /* STABLE_FRAGMENT */
          )) : createCommentVNode("v-if", true),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "pt-4" }, {
                default: withCtx(() => [
                  _cache[167] || (_cache[167] = createBaseVNode(
                    "h4",
                    { class: "text-center" },
                    "Contact Information",
                    -1
                    /* HOISTED */
                  )),
                  createVNode(VDivider)
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createCommentVNode(" HOME ADDRESS "),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, {
                    class: "address",
                    style: { "overflow-y": "scroll", "height": "535px" }
                  }, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createBaseVNode(
                                    "h3",
                                    null,
                                    "Address " + toDisplayString($data.individualHomeAddresses.length > 1 ? "(" + $data.individualHomeAddresses.length + " found)" : ""),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($data.individualHomeAddresses, (address, index) => {
                              return openBlock(), createBlock(
                                VRow,
                                { key: index },
                                {
                                  default: withCtx(() => [
                                    createVNode(
                                      VCol,
                                      { cols: "12" },
                                      {
                                        default: withCtx(() => [
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_23$9, [
                                                        createVNode(VSelect, {
                                                          items: $data.addressTypes,
                                                          "item-value": "IndividualAddressTypeId",
                                                          "item-title": "IndividualAddressTypeName",
                                                          modelValue: address.IndividualAddressTypeId,
                                                          "onUpdate:modelValue": ($event) => address.IndividualAddressTypeId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_24$8, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[168] || (_cache[168] = createTextVNode("Address Type "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_25$8, [
                                                        createVNode(VSelect, {
                                                          items: $options.contactStatus,
                                                          "item-value": "ContactStatusId",
                                                          "item-title": "ContactStatusName",
                                                          modelValue: address.ContactStatusId,
                                                          "onUpdate:modelValue": ($event) => address.ContactStatusId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_26$8, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[169] || (_cache[169] = createTextVNode("Address Status "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_27$8, [
                                                        createVNode(VSelect, {
                                                          items: $options.contactSources,
                                                          "item-value": "ContactSourceId",
                                                          "item-title": "ContactSourceName",
                                                          modelValue: address.ContactSourceId,
                                                          "onUpdate:modelValue": ($event) => address.ContactSourceId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_28$8, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[170] || (_cache[170] = createTextVNode("Address Source "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  {
                                                    cols: "3",
                                                    class: "switches"
                                                  },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VSwitch, {
                                                        color: "primary",
                                                        label: "Preferred Address",
                                                        modelValue: address.IsPreferred,
                                                        "onUpdate:modelValue": ($event) => address.IsPreferred = $event,
                                                        disabled: ""
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  {
                                                    cols: "3",
                                                    class: "switches"
                                                  },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VSwitch, {
                                                        color: "primary",
                                                        label: "Do Not Visit",
                                                        modelValue: address.DoNotVisit,
                                                        "onUpdate:modelValue": ($event) => address.DoNotVisit = $event,
                                                        disabled: ""
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "6" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_29$8, [
                                                        createVNode(VSelect, {
                                                          items: $data.contactRestrictions,
                                                          "item-value": "ContactRestrictionId",
                                                          "item-title": "ContactRestrictionName",
                                                          modelValue: address.CanSendMailRestrictionId,
                                                          "onUpdate:modelValue": ($event) => address.CanSendMailRestrictionId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_30$8, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[171] || (_cache[171] = createTextVNode("Mailing Contact Restriction "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  { cols: "8" },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VTextField, {
                                                        rules: [$options.rules.required],
                                                        modelValue: address.AddressLine1,
                                                        "onUpdate:modelValue": ($event) => address.AddressLine1 = $event,
                                                        maxlength: 200,
                                                        disabled: "",
                                                        variant: "underlined"
                                                      }, {
                                                        label: withCtx(() => [
                                                          $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_31$8, "* ")) : createCommentVNode("v-if", true),
                                                          _cache[172] || (_cache[172] = createTextVNode("Street Address "))
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      }, 1032, ["rules", "modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VTextField, {
                                                        label: "Suite/Apt",
                                                        modelValue: address.AddressLine2,
                                                        "onUpdate:modelValue": ($event) => address.AddressLine2 = $event,
                                                        maxlength: 200,
                                                        disabled: "",
                                                        variant: "underlined"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VTextField, {
                                                        rules: [$options.rules.required],
                                                        modelValue: address.City,
                                                        "onUpdate:modelValue": ($event) => address.City = $event,
                                                        maxlength: 100,
                                                        disabled: "",
                                                        variant: "underlined"
                                                      }, {
                                                        label: withCtx(() => [
                                                          $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_32$6, "* ")) : createCommentVNode("v-if", true),
                                                          _cache[173] || (_cache[173] = createTextVNode("City "))
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      }, 1032, ["rules", "modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_33$6, [
                                                        createVNode(VTextField, {
                                                          rules: [$options.rules.required],
                                                          modelValue: address.StateTerritory.StateTerritoryName,
                                                          "onUpdate:modelValue": ($event) => address.StateTerritory.StateTerritoryName = $event,
                                                          maxlength: 100,
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_34$5, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[174] || (_cache[174] = createTextVNode("State Territory "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["rules", "modelValue", "onUpdate:modelValue"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VTextField, {
                                                        rules: [$options.rules.required],
                                                        modelValue: address.PostalCode,
                                                        "onUpdate:modelValue": ($event) => address.PostalCode = $event,
                                                        maxlength: 15,
                                                        disabled: "",
                                                        variant: "underlined"
                                                      }, {
                                                        label: withCtx(() => [
                                                          $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_35$5, "* ")) : createCommentVNode("v-if", true),
                                                          _cache[175] || (_cache[175] = createTextVNode("Zip Code "))
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      }, 1032, ["rules", "modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          )
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      },
                                      1024
                                      /* DYNAMIC_SLOTS */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1024
                                /* DYNAMIC_SLOTS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VDivider, { vertical: "" }),
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, null, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => _cache[176] || (_cache[176] = [
                                  createBaseVNode(
                                    "h3",
                                    null,
                                    "Address",
                                    -1
                                    /* HOISTED */
                                  )
                                ])),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_36$5, [
                                    createVNode(VSelect, {
                                      items: $data.addressTypes,
                                      "item-value": "IndividualAddressTypeId",
                                      "item-title": "IndividualAddressTypeName",
                                      modelValue: $data.editableIndividualAddress.IndividualAddressTypeId,
                                      "onUpdate:modelValue": _cache[66] || (_cache[66] = ($event) => $data.editableIndividualAddress.IndividualAddressTypeId = $event),
                                      rules: [$options.rules.required],
                                      disabled: "",
                                      variant: "underlined"
                                    }, {
                                      label: withCtx(() => [
                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_37$5, "* ")) : createCommentVNode("v-if", true),
                                        _cache[177] || (_cache[177] = createTextVNode("Address Type "))
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }, 8, ["items", "modelValue", "rules"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_38$4, [
                                    createVNode(VSelect, {
                                      items: $options.contactStatus,
                                      "item-value": "ContactStatusId",
                                      "item-title": "ContactStatusName",
                                      modelValue: $data.editableIndividualAddress.ContactStatusId,
                                      "onUpdate:modelValue": _cache[67] || (_cache[67] = ($event) => $data.editableIndividualAddress.ContactStatusId = $event),
                                      rules: [$options.rules.required],
                                      disabled: "",
                                      variant: "underlined"
                                    }, {
                                      label: withCtx(() => [
                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_39$4, "* ")) : createCommentVNode("v-if", true),
                                        _cache[178] || (_cache[178] = createTextVNode("Address Status "))
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }, 8, ["items", "modelValue", "rules"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_40$4, [
                                    createVNode(VSelect, {
                                      items: $options.contactSources,
                                      "item-value": "ContactSourceId",
                                      "item-title": "ContactSourceName",
                                      modelValue: $data.editableIndividualAddress.ContactSourceId,
                                      "onUpdate:modelValue": _cache[68] || (_cache[68] = ($event) => $data.editableIndividualAddress.ContactSourceId = $event),
                                      rules: [$options.rules.required],
                                      disabled: "",
                                      variant: "underlined"
                                    }, {
                                      label: withCtx(() => [
                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_41$4, "* ")) : createCommentVNode("v-if", true),
                                        _cache[179] || (_cache[179] = createTextVNode("Address Source "))
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }, 8, ["items", "modelValue", "rules"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, {
                                cols: "3",
                                class: "switches"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VSwitch, {
                                    color: "primary",
                                    label: "Preferred Address",
                                    modelValue: $data.editableIndividualAddress.IsPreferred,
                                    "onUpdate:modelValue": _cache[69] || (_cache[69] = ($event) => $data.editableIndividualAddress.IsPreferred = $event)
                                  }, null, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, {
                                cols: "3",
                                class: "switches"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VSwitch, {
                                    color: "primary",
                                    label: "Do Not Visit",
                                    modelValue: $data.editableIndividualAddress.DoNotVisit,
                                    "onUpdate:modelValue": _cache[70] || (_cache[70] = ($event) => $data.editableIndividualAddress.DoNotVisit = $event)
                                  }, null, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "6" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_42$4, [
                                    createVNode(VSelect, {
                                      items: $data.contactRestrictions,
                                      "item-value": "ContactRestrictionId",
                                      "item-title": "ContactRestrictionName",
                                      modelValue: $data.editableIndividualAddress.CanSendMailRestrictionId,
                                      "onUpdate:modelValue": _cache[71] || (_cache[71] = ($event) => $data.editableIndividualAddress.CanSendMailRestrictionId = $event),
                                      rules: [$options.rules.required],
                                      variant: "underlined"
                                    }, {
                                      label: withCtx(() => [
                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_43$4, "* ")) : createCommentVNode("v-if", true),
                                        _cache[180] || (_cache[180] = createTextVNode("Mailing Contact Restriction "))
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }, 8, ["items", "modelValue", "rules"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "8" }, {
                                default: withCtx(() => [
                                  createVNode(VTextField, {
                                    rules: [$options.rules.required],
                                    modelValue: $data.editableIndividualAddress.AddressLine1,
                                    "onUpdate:modelValue": _cache[72] || (_cache[72] = ($event) => $data.editableIndividualAddress.AddressLine1 = $event),
                                    maxlength: 200,
                                    variant: "underlined"
                                  }, {
                                    label: withCtx(() => [
                                      $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_44$4, "* ")) : createCommentVNode("v-if", true),
                                      _cache[181] || (_cache[181] = createTextVNode("Street Address "))
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["rules", "modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VTextField, {
                                    label: "Suite/Apt",
                                    modelValue: $data.editableIndividualAddress.AddressLine2,
                                    "onUpdate:modelValue": _cache[73] || (_cache[73] = ($event) => $data.editableIndividualAddress.AddressLine2 = $event),
                                    maxlength: 200,
                                    variant: "underlined"
                                  }, null, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VTextField, {
                                    rules: [$options.rules.required],
                                    modelValue: $data.editableIndividualAddress.City,
                                    "onUpdate:modelValue": _cache[74] || (_cache[74] = ($event) => $data.editableIndividualAddress.City = $event),
                                    maxlength: 100,
                                    variant: "underlined"
                                  }, {
                                    label: withCtx(() => [
                                      $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_45$4, "* ")) : createCommentVNode("v-if", true),
                                      _cache[182] || (_cache[182] = createTextVNode("City "))
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["rules", "modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_46$4, [
                                    createVNode(_component_StateTerritorySelectComponent, {
                                      "item-value": "StateTerritoryId",
                                      "item-text": "StateTerritoryName",
                                      label: "State",
                                      modelValue: $data.editableIndividualAddress.StateTerritoryId,
                                      "onUpdate:modelValue": _cache[75] || (_cache[75] = ($event) => $data.editableIndividualAddress.StateTerritoryId = $event),
                                      rules: [$options.rules.required]
                                    }, null, 8, ["modelValue", "rules"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VTextField, {
                                    rules: [$options.rules.required],
                                    modelValue: $data.editableIndividualAddress.PostalCode,
                                    "onUpdate:modelValue": _cache[76] || (_cache[76] = ($event) => $data.editableIndividualAddress.PostalCode = $event),
                                    maxlength: 15,
                                    variant: "underlined"
                                  }, {
                                    label: withCtx(() => [
                                      $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_47$4, "* ")) : createCommentVNode("v-if", true),
                                      _cache[183] || (_cache[183] = createTextVNode("Zip Code "))
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["rules", "modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, { class: "btns-row" }, {
                            default: withCtx(() => [
                              $data.addressMessage ? (openBlock(), createElementBlock(
                                "p",
                                _hoisted_48$4,
                                toDisplayString($data.addressMessage),
                                1
                                /* TEXT */
                              )) : createCommentVNode("v-if", true),
                              createVNode(VCol, { class: "text-right hidden-md-and-down" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    class: "px-4",
                                    onClick: _cache[77] || (_cache[77] = ($event) => $options.updateAddress("home")),
                                    disabled: $data.addressDisabled
                                  }, {
                                    default: withCtx(() => _cache[184] || (_cache[184] = [
                                      createTextVNode("Create Address")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { class: "hidden-lg-and-up mobile-col-button-spacing" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    onClick: _cache[78] || (_cache[78] = ($event) => $options.updateAddress("home")),
                                    disabled: $data.addressDisabled,
                                    class: "px-4 mobile-button-multiline-smaller"
                                  }, {
                                    default: withCtx(() => _cache[185] || (_cache[185] = [
                                      createTextVNode("Create Address")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "py-4" }, {
                default: withCtx(() => [
                  $data.isEduesEligible ? (openBlock(), createElementBlock("hr", _hoisted_49$4)) : createCommentVNode("v-if", true)
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createCommentVNode(" BILLING ADDRESS "),
          $data.isEduesEligible ? (openBlock(), createBlock(VRow, { key: 1 }, {
            default: withCtx(() => [
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, {
                    class: "address",
                    style: { "overflow-y": "scroll", "height": "535px" }
                  }, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createBaseVNode(
                                    "h3",
                                    null,
                                    "Billing Address " + toDisplayString($data.individualBillingAddresses.length > 1 ? "(" + $data.individualBillingAddresses.length + " found)" : ""),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($data.individualBillingAddresses, (address, index) => {
                              return openBlock(), createBlock(
                                VRow,
                                { key: index },
                                {
                                  default: withCtx(() => [
                                    createVNode(
                                      VCol,
                                      { cols: "12" },
                                      {
                                        default: withCtx(() => [
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_50$4, [
                                                        createVNode(VSelect, {
                                                          items: $data.addressTypes,
                                                          "item-value": "IndividualAddressTypeId",
                                                          "item-title": "IndividualAddressTypeName",
                                                          modelValue: address.IndividualAddressTypeId,
                                                          "onUpdate:modelValue": ($event) => address.IndividualAddressTypeId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_51$4, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[186] || (_cache[186] = createTextVNode("Address Type "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_52$4, [
                                                        createVNode(VSelect, {
                                                          items: $options.contactStatus,
                                                          "item-value": "ContactStatusId",
                                                          "item-title": "ContactStatusName",
                                                          modelValue: address.ContactStatusId,
                                                          "onUpdate:modelValue": ($event) => address.ContactStatusId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_53$4, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[187] || (_cache[187] = createTextVNode("Address Status "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_54$4, [
                                                        createVNode(VSelect, {
                                                          items: $options.contactSources,
                                                          "item-value": "ContactSourceId",
                                                          "item-title": "ContactSourceName",
                                                          modelValue: address.ContactSourceId,
                                                          "onUpdate:modelValue": ($event) => address.ContactSourceId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_55$4, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[188] || (_cache[188] = createTextVNode("Address Source "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  {
                                                    cols: "3",
                                                    class: "switches"
                                                  },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VSwitch, {
                                                        color: "primary",
                                                        label: "Preferred Address",
                                                        modelValue: address.IsPreferred,
                                                        "onUpdate:modelValue": ($event) => address.IsPreferred = $event,
                                                        disabled: ""
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  {
                                                    cols: "3",
                                                    class: "switches"
                                                  },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VSwitch, {
                                                        color: "primary",
                                                        label: "Do Not Visit",
                                                        modelValue: address.DoNotVisit,
                                                        "onUpdate:modelValue": ($event) => address.DoNotVisit = $event,
                                                        disabled: ""
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "6" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_56$4, [
                                                        createVNode(VSelect, {
                                                          items: $data.contactRestrictions,
                                                          "item-value": "ContactRestrictionId",
                                                          "item-title": "ContactRestrictionName",
                                                          modelValue: address.CanSendMailRestrictionId,
                                                          "onUpdate:modelValue": ($event) => address.CanSendMailRestrictionId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_57$4, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[189] || (_cache[189] = createTextVNode("Mailing Contact Restriction "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  { cols: "8" },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VTextField, {
                                                        rules: [$options.rules.required],
                                                        modelValue: address.AddressLine1,
                                                        "onUpdate:modelValue": ($event) => address.AddressLine1 = $event,
                                                        maxlength: 200,
                                                        disabled: "",
                                                        variant: "underlined"
                                                      }, {
                                                        label: withCtx(() => [
                                                          $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_58$4, "* ")) : createCommentVNode("v-if", true),
                                                          _cache[190] || (_cache[190] = createTextVNode("Street Address "))
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      }, 1032, ["rules", "modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VTextField, {
                                                        label: "Suite/Apt",
                                                        modelValue: address.AddressLine2,
                                                        "onUpdate:modelValue": ($event) => address.AddressLine2 = $event,
                                                        maxlength: 200,
                                                        disabled: "",
                                                        variant: "underlined"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VTextField, {
                                                        rules: [$options.rules.required],
                                                        modelValue: address.City,
                                                        "onUpdate:modelValue": ($event) => address.City = $event,
                                                        maxlength: 100,
                                                        disabled: "",
                                                        variant: "underlined"
                                                      }, {
                                                        label: withCtx(() => [
                                                          $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_59$4, "* ")) : createCommentVNode("v-if", true),
                                                          _cache[191] || (_cache[191] = createTextVNode("City "))
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      }, 1032, ["rules", "modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_60$4, [
                                                        createVNode(VTextField, {
                                                          rules: [$options.rules.required],
                                                          modelValue: address.StateTerritory.StateTerritoryName,
                                                          "onUpdate:modelValue": ($event) => address.StateTerritory.StateTerritoryName = $event,
                                                          maxlength: 100,
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_61$4, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[192] || (_cache[192] = createTextVNode("State Territory "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["rules", "modelValue", "onUpdate:modelValue"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VTextField, {
                                                        rules: [$options.rules.required],
                                                        modelValue: address.PostalCode,
                                                        "onUpdate:modelValue": ($event) => address.PostalCode = $event,
                                                        maxlength: 15,
                                                        disabled: "",
                                                        variant: "underlined"
                                                      }, {
                                                        label: withCtx(() => [
                                                          $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_62$4, "* ")) : createCommentVNode("v-if", true),
                                                          _cache[193] || (_cache[193] = createTextVNode("Zip Code "))
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      }, 1032, ["rules", "modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          $data.individualBillingAddresses.length > 1 && index < $data.individualBillingAddresses.length - 1 ? (openBlock(), createBlock(VRow, { key: 0 }, {
                                            default: withCtx(() => [
                                              createVNode(VDivider)
                                            ]),
                                            _: 1
                                            /* STABLE */
                                          })) : createCommentVNode("v-if", true)
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      },
                                      1024
                                      /* DYNAMIC_SLOTS */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1024
                                /* DYNAMIC_SLOTS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          )),
                          $data.individualBillingAddresses.length === 0 ? (openBlock(), createBlock(VRow, { key: 0 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { cols: "12" }, {
                                        default: withCtx(() => _cache[194] || (_cache[194] = [
                                          createBaseVNode(
                                            "p",
                                            { class: "text-center contact-message" },
                                            "Billing Address not found",
                                            -1
                                            /* HOISTED */
                                          )
                                        ])),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true)
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VDivider, { vertical: "" }),
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, null, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => _cache[195] || (_cache[195] = [
                                  createBaseVNode(
                                    "h3",
                                    null,
                                    "Billing Address",
                                    -1
                                    /* HOISTED */
                                  )
                                ])),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          $data.editableIndividualBillingAddress.City ? (openBlock(), createBlock(VRow, { key: 0 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_63$4, [
                                    createVNode(VSelect, {
                                      items: $data.addressTypes,
                                      "item-value": "IndividualAddressTypeId",
                                      "item-title": "IndividualAddressTypeName",
                                      modelValue: $data.editableIndividualBillingAddress.IndividualAddressTypeId,
                                      "onUpdate:modelValue": _cache[79] || (_cache[79] = ($event) => $data.editableIndividualBillingAddress.IndividualAddressTypeId = $event),
                                      rules: [$options.rules.required],
                                      disabled: "",
                                      variant: "underlined"
                                    }, {
                                      label: withCtx(() => [
                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_64$4, "* ")) : createCommentVNode("v-if", true),
                                        _cache[196] || (_cache[196] = createTextVNode("Address Type "))
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }, 8, ["items", "modelValue", "rules"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_65$4, [
                                    createVNode(VSelect, {
                                      items: $options.contactStatus,
                                      "item-value": "ContactStatusId",
                                      "item-title": "ContactStatusName",
                                      modelValue: $data.editableIndividualBillingAddress.ContactStatusId,
                                      "onUpdate:modelValue": _cache[80] || (_cache[80] = ($event) => $data.editableIndividualBillingAddress.ContactStatusId = $event),
                                      rules: [$options.rules.required],
                                      disabled: "",
                                      variant: "underlined"
                                    }, {
                                      label: withCtx(() => [
                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_66$4, "* ")) : createCommentVNode("v-if", true),
                                        _cache[197] || (_cache[197] = createTextVNode("Address Status "))
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }, 8, ["items", "modelValue", "rules"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_67$4, [
                                    createVNode(VSelect, {
                                      items: $options.contactSources,
                                      "item-value": "ContactSourceId",
                                      "item-title": "ContactSourceName",
                                      modelValue: $data.editableIndividualBillingAddress.ContactSourceId,
                                      "onUpdate:modelValue": _cache[81] || (_cache[81] = ($event) => $data.editableIndividualBillingAddress.ContactSourceId = $event),
                                      rules: [$options.rules.required],
                                      disabled: "",
                                      variant: "underlined"
                                    }, {
                                      label: withCtx(() => [
                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_68$2, "* ")) : createCommentVNode("v-if", true),
                                        _cache[198] || (_cache[198] = createTextVNode("Address Source "))
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }, 8, ["items", "modelValue", "rules"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true),
                          $data.editableIndividualBillingAddress.City ? (openBlock(), createBlock(VRow, { key: 1 }, {
                            default: withCtx(() => [
                              createVNode(VCol, {
                                cols: "3",
                                class: "switches"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VSwitch, {
                                    color: "primary",
                                    label: "Preferred Address",
                                    modelValue: $data.editableIndividualBillingAddress.IsPreferred,
                                    "onUpdate:modelValue": _cache[82] || (_cache[82] = ($event) => $data.editableIndividualBillingAddress.IsPreferred = $event)
                                  }, null, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, {
                                cols: "3",
                                class: "switches"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VSwitch, {
                                    color: "primary",
                                    label: "Do Not Visit",
                                    modelValue: $data.editableIndividualBillingAddress.DoNotVisit,
                                    "onUpdate:modelValue": _cache[83] || (_cache[83] = ($event) => $data.editableIndividualBillingAddress.DoNotVisit = $event)
                                  }, null, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "6" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_69$1, [
                                    createVNode(VSelect, {
                                      items: $data.contactRestrictions,
                                      "item-value": "ContactRestrictionId",
                                      "item-title": "ContactRestrictionName",
                                      modelValue: $data.editableIndividualBillingAddress.CanSendMailRestrictionId,
                                      "onUpdate:modelValue": _cache[84] || (_cache[84] = ($event) => $data.editableIndividualBillingAddress.CanSendMailRestrictionId = $event),
                                      rules: [$options.rules.required],
                                      variant: "underlined"
                                    }, {
                                      label: withCtx(() => [
                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_70$1, "* ")) : createCommentVNode("v-if", true),
                                        _cache[199] || (_cache[199] = createTextVNode("Mailing Contact Restriction "))
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }, 8, ["items", "modelValue", "rules"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true),
                          $data.editableIndividualBillingAddress.City ? (openBlock(), createBlock(VRow, { key: 2 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "8" }, {
                                default: withCtx(() => [
                                  createVNode(VTextField, {
                                    rules: [$options.rules.required],
                                    modelValue: $data.editableIndividualBillingAddress.AddressLine1,
                                    "onUpdate:modelValue": _cache[85] || (_cache[85] = ($event) => $data.editableIndividualBillingAddress.AddressLine1 = $event),
                                    maxlength: 200,
                                    variant: "underlined"
                                  }, {
                                    label: withCtx(() => [
                                      $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_71$1, "* ")) : createCommentVNode("v-if", true),
                                      _cache[200] || (_cache[200] = createTextVNode("Street Address "))
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["rules", "modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VTextField, {
                                    label: "Suite/Apt",
                                    modelValue: $data.editableIndividualBillingAddress.AddressLine2,
                                    "onUpdate:modelValue": _cache[86] || (_cache[86] = ($event) => $data.editableIndividualBillingAddress.AddressLine2 = $event),
                                    maxlength: 200,
                                    variant: "underlined"
                                  }, null, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true),
                          $data.editableIndividualBillingAddress.City ? (openBlock(), createBlock(VRow, { key: 3 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VTextField, {
                                    rules: [$options.rules.required],
                                    modelValue: $data.editableIndividualBillingAddress.City,
                                    "onUpdate:modelValue": _cache[87] || (_cache[87] = ($event) => $data.editableIndividualBillingAddress.City = $event),
                                    maxlength: 100,
                                    variant: "underlined"
                                  }, {
                                    label: withCtx(() => [
                                      $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_72$1, "* ")) : createCommentVNode("v-if", true),
                                      _cache[201] || (_cache[201] = createTextVNode("City "))
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["rules", "modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_73$1, [
                                    createVNode(_component_StateTerritorySelectComponent2, {
                                      "item-value": "StateTerritoryId",
                                      "item-text": "StateTerritoryName",
                                      label: "State",
                                      modelValue: $data.editableIndividualBillingAddress.StateTerritoryId,
                                      "onUpdate:modelValue": _cache[88] || (_cache[88] = ($event) => $data.editableIndividualBillingAddress.StateTerritoryId = $event),
                                      rules: [$options.rules.required],
                                      id: "stateDropdown",
                                      "state-territories": $options.stateTerritories
                                    }, null, 8, ["modelValue", "rules", "state-territories"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { cols: "4" }, {
                                default: withCtx(() => [
                                  createVNode(VTextField, {
                                    rules: [$options.rules.required],
                                    modelValue: $data.editableIndividualBillingAddress.PostalCode,
                                    "onUpdate:modelValue": _cache[89] || (_cache[89] = ($event) => $data.editableIndividualBillingAddress.PostalCode = $event),
                                    maxlength: 15,
                                    variant: "underlined"
                                  }, {
                                    label: withCtx(() => [
                                      $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_74$1, "* ")) : createCommentVNode("v-if", true),
                                      _cache[202] || (_cache[202] = createTextVNode("Zip Code "))
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["rules", "modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true),
                          $data.editableIndividualBillingAddress.City ? (openBlock(), createBlock(VRow, {
                            key: 4,
                            class: "btns-row"
                          }, {
                            default: withCtx(() => [
                              $data.billingAddressMessage ? (openBlock(), createElementBlock(
                                "p",
                                _hoisted_75$1,
                                toDisplayString($data.billingAddressMessage),
                                1
                                /* TEXT */
                              )) : createCommentVNode("v-if", true),
                              createVNode(VCol, { class: "text-right hidden-md-and-down" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    class: "px-4",
                                    href: "",
                                    onClick: _cache[90] || (_cache[90] = ($event) => $options.updateAddress("billing")),
                                    disabled: $data.billingAddressDisabled
                                  }, {
                                    default: withCtx(() => _cache[203] || (_cache[203] = [
                                      createTextVNode("Create Billing Address")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { class: "hidden-lg-and-up mobile-col-button-spacing" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    href: "",
                                    onClick: _cache[91] || (_cache[91] = ($event) => $options.updateAddress("billing")),
                                    disabled: $data.billingAddressDisabled,
                                    class: "px-4 mobile-button-multiline-smaller"
                                  }, {
                                    default: withCtx(() => _cache[204] || (_cache[204] = [
                                      createTextVNode("Create Billing Address")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true),
                          !$data.editableIndividualBillingAddress.City ? (openBlock(), createBlock(VRow, { key: 5 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { cols: "12" }, {
                                        default: withCtx(() => _cache[205] || (_cache[205] = [
                                          createBaseVNode(
                                            "p",
                                            { class: "text-center contact-message" },
                                            "Billing Address not found",
                                            -1
                                            /* HOISTED */
                                          )
                                        ])),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true)
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "py-4" }, {
                default: withCtx(() => _cache[206] || (_cache[206] = [
                  createBaseVNode(
                    "hr",
                    { style: { "border-top": "dotted 2px" } },
                    null,
                    -1
                    /* HOISTED */
                  )
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createCommentVNode(" HOME EMAIL "),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, {
                    class: "email",
                    style: { "overflow-y": "scroll" }
                  }, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createBaseVNode(
                                    "h3",
                                    null,
                                    "Home Email " + toDisplayString($data.individualHomeEmails.length > 1 ? "(" + $data.individualHomeEmails.length + " found)" : ""),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($data.individualHomeEmails, (email, index) => {
                              return openBlock(), createBlock(
                                VRow,
                                { key: index },
                                {
                                  default: withCtx(() => [
                                    createVNode(
                                      VCol,
                                      { cols: "12" },
                                      {
                                        default: withCtx(() => [
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_76$1, [
                                                        createVNode(VSelect, {
                                                          items: $data.emailTypes,
                                                          "item-value": "IndividualEmailTypeId",
                                                          "item-title": "IndividualEmailTypeName",
                                                          modelValue: email.IndividualEmailTypeId,
                                                          "onUpdate:modelValue": ($event) => email.IndividualEmailTypeId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_77$1, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[207] || (_cache[207] = createTextVNode("Email Type "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_78$1, [
                                                        createVNode(VSelect, {
                                                          items: $options.contactStatus,
                                                          "item-value": "ContactStatusId",
                                                          "item-title": "ContactStatusName",
                                                          modelValue: email.ContactStatusId,
                                                          "onUpdate:modelValue": ($event) => email.ContactStatusId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_79$1, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[208] || (_cache[208] = createTextVNode("Email Status "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_80$1, [
                                                        createVNode(VSelect, {
                                                          items: $options.contactSources,
                                                          "item-value": "ContactSourceId",
                                                          "item-title": "ContactSourceName",
                                                          modelValue: email.ContactSourceId,
                                                          "onUpdate:modelValue": ($event) => email.ContactSourceId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_81$1, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[209] || (_cache[209] = createTextVNode("Email Source "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  {
                                                    cols: "3",
                                                    class: "switches"
                                                  },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VSwitch, {
                                                        color: "primary",
                                                        label: "Preferred Email",
                                                        modelValue: email.IsPreferred,
                                                        "onUpdate:modelValue": ($event) => email.IsPreferred = $event,
                                                        disabled: ""
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "5" },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VTextField, {
                                                        rules: [$options.rules.required, $options.rules.email],
                                                        modelValue: email.Email,
                                                        "onUpdate:modelValue": ($event) => email.Email = $event,
                                                        maxlength: 200,
                                                        disabled: "",
                                                        variant: "underlined"
                                                      }, {
                                                        label: withCtx(() => [
                                                          $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_82$1, "* ")) : createCommentVNode("v-if", true),
                                                          _cache[210] || (_cache[210] = createTextVNode("Email "))
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      }, 1032, ["rules", "modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_83, [
                                                        createVNode(VSelect, {
                                                          items: $data.contactRestrictions,
                                                          "item-value": "ContactRestrictionId",
                                                          "item-title": "ContactRestrictionName",
                                                          modelValue: email.CanContactRestrictionId,
                                                          "onUpdate:modelValue": ($event) => email.CanContactRestrictionId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_84, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[211] || (_cache[211] = createTextVNode("Contact Restriction "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          createVNode(VDivider)
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      },
                                      1024
                                      /* DYNAMIC_SLOTS */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1024
                                /* DYNAMIC_SLOTS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          )),
                          $data.individualHomeEmails.length === 0 ? (openBlock(), createBlock(VRow, { key: 0 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createVNode(VSpacer),
                                  createVNode(VSpacer),
                                  _cache[212] || (_cache[212] = createBaseVNode(
                                    "p",
                                    { class: "text-center contact-message" },
                                    "Home Email not found",
                                    -1
                                    /* HOISTED */
                                  ))
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true)
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              $data.editableIndividualEmail1.Email ? (openBlock(), createBlock(VDivider, {
                key: 0,
                vertical: ""
              })) : createCommentVNode("v-if", true),
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, { class: "email" }, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => _cache[213] || (_cache[213] = [
                                  createBaseVNode(
                                    "h3",
                                    null,
                                    "Home Email",
                                    -1
                                    /* HOISTED */
                                  )
                                ])),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_85, [
                                            createVNode(VSelect, {
                                              items: $data.emailTypes,
                                              "item-value": "IndividualEmailTypeId",
                                              "item-title": "IndividualEmailTypeName",
                                              modelValue: $data.editableIndividualEmail1.IndividualEmailTypeId,
                                              "onUpdate:modelValue": _cache[92] || (_cache[92] = ($event) => $data.editableIndividualEmail1.IndividualEmailTypeId = $event),
                                              rules: [$options.rules.required],
                                              disabled: "",
                                              variant: "underlined"
                                            }, {
                                              label: withCtx(() => [
                                                $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_86, "* ")) : createCommentVNode("v-if", true),
                                                _cache[214] || (_cache[214] = createTextVNode("Email Type "))
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            }, 8, ["items", "modelValue", "rules"])
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_87, [
                                            createVNode(VSelect, {
                                              items: $options.contactStatus,
                                              "item-value": "ContactStatusId",
                                              "item-title": "ContactStatusName",
                                              modelValue: $data.editableIndividualEmail1.ContactStatusId,
                                              "onUpdate:modelValue": _cache[93] || (_cache[93] = ($event) => $data.editableIndividualEmail1.ContactStatusId = $event),
                                              rules: [$options.rules.required],
                                              disabled: "",
                                              variant: "underlined"
                                            }, {
                                              label: withCtx(() => [
                                                $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_88, "* ")) : createCommentVNode("v-if", true),
                                                _cache[215] || (_cache[215] = createTextVNode("Email Status "))
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            }, 8, ["items", "modelValue", "rules"])
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_89, [
                                            createVNode(VSelect, {
                                              items: $options.contactSources,
                                              "item-value": "ContactSourceId",
                                              "item-title": "ContactSourceName",
                                              modelValue: $data.editableIndividualEmail1.ContactSourceId,
                                              "onUpdate:modelValue": _cache[94] || (_cache[94] = ($event) => $data.editableIndividualEmail1.ContactSourceId = $event),
                                              rules: [$options.rules.required],
                                              disabled: "",
                                              variant: "underlined"
                                            }, {
                                              label: withCtx(() => [
                                                $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_90, "* ")) : createCommentVNode("v-if", true),
                                                _cache[216] || (_cache[216] = createTextVNode("Email Source "))
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            }, 8, ["items", "modelValue", "rules"])
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, {
                                        cols: "3",
                                        class: "switches"
                                      }, {
                                        default: withCtx(() => [
                                          createVNode(VSwitch, {
                                            color: "primary",
                                            label: "Preferred Email",
                                            modelValue: $data.editableIndividualEmail1.IsPreferred,
                                            "onUpdate:modelValue": _cache[95] || (_cache[95] = ($event) => $data.editableIndividualEmail1.IsPreferred = $event)
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "5" }, {
                                        default: withCtx(() => [
                                          createVNode(VTextField, {
                                            rules: [$options.rules.required, $options.rules.email],
                                            modelValue: $data.editableIndividualEmail1.Email,
                                            "onUpdate:modelValue": _cache[96] || (_cache[96] = ($event) => $data.editableIndividualEmail1.Email = $event),
                                            maxlength: 200,
                                            variant: "underlined"
                                          }, {
                                            label: withCtx(() => [
                                              $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_91, "* ")) : createCommentVNode("v-if", true),
                                              _cache[217] || (_cache[217] = createTextVNode("Email "))
                                            ]),
                                            _: 1
                                            /* STABLE */
                                          }, 8, ["rules", "modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_92, [
                                            createVNode(VSelect, {
                                              items: $data.contactRestrictions,
                                              "item-value": "ContactRestrictionId",
                                              "item-title": "ContactRestrictionName",
                                              modelValue: $data.editableIndividualEmail1.CanContactRestrictionId,
                                              "onUpdate:modelValue": _cache[97] || (_cache[97] = ($event) => $data.editableIndividualEmail1.CanContactRestrictionId = $event),
                                              rules: [$options.rules.required],
                                              variant: "underlined"
                                            }, {
                                              label: withCtx(() => [
                                                $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_93, "* ")) : createCommentVNode("v-if", true),
                                                _cache[218] || (_cache[218] = createTextVNode("Contact Restriction "))
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            }, 8, ["items", "modelValue", "rules"])
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          $data.editableIndividualEmail1.Email ? (openBlock(), createBlock(VRow, {
                            key: 0,
                            class: "btns-row"
                          }, {
                            default: withCtx(() => [
                              createBaseVNode(
                                "p",
                                _hoisted_94,
                                toDisplayString($data.emailMessage),
                                1
                                /* TEXT */
                              ),
                              createVNode(VCol, { class: "text-right hidden-md-and-down" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    class: "px-4",
                                    onClick: _cache[98] || (_cache[98] = ($event) => $options.updateEmail1()),
                                    disabled: $data.emailDisabled
                                  }, {
                                    default: withCtx(() => _cache[219] || (_cache[219] = [
                                      createTextVNode("Create Home Email")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { class: "hidden-lg-and-up mobile-col-button-spacing" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    onClick: _cache[99] || (_cache[99] = ($event) => $options.updateEmail1()),
                                    class: "px-4 mobile-button-multiline-smaller",
                                    disabled: $data.emailDisabled
                                  }, {
                                    default: withCtx(() => _cache[220] || (_cache[220] = [
                                      createTextVNode("Create Home Email")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true),
                          !$data.editableIndividualEmail1.Email ? (openBlock(), createBlock(VRow, { key: 1 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => _cache[221] || (_cache[221] = [
                                  createBaseVNode(
                                    "p",
                                    { class: "text-center contact-message" },
                                    "Home Email not found",
                                    -1
                                    /* HOISTED */
                                  )
                                ])),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true)
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => _cache[222] || (_cache[222] = [
                  createBaseVNode(
                    "hr",
                    { style: { "border-top": "dotted 2px" } },
                    null,
                    -1
                    /* HOISTED */
                  )
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createCommentVNode(" WORK EMAIL "),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, {
                    class: "email",
                    style: { "overflow-y": "scroll" }
                  }, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createBaseVNode(
                                    "h3",
                                    null,
                                    "Work Email " + toDisplayString($data.individualWorkEmails.length > 1 ? "(" + $data.individualWorkEmails.length + " found)" : ""),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($data.individualWorkEmails, (email, index) => {
                              return openBlock(), createBlock(
                                VRow,
                                { key: index },
                                {
                                  default: withCtx(() => [
                                    createVNode(
                                      VCol,
                                      { cols: "12" },
                                      {
                                        default: withCtx(() => [
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_95, [
                                                        createVNode(VSelect, {
                                                          items: $data.emailTypes,
                                                          "item-value": "IndividualEmailTypeId",
                                                          "item-title": "IndividualEmailTypeName",
                                                          modelValue: email.IndividualEmailTypeId,
                                                          "onUpdate:modelValue": ($event) => email.IndividualEmailTypeId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_96, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[223] || (_cache[223] = createTextVNode("Email Type "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_97, [
                                                        createVNode(VSelect, {
                                                          items: $options.contactStatus,
                                                          "item-value": "ContactStatusId",
                                                          "item-title": "ContactStatusName",
                                                          modelValue: email.ContactStatusId,
                                                          "onUpdate:modelValue": ($event) => email.ContactStatusId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_98, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[224] || (_cache[224] = createTextVNode("Email Status "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_99, [
                                                        createVNode(VSelect, {
                                                          items: $options.contactSources,
                                                          "item-value": "ContactSourceId",
                                                          "item-title": "ContactSourceName",
                                                          modelValue: email.ContactSourceId,
                                                          "onUpdate:modelValue": ($event) => email.ContactSourceId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_100, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[225] || (_cache[225] = createTextVNode("Email Source "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  {
                                                    cols: "3",
                                                    class: "switches"
                                                  },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VSwitch, {
                                                        color: "primary",
                                                        label: "Preferred Email",
                                                        modelValue: email.IsPreferred,
                                                        "onUpdate:modelValue": ($event) => email.IsPreferred = $event,
                                                        disabled: ""
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "5" },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(VTextField, {
                                                        rules: [$options.rules.required, $options.rules.email],
                                                        modelValue: email.Email,
                                                        "onUpdate:modelValue": ($event) => email.Email = $event,
                                                        maxlength: 200,
                                                        disabled: "",
                                                        variant: "underlined"
                                                      }, {
                                                        label: withCtx(() => [
                                                          $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_101, "* ")) : createCommentVNode("v-if", true),
                                                          _cache[226] || (_cache[226] = createTextVNode("Email "))
                                                        ]),
                                                        _: 2
                                                        /* DYNAMIC */
                                                      }, 1032, ["rules", "modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  { cols: "4" },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_102, [
                                                        createVNode(VSelect, {
                                                          items: $data.contactRestrictions,
                                                          "item-value": "ContactRestrictionId",
                                                          "item-title": "ContactRestrictionName",
                                                          modelValue: email.CanContactRestrictionId,
                                                          "onUpdate:modelValue": ($event) => email.CanContactRestrictionId = $event,
                                                          rules: [$options.rules.required],
                                                          disabled: "",
                                                          variant: "underlined"
                                                        }, {
                                                          label: withCtx(() => [
                                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_103, "* ")) : createCommentVNode("v-if", true),
                                                            _cache[227] || (_cache[227] = createTextVNode("Contact Restriction "))
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          createVNode(VDivider)
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      },
                                      1024
                                      /* DYNAMIC_SLOTS */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1024
                                /* DYNAMIC_SLOTS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          )),
                          $data.individualWorkEmails.length === 0 ? (openBlock(), createBlock(VRow, { key: 0 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createVNode(VSpacer),
                                  createVNode(VSpacer),
                                  _cache[228] || (_cache[228] = createBaseVNode(
                                    "p",
                                    { class: "text-center contact-message" },
                                    "Work Email not found",
                                    -1
                                    /* HOISTED */
                                  ))
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true)
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VDivider, { vertical: "" }),
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createVNode(VCard, { class: "p-4 mt-0 email" }, {
                    default: withCtx(() => [
                      createVNode(VRow, null, {
                        default: withCtx(() => [
                          createVNode(VCol, { cols: "12" }, {
                            default: withCtx(() => _cache[229] || (_cache[229] = [
                              createBaseVNode(
                                "h3",
                                null,
                                "Work Email",
                                -1
                                /* HOISTED */
                              )
                            ])),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      $data.editableIndividualEmail2.Email ? (openBlock(), createBlock(VRow, { key: 0 }, {
                        default: withCtx(() => [
                          createVNode(VCol, { cols: "12" }, {
                            default: withCtx(() => [
                              createVNode(VRow, null, {
                                default: withCtx(() => [
                                  createVNode(VCol, { cols: "4" }, {
                                    default: withCtx(() => [
                                      createBaseVNode("div", _hoisted_104, [
                                        createVNode(VSelect, {
                                          items: $data.emailTypes,
                                          "item-value": "IndividualEmailTypeId",
                                          "item-title": "IndividualEmailTypeName",
                                          modelValue: $data.editableIndividualEmail2.IndividualEmailTypeId,
                                          "onUpdate:modelValue": _cache[100] || (_cache[100] = ($event) => $data.editableIndividualEmail2.IndividualEmailTypeId = $event),
                                          rules: [$options.rules.required],
                                          disabled: "",
                                          variant: "underlined"
                                        }, {
                                          label: withCtx(() => [
                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_105, "* ")) : createCommentVNode("v-if", true),
                                            _cache[230] || (_cache[230] = createTextVNode("Email Type "))
                                          ]),
                                          _: 1
                                          /* STABLE */
                                        }, 8, ["items", "modelValue", "rules"])
                                      ])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VCol, { cols: "4" }, {
                                    default: withCtx(() => [
                                      createBaseVNode("div", _hoisted_106, [
                                        createVNode(VSelect, {
                                          items: $options.contactStatus,
                                          "item-value": "ContactStatusId",
                                          "item-title": "ContactStatusName",
                                          modelValue: $data.editableIndividualEmail2.ContactStatusId,
                                          "onUpdate:modelValue": _cache[101] || (_cache[101] = ($event) => $data.editableIndividualEmail2.ContactStatusId = $event),
                                          rules: [$options.rules.required],
                                          disabled: "",
                                          variant: "underlined"
                                        }, {
                                          label: withCtx(() => [
                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_107, "* ")) : createCommentVNode("v-if", true),
                                            _cache[231] || (_cache[231] = createTextVNode("Email Status "))
                                          ]),
                                          _: 1
                                          /* STABLE */
                                        }, 8, ["items", "modelValue", "rules"])
                                      ])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VCol, { cols: "4" }, {
                                    default: withCtx(() => [
                                      createBaseVNode("div", _hoisted_108, [
                                        createVNode(VSelect, {
                                          items: $options.contactSources,
                                          "item-value": "ContactSourceId",
                                          "item-title": "ContactSourceName",
                                          modelValue: $data.editableIndividualEmail2.ContactSourceId,
                                          "onUpdate:modelValue": _cache[102] || (_cache[102] = ($event) => $data.editableIndividualEmail2.ContactSourceId = $event),
                                          rules: [$options.rules.required],
                                          disabled: "",
                                          variant: "underlined"
                                        }, {
                                          label: withCtx(() => [
                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_109, "* ")) : createCommentVNode("v-if", true),
                                            _cache[232] || (_cache[232] = createTextVNode("Email Source "))
                                          ]),
                                          _: 1
                                          /* STABLE */
                                        }, 8, ["items", "modelValue", "rules"])
                                      ])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VRow, null, {
                                default: withCtx(() => [
                                  createVNode(VCol, {
                                    cols: "3",
                                    class: "switches"
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VSwitch, {
                                        color: "primary",
                                        label: "Preferred Email",
                                        modelValue: $data.editableIndividualEmail2.IsPreferred,
                                        "onUpdate:modelValue": _cache[103] || (_cache[103] = ($event) => $data.editableIndividualEmail2.IsPreferred = $event)
                                      }, null, 8, ["modelValue"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VCol, { cols: "5" }, {
                                    default: withCtx(() => [
                                      createVNode(VTextField, {
                                        rules: [$options.rules.required, $options.rules.email],
                                        modelValue: $data.editableIndividualEmail2.Email,
                                        "onUpdate:modelValue": _cache[104] || (_cache[104] = ($event) => $data.editableIndividualEmail2.Email = $event),
                                        maxlength: 200,
                                        variant: "underlined"
                                      }, {
                                        label: withCtx(() => [
                                          $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_110, "* ")) : createCommentVNode("v-if", true),
                                          _cache[233] || (_cache[233] = createTextVNode("Email "))
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }, 8, ["rules", "modelValue"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VCol, { cols: "4" }, {
                                    default: withCtx(() => [
                                      createBaseVNode("div", _hoisted_111, [
                                        createVNode(VSelect, {
                                          items: $data.contactRestrictions,
                                          "item-value": "ContactRestrictionId",
                                          "item-title": "ContactRestrictionName",
                                          modelValue: $data.editableIndividualEmail2.CanContactRestrictionId,
                                          "onUpdate:modelValue": _cache[105] || (_cache[105] = ($event) => $data.editableIndividualEmail2.CanContactRestrictionId = $event),
                                          rules: [$options.rules.required],
                                          variant: "underlined"
                                        }, {
                                          label: withCtx(() => [
                                            $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_112, "* ")) : createCommentVNode("v-if", true),
                                            _cache[234] || (_cache[234] = createTextVNode("Contact Restriction "))
                                          ]),
                                          _: 1
                                          /* STABLE */
                                        }, 8, ["items", "modelValue", "rules"])
                                      ])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })) : createCommentVNode("v-if", true),
                      $data.editableIndividualEmail2.Email ? (openBlock(), createBlock(VRow, {
                        key: 1,
                        class: "btns-row"
                      }, {
                        default: withCtx(() => [
                          createBaseVNode(
                            "p",
                            _hoisted_113,
                            toDisplayString($data.email2Message),
                            1
                            /* TEXT */
                          ),
                          createVNode(VCol, { class: "text-right hidden-md-and-down" }, {
                            default: withCtx(() => [
                              createVNode(VBtn, {
                                color: "primary",
                                class: "px-4",
                                onClick: _cache[106] || (_cache[106] = ($event) => $options.updateEmail2()),
                                disabled: $data.email2Disabled
                              }, {
                                default: withCtx(() => _cache[235] || (_cache[235] = [
                                  createTextVNode("Create Work Email")
                                ])),
                                _: 1
                                /* STABLE */
                              }, 8, ["disabled"])
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, { class: "hidden-lg-and-up mobile-col-button-spacing" }, {
                            default: withCtx(() => [
                              createVNode(VBtn, {
                                color: "primary",
                                onClick: _cache[107] || (_cache[107] = ($event) => $options.updateEmail2()),
                                class: "px-4 mobile-button-multiline-smaller",
                                disabled: $data.email2Disabled
                              }, {
                                default: withCtx(() => _cache[236] || (_cache[236] = [
                                  createTextVNode("Create Work Email")
                                ])),
                                _: 1
                                /* STABLE */
                              }, 8, ["disabled"])
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })) : createCommentVNode("v-if", true),
                      !$data.editableIndividualEmail2.Email ? (openBlock(), createBlock(VRow, { key: 2 }, {
                        default: withCtx(() => [
                          createVNode(VCol, { cols: "12" }, {
                            default: withCtx(() => _cache[237] || (_cache[237] = [
                              createBaseVNode(
                                "p",
                                { class: "text-center contact-message" },
                                "Work Email not found",
                                -1
                                /* HOISTED */
                              )
                            ])),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })) : createCommentVNode("v-if", true)
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => _cache[238] || (_cache[238] = [
                  createBaseVNode(
                    "hr",
                    { style: { "border-top": "dotted 2px" } },
                    null,
                    -1
                    /* HOISTED */
                  )
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createCommentVNode(" HOME PHONES "),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, {
                    class: "phone",
                    style: { "overflow-y": "scroll" }
                  }, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createBaseVNode(
                                    "h3",
                                    null,
                                    "Home Phone " + toDisplayString($data.individualHomePhones.length > 1 ? "(" + $data.individualHomePhones.length + " found)" : ""),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($data.individualHomePhones, (phone, index) => {
                              return openBlock(), createBlock(
                                VRow,
                                { key: index },
                                {
                                  default: withCtx(() => [
                                    createVNode(
                                      VCol,
                                      { cols: "12" },
                                      {
                                        default: withCtx(() => [
                                          phone.PhoneNumber ? (openBlock(), createBlock(
                                            VRow,
                                            { key: 0 },
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  { cols: "12" },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(
                                                        VRow,
                                                        null,
                                                        {
                                                          default: withCtx(() => [
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createBaseVNode("div", _hoisted_114, [
                                                                    createVNode(VSelect, {
                                                                      items: $data.phoneTypes,
                                                                      "item-value": "IndividualPhoneTypeId",
                                                                      "item-title": "IndividualPhoneTypeName",
                                                                      modelValue: phone.IndividualPhoneTypeId,
                                                                      "onUpdate:modelValue": ($event) => phone.IndividualPhoneTypeId = $event,
                                                                      rules: [$options.rules.required],
                                                                      disabled: "",
                                                                      variant: "underlined"
                                                                    }, {
                                                                      label: withCtx(() => [
                                                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_115, "* ")) : createCommentVNode("v-if", true),
                                                                        _cache[239] || (_cache[239] = createTextVNode("Phone Type "))
                                                                      ]),
                                                                      _: 2
                                                                      /* DYNAMIC */
                                                                    }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                                  ])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createBaseVNode("div", _hoisted_116, [
                                                                    createVNode(VSelect, {
                                                                      items: $options.contactStatus,
                                                                      "item-value": "ContactStatusId",
                                                                      "item-title": "ContactStatusName",
                                                                      modelValue: phone.ContactStatusId,
                                                                      "onUpdate:modelValue": ($event) => phone.ContactStatusId = $event,
                                                                      rules: [$options.rules.required],
                                                                      disabled: "",
                                                                      variant: "underlined"
                                                                    }, {
                                                                      label: withCtx(() => [
                                                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_117, "* ")) : createCommentVNode("v-if", true),
                                                                        _cache[240] || (_cache[240] = createTextVNode("Phone Status "))
                                                                      ]),
                                                                      _: 2
                                                                      /* DYNAMIC */
                                                                    }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                                  ])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createBaseVNode("div", _hoisted_118, [
                                                                    createVNode(VSelect, {
                                                                      items: $options.contactSources,
                                                                      "item-value": "ContactSourceId",
                                                                      "item-title": "ContactSourceName",
                                                                      modelValue: phone.ContactSourceId,
                                                                      "onUpdate:modelValue": ($event) => phone.ContactSourceId = $event,
                                                                      rules: [$options.rules.required],
                                                                      disabled: "",
                                                                      variant: "underlined"
                                                                    }, {
                                                                      label: withCtx(() => [
                                                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_119, "* ")) : createCommentVNode("v-if", true),
                                                                        _cache[241] || (_cache[241] = createTextVNode("Phone Source "))
                                                                      ]),
                                                                      _: 2
                                                                      /* DYNAMIC */
                                                                    }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                                  ])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            )
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        },
                                                        1024
                                                        /* DYNAMIC_SLOTS */
                                                      ),
                                                      createVNode(
                                                        VRow,
                                                        null,
                                                        {
                                                          default: withCtx(() => [
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VAutocomplete, {
                                                                    items: $data.phoneCountries,
                                                                    "item-title": "CountryCallingCodeDisplay",
                                                                    "item-value": "CountryId",
                                                                    modelValue: phone.CountryId,
                                                                    "onUpdate:modelValue": ($event) => phone.CountryId = $event,
                                                                    label: "Country",
                                                                    disabled: "",
                                                                    variant: "underlined"
                                                                  }, null, 8, ["items", "modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VTextField, {
                                                                    rules: [$options.rules.required, $options.rules.phone],
                                                                    modelValue: phone.PhoneNumber,
                                                                    "onUpdate:modelValue": ($event) => phone.PhoneNumber = $event,
                                                                    maxlength: 20,
                                                                    disabled: ""
                                                                  }, {
                                                                    label: withCtx(() => [
                                                                      $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_120, "* ")) : createCommentVNode("v-if", true),
                                                                      _cache[242] || (_cache[242] = createTextVNode("Phone Number "))
                                                                    ]),
                                                                    _: 2
                                                                    /* DYNAMIC */
                                                                  }, 1032, ["rules", "modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VTextField, {
                                                                    label: "Extension",
                                                                    modelValue: phone.Extension,
                                                                    "onUpdate:modelValue": ($event) => phone.Extension = $event,
                                                                    maxlength: 10,
                                                                    disabled: "",
                                                                    variant: "underlined"
                                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            )
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        },
                                                        1024
                                                        /* DYNAMIC_SLOTS */
                                                      ),
                                                      createVNode(
                                                        VRow,
                                                        null,
                                                        {
                                                          default: withCtx(() => [
                                                            createVNode(
                                                              VCol,
                                                              {
                                                                cols: "3",
                                                                class: "switches"
                                                              },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VSwitch, {
                                                                    color: "primary",
                                                                    label: "Preferred",
                                                                    modelValue: phone.IsPreferred,
                                                                    "onUpdate:modelValue": ($event) => phone.IsPreferred = $event,
                                                                    disabled: ""
                                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              {
                                                                cols: "3",
                                                                class: "switches"
                                                              },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VSwitch, {
                                                                    color: "primary",
                                                                    label: "Text Allowed",
                                                                    modelValue: phone.isTextAllowed,
                                                                    "onUpdate:modelValue": ($event) => phone.isTextAllowed = $event,
                                                                    disabled: ""
                                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              {
                                                                cols: "3",
                                                                class: "switches"
                                                              },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VSwitch, {
                                                                    color: "primary",
                                                                    label: "Do Not Call",
                                                                    modelValue: phone.isDoNotCall,
                                                                    "onUpdate:modelValue": ($event) => phone.isDoNotCall = $event,
                                                                    disabled: ""
                                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            )
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        },
                                                        1024
                                                        /* DYNAMIC_SLOTS */
                                                      )
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      },
                                      1024
                                      /* DYNAMIC_SLOTS */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1024
                                /* DYNAMIC_SLOTS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          )),
                          $data.individualHomePhones.length === 0 ? (openBlock(), createBlock(VRow, { key: 0 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createVNode(VSpacer),
                                  createVNode(VSpacer),
                                  _cache[243] || (_cache[243] = createBaseVNode(
                                    "p",
                                    { class: "text-center contact-message" },
                                    "Home Phone not found",
                                    -1
                                    /* HOISTED */
                                  ))
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true)
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VDivider, { vertical: "" }),
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, { class: "phone" }, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => _cache[244] || (_cache[244] = [
                                  createBaseVNode(
                                    "h3",
                                    null,
                                    "Home Phone",
                                    -1
                                    /* HOISTED */
                                  )
                                ])),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          $data.editableIndividualPhone1.PhoneNumber ? (openBlock(), createBlock(VRow, { key: 0 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_121, [
                                            createVNode(VSelect, {
                                              items: $data.phoneTypes,
                                              "item-value": "IndividualPhoneTypeId",
                                              "item-title": "IndividualPhoneTypeName",
                                              modelValue: $data.editableIndividualPhone1.IndividualPhoneTypeId,
                                              "onUpdate:modelValue": _cache[108] || (_cache[108] = ($event) => $data.editableIndividualPhone1.IndividualPhoneTypeId = $event),
                                              rules: [$options.rules.required],
                                              disabled: "",
                                              variant: "underlined"
                                            }, {
                                              label: withCtx(() => [
                                                $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_122, "* ")) : createCommentVNode("v-if", true),
                                                _cache[245] || (_cache[245] = createTextVNode("Phone Type "))
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            }, 8, ["items", "modelValue", "rules"])
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_123, [
                                            createVNode(VSelect, {
                                              items: $options.contactStatus,
                                              "item-value": "ContactStatusId",
                                              "item-title": "ContactStatusName",
                                              modelValue: $data.editableIndividualPhone1.ContactStatusId,
                                              "onUpdate:modelValue": _cache[109] || (_cache[109] = ($event) => $data.editableIndividualPhone1.ContactStatusId = $event),
                                              rules: [$options.rules.required],
                                              disabled: "",
                                              variant: "underlined"
                                            }, {
                                              label: withCtx(() => [
                                                $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_124, "* ")) : createCommentVNode("v-if", true),
                                                _cache[246] || (_cache[246] = createTextVNode("Phone Status "))
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            }, 8, ["items", "modelValue", "rules"])
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_125, [
                                            createVNode(VSelect, {
                                              items: $options.contactSources,
                                              "item-value": "ContactSourceId",
                                              "item-title": "ContactSourceName",
                                              modelValue: $data.editableIndividualPhone1.ContactSourceId,
                                              "onUpdate:modelValue": _cache[110] || (_cache[110] = ($event) => $data.editableIndividualPhone1.ContactSourceId = $event),
                                              rules: [$options.rules.required],
                                              disabled: "",
                                              variant: "underlined"
                                            }, {
                                              label: withCtx(() => [
                                                $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_126, "* ")) : createCommentVNode("v-if", true),
                                                _cache[247] || (_cache[247] = createTextVNode("Phone Source "))
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            }, 8, ["items", "modelValue", "rules"])
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VAutocomplete, {
                                            items: $data.phoneCountries,
                                            "item-title": "CountryCallingCodeDisplay",
                                            "item-value": "CountryId",
                                            modelValue: $data.homePhoneCountryId,
                                            "onUpdate:modelValue": _cache[111] || (_cache[111] = ($event) => $data.homePhoneCountryId = $event),
                                            label: "Country",
                                            variant: "underlined"
                                          }, null, 8, ["items", "modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VTextField, {
                                            rules: $data.rulesHomePhoneNumber,
                                            modelValue: $data.homePhoneNumber,
                                            "onUpdate:modelValue": _cache[112] || (_cache[112] = ($event) => $data.homePhoneNumber = $event),
                                            maxlength: 20,
                                            variant: "underlined"
                                          }, {
                                            label: withCtx(() => [
                                              $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_127, "* ")) : createCommentVNode("v-if", true),
                                              _cache[248] || (_cache[248] = createTextVNode("Phone Number "))
                                            ]),
                                            _: 1
                                            /* STABLE */
                                          }, 8, ["rules", "modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VTextField, {
                                            label: "Extension",
                                            modelValue: $data.editableIndividualPhone1.Extension,
                                            "onUpdate:modelValue": _cache[113] || (_cache[113] = ($event) => $data.editableIndividualPhone1.Extension = $event),
                                            maxlength: 10,
                                            variant: "underlined"
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, {
                                        cols: "3",
                                        class: "switches"
                                      }, {
                                        default: withCtx(() => [
                                          createVNode(VSwitch, {
                                            color: "primary",
                                            label: "Preferred",
                                            modelValue: $data.editableIndividualPhone1.IsPreferred,
                                            "onUpdate:modelValue": _cache[114] || (_cache[114] = ($event) => $data.editableIndividualPhone1.IsPreferred = $event)
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, {
                                        cols: "3",
                                        class: "switches"
                                      }, {
                                        default: withCtx(() => [
                                          createVNode(VSwitch, {
                                            color: "primary",
                                            label: "Text Allowed",
                                            modelValue: $data.editableIndividualPhone1.isTextAllowed,
                                            "onUpdate:modelValue": _cache[115] || (_cache[115] = ($event) => $data.editableIndividualPhone1.isTextAllowed = $event)
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, {
                                        cols: "3",
                                        class: "switches"
                                      }, {
                                        default: withCtx(() => [
                                          createVNode(VSwitch, {
                                            color: "primary",
                                            label: "Do Not Call",
                                            modelValue: $data.editableIndividualPhone1.isDoNotCall,
                                            "onUpdate:modelValue": _cache[116] || (_cache[116] = ($event) => $data.editableIndividualPhone1.isDoNotCall = $event)
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true),
                          $data.editableIndividualPhone1.PhoneNumber ? (openBlock(), createBlock(VRow, {
                            key: 1,
                            class: "btns-row"
                          }, {
                            default: withCtx(() => [
                              $data.phoneMessage ? (openBlock(), createElementBlock(
                                "p",
                                _hoisted_128,
                                toDisplayString($data.phoneMessage),
                                1
                                /* TEXT */
                              )) : createCommentVNode("v-if", true),
                              createVNode(VCol, { class: "text-right hidden-md-and-down" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    class: "px-4",
                                    onClick: _cache[117] || (_cache[117] = ($event) => $options.updatePhone1()),
                                    disabled: $data.phoneDisabled
                                  }, {
                                    default: withCtx(() => _cache[249] || (_cache[249] = [
                                      createTextVNode("Create Home Phone")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { class: "hidden-lg-and-up mobile-col-button-spacing" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    onClick: _cache[118] || (_cache[118] = ($event) => $options.updatePhone1()),
                                    class: "px-4 mobile-button-multiline-smaller",
                                    disabled: $data.phoneDisabled
                                  }, {
                                    default: withCtx(() => _cache[250] || (_cache[250] = [
                                      createTextVNode("Create Home Phone")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true),
                          !$data.editableIndividualPhone1.PhoneNumber ? (openBlock(), createBlock(VRow, { key: 2 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => _cache[251] || (_cache[251] = [
                                  createBaseVNode(
                                    "p",
                                    { class: "text-center contact-message" },
                                    "Home phone not found",
                                    -1
                                    /* HOISTED */
                                  )
                                ])),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true)
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createCommentVNode(" WORK PHONES "),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, {
                    class: "phone",
                    style: { "overflow-y": "scroll" }
                  }, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createBaseVNode(
                                    "h3",
                                    null,
                                    "Work Phone " + toDisplayString($data.individualWorkPhones.length > 1 ? "(" + $data.individualWorkPhones.length + " found)" : ""),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($data.individualWorkPhones, (phone, index) => {
                              return openBlock(), createBlock(
                                VRow,
                                { key: index },
                                {
                                  default: withCtx(() => [
                                    createVNode(
                                      VCol,
                                      { cols: "12" },
                                      {
                                        default: withCtx(() => [
                                          phone.PhoneNumber ? (openBlock(), createBlock(
                                            VRow,
                                            { key: 0 },
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  { cols: "12" },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(
                                                        VRow,
                                                        null,
                                                        {
                                                          default: withCtx(() => [
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createBaseVNode("div", _hoisted_129, [
                                                                    createVNode(VSelect, {
                                                                      items: $data.phoneTypes,
                                                                      "item-value": "IndividualPhoneTypeId",
                                                                      "item-title": "IndividualPhoneTypeName",
                                                                      modelValue: phone.IndividualPhoneTypeId,
                                                                      "onUpdate:modelValue": ($event) => phone.IndividualPhoneTypeId = $event,
                                                                      rules: [$options.rules.required],
                                                                      disabled: "",
                                                                      variant: "underlined"
                                                                    }, {
                                                                      label: withCtx(() => [
                                                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_130, "* ")) : createCommentVNode("v-if", true),
                                                                        _cache[252] || (_cache[252] = createTextVNode("Phone Type "))
                                                                      ]),
                                                                      _: 2
                                                                      /* DYNAMIC */
                                                                    }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                                  ])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createBaseVNode("div", _hoisted_131, [
                                                                    createVNode(VSelect, {
                                                                      items: $options.contactStatus,
                                                                      "item-value": "ContactStatusId",
                                                                      "item-title": "ContactStatusName",
                                                                      modelValue: phone.ContactStatusId,
                                                                      "onUpdate:modelValue": ($event) => phone.ContactStatusId = $event,
                                                                      rules: [$options.rules.required],
                                                                      disabled: "",
                                                                      variant: "underlined"
                                                                    }, {
                                                                      label: withCtx(() => [
                                                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_132, "* ")) : createCommentVNode("v-if", true),
                                                                        _cache[253] || (_cache[253] = createTextVNode("Phone Status "))
                                                                      ]),
                                                                      _: 2
                                                                      /* DYNAMIC */
                                                                    }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                                  ])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createBaseVNode("div", _hoisted_133, [
                                                                    createVNode(VSelect, {
                                                                      items: $options.contactSources,
                                                                      "item-value": "ContactSourceId",
                                                                      "item-title": "ContactSourceName",
                                                                      modelValue: phone.ContactSourceId,
                                                                      "onUpdate:modelValue": ($event) => phone.ContactSourceId = $event,
                                                                      rules: [$options.rules.required],
                                                                      disabled: "",
                                                                      variant: "underlined"
                                                                    }, {
                                                                      label: withCtx(() => [
                                                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_134, "* ")) : createCommentVNode("v-if", true),
                                                                        _cache[254] || (_cache[254] = createTextVNode("Phone Source "))
                                                                      ]),
                                                                      _: 2
                                                                      /* DYNAMIC */
                                                                    }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                                  ])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            )
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        },
                                                        1024
                                                        /* DYNAMIC_SLOTS */
                                                      ),
                                                      createVNode(
                                                        VRow,
                                                        null,
                                                        {
                                                          default: withCtx(() => [
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VAutocomplete, {
                                                                    items: $data.phoneCountries,
                                                                    "item-title": "CountryCallingCodeDisplay",
                                                                    "item-value": "CountryId",
                                                                    modelValue: phone.CountryId,
                                                                    "onUpdate:modelValue": ($event) => phone.CountryId = $event,
                                                                    label: "Country",
                                                                    disabled: "",
                                                                    variant: "underlined"
                                                                  }, null, 8, ["items", "modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VTextField, {
                                                                    rules: [$options.rules.required, $options.rules.phone],
                                                                    modelValue: phone.PhoneNumber,
                                                                    "onUpdate:modelValue": ($event) => phone.PhoneNumber = $event,
                                                                    maxlength: 20,
                                                                    disabled: "",
                                                                    variant: "underlined"
                                                                  }, {
                                                                    label: withCtx(() => [
                                                                      $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_135, "* ")) : createCommentVNode("v-if", true),
                                                                      _cache[255] || (_cache[255] = createTextVNode("Phone Number "))
                                                                    ]),
                                                                    _: 2
                                                                    /* DYNAMIC */
                                                                  }, 1032, ["rules", "modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VTextField, {
                                                                    label: "Extension",
                                                                    modelValue: phone.Extension,
                                                                    "onUpdate:modelValue": ($event) => phone.Extension = $event,
                                                                    maxlength: 10,
                                                                    disabled: "",
                                                                    variant: "underlined"
                                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            )
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        },
                                                        1024
                                                        /* DYNAMIC_SLOTS */
                                                      ),
                                                      createVNode(
                                                        VRow,
                                                        null,
                                                        {
                                                          default: withCtx(() => [
                                                            createVNode(
                                                              VCol,
                                                              {
                                                                cols: "3",
                                                                class: "switches"
                                                              },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VSwitch, {
                                                                    color: "primary",
                                                                    label: "Preferred",
                                                                    modelValue: phone.IsPreferred,
                                                                    "onUpdate:modelValue": ($event) => phone.IsPreferred = $event,
                                                                    disabled: ""
                                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              {
                                                                cols: "3",
                                                                class: "switches"
                                                              },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VSwitch, {
                                                                    color: "primary",
                                                                    label: "Text Allowed",
                                                                    modelValue: phone.isTextAllowed,
                                                                    "onUpdate:modelValue": ($event) => phone.isTextAllowed = $event,
                                                                    disabled: ""
                                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              {
                                                                cols: "3",
                                                                class: "switches"
                                                              },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VSwitch, {
                                                                    color: "primary",
                                                                    label: "Do Not Call",
                                                                    modelValue: phone.isDoNotCall,
                                                                    "onUpdate:modelValue": ($event) => phone.isDoNotCall = $event,
                                                                    disabled: ""
                                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            )
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        },
                                                        1024
                                                        /* DYNAMIC_SLOTS */
                                                      )
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      },
                                      1024
                                      /* DYNAMIC_SLOTS */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1024
                                /* DYNAMIC_SLOTS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          )),
                          $data.individualWorkPhones.length === 0 ? (openBlock(), createBlock(VRow, { key: 0 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createVNode(VSpacer),
                                  createVNode(VSpacer),
                                  _cache[256] || (_cache[256] = createBaseVNode(
                                    "p",
                                    { class: "text-center contact-message" },
                                    "Work Phone not found",
                                    -1
                                    /* HOISTED */
                                  ))
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true)
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VDivider, { vertical: "" }),
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, { class: "phone" }, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => _cache[257] || (_cache[257] = [
                                  createBaseVNode(
                                    "h3",
                                    null,
                                    "Work Phone",
                                    -1
                                    /* HOISTED */
                                  )
                                ])),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          $data.editableIndividualPhone3.PhoneNumber ? (openBlock(), createBlock(VRow, { key: 0 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_136, [
                                            createVNode(VSelect, {
                                              items: $data.phoneTypes,
                                              "item-value": "IndividualPhoneTypeId",
                                              "item-title": "IndividualPhoneTypeName",
                                              modelValue: $data.editableIndividualPhone3.IndividualPhoneTypeId,
                                              "onUpdate:modelValue": _cache[119] || (_cache[119] = ($event) => $data.editableIndividualPhone3.IndividualPhoneTypeId = $event),
                                              rules: [$options.rules.required],
                                              disabled: "",
                                              variant: "underlined"
                                            }, {
                                              label: withCtx(() => [
                                                $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_137, "* ")) : createCommentVNode("v-if", true),
                                                _cache[258] || (_cache[258] = createTextVNode("Phone Type "))
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            }, 8, ["items", "modelValue", "rules"])
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_138, [
                                            createVNode(VSelect, {
                                              items: $options.contactStatus,
                                              "item-value": "ContactStatusId",
                                              "item-title": "ContactStatusName",
                                              modelValue: $data.editableIndividualPhone3.ContactStatusId,
                                              "onUpdate:modelValue": _cache[120] || (_cache[120] = ($event) => $data.editableIndividualPhone3.ContactStatusId = $event),
                                              rules: [$options.rules.required],
                                              disabled: "",
                                              variant: "underlined"
                                            }, {
                                              label: withCtx(() => [
                                                $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_139, "* ")) : createCommentVNode("v-if", true),
                                                _cache[259] || (_cache[259] = createTextVNode("Phone Status "))
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            }, 8, ["items", "modelValue", "rules"])
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_140, [
                                            createVNode(VSelect, {
                                              items: $options.contactSources,
                                              "item-value": "ContactSourceId",
                                              "item-title": "ContactSourceName",
                                              modelValue: $data.editableIndividualPhone3.ContactSourceId,
                                              "onUpdate:modelValue": _cache[121] || (_cache[121] = ($event) => $data.editableIndividualPhone3.ContactSourceId = $event),
                                              rules: [$options.rules.required],
                                              disabled: "",
                                              variant: "underlined"
                                            }, {
                                              label: withCtx(() => [
                                                $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_141, "* ")) : createCommentVNode("v-if", true),
                                                _cache[260] || (_cache[260] = createTextVNode("Phone Source "))
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            }, 8, ["items", "modelValue", "rules"])
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VAutocomplete, {
                                            items: $data.phoneCountries,
                                            "item-title": "CountryCallingCodeDisplay",
                                            "item-value": "CountryId",
                                            modelValue: $data.workPhoneCountryId,
                                            "onUpdate:modelValue": _cache[122] || (_cache[122] = ($event) => $data.workPhoneCountryId = $event),
                                            label: "Country",
                                            variant: "underlined"
                                          }, null, 8, ["items", "modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VTextField, {
                                            rules: $data.rulesWorkPhoneNumber,
                                            modelValue: $data.workPhoneNumber,
                                            "onUpdate:modelValue": _cache[123] || (_cache[123] = ($event) => $data.workPhoneNumber = $event),
                                            maxlength: 20,
                                            variant: "underlined"
                                          }, {
                                            label: withCtx(() => [
                                              $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_142, "* ")) : createCommentVNode("v-if", true),
                                              _cache[261] || (_cache[261] = createTextVNode("Phone Number "))
                                            ]),
                                            _: 1
                                            /* STABLE */
                                          }, 8, ["rules", "modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VTextField, {
                                            label: "Extension",
                                            modelValue: $data.editableIndividualPhone3.Extension,
                                            "onUpdate:modelValue": _cache[124] || (_cache[124] = ($event) => $data.editableIndividualPhone3.Extension = $event),
                                            maxlength: 10,
                                            variant: "underlined"
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, {
                                        cols: "3",
                                        class: "switches"
                                      }, {
                                        default: withCtx(() => [
                                          createVNode(VSwitch, {
                                            color: "primary",
                                            label: "Preferred",
                                            modelValue: $data.editableIndividualPhone3.IsPreferred,
                                            "onUpdate:modelValue": _cache[125] || (_cache[125] = ($event) => $data.editableIndividualPhone3.IsPreferred = $event)
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, {
                                        cols: "3",
                                        class: "switches"
                                      }, {
                                        default: withCtx(() => [
                                          createVNode(VSwitch, {
                                            color: "primary",
                                            label: "Text Allowed",
                                            modelValue: $data.editableIndividualPhone3.isTextAllowed,
                                            "onUpdate:modelValue": _cache[126] || (_cache[126] = ($event) => $data.editableIndividualPhone3.isTextAllowed = $event)
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, {
                                        cols: "3",
                                        class: "switches"
                                      }, {
                                        default: withCtx(() => [
                                          createVNode(VSwitch, {
                                            color: "primary",
                                            label: "Do Not Call",
                                            modelValue: $data.editableIndividualPhone3.isDoNotCall,
                                            "onUpdate:modelValue": _cache[127] || (_cache[127] = ($event) => $data.editableIndividualPhone3.isDoNotCall = $event)
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true),
                          $data.editableIndividualPhone3.PhoneNumber ? (openBlock(), createBlock(VRow, {
                            key: 1,
                            class: "btns-row"
                          }, {
                            default: withCtx(() => [
                              $data.phone3Message ? (openBlock(), createElementBlock(
                                "p",
                                _hoisted_143,
                                toDisplayString($data.phone3Message),
                                1
                                /* TEXT */
                              )) : createCommentVNode("v-if", true),
                              createVNode(VCol, { class: "text-right hidden-md-and-down" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    class: "px-4",
                                    onClick: _cache[128] || (_cache[128] = ($event) => $options.updatePhone3()),
                                    disabled: $data.phone3Disabled
                                  }, {
                                    default: withCtx(() => _cache[262] || (_cache[262] = [
                                      createTextVNode("Create Work Phone")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { class: "hidden-lg-and-up mobile-col-button-spacing" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    onClick: _cache[129] || (_cache[129] = ($event) => $options.updatePhone3()),
                                    class: "px-4 mobile-button-multiline-smaller",
                                    disabled: $data.phone3Disabled
                                  }, {
                                    default: withCtx(() => _cache[263] || (_cache[263] = [
                                      createTextVNode("Create Work Phone")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true),
                          !$data.editableIndividualPhone3.PhoneNumber ? (openBlock(), createBlock(VRow, { key: 2 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => _cache[264] || (_cache[264] = [
                                  createBaseVNode(
                                    "p",
                                    { class: "text-center contact-message" },
                                    "Work phone not found",
                                    -1
                                    /* HOISTED */
                                  )
                                ])),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true)
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createCommentVNode(" MOBILE PHONES "),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, {
                    class: "phone",
                    style: { "overflow-y": "scroll" }
                  }, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createBaseVNode(
                                    "h3",
                                    null,
                                    "Mobile Phone " + toDisplayString($data.individualMobilePhones.length > 1 ? "(" + $data.individualMobilePhones.length + " found)" : ""),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($data.individualMobilePhones, (phone, index) => {
                              return openBlock(), createBlock(
                                VRow,
                                { key: index },
                                {
                                  default: withCtx(() => [
                                    createVNode(
                                      VCol,
                                      { cols: "12" },
                                      {
                                        default: withCtx(() => [
                                          phone.PhoneNumber ? (openBlock(), createBlock(
                                            VRow,
                                            { key: 0 },
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  { cols: "12" },
                                                  {
                                                    default: withCtx(() => [
                                                      createVNode(
                                                        VRow,
                                                        null,
                                                        {
                                                          default: withCtx(() => [
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createBaseVNode("div", _hoisted_144, [
                                                                    createVNode(VSelect, {
                                                                      items: $data.phoneTypes,
                                                                      "item-value": "IndividualPhoneTypeId",
                                                                      "item-title": "IndividualPhoneTypeName",
                                                                      modelValue: phone.IndividualPhoneTypeId,
                                                                      "onUpdate:modelValue": ($event) => phone.IndividualPhoneTypeId = $event,
                                                                      rules: [$options.rules.required],
                                                                      disabled: "",
                                                                      variant: "underlined"
                                                                    }, {
                                                                      label: withCtx(() => [
                                                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_145, "* ")) : createCommentVNode("v-if", true),
                                                                        _cache[265] || (_cache[265] = createTextVNode("Phone Type "))
                                                                      ]),
                                                                      _: 2
                                                                      /* DYNAMIC */
                                                                    }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                                  ])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createBaseVNode("div", _hoisted_146, [
                                                                    createVNode(VSelect, {
                                                                      items: $options.contactStatus,
                                                                      "item-value": "ContactStatusId",
                                                                      "item-title": "ContactStatusName",
                                                                      modelValue: phone.ContactStatusId,
                                                                      "onUpdate:modelValue": ($event) => phone.ContactStatusId = $event,
                                                                      rules: [$options.rules.required],
                                                                      disabled: "",
                                                                      variant: "underlined"
                                                                    }, {
                                                                      label: withCtx(() => [
                                                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_147, "* ")) : createCommentVNode("v-if", true),
                                                                        _cache[266] || (_cache[266] = createTextVNode("Phone Status "))
                                                                      ]),
                                                                      _: 2
                                                                      /* DYNAMIC */
                                                                    }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                                  ])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createBaseVNode("div", _hoisted_148, [
                                                                    createVNode(VSelect, {
                                                                      items: $options.contactSources,
                                                                      "item-value": "ContactSourceId",
                                                                      "item-title": "ContactSourceName",
                                                                      modelValue: phone.ContactSourceId,
                                                                      "onUpdate:modelValue": ($event) => phone.ContactSourceId = $event,
                                                                      rules: [$options.rules.required],
                                                                      disabled: "",
                                                                      variant: "underlined"
                                                                    }, {
                                                                      label: withCtx(() => [
                                                                        $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_149, "* ")) : createCommentVNode("v-if", true),
                                                                        _cache[267] || (_cache[267] = createTextVNode("Phone Source "))
                                                                      ]),
                                                                      _: 2
                                                                      /* DYNAMIC */
                                                                    }, 1032, ["items", "modelValue", "onUpdate:modelValue", "rules"])
                                                                  ])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            )
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        },
                                                        1024
                                                        /* DYNAMIC_SLOTS */
                                                      ),
                                                      createVNode(
                                                        VRow,
                                                        null,
                                                        {
                                                          default: withCtx(() => [
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VAutocomplete, {
                                                                    items: $data.phoneCountries,
                                                                    "item-title": "CountryCallingCodeDisplay",
                                                                    "item-value": "CountryId",
                                                                    modelValue: phone.CountryId,
                                                                    "onUpdate:modelValue": ($event) => phone.CountryId = $event,
                                                                    label: "Country",
                                                                    disabled: "",
                                                                    variant: "underlined"
                                                                  }, null, 8, ["items", "modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VTextField, {
                                                                    rules: [$options.rules.required, $options.rules.phone],
                                                                    modelValue: phone.PhoneNumber,
                                                                    "onUpdate:modelValue": ($event) => phone.PhoneNumber = $event,
                                                                    maxlength: 20,
                                                                    disabled: "",
                                                                    variant: "underlined"
                                                                  }, {
                                                                    label: withCtx(() => [
                                                                      $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_150, "* ")) : createCommentVNode("v-if", true),
                                                                      _cache[268] || (_cache[268] = createTextVNode("Phone Number "))
                                                                    ]),
                                                                    _: 2
                                                                    /* DYNAMIC */
                                                                  }, 1032, ["rules", "modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              { cols: "4" },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VTextField, {
                                                                    label: "Extension",
                                                                    modelValue: phone.Extension,
                                                                    "onUpdate:modelValue": ($event) => phone.Extension = $event,
                                                                    maxlength: 10,
                                                                    disabled: "",
                                                                    variant: "underlined"
                                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            )
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        },
                                                        1024
                                                        /* DYNAMIC_SLOTS */
                                                      ),
                                                      createVNode(
                                                        VRow,
                                                        null,
                                                        {
                                                          default: withCtx(() => [
                                                            createVNode(
                                                              VCol,
                                                              {
                                                                cols: "3",
                                                                class: "switches"
                                                              },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VSwitch, {
                                                                    color: "primary",
                                                                    label: "Preferred",
                                                                    modelValue: phone.IsPreferred,
                                                                    "onUpdate:modelValue": ($event) => phone.IsPreferred = $event,
                                                                    disabled: ""
                                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              {
                                                                cols: "3",
                                                                class: "switches"
                                                              },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VSwitch, {
                                                                    color: "primary",
                                                                    label: "Text Allowed",
                                                                    modelValue: phone.isTextAllowed,
                                                                    "onUpdate:modelValue": ($event) => phone.isTextAllowed = $event,
                                                                    disabled: ""
                                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            ),
                                                            createVNode(
                                                              VCol,
                                                              {
                                                                cols: "3",
                                                                class: "switches"
                                                              },
                                                              {
                                                                default: withCtx(() => [
                                                                  createVNode(VSwitch, {
                                                                    color: "primary",
                                                                    label: "Do Not Call",
                                                                    modelValue: phone.isDoNotCall,
                                                                    "onUpdate:modelValue": ($event) => phone.isDoNotCall = $event,
                                                                    disabled: ""
                                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                                ]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              },
                                                              1024
                                                              /* DYNAMIC_SLOTS */
                                                            )
                                                          ]),
                                                          _: 2
                                                          /* DYNAMIC */
                                                        },
                                                        1024
                                                        /* DYNAMIC_SLOTS */
                                                      )
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      },
                                      1024
                                      /* DYNAMIC_SLOTS */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1024
                                /* DYNAMIC_SLOTS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          )),
                          $data.individualMobilePhones.length === 0 ? (openBlock(), createBlock(VRow, { key: 0 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createVNode(VSpacer),
                                  createVNode(VSpacer),
                                  _cache[269] || (_cache[269] = createBaseVNode(
                                    "p",
                                    { class: "text-center contact-message" },
                                    "Mobile Phone not found",
                                    -1
                                    /* HOISTED */
                                  ))
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true)
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VDivider, { vertical: "" }),
              createVNode(VCol, { class: "p-4" }, {
                default: withCtx(() => [
                  createVNode(VCard, { class: "phone" }, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => _cache[270] || (_cache[270] = [
                                  createBaseVNode(
                                    "h3",
                                    null,
                                    "Mobile Phone",
                                    -1
                                    /* HOISTED */
                                  )
                                ])),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          $data.editableIndividualPhone2.PhoneNumber ? (openBlock(), createBlock(VRow, { key: 0 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => [
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_151, [
                                            createVNode(VSelect, {
                                              items: $data.phoneTypes,
                                              "item-value": "IndividualPhoneTypeId",
                                              "item-title": "IndividualPhoneTypeName",
                                              modelValue: $data.editableIndividualPhone2.IndividualPhoneTypeId,
                                              "onUpdate:modelValue": _cache[130] || (_cache[130] = ($event) => $data.editableIndividualPhone2.IndividualPhoneTypeId = $event),
                                              rules: [$options.rules.required],
                                              disabled: "",
                                              variant: "underlined"
                                            }, {
                                              label: withCtx(() => [
                                                $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_152, "* ")) : createCommentVNode("v-if", true),
                                                _cache[271] || (_cache[271] = createTextVNode("Phone Type "))
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            }, 8, ["items", "modelValue", "rules"])
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_153, [
                                            createVNode(VSelect, {
                                              items: $options.contactStatus,
                                              "item-value": "ContactStatusId",
                                              "item-title": "ContactStatusName",
                                              modelValue: $data.editableIndividualPhone2.ContactStatusId,
                                              "onUpdate:modelValue": _cache[131] || (_cache[131] = ($event) => $data.editableIndividualPhone2.ContactStatusId = $event),
                                              rules: [$options.rules.required],
                                              disabled: "",
                                              variant: "underlined"
                                            }, {
                                              label: withCtx(() => [
                                                $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_154, "* ")) : createCommentVNode("v-if", true),
                                                _cache[272] || (_cache[272] = createTextVNode("Phone Status "))
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            }, 8, ["items", "modelValue", "rules"])
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createBaseVNode("div", _hoisted_155, [
                                            createVNode(VSelect, {
                                              items: $options.contactSources,
                                              "item-value": "ContactSourceId",
                                              "item-title": "ContactSourceName",
                                              modelValue: $data.editableIndividualPhone2.ContactSourceId,
                                              "onUpdate:modelValue": _cache[132] || (_cache[132] = ($event) => $data.editableIndividualPhone2.ContactSourceId = $event),
                                              rules: [$options.rules.required],
                                              disabled: "",
                                              variant: "underlined"
                                            }, {
                                              label: withCtx(() => [
                                                $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_156, "* ")) : createCommentVNode("v-if", true),
                                                _cache[273] || (_cache[273] = createTextVNode("Phone Source "))
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            }, 8, ["items", "modelValue", "rules"])
                                          ])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VAutocomplete, {
                                            items: $data.phoneCountries,
                                            "item-title": "CountryCallingCodeDisplay",
                                            "item-value": "CountryId",
                                            modelValue: $data.mobilePhoneCountryId,
                                            "onUpdate:modelValue": _cache[133] || (_cache[133] = ($event) => $data.mobilePhoneCountryId = $event),
                                            label: "Country",
                                            variant: "underlined"
                                          }, null, 8, ["items", "modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VTextField, {
                                            rules: $data.rulesMobilePhoneNumber,
                                            modelValue: $data.mobilePhoneNumber,
                                            "onUpdate:modelValue": _cache[134] || (_cache[134] = ($event) => $data.mobilePhoneNumber = $event),
                                            maxlength: 20,
                                            variant: "underlined"
                                          }, {
                                            label: withCtx(() => [
                                              $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_157, "* ")) : createCommentVNode("v-if", true),
                                              _cache[274] || (_cache[274] = createTextVNode("Phone Number "))
                                            ]),
                                            _: 1
                                            /* STABLE */
                                          }, 8, ["rules", "modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, { cols: "4" }, {
                                        default: withCtx(() => [
                                          createVNode(VTextField, {
                                            label: "Extension",
                                            modelValue: $data.editableIndividualPhone2.Extension,
                                            "onUpdate:modelValue": _cache[135] || (_cache[135] = ($event) => $data.editableIndividualPhone2.Extension = $event),
                                            maxlength: 10,
                                            variant: "underlined"
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, {
                                        cols: "3",
                                        class: "switches"
                                      }, {
                                        default: withCtx(() => [
                                          createVNode(VSwitch, {
                                            color: "primary",
                                            label: "Preferred",
                                            modelValue: $data.editableIndividualPhone2.IsPreferred,
                                            "onUpdate:modelValue": _cache[136] || (_cache[136] = ($event) => $data.editableIndividualPhone2.IsPreferred = $event)
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, {
                                        cols: "3",
                                        class: "switches"
                                      }, {
                                        default: withCtx(() => [
                                          createVNode(VSwitch, {
                                            color: "primary",
                                            label: "Text Allowed",
                                            modelValue: $data.editableIndividualPhone2.isTextAllowed,
                                            "onUpdate:modelValue": _cache[137] || (_cache[137] = ($event) => $data.editableIndividualPhone2.isTextAllowed = $event)
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCol, {
                                        cols: "3",
                                        class: "switches"
                                      }, {
                                        default: withCtx(() => [
                                          createVNode(VSwitch, {
                                            color: "primary",
                                            label: "Do Not Call",
                                            modelValue: $data.editableIndividualPhone2.isDoNotCall,
                                            "onUpdate:modelValue": _cache[138] || (_cache[138] = ($event) => $data.editableIndividualPhone2.isDoNotCall = $event)
                                          }, null, 8, ["modelValue"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true),
                          $data.editableIndividualPhone2.PhoneNumber ? (openBlock(), createBlock(VRow, {
                            key: 1,
                            class: "btns-row"
                          }, {
                            default: withCtx(() => [
                              $data.phone2Message ? (openBlock(), createElementBlock(
                                "p",
                                _hoisted_158,
                                toDisplayString($data.phone2Message),
                                1
                                /* TEXT */
                              )) : createCommentVNode("v-if", true),
                              createVNode(VCol, { class: "text-right hidden-md-and-down" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    class: "px-4",
                                    onClick: _cache[139] || (_cache[139] = ($event) => $options.updatePhone2()),
                                    disabled: $data.phone2Disabled
                                  }, {
                                    default: withCtx(() => _cache[275] || (_cache[275] = [
                                      createTextVNode("Create Mobile Phone")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, { class: "hidden-lg-and-up mobile-col-button-spacing" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    onClick: _cache[140] || (_cache[140] = ($event) => $options.updatePhone2()),
                                    class: "px-4 mobile-button-multiline-smaller",
                                    disabled: $data.phone2Disabled
                                  }, {
                                    default: withCtx(() => _cache[276] || (_cache[276] = [
                                      createTextVNode("Create Mobile Phone")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["disabled"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true),
                          !$data.editableIndividualPhone2.PhoneNumber ? (openBlock(), createBlock(VRow, { key: 2 }, {
                            default: withCtx(() => [
                              createVNode(VCol, { cols: "12" }, {
                                default: withCtx(() => _cache[277] || (_cache[277] = [
                                  createBaseVNode(
                                    "p",
                                    { class: "text-center contact-message" },
                                    "Mobile phone not found",
                                    -1
                                    /* HOISTED */
                                  )
                                ])),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true)
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VContainer, null, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createVNode(VAlert, { type: "warning" }, {
                    default: withCtx(() => _cache[278] || (_cache[278] = [
                      createTextVNode(" Changes to the individual must be saved at each section. Click the Review Completed button to move forward. ")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "text-right" }, {
                default: withCtx(() => [
                  !$data.hideCancelBtn ? (openBlock(), createBlock(VBtn, {
                    key: 0,
                    class: "cancel-btn mx-2 px-3",
                    color: "darken-1",
                    onClick: _cache[141] || (_cache[141] = ($event) => $options.cancelAction())
                  }, {
                    default: withCtx(() => _cache[279] || (_cache[279] = [
                      createTextVNode("Cancel")
                    ])),
                    _: 1
                    /* STABLE */
                  })) : createCommentVNode("v-if", true),
                  createVNode(VBtn, {
                    class: "save-btn mx-2 px-3",
                    color: "success",
                    onClick: _cache[142] || (_cache[142] = ($event) => $options.openConfirmAction())
                  }, {
                    default: withCtx(() => _cache[280] || (_cache[280] = [
                      createTextVNode("Review Completed")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VDialog, {
        modelValue: $data.dialog,
        "onUpdate:modelValue": _cache[145] || (_cache[145] = ($event) => $data.dialog = $event),
        persistent: "",
        "max-width": "300"
      }, {
        default: withCtx(() => [
          createVNode(VCard, { class: "review-popup" }, {
            default: withCtx(() => [
              createVNode(VCardTitle, { class: "text-h5" }, {
                default: withCtx(() => _cache[281] || (_cache[281] = [
                  createTextVNode("Confirm changes")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardText, null, {
                default: withCtx(() => _cache[282] || (_cache[282] = [
                  createTextVNode("Click Continue to review updates.")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardActions, null, {
                default: withCtx(() => [
                  createVNode(VSpacer),
                  createVNode(VBtn, {
                    color: "red-darken-1",
                    class: "pop-btn",
                    variant: "text",
                    onClick: _cache[143] || (_cache[143] = ($event) => $data.dialog = false)
                  }, {
                    default: withCtx(() => _cache[283] || (_cache[283] = [
                      createTextVNode("Cancel")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VBtn, {
                    color: "green-darken-1",
                    class: "pop-btn",
                    variant: "text",
                    onClick: _cache[144] || (_cache[144] = ($event) => {
                      $data.dialog = false;
                      $options.saveAction();
                    })
                  }, {
                    default: withCtx(() => _cache[284] || (_cache[284] = [
                      createTextVNode("Continue")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"])
    ],
    64
    /* STABLE_FRAGMENT */
  );
}
const CompareIndividualComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1g, [["render", _sfc_render$1g], ["__file", "/var/www/html/resources/js/components/Individual/CompareIndividualComponent.vue"]]);
const _sfc_main$1f = {
  name: "ActivityLogComponent",
  data() {
    return {
      loading: false,
      headers: [
        { title: "Date", sortable: true, value: "created_at" },
        { title: "Affiliate", sortable: true, value: "owner.AffiliateNumber" },
        // TODO: every model should have a DisplayName or something
        { title: "User", sortable: true, value: "user.name" },
        { title: "Email", sortable: true, value: "user.email" },
        { title: "Activity", sortable: true, value: "event" },
        { title: "Record", sortable: true, value: "auditable" },
        { title: "Modified", sortable: true, value: "modified" }
      ],
      audits: [],
      options: {},
      id: 0,
      total: 0
    };
  },
  mounted() {
    this.id = this.$route.params.id;
  },
  watch: {
    options: {
      handler() {
        this.getDataFromApi();
      },
      deep: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      const page = this.options.page;
      const perPage = this.options.itemsPerPage || 15;
      axios.get("/admin/api/audit/search?page=" + page + "&per_page=" + perPage + "&individual=" + this.id).then((response) => {
        this.audits = response.data.data;
        this.total = response.data.meta.total;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    getNiceLabel(item, key2) {
      const related = item[key2.replace(/Id$/, "")];
      return (related ? related.label : false) || key2;
    },
    getNiceName(item, key2) {
      const related = item[key2.replace(/Id$/, "")];
      return item[key2] || (related ? related.display_name : false) || "[empty]";
    },
    formatDate(date) {
      return format(date, "h:mm:ss a, MMMM do yyyy");
    }
  }
};
const _hoisted_1$T = { key: 0 };
const _hoisted_2$P = { key: 0 };
const _hoisted_3$I = { key: 1 };
const _hoisted_4$C = { key: 1 };
const _hoisted_5$z = ["colspan"];
function _sfc_render$1f(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[1] || (_cache[1] = [
          createTextVNode(" Activity Logs ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VProgressLinear, {
            active: $data.loading,
            indeterminate: true,
            color: "#7bb8da"
          }, null, 8, ["active"]),
          createVNode(VDataTableServer, {
            loading: $data.loading,
            headers: $data.headers,
            items: $data.audits,
            "item-key": $data.audits.id,
            "single-expand": false,
            options: $data.options,
            "onUpdate:options": _cache[0] || (_cache[0] = ($event) => $data.options = $event),
            "items-length": $data.total,
            "disable-sort": true,
            "show-expand": ""
          }, {
            [`item.created_at`]: withCtx(({ item }) => [
              createTextVNode(
                toDisplayString($options.formatDate(item.created_at)),
                1
                /* TEXT */
              )
            ]),
            [`item.auditable`]: withCtx(({ item }) => [
              item.auditable_type === "App\\Models\\IndividualAddress" ? (openBlock(), createElementBlock("div", _hoisted_1$T, [
                item.auditable ? (openBlock(), createElementBlock(
                  "div",
                  _hoisted_2$P,
                  toDisplayString(item.auditable.AddressLine1) + " " + toDisplayString(item.auditable.AddressLine2) + " " + toDisplayString(item.auditable.City) + " " + toDisplayString(item.auditable.StateTerritory ? item.auditable.StateTerritory.StateTerritoryName : "") + " " + toDisplayString(item.auditable.PostalCode),
                  1
                  /* TEXT */
                )) : (openBlock(), createElementBlock(
                  "div",
                  _hoisted_3$I,
                  toDisplayString(item.auditable_type),
                  1
                  /* TEXT */
                ))
              ])) : (openBlock(), createElementBlock(
                "div",
                _hoisted_4$C,
                toDisplayString(item.auditable ? item.auditable.display_name : item.auditable_type),
                1
                /* TEXT */
              ))
            ]),
            [`item.modified`]: withCtx(({ item }) => [
              createTextVNode(
                toDisplayString(Object.keys(item.old_values).join(", ")),
                1
                /* TEXT */
              )
            ]),
            "expanded-row": withCtx(({ columns, item }) => [
              createBaseVNode("tr", null, [
                createBaseVNode("td", {
                  colspan: columns.length,
                  class: "py-2"
                }, [
                  createVNode(
                    VTable,
                    { density: "compact" },
                    {
                      default: withCtx(() => [
                        _cache[2] || (_cache[2] = createBaseVNode(
                          "thead",
                          null,
                          [
                            createBaseVNode("tr", null, [
                              createBaseVNode("th", null, "Changed"),
                              createBaseVNode("th", null, "Old Value"),
                              createBaseVNode("th", null, "New Value")
                            ])
                          ],
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("tbody", null, [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(item.new_values, (value, key2) => {
                              return openBlock(), createElementBlock("tr", null, [
                                createBaseVNode(
                                  "td",
                                  null,
                                  toDisplayString($options.getNiceLabel(item.auditable, key2)),
                                  1
                                  /* TEXT */
                                ),
                                createBaseVNode(
                                  "td",
                                  {
                                    class: normalizeClass(["deleted", { "null": $options.getNiceName(item.auditable, key2) === "[empty]" }])
                                  },
                                  toDisplayString($options.getNiceName(item.previous, key2)),
                                  3
                                  /* TEXT, CLASS */
                                ),
                                createBaseVNode(
                                  "td",
                                  {
                                    class: normalizeClass({ "null": $options.getNiceName(item.auditable, key2) === "[empty]" })
                                  },
                                  toDisplayString($options.getNiceName(item.auditable, key2)),
                                  3
                                  /* TEXT, CLASS */
                                )
                              ]);
                            }),
                            256
                            /* UNKEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      _: 2
                      /* DYNAMIC */
                    },
                    1024
                    /* DYNAMIC_SLOTS */
                  )
                ], 8, _hoisted_5$z)
              ])
            ]),
            _: 2
            /* DYNAMIC */
          }, 1032, ["loading", "headers", "items", "item-key", "options", "items-length"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const ActivityLogComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1f, [["render", _sfc_render$1f], ["__scopeId", "data-v-d5aec45b"], ["__file", "/var/www/html/resources/js/components/Individual/Partial/ActivityLogComponent.vue"]]);
const _sfc_main$1e = {
  name: "AllUnionRelationshipsComponent",
  data() {
    return {
      individualAffiliates: [],
      currentPanel: 0,
      loading: false
    };
  },
  computed: {
    activeIndividualAffiliates() {
      return this.individualAffiliates.filter(
        (individualAffiliate) => !individualAffiliate.EndDate || compareAsc(individualAffiliate.EndDate, /* @__PURE__ */ new Date()) > 0
      );
    },
    endedIndividualAffiliates() {
      return this.individualAffiliates.filter(
        (individualAffiliate) => individualAffiliate.EndDate && compareAsc(/* @__PURE__ */ new Date(), individualAffiliate.EndDate) > 0
      );
    }
  },
  mounted() {
    this.id = this.$route.params.id;
  },
  methods: {
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/individual/" + this.id + "?include=individualAffiliates.Affiliate,individualAffiliates.UnionRelationshipType,individualAffiliates.IndividualDeactivationReason&scope=global").then((response) => {
        this.individualAffiliates = response.data.data.individualAffiliates;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$S = { key: 0 };
const _hoisted_2$O = { class: "data-container" };
const _hoisted_3$H = {
  key: 0,
  class: "data-value"
};
const _hoisted_4$B = { class: "data-container" };
const _hoisted_5$y = {
  key: 0,
  class: "data-value"
};
const _hoisted_6$v = { class: "data-container" };
const _hoisted_7$r = {
  key: 0,
  class: "data-value"
};
const _hoisted_8$l = { class: "data-container" };
const _hoisted_9$k = { class: "data-value" };
const _hoisted_10$h = { class: "data-container" };
const _hoisted_11$e = { class: "data-value" };
const _hoisted_12$e = { class: "data-container" };
const _hoisted_13$b = {
  key: 0,
  class: "data-value"
};
const _hoisted_14$b = { class: "data-container" };
const _hoisted_15$b = {
  key: 0,
  class: "data-value"
};
const _hoisted_16$b = { class: "data-container" };
const _hoisted_17$a = {
  key: 0,
  class: "data-value"
};
const _hoisted_18$a = { class: "data-container" };
const _hoisted_19$a = { class: "data-value" };
const _hoisted_20$9 = { class: "data-container" };
const _hoisted_21$9 = { class: "data-value" };
const _hoisted_22$8 = { class: "data-container" };
const _hoisted_23$8 = {
  key: 0,
  class: "data-value"
};
function _sfc_render$1e(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[0] || (_cache[0] = [
          createTextVNode(" All Union Relationships ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VProgressLinear, {
            active: $data.loading,
            indeterminate: true,
            color: "#7bb8da"
          }, null, 8, ["active"]),
          createVNode(VRow, { class: "hidden-md-and-down" }, {
            default: withCtx(() => [
              createVNode(VCol, { class: "text-center" }, {
                default: withCtx(() => [
                  $data.individualAffiliates.length > 0 && $options.activeIndividualAffiliates.length === 0 && $options.endedIndividualAffiliates.length === 0 ? (openBlock(), createElementBlock("p", _hoisted_1$S, " No relationships.")) : createCommentVNode("v-if", true)
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList($options.activeIndividualAffiliates, (affiliate) => {
              return openBlock(), createBlock(
                VRow,
                {
                  key: affiliate.AffiliateId
                },
                {
                  default: withCtx(() => [
                    createVNode(
                      VCol,
                      null,
                      {
                        default: withCtx(() => [
                          createVNode(VExpansionPanels, { "model-value": $data.currentPanel }, {
                            default: withCtx(() => [
                              createVNode(
                                VExpansionPanel,
                                null,
                                {
                                  default: withCtx(() => [
                                    createVNode(
                                      VExpansionPanelText,
                                      { class: "current-relationship" },
                                      {
                                        default: withCtx(() => [
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  null,
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_2$O, [
                                                        _cache[1] || (_cache[1] = createBaseVNode(
                                                          "div",
                                                          { class: "data-tag" },
                                                          "Relationship:",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        affiliate.UnionRelationshipType ? (openBlock(), createElementBlock(
                                                          "div",
                                                          _hoisted_3$H,
                                                          toDisplayString(affiliate.UnionRelationshipType.UnionRelationshipTypeName),
                                                          1
                                                          /* TEXT */
                                                        )) : createCommentVNode("v-if", true)
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  null,
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_4$B, [
                                                        _cache[2] || (_cache[2] = createBaseVNode(
                                                          "div",
                                                          { class: "data-tag" },
                                                          "Affiliate Name:",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        affiliate.Affiliate ? (openBlock(), createElementBlock(
                                                          "div",
                                                          _hoisted_5$y,
                                                          toDisplayString(affiliate.Affiliate.AffiliateName),
                                                          1
                                                          /* TEXT */
                                                        )) : createCommentVNode("v-if", true)
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  null,
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_6$v, [
                                                        _cache[3] || (_cache[3] = createBaseVNode(
                                                          "div",
                                                          { class: "data-tag" },
                                                          "Affiliate Number:",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        affiliate.Affiliate ? (openBlock(), createElementBlock(
                                                          "div",
                                                          _hoisted_7$r,
                                                          toDisplayString(affiliate.Affiliate.AffiliateNumber),
                                                          1
                                                          /* TEXT */
                                                        )) : createCommentVNode("v-if", true)
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  null,
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_8$l, [
                                                        _cache[4] || (_cache[4] = createBaseVNode(
                                                          "div",
                                                          { class: "data-tag" },
                                                          "Start Date:",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        createBaseVNode(
                                                          "div",
                                                          _hoisted_9$k,
                                                          toDisplayString(_ctx.$filters.formatDate(affiliate.StartDate)),
                                                          1
                                                          /* TEXT */
                                                        )
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                affiliate.EndDate ? (openBlock(), createBlock(
                                                  VCol,
                                                  { key: 0 },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_10$h, [
                                                        _cache[5] || (_cache[5] = createBaseVNode(
                                                          "div",
                                                          { class: "data-tag" },
                                                          "Stop date:",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        createBaseVNode(
                                                          "div",
                                                          _hoisted_11$e,
                                                          toDisplayString(_ctx.$filters.formatDate(affiliate.EndDate)),
                                                          1
                                                          /* TEXT */
                                                        )
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )) : createCommentVNode("v-if", true)
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          )
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      },
                                      1024
                                      /* DYNAMIC_SLOTS */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1024
                                /* DYNAMIC_SLOTS */
                              )
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["model-value"])
                        ]),
                        _: 2
                        /* DYNAMIC */
                      },
                      1024
                      /* DYNAMIC_SLOTS */
                    )
                  ]),
                  _: 2
                  /* DYNAMIC */
                },
                1024
                /* DYNAMIC_SLOTS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList($options.endedIndividualAffiliates, (affiliate) => {
              return openBlock(), createBlock(
                VRow,
                {
                  key: affiliate.AffiliateId
                },
                {
                  default: withCtx(() => [
                    createVNode(
                      VCol,
                      null,
                      {
                        default: withCtx(() => [
                          createVNode(VExpansionPanels, { "model-value": $data.currentPanel }, {
                            default: withCtx(() => [
                              createVNode(
                                VExpansionPanel,
                                null,
                                {
                                  default: withCtx(() => [
                                    createVNode(
                                      VExpansionPanelText,
                                      { class: "past-relationship" },
                                      {
                                        default: withCtx(() => [
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  null,
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_12$e, [
                                                        _cache[6] || (_cache[6] = createBaseVNode(
                                                          "div",
                                                          { class: "data-tag" },
                                                          "Relationship:",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        affiliate.UnionRelationshipType ? (openBlock(), createElementBlock(
                                                          "div",
                                                          _hoisted_13$b,
                                                          toDisplayString(affiliate.UnionRelationshipType.UnionRelationshipTypeName),
                                                          1
                                                          /* TEXT */
                                                        )) : createCommentVNode("v-if", true)
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  null,
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_14$b, [
                                                        _cache[7] || (_cache[7] = createBaseVNode(
                                                          "div",
                                                          { class: "data-tag" },
                                                          "Affiliate Name:",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        affiliate.Affiliate ? (openBlock(), createElementBlock(
                                                          "div",
                                                          _hoisted_15$b,
                                                          toDisplayString(affiliate.Affiliate.AffiliateName),
                                                          1
                                                          /* TEXT */
                                                        )) : createCommentVNode("v-if", true)
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                createVNode(
                                                  VCol,
                                                  null,
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_16$b, [
                                                        _cache[8] || (_cache[8] = createBaseVNode(
                                                          "div",
                                                          { class: "data-tag" },
                                                          "Affiliate Number:",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        affiliate.Affiliate ? (openBlock(), createElementBlock(
                                                          "div",
                                                          _hoisted_17$a,
                                                          toDisplayString(affiliate.Affiliate.AffiliateNumber),
                                                          1
                                                          /* TEXT */
                                                        )) : createCommentVNode("v-if", true)
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createVNode(
                                                  VCol,
                                                  null,
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_18$a, [
                                                        _cache[9] || (_cache[9] = createBaseVNode(
                                                          "div",
                                                          { class: "data-tag" },
                                                          "Union initiation date:",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        createBaseVNode(
                                                          "div",
                                                          _hoisted_19$a,
                                                          toDisplayString(_ctx.$filters.formatDate(affiliate.StartDate)),
                                                          1
                                                          /* TEXT */
                                                        )
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                ),
                                                affiliate.EndDate ? (openBlock(), createBlock(
                                                  VCol,
                                                  { key: 0 },
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_20$9, [
                                                        _cache[10] || (_cache[10] = createBaseVNode(
                                                          "div",
                                                          { class: "data-tag" },
                                                          "Stop date:",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        createBaseVNode(
                                                          "div",
                                                          _hoisted_21$9,
                                                          toDisplayString(_ctx.$filters.formatDate(affiliate.EndDate)),
                                                          1
                                                          /* TEXT */
                                                        )
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )) : createCommentVNode("v-if", true),
                                                createVNode(
                                                  VCol,
                                                  null,
                                                  {
                                                    default: withCtx(() => [
                                                      createBaseVNode("div", _hoisted_22$8, [
                                                        _cache[11] || (_cache[11] = createBaseVNode(
                                                          "div",
                                                          { class: "data-tag" },
                                                          "Stop Reason:",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        affiliate.IndividualDeactivationReason ? (openBlock(), createElementBlock(
                                                          "div",
                                                          _hoisted_23$8,
                                                          toDisplayString(affiliate.IndividualDeactivationReason.IndividualDeactivationReasonName),
                                                          1
                                                          /* TEXT */
                                                        )) : createCommentVNode("v-if", true)
                                                      ])
                                                    ]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  },
                                                  1024
                                                  /* DYNAMIC_SLOTS */
                                                )
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          )
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      },
                                      1024
                                      /* DYNAMIC_SLOTS */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1024
                                /* DYNAMIC_SLOTS */
                              )
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["model-value"])
                        ]),
                        _: 2
                        /* DYNAMIC */
                      },
                      1024
                      /* DYNAMIC_SLOTS */
                    )
                  ]),
                  _: 2
                  /* DYNAMIC */
                },
                1024
                /* DYNAMIC_SLOTS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const AllUnionRelationshipsComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1e, [["render", _sfc_render$1e], ["__file", "/var/www/html/resources/js/components/Individual/Partial/AllUnionRelationshipsComponent.vue"]]);
const _sfc_main$1d = {
  name: "ContactAddressListComponent",
  props: {
    addressheaders: {
      type: Array,
      required: true
    },
    addresses: {
      type: Array,
      required: true
    }
  }
};
const _hoisted_1$R = { key: 0 };
const _hoisted_2$N = { key: 0 };
const _hoisted_3$G = { key: 0 };
function _sfc_render$1d(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VDataTable, {
    "hide-default-footer": true,
    headers: $props.addressheaders,
    "mobile-breakpoint": 992,
    class: "mobile-global-card-table",
    items: $props.addresses
  }, {
    [`item.Address`]: withCtx(({ item }) => [
      createBaseVNode(
        "p",
        null,
        toDisplayString(item.AddressLine1),
        1
        /* TEXT */
      ),
      createBaseVNode(
        "p",
        null,
        toDisplayString(item.AddressLine2),
        1
        /* TEXT */
      ),
      createBaseVNode(
        "p",
        null,
        toDisplayString(item.City) + ", " + toDisplayString(item.StateTerritory ? item.StateTerritory.StateTerritoryCode : "") + ", " + toDisplayString(item.PostalCode),
        1
        /* TEXT */
      )
    ]),
    [`item.ContactStatus`]: withCtx(({ item }) => [
      item.ContactStatus ? (openBlock(), createElementBlock(
        "span",
        _hoisted_1$R,
        toDisplayString(item.ContactStatus.ContactStatusName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.ContactSource`]: withCtx(({ item }) => [
      item.ContactSource ? (openBlock(), createElementBlock(
        "span",
        _hoisted_2$N,
        toDisplayString(item.ContactSource.ContactSourceName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.IsPreferred`]: withCtx(({ item }) => [
      createVNode(VCheckboxBtn, {
        "model-value": item.IsPreferred,
        disabled: ""
      }, null, 8, ["model-value"])
    ]),
    [`item.CanVisitRestrictionId`]: withCtx(({ item }) => [
      createVNode(VCheckboxBtn, {
        "model-value": item.CanVisitRestrictionId && item.CanVisitRestrictionId !== 1,
        disabled: ""
      }, null, 8, ["model-value"])
    ]),
    [`item.ContactRestriction`]: withCtx(({ item }) => [
      item.CanSendMailRestriction ? (openBlock(), createElementBlock(
        "span",
        _hoisted_3$G,
        toDisplayString(item.CanSendMailRestriction.ContactRestrictionName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.IndividualAddressId`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VBtn, {
          onClick: ($event) => _ctx.$emit("edit-address", item)
        }, {
          default: withCtx(() => _cache[0] || (_cache[0] = [
            createTextVNode("Edit")
          ])),
          _: 2
          /* DYNAMIC */
        }, 1032, ["onClick"])
      ])
    ]),
    _: 2
    /* DYNAMIC */
  }, 1032, ["headers", "items"]);
}
const ContactAddressListComponent$1 = /* @__PURE__ */ _export_sfc(_sfc_main$1d, [["render", _sfc_render$1d], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/ContactAddressListComponent.vue"]]);
const billHighway = {
  methods: {
    updateBillHighwayIndividual(IndividualId, AffiliateId, InvokedFrom) {
      let data = {
        IndividualId,
        AffiliateId,
        InvokedFrom
      };
      axios.put("/api/v2/billHighway/updateBillHighwayIndividual", data).then((response) => {
      }).finally();
    }
  }
};
const _sfc_main$1c = {
  name: "IndividualAddressComponent",
  components: { StateTerritorySelectComponent },
  mixins: [billHighway],
  props: {
    individual: {
      type: Object,
      required: true
    },
    savedAddress: {
      type: Object,
      required: false
    },
    showSaveButton: {
      type: Boolean,
      default: true
    },
    readOnly: {
      type: Boolean,
      required: true
    },
    individualAddress: {
      type: Object,
      required: true
    }
  },
  emits: ["saved-address", "cancel-add-address"],
  computed: {
    newOrEditAddress() {
      if (!this.savedAddress) {
        this.resetAddress();
        return "New Address";
      } else {
        return "Edit Address";
      }
    },
    saveButtonLabel() {
      return this.savedAddress ? "Save" : "save and close";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    individualAddress: {
      handler(value) {
        if (this.address && this.address.IndividualAddressId === this.individualAddress.IndividualAddressId) {
          return;
        }
        this.address = this.individualAddress.IndividualAddressId ? clone(value) : value;
        this.address.ContactStatusId = this.address.ContactStatusId ? this.address.ContactStatusId : 4;
        this.address.CanContactRestrictionId = this.address.CanContactRestrictionId ? this.address.CanContactRestrictionId : 1;
      }
    },
    savedAddress: {
      handler(data) {
        this.setEditAddress();
      },
      deep: true
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/IndividualAddressType").then((response) => {
      this.addressTypes = response.data.data;
    });
    axios.get("/api/v2/ContactRestriction").then((response) => {
      this.contactRestrictions = response.data.data;
    });
    this.address = this.individualAddress.IndividualAddressId ? clone(this.individualAddress) : this.individualAddress;
    this.address.ContactStatusId = this.address.ContactStatusId ? this.address.ContactStatusId : 4;
    this.address.CanContactRestrictionId = this.address.CanContactRestrictionId ? this.address.CanContactRestrictionId : 1;
    this.selectedAffiliateId = this.$store.getters["user/selectedAffiliate"].AffiliateId;
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      addressTypes: [],
      contactRestrictions: [],
      address: {},
      rules: {
        required: (value) => !!value || "Required."
      },
      emptyAddress: {
        IndividualAddressTypeId: null,
        ContactStatusId: 4,
        ContactSourceId: null,
        IsPreferred: false,
        AddressLine1: null,
        AddressLine2: null,
        City: null,
        StateTerritoryId: null,
        PostalCode: null,
        IndividualId: this.individual.IndividualId,
        CanVisitRestrictionId: null,
        DoNotVisit: false,
        CanSendMailRestrictionId: 1
      },
      selectedAffiliateId: null
    };
  },
  methods: {
    saveNewAddress() {
      this.address.IndividualId = this.individual.IndividualId;
      if (this.address.ContactStatusId === 4) {
        this.address.IsPreferred = !!this.address.IsPreferred;
      } else {
        if (this.address.IsPreferred) {
          this.alert = true;
          this.alertType = "error";
          this.alertText = "Address must be in verified status, to be marked as preferred.";
          return;
        }
      }
      this.address.CanVisitRestrictionId = this.address.DoNotVisit === true ? 2 : 1;
      if (this.savedAddress) {
        axios.put("/api/v2/IndividualAddress/" + this.savedAddress.IndividualAddressId + "?include=ContactStatus,ContactSource,StateTerritory,CanSendMailRestriction", this.address).then((response) => {
          this.handleAddressSaved(response.data.data, true, false);
        });
      } else {
        delete this.address.IndividualAddressId;
        axios.post("/api/v2/IndividualAddress?include=ContactStatus,ContactSource,StateTerritory,CanSendMailRestriction", this.address).then((response) => {
          this.resetAddress();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Address saved.";
          this.handleAddressSaved(response.data.data, false, true);
        });
      }
    },
    saveCloseAddress() {
      this.address.IndividualId = this.individual.IndividualId;
      if (this.address.ContactStatusId === 4) {
        this.address.IsPreferred = !!this.address.IsPreferred;
      } else {
        if (this.address.IsPreferred) {
          this.alert = true;
          this.alertType = "error";
          this.alertText = "Address must be in verified status, to be marked as preferred.";
          return;
        }
      }
      this.address.CanVisitRestrictionId = this.address.DoNotVisit === true ? 2 : 1;
      if (this.savedAddress) {
        axios.put("/api/v2/IndividualAddress/" + this.savedAddress.IndividualAddressId + "?include=ContactStatus,ContactSource,StateTerritory,CanSendMailRestriction", this.address).then((response) => {
          this.handleAddressSaved(response.data.data, true, false);
        });
      } else {
        delete this.address.IndividualAddressId;
        axios.post("/api/v2/IndividualAddress?include=ContactStatus,ContactSource,StateTerritory,CanSendMailRestriction", this.address).then((response) => {
          this.resetAddress();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Address saved.";
          this.handleAddressSaved(response.data.data, true, true);
        });
      }
    },
    async onSave(event) {
      const { value } = event.submitter;
      const results = await event;
      if (!results.valid) {
        return;
      }
      if (value === "continue") {
        this.saveNewAddress();
      } else if (value === "close") {
        this.saveCloseAddress();
      }
    },
    cancel() {
      this.setEditAddress();
      this.$emit("cancel-add-address");
    },
    handleAddressSaved(addressData, flip, isNew) {
      if (addressData.IndividualAddressTypeId === 3 && addressData.ContactStatus.ContactStatusName === "Verified") {
        this.updateBillHighwayIndividual(this.individual.IndividualId, this.selectedAffiliateId, "address");
      }
      this.$emit("saved-address", { address: addressData, flip, isNew });
    },
    resetAddress() {
      for (const field in this.emptyAddress) {
        if (this.emptyAddress.hasOwnProperty(field)) {
          this.address[field] = this.emptyAddress[field];
        }
      }
    },
    setEditAddress() {
      var _a2;
      this.address = clone(this.savedAddress) || clone(this.emptyAddress);
      this.address.DoNotVisit = ((_a2 = this.savedAddress) == null ? void 0 : _a2.CanVisitRestrictionId) && (this == null ? void 0 : this.savedAddress.CanVisitRestrictionId) !== 1;
    }
  }
};
const _hoisted_1$Q = { class: "data-container" };
const _hoisted_2$M = {
  key: 0,
  class: "text-red"
};
const _hoisted_3$F = { class: "data-container" };
const _hoisted_4$A = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$x = { class: "data-container" };
const _hoisted_6$u = {
  key: 0,
  class: "text-red"
};
const _hoisted_7$q = { class: "data-container" };
const _hoisted_8$k = {
  key: 0,
  class: "text-red"
};
const _hoisted_9$j = {
  key: 0,
  class: "text-red"
};
const _hoisted_10$g = {
  key: 0,
  class: "text-red"
};
const _hoisted_11$d = { class: "data-container" };
const _hoisted_12$d = {
  key: 0,
  class: "text-red"
};
function _sfc_render$1c(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_StateTerritorySelectComponent = resolveComponent("StateTerritorySelectComponent");
  return openBlock(), createBlock(VForm, {
    ref: "form",
    modelValue: $data.valid,
    "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => $data.valid = $event),
    "validate-on": "submit",
    onSubmit: withModifiers($options.onSave, ["prevent"])
  }, {
    default: withCtx(() => [
      createVNode(VCard, null, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($options.newOrEditAddress),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              createVNode(VAlert, {
                type: $data.alertType,
                modelValue: $data.alert,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
                closable: "",
                "close-text": "Dismiss"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($data.alertText),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }, 8, ["type", "modelValue"]),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_1$Q, [
                        createVNode(VSelect, {
                          items: $data.addressTypes,
                          "item-value": "IndividualAddressTypeId",
                          "item-title": "IndividualAddressTypeName",
                          modelValue: $data.address.IndividualAddressTypeId,
                          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.address.IndividualAddressTypeId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, {
                          label: withCtx(() => [
                            $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_2$M, "* ")) : createCommentVNode("v-if", true),
                            _cache[14] || (_cache[14] = createTextVNode("Address Type "))
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_3$F, [
                        createVNode(VSelect, {
                          items: $options.contactStatus,
                          "item-value": "ContactStatusId",
                          "item-title": "ContactStatusName",
                          modelValue: $data.address.ContactStatusId,
                          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.address.ContactStatusId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, {
                          label: withCtx(() => [
                            $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_4$A, "* ")) : createCommentVNode("v-if", true),
                            _cache[15] || (_cache[15] = createTextVNode("Address Status "))
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_5$x, [
                        createVNode(VSelect, {
                          items: $options.contactSources,
                          "item-value": "ContactSourceId",
                          "item-title": "ContactSourceName",
                          modelValue: $data.address.ContactSourceId,
                          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.address.ContactSourceId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, {
                          label: withCtx(() => [
                            $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_6$u, "* ")) : createCommentVNode("v-if", true),
                            _cache[16] || (_cache[16] = createTextVNode("Address Source "))
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Preferred Address",
                        modelValue: $data.address.IsPreferred,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.address.IsPreferred = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Do Not Visit",
                        modelValue: $data.address.DoNotVisit,
                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.address.DoNotVisit = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, { cols: "4" }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_7$q, [
                        createVNode(VSelect, {
                          items: $data.contactRestrictions,
                          "item-value": "ContactRestrictionId",
                          "item-title": "ContactRestrictionName",
                          modelValue: $data.address.CanSendMailRestrictionId,
                          "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.address.CanSendMailRestrictionId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, {
                          label: withCtx(() => [
                            $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_8$k, "* ")) : createCommentVNode("v-if", true),
                            _cache[17] || (_cache[17] = createTextVNode("Mailing Contact Restriction "))
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "8" }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        rules: [$data.rules.required],
                        modelValue: $data.address.AddressLine1,
                        "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.address.AddressLine1 = $event),
                        maxlength: 200,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_9$j, "* ")) : createCommentVNode("v-if", true),
                          _cache[18] || (_cache[18] = createTextVNode("Street Address "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, { cols: "4" }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Suite/Apt",
                        modelValue: $data.address.AddressLine2,
                        "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.address.AddressLine2 = $event),
                        maxlength: 200,
                        variant: "underlined"
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "4" }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        rules: [$data.rules.required],
                        modelValue: $data.address.City,
                        "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.address.City = $event),
                        maxlength: 100,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_10$g, "* ")) : createCommentVNode("v-if", true),
                          _cache[19] || (_cache[19] = createTextVNode("City "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, { cols: "4" }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_11$d, [
                        createVNode(_component_StateTerritorySelectComponent, {
                          "item-value": "StateTerritoryId",
                          "item-text": "StateTerritoryName",
                          label: "State",
                          modelValue: $data.address.StateTerritoryId,
                          "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $data.address.StateTerritoryId = $event),
                          rules: [$data.rules.required]
                        }, null, 8, ["modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, { cols: "4" }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        rules: [$data.rules.required],
                        modelValue: $data.address.PostalCode,
                        "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.address.PostalCode = $event),
                        maxlength: 15,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_12$d, "* ")) : createCommentVNode("v-if", true),
                          _cache[20] || (_cache[20] = createTextVNode("Zip Code "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          !$props.readOnly && $props.showSaveButton ? (openBlock(), createBlock(VCardActions, { key: 0 }, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                onClick: _cache[12] || (_cache[12] = ($event) => $options.cancel()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[21] || (_cache[21] = [
                  createTextVNode("Cancel")
                ])),
                _: 1
                /* STABLE */
              }),
              !$props.savedAddress ? (openBlock(), createBlock(VBtn, {
                key: 0,
                color: "secondary",
                type: "submit",
                variant: "elevated",
                value: "continue"
              }, {
                default: withCtx(() => _cache[22] || (_cache[22] = [
                  createTextVNode("Save and Continue Adding...")
                ])),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              createVNode(VBtn, {
                color: "success",
                type: "submit",
                variant: "elevated",
                value: "close"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($options.saveButtonLabel),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue", "onSubmit"]);
}
const IndividualAddressComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1c, [["render", _sfc_render$1c], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Edit/Contact/IndividualAddressComponent.vue"]]);
const _sfc_main$1b = {
  name: "AddressInformationComponent",
  components: { IndividualAddressComponent, FlipCard, ContactAddressListComponent: ContactAddressListComponent$1 },
  mixins: [markAsPreferredMixin, contactsMixin],
  props: {
    individual: {
      type: Object,
      required: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/individual/" + this.individual.IndividualId + "?include=individualAddresses,individualAddresses.StateTerritory,individualAddresses.ContactSource,individualAddresses.CanSendMailRestriction,individualAddresses.ContactStatus").then((response) => {
        this.addresses = response.data.data.individualAddresses;
        this.dataLoaded = true;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    getAddressesByType(typeId, ignoreTypes) {
      return this.addresses.filter((address) => {
        return ignoreTypes.length > 0 ? !address.IndividualAddressTypeId || ignoreTypes.indexOf(address.IndividualAddressTypeId) === -1 : address.IndividualAddressTypeId && address.IndividualAddressTypeId === typeId;
      });
    },
    onAddressSaved(event) {
      if (!event.address) {
        return;
      }
      if (event.isNew) {
        this.addresses.push(event.address);
      } else {
        const index = this.addresses.findIndex((address) => {
          return address.IndividualAddressId === event.address.IndividualAddressId;
        });
        if (index >= 0) {
          this.addresses[index] = event.address;
        }
      }
      this.handleIsPreferred(this.addresses, event.address, "IndividualAddressId", "");
      this.addresses = [...this.addresses];
      this.alertSuccessMessageForSave("Address");
      if (event.flip) {
        this.flipped = false;
      }
    }
  },
  data() {
    return {
      expanded: false,
      addresses: [],
      flipped: false,
      addressheaders: [
        { title: "Address", value: "Address" },
        { title: "Status", value: "ContactStatus" },
        { title: "Source", value: "ContactSource" },
        { title: "Preferred", value: "IsPreferred" },
        { title: "Do Not Visit", value: "CanVisitRestrictionId" },
        { title: "Mailing Contact Restrictions", value: "ContactRestriction" },
        { title: "Action", value: "IndividualAddressId" }
      ],
      selected: null,
      dataLoaded: false,
      individualAddress: {}
    };
  }
};
function _sfc_render$1b(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_contact_address_list_component = resolveComponent("contact-address-list-component");
  const _component_individual_address_component = resolveComponent("individual-address-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[2] || (_cache[2] = [
          createTextVNode(" Address ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        onClick: _ctx.onAdd
                      }, {
                        default: withCtx(() => _cache[3] || (_cache[3] = [
                          createTextVNode("Add address")
                        ])),
                        _: 1
                        /* STABLE */
                      }, 8, ["onClick"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VAlert, {
                        type: _ctx.alertType,
                        modelValue: _ctx.alert,
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.alert = $event),
                        closable: "",
                        "close-text": "Dismiss"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(_ctx.alertText),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["type", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              $data.dataLoaded && $data.addresses.length == 0 ? (openBlock(), createBlock(VRow, { key: 0 }, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-center" }, {
                    default: withCtx(() => _cache[4] || (_cache[4] = [
                      createBaseVNode(
                        "p",
                        null,
                        "No addresses found",
                        -1
                        /* HOISTED */
                      )
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getAddressesByType(1, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 1 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[5] || (_cache[5] = createBaseVNode(
                        "h4",
                        null,
                        "Home",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_address_list_component, {
                        addresses: $options.getAddressesByType(1, []),
                        addressheaders: $data.addressheaders,
                        onEditAddress: _ctx.onEdit
                      }, null, 8, ["addresses", "addressheaders", "onEditAddress"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getAddressesByType(2, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 2 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[6] || (_cache[6] = createBaseVNode(
                        "h4",
                        null,
                        "Work",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_address_list_component, {
                        addresses: $options.getAddressesByType(2, []),
                        addressheaders: $data.addressheaders,
                        onEditAddress: _ctx.onEdit
                      }, null, 8, ["addresses", "addressheaders", "onEditAddress"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getAddressesByType(6, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 3 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[7] || (_cache[7] = createBaseVNode(
                        "h4",
                        null,
                        "Seasonal",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_address_list_component, {
                        addresses: $options.getAddressesByType(6, []),
                        addressheaders: $data.addressheaders,
                        onEditAddress: _ctx.onEdit
                      }, null, 8, ["addresses", "addressheaders", "onEditAddress"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getAddressesByType(5, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 4 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[8] || (_cache[8] = createBaseVNode(
                        "h4",
                        null,
                        "Shipping",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_address_list_component, {
                        addresses: $options.getAddressesByType(5, []),
                        addressheaders: $data.addressheaders,
                        onEditAddress: _ctx.onEdit
                      }, null, 8, ["addresses", "addressheaders", "onEditAddress"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getAddressesByType(4, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 5 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[9] || (_cache[9] = createBaseVNode(
                        "h4",
                        null,
                        "Mailing",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_address_list_component, {
                        addresses: $options.getAddressesByType(4, []),
                        addressheaders: $data.addressheaders,
                        onEditAddress: _ctx.onEdit
                      }, null, 8, ["addresses", "addressheaders", "onEditAddress"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getAddressesByType(3, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 6 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[10] || (_cache[10] = createBaseVNode(
                        "h4",
                        null,
                        "Billing",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_address_list_component, {
                        addresses: $options.getAddressesByType(3, []),
                        addressheaders: $data.addressheaders,
                        onEditAddress: _ctx.onEdit
                      }, null, 8, ["addresses", "addressheaders", "onEditAddress"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true)
            ]),
            back: withCtx(() => [
              createVNode(_component_individual_address_component, {
                individual: $props.individual,
                "saved-address": $data.selected,
                onSavedAddress: $options.onAddressSaved,
                onCancelAddAddress: _cache[1] || (_cache[1] = ($event) => $data.flipped = false),
                "read-only": false,
                "individual-address": $data.individualAddress
              }, null, 8, ["individual", "saved-address", "onSavedAddress", "individual-address"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const AddressInformationComponent$1 = /* @__PURE__ */ _export_sfc(_sfc_main$1b, [["render", _sfc_render$1b], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/AddressInformationComponent.vue"]]);
const _sfc_main$1a = {
  name: "ContactEmailListComponent",
  props: {
    emailheaders: {
      type: Array,
      required: true
    },
    emails: {
      type: Array,
      required: true
    }
  }
};
const _hoisted_1$P = { key: 0 };
const _hoisted_2$L = { key: 0 };
const _hoisted_3$E = { key: 0 };
function _sfc_render$1a(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VDataTable, {
    "hide-default-footer": true,
    headers: $props.emailheaders,
    "mobile-breakpoint": 992,
    class: "mobile-global-card-table",
    items: $props.emails
  }, {
    "item.Email": withCtx((email) => [
      createBaseVNode(
        "span",
        null,
        toDisplayString(email.item.Email),
        1
        /* TEXT */
      )
    ]),
    "item.ContactStatus": withCtx((contact) => [
      contact.item.ContactStatus ? (openBlock(), createElementBlock(
        "span",
        _hoisted_1$P,
        toDisplayString(contact.item.ContactStatus.ContactStatusName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    "item.ContactSource": withCtx((contact) => [
      contact.item.ContactSource ? (openBlock(), createElementBlock(
        "span",
        _hoisted_2$L,
        toDisplayString(contact.item.ContactSource.ContactSourceName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    "item.IsPreferred": withCtx((contact) => [
      createBaseVNode("span", null, [
        contact.item.IsPreferred == 1 ? (openBlock(), createBlock(VCheckbox, {
          key: 0,
          "model-value": "true",
          disabled: ""
        })) : createCommentVNode("v-if", true),
        contact.item.IsPreferred == 0 ? (openBlock(), createBlock(VCheckbox, {
          key: 1,
          value: "",
          disabled: ""
        })) : createCommentVNode("v-if", true)
      ])
    ]),
    "item.ContactRestriction": withCtx((contact) => [
      contact.item.CanContactRestriction ? (openBlock(), createElementBlock(
        "span",
        _hoisted_3$E,
        toDisplayString(contact.item.CanContactRestriction.ContactRestrictionName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    "item.IndividualEmailId": withCtx((IndividualEmailId) => [
      createBaseVNode("span", null, [
        createVNode(VBtn, {
          onClick: ($event) => _ctx.$emit("edit-email", IndividualEmailId.item)
        }, {
          default: withCtx(() => _cache[0] || (_cache[0] = [
            createTextVNode("Edit")
          ])),
          _: 2
          /* DYNAMIC */
        }, 1032, ["onClick"])
      ])
    ]),
    _: 1
    /* STABLE */
  }, 8, ["headers", "items"]);
}
const ContactEmailListComponent$1 = /* @__PURE__ */ _export_sfc(_sfc_main$1a, [["render", _sfc_render$1a], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/ContactEmailListComponent.vue"]]);
const _sfc_main$19 = {
  name: "IndividualEmailComponent",
  mixins: [billHighway],
  props: {
    individual: {
      type: Object,
      required: true
    },
    savedEmail: {
      type: Object,
      required: false
    },
    showSaveButton: {
      type: Boolean,
      default: true
    },
    readOnly: {
      type: Boolean,
      required: true
    },
    individualEmail: {
      type: Object,
      required: true
    }
  },
  computed: {
    saveButtonLabel() {
      return this.savedEmail ? "Save" : "save and close";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    individualEmail: {
      handler(value) {
        if (this.email && this.email.IndividualEmailId === this.individualEmail.IndividualEmailId) {
          return;
        }
        this.email = this.individualEmail.IndividualEmailId ? clone(value) : value;
        this.email.ContactStatusId = this.email.ContactStatusId ? this.email.ContactStatusId : 4;
        this.email.CanContactRestrictionId = this.email.CanContactRestrictionId ? this.email.CanContactRestrictionId : 1;
      }
    },
    savedEmail: {
      handler(data) {
        this.setEditEmail();
      },
      deep: true
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/IndividualEmailType").then((response) => {
      this.emailTypes = response.data.data;
    });
    axios.get("/api/v2/ContactRestriction").then((response) => {
      this.contactRestrictions = response.data.data;
    });
    this.email = this.individualEmail.IndividualEmailId ? clone(this.individualEmail) : this.individualEmail;
    this.email.ContactStatusId = this.email.ContactStatusId ? this.email.ContactStatusId : 4;
    this.email.CanContactRestrictionId = this.email.CanContactRestrictionId ? this.email.CanContactRestrictionId : 1;
    this.selectedAffiliateId = this.$store.getters["user/selectedAffiliate"].AffiliateId;
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      emailTypes: [],
      contactRestrictions: [],
      email: { ContactStatusId: 4, CanContactRestrictionId: 1 },
      rules: {
        required: (value) => !!value || "Required.",
        email: (value) => {
          const pattern = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
          return pattern.test(value) || "Invalid e-mail.";
        }
      },
      emptyEmail: {
        IndividualEmailTypeId: null,
        ContactStatusId: 4,
        ContactSourceId: null,
        IsPreferred: false,
        CanContact: false,
        Email: null,
        CanContactRestrictionId: 1,
        IndividualId: this.individual.IndividualId
      },
      selectedAffiliateId: null
    };
  },
  methods: {
    saveNewEmail() {
      this.email.IndividualId = this.individual.IndividualId;
      if (this.email.ContactStatusId === 4) {
        this.email.IsPreferred = typeof this.email.IsPreferred === "undefined" || this.email.IsPreferred === null ? false : this.email.IsPreferred;
      } else {
        if (this.email.IsPreferred) {
          this.alert = true;
          this.alertType = "error";
          this.alertText = "Email must be in verified status, to be marked as preferred.";
          return;
        }
      }
      if (this.savedEmail) {
        axios.put("/api/v2/IndividualEmail/" + this.savedEmail.IndividualEmailId + "?include=ContactStatus,ContactSource", this.email).then((response) => {
          this.handleEmailSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/IndividualEmail?include=ContactStatus,ContactSource,CanContactRestriction", this.email).then((response) => {
          this.resetEmail();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Email saved.";
          this.handleEmailSaved(response.data.data, false, true);
        });
      }
    },
    saveCloseEmail() {
      this.email.IndividualId = this.individual.IndividualId;
      if (this.email.ContactStatusId === 4) {
        this.email.IsPreferred = typeof this.email.IsPreferred === "undefined" || this.email.IsPreferred === null ? false : this.email.IsPreferred;
      } else {
        if (this.email.IsPreferred) {
          this.alert = true;
          this.alertType = "error";
          this.alertText = "Email must be in verified status, to be marked as preferred.";
          return;
        }
      }
      if (this.savedEmail) {
        axios.put("/api/v2/IndividualEmail/" + this.savedEmail.IndividualEmailId + "?include=ContactStatus,ContactSource,CanContactRestriction", this.email).then((response) => {
          this.handleEmailSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/IndividualEmail?include=ContactStatus,ContactSource,CanContactRestriction", this.email).then((response) => {
          this.resetEmail();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Email saved.";
          this.handleEmailSaved(response.data.data, true, true);
        });
      }
    },
    async onSave(event) {
      const { value } = event.submitter;
      const results = await event;
      if (!results.valid) {
        return;
      }
      if (value === "continue") {
        this.saveNewEmail();
      } else if (value === "close") {
        this.saveCloseEmail();
      }
    },
    cancel() {
      this.setEditEmail();
      this.$emit("cancel-add-email");
    },
    handleEmailSaved(emailData, flip, isNew) {
      if (emailData.IsPreferred) {
        this.updateBillHighwayIndividual(this.individual.IndividualId, this.selectedAffiliateId, "email");
      }
      this.$emit("saved-email", { email: emailData, flip, isNew });
    },
    resetEmail() {
      for (const field in this.emptyEmail) {
        if (this.emptyEmail.hasOwnProperty(field)) {
          this.email[field] = this.emptyEmail[field];
        }
      }
    },
    setEditEmail() {
      this.email = clone(this.savedEmail) || clone(this.emptyEmail);
    }
  }
};
const _hoisted_1$O = { class: "data-container" };
const _hoisted_2$K = {
  key: 0,
  class: "text-red"
};
const _hoisted_3$D = { class: "data-container" };
const _hoisted_4$z = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$w = { class: "data-container" };
const _hoisted_6$t = {
  key: 0,
  class: "text-red"
};
const _hoisted_7$p = {
  key: 0,
  class: "text-red"
};
const _hoisted_8$j = { class: "data-container" };
const _hoisted_9$i = {
  key: 0,
  class: "text-red"
};
function _sfc_render$19(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VForm, {
    ref: "form",
    modelValue: $data.valid,
    "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.valid = $event),
    "validate-on": "submit",
    onSubmit: withModifiers($options.onSave, ["prevent"])
  }, {
    default: withCtx(() => [
      createVNode(VCard, null, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => _cache[9] || (_cache[9] = [
              createTextVNode("New Email")
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              createVNode(VAlert, {
                type: $data.alertType,
                modelValue: $data.alert,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
                closable: "",
                "close-text": "Dismiss"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($data.alertText),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }, 8, ["type", "modelValue"]),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_1$O, [
                        createVNode(VSelect, {
                          items: $data.emailTypes,
                          "item-value": "IndividualEmailTypeId",
                          "item-title": "IndividualEmailTypeName",
                          modelValue: $data.email.IndividualEmailTypeId,
                          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.email.IndividualEmailTypeId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, {
                          label: withCtx(() => [
                            $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_2$K, "* ")) : createCommentVNode("v-if", true),
                            _cache[10] || (_cache[10] = createTextVNode("Email Type "))
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_3$D, [
                        createVNode(VSelect, {
                          items: $options.contactStatus,
                          "item-value": "ContactStatusId",
                          "item-title": "ContactStatusName",
                          modelValue: $data.email.ContactStatusId,
                          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.email.ContactStatusId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, {
                          label: withCtx(() => [
                            $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_4$z, "* ")) : createCommentVNode("v-if", true),
                            _cache[11] || (_cache[11] = createTextVNode("Email Status "))
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_5$w, [
                        createVNode(VSelect, {
                          items: $options.contactSources,
                          "item-value": "ContactSourceId",
                          "item-title": "ContactSourceName",
                          modelValue: $data.email.ContactSourceId,
                          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.email.ContactSourceId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, {
                          label: withCtx(() => [
                            $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_6$t, "* ")) : createCommentVNode("v-if", true),
                            _cache[12] || (_cache[12] = createTextVNode("Email Source "))
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Preferred Email",
                        modelValue: $data.email.IsPreferred,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.email.IsPreferred = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        rules: [$data.rules.required, $data.rules.email],
                        modelValue: $data.email.Email,
                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.email.Email = $event),
                        maxlength: 200,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_7$p, "* ")) : createCommentVNode("v-if", true),
                          _cache[13] || (_cache[13] = createTextVNode("Email "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_8$j, [
                        createVNode(VSelect, {
                          items: $data.contactRestrictions,
                          "item-value": "ContactRestrictionId",
                          "item-title": "ContactRestrictionName",
                          modelValue: $data.email.CanContactRestrictionId,
                          "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.email.CanContactRestrictionId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, {
                          label: withCtx(() => [
                            $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_9$i, "* ")) : createCommentVNode("v-if", true),
                            _cache[14] || (_cache[14] = createTextVNode("Contact Restriction "))
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          !$props.readOnly && $props.showSaveButton ? (openBlock(), createBlock(VCardActions, { key: 0 }, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                onClick: _cache[7] || (_cache[7] = ($event) => $options.cancel()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[15] || (_cache[15] = [
                  createTextVNode("Cancel")
                ])),
                _: 1
                /* STABLE */
              }),
              !$props.savedEmail ? (openBlock(), createBlock(VBtn, {
                key: 0,
                color: "secondary",
                type: "submit",
                variant: "elevated",
                value: "continue"
              }, {
                default: withCtx(() => _cache[16] || (_cache[16] = [
                  createTextVNode("Save and Continue Adding...")
                ])),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              createVNode(VBtn, {
                color: "success",
                type: "submit",
                variant: "elevated",
                value: "close"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($options.saveButtonLabel),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue", "onSubmit"]);
}
const IndividualEmailComponent$1 = /* @__PURE__ */ _export_sfc(_sfc_main$19, [["render", _sfc_render$19], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Edit/Contact/IndividualEmailComponent.vue"]]);
const _sfc_main$18 = {
  name: "EmailInformationComponent",
  components: {
    IndividualEmailComponent: IndividualEmailComponent$1,
    ContactEmailListComponent: ContactEmailListComponent$1,
    FlipCard
  },
  mixins: [markAsPreferredMixin, contactsMixin],
  props: {
    individual: {
      type: Object,
      required: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/individual/" + this.individual.IndividualId + "?include=individualEmails,individualEmails.ContactSource,individualEmails.CanContactRestriction,individualEmails.ContactStatus").then((response) => {
        this.emails = response.data.data.individualEmails;
        this.dataLoaded = true;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    getEmailbyType(typeId, ignoreTypes) {
      return this.emails.filter((address) => {
        return ignoreTypes.length > 0 ? !address.IndividualEmailTypeId || ignoreTypes.indexOf(address.IndividualEmailTypeId) === -1 : address.IndividualEmailTypeId && address.IndividualEmailTypeId === typeId;
      });
    },
    onEmailSaved(event) {
      if (!event.email) {
        return;
      }
      if (event.isNew) {
        this.emails.push(event.email);
      } else {
        const index = this.emails.findIndex((email) => {
          return email.IndividualEmailId === event.email.IndividualEmailId;
        });
        if (index >= 0) {
          this.emails[index] = event.email;
        }
      }
      this.handleIsPreferred(this.emails, event.email, "IndividualEmailId", "");
      this.emails = [...this.emails];
      this.alertSuccessMessageForSave("Email");
      if (event.flip) {
        this.flipped = false;
      }
    }
  },
  data() {
    return {
      emails: [],
      flipped: false,
      emailheaders: [
        { title: "Email", value: "Email" },
        { title: "Status", value: "ContactStatus" },
        { title: "Source", value: "ContactSource" },
        { title: "Preferred", value: "IsPreferred" },
        { title: "Contact Restriction", value: "ContactRestriction" },
        { title: "Action", value: "IndividualEmailId" }
      ],
      selected: null,
      dataLoaded: false,
      individualEmail: {}
    };
  }
};
function _sfc_render$18(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_contact_email_list_component = resolveComponent("contact-email-list-component");
  const _component_individual_email_component = resolveComponent("individual-email-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[3] || (_cache[3] = [
          createTextVNode(" Emails ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.onAdd())
                      }, {
                        default: withCtx(() => _cache[4] || (_cache[4] = [
                          createTextVNode("Add email address")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(VAlert, {
                        type: _ctx.alertType,
                        modelValue: _ctx.alert,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.alert = $event),
                        closable: "",
                        "close-text": "Dismiss"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(_ctx.alertText),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["type", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              $data.dataLoaded && $data.emails.length == 0 ? (openBlock(), createBlock(VRow, { key: 0 }, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-center" }, {
                    default: withCtx(() => _cache[5] || (_cache[5] = [
                      createBaseVNode(
                        "p",
                        null,
                        "No emails found",
                        -1
                        /* HOISTED */
                      )
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getEmailbyType(1, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 1 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[6] || (_cache[6] = createBaseVNode(
                        "h4",
                        null,
                        "Home email address (personal)",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_email_list_component, {
                        emails: $options.getEmailbyType(1, []),
                        emailheaders: $data.emailheaders,
                        onEditEmail: _ctx.onEdit
                      }, null, 8, ["emails", "emailheaders", "onEditEmail"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getEmailbyType(2, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 2 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[7] || (_cache[7] = createBaseVNode(
                        "h4",
                        null,
                        "Work email address",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_email_list_component, {
                        emails: $options.getEmailbyType(2, []),
                        emailheaders: $data.emailheaders,
                        onEditEmail: _ctx.onEdit
                      }, null, 8, ["emails", "emailheaders", "onEditEmail"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getEmailbyType(3, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 3 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[8] || (_cache[8] = createBaseVNode(
                        "h4",
                        null,
                        "Other email addresses",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_email_list_component, {
                        emails: $options.getEmailbyType(3, []),
                        emailheaders: $data.emailheaders,
                        onEditEmail: _ctx.onEdit
                      }, null, 8, ["emails", "emailheaders", "onEditEmail"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true)
            ]),
            back: withCtx(() => [
              createVNode(_component_individual_email_component, {
                individual: $props.individual,
                "saved-email": $data.selected,
                onSavedEmail: $options.onEmailSaved,
                onCancelAddEmail: _cache[2] || (_cache[2] = ($event) => $data.flipped = false),
                "read-only": false,
                "individual-email": $data.individualEmail
              }, null, 8, ["individual", "saved-email", "onSavedEmail", "individual-email"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const EmailInformationComponent$1 = /* @__PURE__ */ _export_sfc(_sfc_main$18, [["render", _sfc_render$18], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/EmailInformationComponent.vue"]]);
const _sfc_main$17 = {
  name: "PhoneListComponent",
  props: {
    phoneHeaders: {
      type: Array,
      required: true
    },
    phones: {
      type: Array,
      required: true
    }
  }
};
const _hoisted_1$N = { key: 0 };
const _hoisted_2$J = { key: 0 };
function _sfc_render$17(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VDataTable, {
    "hide-default-footer": true,
    headers: $props.phoneHeaders,
    "mobile-breakpoint": 992,
    class: "mobile-global-card-table",
    items: $props.phones
  }, {
    "item.fullPhone": withCtx((phone) => [
      createBaseVNode(
        "span",
        null,
        toDisplayString(phone.item.fullPhone),
        1
        /* TEXT */
      )
    ]),
    "item.ContactStatus": withCtx((phone) => [
      phone.item.ContactStatus ? (openBlock(), createElementBlock(
        "span",
        _hoisted_1$N,
        toDisplayString(phone.item.ContactStatus.ContactStatusName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    "item.ContactSource": withCtx((phone) => [
      phone.item.ContactSource ? (openBlock(), createElementBlock(
        "span",
        _hoisted_2$J,
        toDisplayString(phone.item.ContactSource.ContactSourceName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    "item.CanTextRestrictionId": withCtx((phone) => [
      createBaseVNode("span", null, [
        createVNode(VCheckbox, {
          disabled: "",
          "model-value": phone.item.CanTextRestrictionId === 1
        }, null, 8, ["model-value"])
      ])
    ]),
    "item.IsPreferred": withCtx((phone) => [
      createBaseVNode("span", null, [
        createVNode(VCheckbox, {
          disabled: "",
          "model-value": phone.item.IsPreferred === true
        }, null, 8, ["model-value"])
      ])
    ]),
    "item.CanCallRestrictionId": withCtx((phone) => [
      createBaseVNode("span", null, [
        createVNode(VCheckbox, {
          "model-value": phone.item.CanCallRestrictionId && phone.item.CanCallRestrictionId !== 1,
          disabled: ""
        }, null, 8, ["model-value"])
      ])
    ]),
    "item.IndividualPhoneId": withCtx((IndividualPhoneId) => [
      createBaseVNode("span", null, [
        createVNode(VBtn, {
          onClick: ($event) => _ctx.$emit("edit-phone", IndividualPhoneId.item)
        }, {
          default: withCtx(() => _cache[0] || (_cache[0] = [
            createTextVNode("Edit")
          ])),
          _: 2
          /* DYNAMIC */
        }, 1032, ["onClick"])
      ])
    ]),
    _: 1
    /* STABLE */
  }, 8, ["headers", "items"]);
}
const PhoneListComponent$1 = /* @__PURE__ */ _export_sfc(_sfc_main$17, [["render", _sfc_render$17], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/PhoneListComponent.vue"]]);
const _sfc_main$16 = {
  name: "IndividualPhoneComponent",
  mixins: [billHighway],
  props: {
    individual: {
      type: Object,
      required: true
    },
    savedPhone: {
      type: Object,
      required: false
    },
    showSaveButton: {
      type: Boolean,
      default: true
    },
    readOnly: {
      type: Boolean,
      required: true
    },
    individualPhone: {
      type: Object,
      required: true
    }
  },
  computed: {
    saveButtonLabel() {
      return this.savedPhone ? "Save" : "save and close";
    },
    pageTitle() {
      return this.savedPhone ? "Edit Phone" : "Add Phone";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    phoneCountryId() {
      this.formattedPhoneNumber = this.formatPhoneNumber(this.formattedPhoneNumber);
    },
    formattedPhoneNumber() {
      if (this.formattedPhoneNumber !== "") {
        this.formattedPhoneNumber = this.formatPhoneNumber(this.formattedPhoneNumber);
        this.phone.PhoneNumber = this.revertPhoneNumberFormat(this.formattedPhoneNumber);
      }
    },
    individualPhone: {
      handler(value) {
        if (this.phone && this.phone.IndividualPhoneId === this.individualPhone.IndividualPhoneId) {
          return;
        }
        this.phone = this.individualPhone.IndividualPhoneId ? clone(value) : value;
        this.phone.ContactStatusId = this.phone.ContactStatusId ? this.phone.ContactStatusId : 4;
        this.phone.CountryId = this.phone.CountryId ? this.phone.CountryId : 4;
        this.phoneCountryId = parseInt(this.phone.CountryId, 10);
      }
    },
    savedPhone() {
      this.setEditPhone();
      this.formattedPhoneNumber = this.formatPhoneNumber(this.phone.PhoneNumber);
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/IndividualPhoneType").then((response) => {
      this.phoneTypes = response.data.data;
    });
    axios.get("/api/v2/Country?sort=DisplayOrder&per_page=1000").then((response) => {
      this.phoneCountries = this.filterCountries(response.data.data);
    });
    this.phone = this.individualPhone.IndividualPhoneId ? clone(this.individualPhone) : this.individualPhone;
    this.phone.ContactStatusId = this.phone.ContactStatusId ? this.phone.ContactStatusId : 4;
    this.phone.CountryId = this.phone.CountryId ? this.phone.CountryId : 4;
    this.phoneCountryId = parseInt(this.phone.CountryId, 10);
    this.selectedAffiliateId = this.$store.getters["user/selectedAffiliate"].AffiliateId;
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      phoneTypes: [],
      phoneCountries: [],
      phone: {},
      formattedPhoneNumber: "",
      phoneFormatCountryIds: [2, 4],
      phoneCountryId: 4,
      rules: {
        required: (value) => !!value || "Required.",
        phone: (value) => {
          const pattern = /^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3}[\s.-]\d{4}$/;
          return pattern.test(value) || "Please enter a valid phone number.";
        }
      },
      emptyPhone: {
        IndividualPhoneTypeId: null,
        ContactStatusId: 4,
        ContactSourceId: null,
        IsPreferred: false,
        isTextAllowed: false,
        isDoNotCall: false,
        CanContact: false,
        PhoneNumber: null,
        Extension: null,
        CanCallRestrictionId: null,
        CountryId: 4,
        IndividualId: this.individual.IndividualId
      },
      selectedAffiliateId: null
    };
  },
  methods: {
    formatPhoneNumber(phoneNumber) {
      if (this.phoneFormatCountryIds.includes(this.phoneCountryId) && phoneNumber && phoneNumber !== void 0 && phoneNumber !== null && phoneNumber != "") {
        const x2 = phoneNumber.replace(/\D/g, "").match(/(\d{0,3})(\d{0,3})(\d{0,4})/);
        return !x2[2] ? x2[1] : `(${x2[1]}) ${x2[2]}-${x2[3]}`;
      }
      return phoneNumber;
    },
    revertPhoneNumberFormat(formattedPhoneNumber) {
      if (formattedPhoneNumber && formattedPhoneNumber != "") {
        return formattedPhoneNumber.replace("(", "").replace(")", "").replace("-", "").replace(" ", "");
      }
      return formattedPhoneNumber;
    },
    async saveNewPhone(event) {
      const results = await event;
      if (!results.valid) {
        return;
      }
      this.phone.IndividualId = this.individual.IndividualId;
      if (this.phone.ContactStatusId === 4) {
        this.phone.IsPreferred = typeof this.phone.IsPreferred === "undefined" || this.phone.IsPreferred === null ? false : this.phone.IsPreferred;
      } else {
        if (this.phone.IsPreferred) {
          this.alert = true;
          this.alertType = "error";
          this.alertText = "Phone must be in verified status, to be marked as preferred.";
          return;
        }
      }
      this.phone.CanTextRestrictionId = this.phone.isTextAllowed === true ? 1 : 2;
      this.phone.CanCallRestrictionId = this.phone.isDoNotCall === true ? 2 : 1;
      this.phone.CountryId = this.phoneCountryId;
      if (this.savedPhone) {
        axios.put("/api/v2/IndividualPhone/" + this.savedPhone.IndividualPhoneId + "?include=ContactStatus,ContactSource", this.phone).then((response) => {
          this.handlePhoneSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/IndividualPhone?include=ContactStatus,ContactSource", this.phone).then((response) => {
          this.resetPhone();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Phone saved.";
          this.handlePhoneSaved(response.data.data, false, true);
        });
      }
    },
    async saveClosePhone(event) {
      const results = await event;
      if (!results.valid) {
        return;
      }
      this.phone.IndividualId = this.individual.IndividualId;
      if (this.phone.ContactStatusId === 4) {
        this.phone.IsPreferred = typeof this.phone.IsPreferred === "undefined" || this.phone.IsPreferred === null ? false : this.phone.IsPreferred;
      } else {
        if (this.phone.IsPreferred) {
          this.alert = true;
          this.alertType = "error";
          this.alertText = "Phone must be in verified status, to be marked as preferred.";
          return;
        }
      }
      this.phone.CanTextRestrictionId = this.phone.isTextAllowed === true ? 1 : 2;
      this.phone.CanCallRestrictionId = this.phone.isDoNotCall === true ? 2 : 1;
      this.phone.CountryId = this.phoneCountryId;
      if (this.savedPhone) {
        axios.put("/api/v2/IndividualPhone/" + this.savedPhone.IndividualPhoneId + "?include=ContactStatus,ContactSource", this.phone).then((response) => {
          this.handlePhoneSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/IndividualPhone?include=ContactStatus,ContactSource", this.phone).then((response) => {
          this.resetPhone();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Phone saved.";
          this.handlePhoneSaved(response.data.data, true, true);
        });
      }
    },
    async onSave(event) {
      const { value } = event.submitter;
      const results = await event;
      if (!results.valid) {
        return;
      }
      if (value === "continue") {
        this.saveNewPhone();
      } else if (value === "close") {
        this.saveClosePhone();
      }
    },
    cancel() {
      this.setEditPhone();
      this.$emit("cancel-add-phone");
    },
    handlePhoneSaved(phoneData, flip, isNew) {
      if (phoneData.IsPreferred) {
        this.updateBillHighwayIndividual(this.individual.IndividualId, this.selectedAffiliateId, "phone");
      }
      this.$emit("saved-phone", { phone: phoneData, flip, isNew });
    },
    resetPhone() {
      for (const field in this.emptyPhone) {
        if (this.emptyPhone.hasOwnProperty(field)) {
          this.phone[field] = this.emptyPhone[field];
        }
      }
      this.phoneCountryId = 4;
      this.formattedPhoneNumber = "";
    },
    setEditPhone() {
      var _a2, _b;
      if (this.savedPhone) {
        this.phoneCountryId = this.savedPhone.CountryId;
        this.phone = clone(this.savedPhone);
        this.phone.isTextAllowed = ((_a2 = this.savedPhone) == null ? void 0 : _a2.CanTextRestrictionId) === 1;
        this.phone.isDoNotCall = ((_b = this.savedPhone) == null ? void 0 : _b.CanCallRestrictionId) !== 1;
      } else {
        this.phone = clone(this.emptyPhone);
      }
    },
    filterCountries(countries) {
      let result = [];
      countries.forEach((country) => {
        if (country.CountryCallingCode !== "") {
          let item = {
            CountryId: country.CountryId,
            CountryCallingCode: country.CountryCallingCode,
            CountryCallingCodeDisplay: "+" + country.CountryCallingCode + " (" + country.CountryCode + ")"
          };
          result.push(item);
        }
      });
      return result;
    }
  }
};
const _hoisted_1$M = { class: "data-container" };
const _hoisted_2$I = {
  key: 0,
  class: "text-red"
};
const _hoisted_3$C = { class: "data-container" };
const _hoisted_4$y = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$v = { class: "data-container" };
const _hoisted_6$s = {
  key: 0,
  class: "text-red"
};
const _hoisted_7$o = { class: "data-container" };
const _hoisted_8$i = {
  key: 0,
  class: "text-red"
};
function _sfc_render$16(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VForm, {
    ref: "form",
    modelValue: $data.valid,
    "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.valid = $event),
    "validate-on": "submit",
    onSubmit: withModifiers($options.onSave, ["prevent"])
  }, {
    default: withCtx(() => [
      createVNode(VCard, null, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($options.pageTitle),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              createVNode(VAlert, {
                type: $data.alertType,
                modelValue: $data.alert,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
                closable: "",
                "close-text": "Dismiss"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($data.alertText),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }, 8, ["type", "modelValue"]),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_1$M, [
                        createVNode(VSelect, {
                          items: $data.phoneTypes,
                          "item-value": "IndividualPhoneTypeId",
                          "item-title": "IndividualPhoneTypeName",
                          modelValue: $data.phone.IndividualPhoneTypeId,
                          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.phone.IndividualPhoneTypeId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, {
                          label: withCtx(() => [
                            $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_2$I, "* ")) : createCommentVNode("v-if", true),
                            _cache[12] || (_cache[12] = createTextVNode("Phone Type "))
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_3$C, [
                        createVNode(VSelect, {
                          items: $options.contactStatus,
                          "item-value": "ContactStatusId",
                          "item-title": "ContactStatusName",
                          modelValue: $data.phone.ContactStatusId,
                          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.phone.ContactStatusId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, {
                          label: withCtx(() => [
                            $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_4$y, "* ")) : createCommentVNode("v-if", true),
                            _cache[13] || (_cache[13] = createTextVNode("Phone Status "))
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_5$v, [
                        createVNode(VSelect, {
                          items: $options.contactSources,
                          "item-value": "ContactSourceId",
                          "item-title": "ContactSourceName",
                          modelValue: $data.phone.ContactSourceId,
                          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.phone.ContactSourceId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, {
                          label: withCtx(() => [
                            $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_6$s, "* ")) : createCommentVNode("v-if", true),
                            _cache[14] || (_cache[14] = createTextVNode("Phone Source "))
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_7$o, [
                        createVNode(VAutocomplete, {
                          items: $data.phoneCountries,
                          "item-title": "CountryCallingCodeDisplay",
                          "item-value": "CountryId",
                          modelValue: $data.phoneCountryId,
                          "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.phoneCountryId = $event),
                          label: "Country",
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        rules: $data.phoneFormatCountryIds.includes($data.phone.CountryId) ? [$data.rules.required, $data.rules.phone] : [$data.rules.required],
                        modelValue: $data.formattedPhoneNumber,
                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.formattedPhoneNumber = $event),
                        clearable: "",
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_8$i, "* ")) : createCommentVNode("v-if", true),
                          _cache[15] || (_cache[15] = createTextVNode("Phone Number "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Extension",
                        modelValue: $data.phone.Extension,
                        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.phone.Extension = $event),
                        maxlength: 10,
                        variant: "underlined"
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Preferred",
                        modelValue: $data.phone.IsPreferred,
                        "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.phone.IsPreferred = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Text Allowed",
                        modelValue: $data.phone.isTextAllowed,
                        "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.phone.isTextAllowed = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Do Not Call",
                        modelValue: $data.phone.isDoNotCall,
                        "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.phone.isDoNotCall = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          !$props.readOnly && $props.showSaveButton ? (openBlock(), createBlock(VCardActions, { key: 0 }, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                onClick: _cache[10] || (_cache[10] = ($event) => $options.cancel()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[16] || (_cache[16] = [
                  createTextVNode("Cancel")
                ])),
                _: 1
                /* STABLE */
              }),
              !$props.savedPhone ? (openBlock(), createBlock(VBtn, {
                key: 0,
                color: "secondary",
                type: "submit",
                variant: "elevated",
                value: "continue"
              }, {
                default: withCtx(() => _cache[17] || (_cache[17] = [
                  createTextVNode("Save and continue adding...")
                ])),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              createVNode(VBtn, {
                color: "success",
                type: "submit",
                variant: "elevated",
                value: "close"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($options.saveButtonLabel),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue", "onSubmit"]);
}
const IndividualPhoneComponent = /* @__PURE__ */ _export_sfc(_sfc_main$16, [["render", _sfc_render$16], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Edit/Contact/IndividualPhoneComponent.vue"]]);
const _sfc_main$15 = {
  name: "PhoneInformationComponent",
  components: {
    IndividualPhoneComponent,
    PhoneListComponent: PhoneListComponent$1,
    FlipCard
  },
  mixins: [markAsPreferredMixin, contactsMixin],
  props: {
    individual: {
      type: Object,
      required: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/individual/" + this.individual.IndividualId + "?include=individualPhones,individualPhones.ContactSource,individualPhones.ContactStatus,individualPhones.IndividualPhoneType,individualPhones.CanCallRestriction,individualPhones.Country").then((response) => {
        this.phones = response.data.data.individualPhones;
        this.dataLoaded = true;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    getPhonesByType(typeId, ignoreTypes) {
      return this.phones.filter((address) => {
        return ignoreTypes.length > 0 ? !address.IndividualPhoneTypeId || ignoreTypes.indexOf(address.IndividualPhoneTypeId) === -1 : address.IndividualPhoneTypeId && address.IndividualPhoneTypeId === typeId;
      });
    },
    onPhoneSaved(event) {
      if (!event.phone) {
        return;
      }
      if (event.isNew) {
        this.phones.push(event.phone);
      } else {
        const index = this.phones.findIndex((phone) => phone.IndividualPhoneId === event.phone.IndividualPhoneId);
        if (index !== -1) {
          this.phones[index] = event.phone;
        }
      }
      this.handleIsPreferred(this.phones, event.phone, "IndividualPhoneId", "");
      this.phones = [...this.phones];
      this.alertSuccessMessageForSave("Phone");
      if (event.flip) {
        this.flipped = false;
      }
    }
  },
  data() {
    return {
      expanded: false,
      phones: [],
      alert: false,
      alertType: "success",
      alertText: "",
      flipped: false,
      phoneheaders: [
        { title: "Phone Number", value: "fullPhone" },
        { title: "Status", value: "ContactStatus" },
        { title: "Source", value: "ContactSource" },
        { title: "Preferred", value: "IsPreferred" },
        { title: "Text Allowed", value: "CanTextRestrictionId" },
        { title: "Do Not Call", value: "CanCallRestrictionId" },
        { title: "Action", value: "IndividualPhoneId" }
      ],
      selected: null,
      dataLoaded: false,
      individualPhone: {}
    };
  }
};
function _sfc_render$15(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_phone_list_component = resolveComponent("phone-list-component");
  const _component_individual_phone_component = resolveComponent("individual-phone-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[3] || (_cache[3] = [
          createTextVNode(" Phones ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.onAdd())
                      }, {
                        default: withCtx(() => _cache[4] || (_cache[4] = [
                          createTextVNode("Add new phone")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(VAlert, {
                        type: $data.alertType,
                        modelValue: $data.alert,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.alert = $event),
                        closable: "",
                        "close-text": "Dismiss"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString($data.alertText),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["type", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              $data.dataLoaded && $data.phones.length == 0 ? (openBlock(), createBlock(VRow, { key: 0 }, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-center" }, {
                    default: withCtx(() => _cache[5] || (_cache[5] = [
                      createBaseVNode(
                        "p",
                        null,
                        "No phones found",
                        -1
                        /* HOISTED */
                      )
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getPhonesByType(1, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 1 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[6] || (_cache[6] = createBaseVNode(
                        "h4",
                        null,
                        "Home",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_phone_list_component, {
                        phones: $options.getPhonesByType(1, []),
                        "phone-headers": $data.phoneheaders,
                        onEditPhone: _ctx.onEdit
                      }, null, 8, ["phones", "phone-headers", "onEditPhone"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getPhonesByType(2, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 2 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[7] || (_cache[7] = createBaseVNode(
                        "h4",
                        null,
                        "Work",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_phone_list_component, {
                        phones: $options.getPhonesByType(2, []),
                        "phone-headers": $data.phoneheaders,
                        onEditPhone: _ctx.onEdit
                      }, null, 8, ["phones", "phone-headers", "onEditPhone"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getPhonesByType(3, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 3 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[8] || (_cache[8] = createBaseVNode(
                        "h4",
                        null,
                        "Mobile",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_phone_list_component, {
                        phones: $options.getPhonesByType(3, []),
                        "phone-headers": $data.phoneheaders,
                        onEditPhone: _ctx.onEdit
                      }, null, 8, ["phones", "phone-headers", "onEditPhone"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getPhonesByType(4, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 4 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[9] || (_cache[9] = createBaseVNode(
                        "h4",
                        null,
                        "Telematch",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_phone_list_component, {
                        phones: $options.getPhonesByType(4, []),
                        "phone-headers": $data.phoneheaders,
                        onEditPhone: _ctx.onEdit
                      }, null, 8, ["phones", "phone-headers", "onEditPhone"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getPhonesByType(6, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 5 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[10] || (_cache[10] = createBaseVNode(
                        "h4",
                        null,
                        "Fax",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_phone_list_component, {
                        phones: $options.getPhonesByType(6, []),
                        "phone-headers": $data.phoneheaders,
                        onEditPhone: _ctx.onEdit
                      }, null, 8, ["phones", "phone-headers", "onEditPhone"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              $options.getPhonesByType(5, []).length > 0 ? (openBlock(), createBlock(VRow, { key: 6 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      _cache[11] || (_cache[11] = createBaseVNode(
                        "h4",
                        null,
                        "Other",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_phone_list_component, {
                        phones: $options.getPhonesByType(5, []),
                        "phone-headers": $data.phoneheaders,
                        onEditPhone: _ctx.onEdit
                      }, null, 8, ["phones", "phone-headers", "onEditPhone"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true)
            ]),
            back: withCtx(() => [
              createVNode(_component_individual_phone_component, {
                individual: $props.individual,
                "saved-phone": $data.selected,
                onSavedPhone: $options.onPhoneSaved,
                onCancelAddPhone: _cache[2] || (_cache[2] = ($event) => $data.flipped = false),
                "read-only": false,
                "individual-phone": $data.individualPhone
              }, null, 8, ["individual", "saved-phone", "onSavedPhone", "individual-phone"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const PhoneInformationComponent$1 = /* @__PURE__ */ _export_sfc(_sfc_main$15, [["render", _sfc_render$15], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/PhoneInformationComponent.vue"]]);
const _sfc_main$14 = {
  name: "SocialMediaListComponent",
  props: {
    socialMediaHeaders: {
      type: Array,
      required: true
    },
    socialMedia: {
      type: Array,
      required: true
    }
  }
};
const _hoisted_1$L = { key: 0 };
const _hoisted_2$H = { key: 0 };
const _hoisted_3$B = { key: 0 };
function _sfc_render$14(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VDataTable, {
    "hide-default-footer": true,
    headers: $props.socialMediaHeaders,
    "mobile-breakpoint": 992,
    class: "mobile-global-card-table",
    items: $props.socialMedia
  }, {
    [`item.ContactStatus`]: withCtx(({ item }) => [
      item.ContactStatus ? (openBlock(), createElementBlock(
        "span",
        _hoisted_1$L,
        toDisplayString(item.ContactStatus.ContactStatusName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.ContactSource`]: withCtx(({ item }) => [
      item.ContactSource ? (openBlock(), createElementBlock(
        "span",
        _hoisted_2$H,
        toDisplayString(item.ContactSource.ContactSourceName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.IndividualSocialMediaType`]: withCtx(({ item }) => [
      item.IndividualSocialMediaType ? (openBlock(), createElementBlock(
        "span",
        _hoisted_3$B,
        toDisplayString(item.IndividualSocialMediaType.IndividualSocialMediaTypeName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.IndividualSocialMediaId`]: withCtx((IndividualSocialMediaId) => [
      createBaseVNode("span", null, [
        createVNode(VBtn, {
          onClick: ($event) => _ctx.$emit("edit-social-media", IndividualSocialMediaId.item)
        }, {
          default: withCtx(() => _cache[0] || (_cache[0] = [
            createTextVNode("Edit")
          ])),
          _: 2
          /* DYNAMIC */
        }, 1032, ["onClick"])
      ])
    ]),
    _: 2
    /* DYNAMIC */
  }, 1032, ["headers", "items"]);
}
const SocialMediaListComponent = /* @__PURE__ */ _export_sfc(_sfc_main$14, [["render", _sfc_render$14], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/SocialMediaListComponent.vue"]]);
const _sfc_main$13 = {
  name: "IndividualSocialMediaComponent",
  props: {
    individual: {
      type: Object,
      required: true
    },
    savedSocialMedia: {
      type: Object,
      required: false
    }
  },
  computed: {
    saveButtonLabel() {
      return this.savedSocialMedia ? "Save" : "save and close";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    savedSocialMedia: {
      handler(data) {
        this.setEdit();
      },
      deep: true
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/IndividualSocialMediaType").then((response) => {
      this.socialMediaTypes = response.data.data;
    });
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      socialMediaTypes: [],
      socialMedia: {},
      rules: {
        required: (value) => !!value || "Required."
      },
      emptySocialMedia: {
        IndividualSocialMediaTypeId: null,
        ContactStatusId: null,
        ContactSourceId: null,
        URL: null,
        IndividualId: this.individual.IndividualId
      }
    };
  },
  methods: {
    saveNew() {
      this.socialMedia.IndividualId = this.individual.IndividualId;
      if (this.savedSocialMedia) {
        axios.put("/api/v2/IndividualSocialMedia/" + this.savedSocialMedia.IndividualSocialMediaId + "?include=ContactStatus,ContactSource,IndividualSocialMediaType", this.socialMedia).then((response) => {
          this.handleSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/IndividualSocialMedia?include=ContactStatus,ContactSource,IndividualSocialMediaType", this.socialMedia).then((response) => {
          this.reset();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Social media entry saved.";
          this.handleSaved(response.data.data, false, true);
        });
      }
    },
    saveClose() {
      this.socialMedia.IndividualId = this.individual.IndividualId;
      if (this.savedSocialMedia) {
        axios.put("/api/v2/IndividualSocialMedia/" + this.savedSocialMedia.IndividualSocialMediaId + "?include=ContactStatus,ContactSource,IndividualSocialMediaType", this.socialMedia).then((response) => {
          this.handleSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/IndividualSocialMedia?include=ContactStatus,ContactSource,IndividualSocialMediaType", this.socialMedia).then((response) => {
          this.reset();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Social media entry saved.";
          this.handleSaved(response.data.data, true, true);
        });
      }
    },
    async onSave(event) {
      const { value } = event.submitter;
      const results = await event;
      if (!results.valid) {
        return;
      }
      if (value === "continue") {
        this.saveNew();
      } else if (value === "close") {
        this.saveClose();
      }
    },
    cancel() {
      this.setEdit();
      this.$emit("cancel-add-social-media");
    },
    handleSaved(socialMediaData, flip, isNew) {
      this.$emit("saved-social-media", { socialMedia: socialMediaData, flip, isNew });
    },
    reset() {
      for (const field in this.emptySocialMedia) {
        if (this.emptySocialMedia.hasOwnProperty(field)) {
          this.socialMedia[field] = this.emptySocialMedia[field];
        }
      }
    },
    setEdit() {
      this.socialMedia = clone(this.savedSocialMedia) || clone(this.emptySocialMedia);
    }
  }
};
const _hoisted_1$K = { class: "data-container" };
const _hoisted_2$G = { class: "data-container" };
const _hoisted_3$A = { class: "data-container" };
function _sfc_render$13(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VForm, {
    ref: "form",
    modelValue: $data.valid,
    "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.valid = $event),
    "validate-on": "submit",
    onSubmit: $options.onSave
  }, {
    default: withCtx(() => [
      createVNode(VCard, null, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => _cache[7] || (_cache[7] = [
              createTextVNode("Social Media")
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              createVNode(VAlert, {
                type: $data.alertType,
                modelValue: $data.alert,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
                closable: "",
                "close-text": "Dismiss"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($data.alertText),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }, 8, ["type", "modelValue"]),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "4" }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_1$K, [
                        createVNode(VSelect, {
                          items: $data.socialMediaTypes,
                          label: "Type",
                          "item-value": "IndividualSocialMediaTypeId",
                          "item-title": "IndividualSocialMediaTypeName",
                          modelValue: $data.socialMedia.IndividualSocialMediaTypeId,
                          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.socialMedia.IndividualSocialMediaTypeId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, { cols: "4" }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_2$G, [
                        createVNode(VSelect, {
                          items: $options.contactStatus,
                          label: "Status",
                          "item-value": "ContactStatusId",
                          "item-title": "ContactStatusName",
                          modelValue: $data.socialMedia.ContactStatusId,
                          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.socialMedia.ContactStatusId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, { cols: "4" }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_3$A, [
                        createVNode(VSelect, {
                          items: $options.contactSources,
                          "item-value": "ContactSourceId",
                          "item-title": "ContactSourceName",
                          label: "Source",
                          modelValue: $data.socialMedia.ContactSourceId,
                          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.socialMedia.ContactSourceId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "4" }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Handle",
                        rules: [$data.rules.required],
                        modelValue: $data.socialMedia.URL,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.socialMedia.URL = $event),
                        maxlength: 400,
                        variant: "underlined"
                      }, null, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardActions, null, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                onClick: _cache[5] || (_cache[5] = ($event) => $options.cancel()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[8] || (_cache[8] = [
                  createTextVNode("Cancel")
                ])),
                _: 1
                /* STABLE */
              }),
              !$props.savedSocialMedia ? (openBlock(), createBlock(VBtn, {
                key: 0,
                color: "secondary",
                type: "submit",
                variant: "elevated",
                value: "continue"
              }, {
                default: withCtx(() => _cache[9] || (_cache[9] = [
                  createTextVNode("Save and continue adding...")
                ])),
                _: 1
                /* STABLE */
              })) : (openBlock(), createBlock(VBtn, {
                key: 1,
                color: "success",
                type: "submit",
                variant: "elevated",
                value: "close"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($options.saveButtonLabel),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }))
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue", "onSubmit"]);
}
const IndividualSocialMediaComponent = /* @__PURE__ */ _export_sfc(_sfc_main$13, [["render", _sfc_render$13], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Edit/Contact/IndividualSocialMediaComponent.vue"]]);
const _sfc_main$12 = {
  name: "SocialMediaInformationComponent",
  components: {
    IndividualSocialMediaComponent,
    SocialMediaListComponent,
    FlipCard
  },
  mixins: [contactsMixin],
  props: {
    individual: {
      type: Object,
      required: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/individual/" + this.individual.IndividualId + "?include=individualSocialmedia,individualSocialmedia.ContactSource,individualSocialmedia.ContactStatus,individualSocialmedia.IndividualSocialMediaType").then((response) => {
        this.socialMedia = response.data.data.individualSocialmedia;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    onSaved(event) {
      if (!event.socialMedia) {
        return;
      }
      if (event.isNew) {
        this.socialMedia.push(event.socialMedia);
      } else {
        const index = this.socialMedia.findIndex((socialMedia) => socialMedia.IndividualSocialMediaId === event.socialMedia.IndividualSocialMediaId);
        if (index !== -1) {
          this.socialMedia[index] = event.socialMedia;
        }
      }
      this.socialMedia = [...this.socialMedia];
      this.alertSuccessMessageForSave("Social media");
      if (event.flip) {
        this.flipped = false;
      }
    }
  },
  data() {
    return {
      expanded: false,
      socialMedia: [],
      flipped: false,
      socialMediaHeaders: [
        { title: "Handle", value: "URL" },
        { title: "Type", value: "IndividualSocialMediaType" },
        { title: "Status", value: "ContactStatus" },
        { title: "Source", value: "ContactSource" },
        { title: "Action", value: "IndividualSocialMediaId" }
      ],
      selected: null
    };
  }
};
function _sfc_render$12(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_social_media_list_component = resolveComponent("social-media-list-component");
  const _component_individual_social_media_component = resolveComponent("individual-social-media-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[3] || (_cache[3] = [
          createTextVNode(" Social Media ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.onAdd())
                      }, {
                        default: withCtx(() => _cache[4] || (_cache[4] = [
                          createTextVNode("Add social media")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(VAlert, {
                        type: _ctx.alertType,
                        modelValue: _ctx.alert,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.alert = $event),
                        closable: "",
                        "close-text": "Dismiss"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(_ctx.alertText),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["type", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(_component_social_media_list_component, {
                        "social-media": $data.socialMedia,
                        "social-media-headers": $data.socialMediaHeaders,
                        onEditSocialMedia: _ctx.onEdit
                      }, null, 8, ["social-media", "social-media-headers", "onEditSocialMedia"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            back: withCtx(() => [
              createVNode(_component_individual_social_media_component, {
                individual: $props.individual,
                "saved-social-media": $data.selected,
                onSavedSocialMedia: $options.onSaved,
                onCancelAddSocialMedia: _cache[2] || (_cache[2] = ($event) => $data.flipped = false)
              }, null, 8, ["individual", "saved-social-media", "onSavedSocialMedia"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const SocialMediaInformationComponent = /* @__PURE__ */ _export_sfc(_sfc_main$12, [["render", _sfc_render$12], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/SocialMediaInformationComponent.vue"]]);
const _sfc_main$11 = {
  name: "EditDemographicsDataComponent",
  props: {
    individual: {
      type: Object,
      required: true
    },
    editMode: {
      type: Boolean,
      required: true
    },
    readOnly: {
      type: Boolean,
      required: true
    }
  },
  data() {
    return {
      years: [],
      months: [
        {
          label: "January",
          value: 1
        },
        {
          label: "February",
          value: 2
        },
        {
          label: "March",
          value: 3
        },
        {
          label: "April",
          value: 4
        },
        {
          label: "May",
          value: 5
        },
        {
          label: "June",
          value: 6
        },
        {
          label: "July",
          value: 7
        },
        {
          label: "August",
          value: 8
        },
        {
          label: "September",
          value: 9
        },
        {
          label: "October",
          value: 10
        },
        {
          label: "November",
          value: 11
        },
        {
          label: "December",
          value: 12
        }
      ],
      dates: [],
      genders: [],
      maritalStatus: [],
      educationLevels: [],
      dependents: [],
      editableIndividual: {},
      aggregatedFields: {}
    };
  },
  mounted() {
    axios.get("/api/v2/gender").then((response) => {
      this.genders = response.data.data;
    });
    axios.get("/api/v2/maritalStatus").then((response) => {
      this.maritalStatus = response.data.data;
    });
    if (this.selectedAffiliate) {
      axios.get("/api/v2/localEducationLevel?filter[AffiliateId]=" + this.selectedAffiliate).then((response) => {
        this.educationLevels = response.data.data;
      });
    }
    this.editableIndividual = this.individual.IndividualId ? clone(this.individual) : this.individual;
    this.editableIndividual.LocalEducationLevelId = this.editableIndividual.individualEducationLevels && this.editableIndividual.individualEducationLevels.length > 0 ? this.editableIndividual.individualEducationLevels[0].LocalEducationLevelId : null;
    this.setupStaticData();
  },
  computed: {
    loading() {
      return this.editMode ? typeof this.individual.FirstName === "undefined" : false;
    },
    selectedAffiliate() {
      return this.$store.getters["user/selectedAffiliate"].AffiliateId;
    },
    computedMonthOfBirth: {
      get() {
        return this.editableIndividual.MonthOfBirth;
      },
      set(value) {
        this.editableIndividual.MonthOfBirth = value;
      }
    },
    computedDayOfBirth: {
      get() {
        return this.editableIndividual.DayOfBirth;
      },
      set(value) {
        this.editableIndividual.DayOfBirth = value;
      }
    },
    computedYearOfBirth: {
      get() {
        return this.editableIndividual.YearOfBirth;
      },
      set(value) {
        this.editableIndividual.YearOfBirth = value;
      }
    }
  },
  watch: {
    individual: {
      handler(newVal) {
        this.$nextTick(() => {
          this.editableIndividual.MonthOfBirth = newVal.MonthOfBirth;
          this.editableIndividual.DayOfBirth = newVal.DayOfBirth;
          this.editableIndividual.YearOfBirth = newVal.YearOfBirth;
          if (newVal.individualEducationLevels && newVal.individualEducationLevels.length > 0) {
            this.editableIndividual.LocalEducationLevelId = newVal.individualEducationLevels[0].LocalEducationLevelId;
          }
        });
      },
      deep: true,
      immediate: true
    }
  },
  methods: {
    setupStaticData() {
      for (let i = 1; i <= 31; i++) {
        this.dates.push({
          label: i.toString(),
          value: i
        });
      }
      for (let i = 1; i <= 20; i++) {
        this.dependents.push({
          label: i.toString(),
          value: i
        });
      }
      this.dates = [...this.dates];
      this.dependents = [...this.dependents];
      for (let i = 1900; i <= (/* @__PURE__ */ new Date()).getFullYear(); i++) {
        this.years.push({
          label: i.toString(),
          value: i
        });
      }
      this.years = [...this.years];
    },
    saveData() {
      if (this.editMode) {
        let individualEducationalLevel = {
          IndividualEducationalLevelId: this.editableIndividual.individualEducationLevels && this.editableIndividual.individualEducationLevels.length > 0 ? this.editableIndividual.individualEducationLevels[0].IndividualEducationLevelId : null,
          IndividualId: this.individual.IndividualId,
          AffiliateId: this.selectedAffiliate,
          LocalEducationLevelId: this.editableIndividual.LocalEducationLevelId
        };
        axios.put("/api/v2/individual/" + this.individual.IndividualId + "?include=individualAffiliates.Affiliate,Gender,MaritalStatus,individualEducationLevels,individualEducationLevels.LocalEducationLevel", {
          MonthOfBirth: this.editableIndividual.MonthOfBirth,
          DayOfBirth: this.editableIndividual.DayOfBirth,
          YearOfBirth: this.editableIndividual.YearOfBirth,
          GenderId: this.editableIndividual.GenderId,
          MaritalStatusId: this.editableIndividual.MaritalStatusId,
          Dependents: this.editableIndividual.Dependents,
          IndividualEducationalLevel: individualEducationalLevel
        }).then((response) => {
          this.afterSave(response.data.data);
        }).finally();
      }
    },
    afterSave(data) {
      this.editableIndividual = data;
      this.$emit("saved-demographics", clone(data));
    }
  }
};
const _hoisted_1$J = { class: "data-container" };
function _sfc_render$11(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VCard, null, {
    default: withCtx(() => [
      !$props.editMode ? (openBlock(), createBlock(VCardTitle, { key: 0 }, {
        default: withCtx(() => _cache[9] || (_cache[9] = [
          createTextVNode("Demographics")
        ])),
        _: 1
        /* STABLE */
      })) : createCommentVNode("v-if", true),
      createVNode(VCardText, null, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { cols: "12" }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_1$J, [
                    createVNode(VLabel, null, {
                      default: withCtx(() => _cache[10] || (_cache[10] = [
                        createTextVNode("Date of Birth:")
                      ])),
                      _: 1
                      /* STABLE */
                    }),
                    createVNode(VRow, null, {
                      default: withCtx(() => [
                        createVNode(VCol, {
                          cols: "12",
                          lg: "3"
                        }, {
                          default: withCtx(() => [
                            createVNode(VSelect, {
                              items: $data.months,
                              label: "Month",
                              "item-value": "value",
                              readonly: $props.readOnly,
                              "item-title": "label",
                              modelValue: $options.computedMonthOfBirth,
                              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $options.computedMonthOfBirth = $event),
                              variant: "underlined"
                            }, null, 8, ["items", "readonly", "modelValue"])
                          ]),
                          _: 1
                          /* STABLE */
                        }),
                        createVNode(VCol, {
                          cols: "12",
                          lg: "2"
                        }, {
                          default: withCtx(() => [
                            createVNode(VSelect, {
                              items: $data.dates,
                              label: "Day",
                              "item-value": "value",
                              readonly: $props.readOnly,
                              "item-title": "label",
                              modelValue: $options.computedDayOfBirth,
                              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $options.computedDayOfBirth = $event),
                              variant: "underlined"
                            }, null, 8, ["items", "readonly", "modelValue"])
                          ]),
                          _: 1
                          /* STABLE */
                        }),
                        createVNode(VCol, {
                          cols: "12",
                          lg: "3"
                        }, {
                          default: withCtx(() => [
                            createVNode(VSelect, {
                              items: $data.years,
                              label: "Year",
                              "item-value": "value",
                              readonly: $props.readOnly,
                              "item-title": "label",
                              modelValue: $options.computedYearOfBirth,
                              "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $options.computedYearOfBirth = $event),
                              variant: "underlined"
                            }, null, 8, ["items", "readonly", "modelValue"])
                          ]),
                          _: 1
                          /* STABLE */
                        })
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createVNode(VSelect, {
                    label: "Gender",
                    readonly: $props.readOnly,
                    items: $data.genders,
                    "item-value": "GenderId",
                    "item-title": "GenderName",
                    modelValue: $data.editableIndividual.GenderId,
                    "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.editableIndividual.GenderId = $event),
                    variant: "underlined"
                  }, null, 8, ["readonly", "items", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createVNode(VSelect, {
                    label: "Marital Status",
                    readonly: $props.readOnly,
                    items: $data.maritalStatus,
                    "item-value": "MaritalStatusId",
                    "item-title": "MaritalStatusName",
                    modelValue: $data.editableIndividual.MaritalStatusId,
                    "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.editableIndividual.MaritalStatusId = $event),
                    variant: "underlined"
                  }, null, 8, ["readonly", "items", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createVNode(VSelect, {
                    label: "Dependents",
                    readonly: $props.readOnly,
                    items: $data.dependents,
                    "item-value": "value",
                    "item-title": "label",
                    modelValue: $data.editableIndividual.Dependents,
                    "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.editableIndividual.Dependents = $event),
                    variant: "underlined"
                  }, null, 8, ["readonly", "items", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createVNode(VSelect, {
                    label: "Education Level",
                    items: $data.educationLevels,
                    "item-value": "LocalEducationLevelId",
                    "item-title": "LocalEducationLevelName",
                    modelValue: $data.editableIndividual.LocalEducationLevelId,
                    "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.editableIndividual.LocalEducationLevelId = $event),
                    variant: "underlined"
                  }, null, 8, ["items", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      $props.editMode && !$props.readOnly ? (openBlock(), createBlock(VCardActions, { key: 1 }, {
        default: withCtx(() => [
          createVNode(VSpacer),
          createVNode(VBtn, {
            onClick: _cache[7] || (_cache[7] = ($event) => _ctx.$emit("cancel-edit-demographics")),
            variant: "elevated"
          }, {
            default: withCtx(() => _cache[11] || (_cache[11] = [
              createTextVNode("Cancel")
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VBtn, {
            color: "success",
            href: "",
            onClick: _cache[8] || (_cache[8] = ($event) => $options.saveData()),
            variant: "elevated"
          }, {
            default: withCtx(() => _cache[12] || (_cache[12] = [
              createTextVNode("Save")
            ])),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })) : createCommentVNode("v-if", true)
    ]),
    _: 1
    /* STABLE */
  });
}
const EditDemographicsDataComponent = /* @__PURE__ */ _export_sfc(_sfc_main$11, [["render", _sfc_render$11], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Edit/EditDemographicsDataComponent.vue"]]);
const _sfc_main$10 = {
  name: "ViewDemographicsComponent",
  props: {
    individual: {
      type: Object,
      required: true
    }
  }
};
const _hoisted_1$I = { class: "data-container" };
const _hoisted_2$F = { class: "data-value" };
const _hoisted_3$z = { class: "data-container" };
const _hoisted_4$x = { class: "data-value" };
const _hoisted_5$u = {
  key: 0,
  class: "data-container"
};
const _hoisted_6$r = { class: "data-value" };
const _hoisted_7$n = { class: "data-container" };
const _hoisted_8$h = { class: "data-value" };
const _hoisted_9$h = { class: "data-container" };
const _hoisted_10$f = { class: "data-value" };
function _sfc_render$10(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VCard, null, {
    default: withCtx(() => [
      createVNode(VCardText, null, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "5"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_1$I, [
                    _cache[1] || (_cache[1] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Gender:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode("div", _hoisted_2$F, [
                      createBaseVNode(
                        "span",
                        null,
                        toDisplayString($props.individual.Gender ? $props.individual.Gender.GenderName : ""),
                        1
                        /* TEXT */
                      )
                    ])
                  ]),
                  createBaseVNode("div", _hoisted_3$z, [
                    _cache[2] || (_cache[2] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Marital Status:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode("div", _hoisted_4$x, [
                      createBaseVNode(
                        "span",
                        null,
                        toDisplayString($props.individual.MaritalStatus ? $props.individual.MaritalStatus.MaritalStatusName : ""),
                        1
                        /* TEXT */
                      )
                    ])
                  ]),
                  $props.individual.MonthOfBirth && $props.individual.YearOfBirth && $props.individual.DayOfBirth ? (openBlock(), createElementBlock("div", _hoisted_5$u, [
                    _cache[3] || (_cache[3] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "DOB:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode("div", _hoisted_6$r, [
                      createBaseVNode(
                        "span",
                        null,
                        toDisplayString($props.individual.MonthOfBirth + "/" + $props.individual.DayOfBirth + "/" + $props.individual.YearOfBirth),
                        1
                        /* TEXT */
                      )
                    ])
                  ])) : createCommentVNode("v-if", true)
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "5"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_7$n, [
                    _cache[4] || (_cache[4] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Education Level:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode("div", _hoisted_8$h, [
                      createBaseVNode(
                        "span",
                        null,
                        toDisplayString($props.individual.individualEducationLevels && $props.individual.individualEducationLevels.length > 0 && $props.individual.individualEducationLevels[0].LocalEducationLevel ? $props.individual.individualEducationLevels[0].LocalEducationLevel.LocalEducationLevelName : ""),
                        1
                        /* TEXT */
                      )
                    ])
                  ]),
                  createBaseVNode("div", _hoisted_9$h, [
                    _cache[5] || (_cache[5] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Dependents:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode("div", _hoisted_10$f, [
                      createBaseVNode(
                        "span",
                        null,
                        toDisplayString($props.individual.Dependents),
                        1
                        /* TEXT */
                      )
                    ])
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VCardActions, null, {
        default: withCtx(() => [
          createVNode(VSpacer),
          createVNode(VBtn, {
            onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("edit-demographics")),
            variant: "elevated"
          }, {
            default: withCtx(() => _cache[6] || (_cache[6] = [
              createTextVNode("Edit")
            ])),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const ViewDemographicsComponent = /* @__PURE__ */ _export_sfc(_sfc_main$10, [["render", _sfc_render$10], ["__file", "/var/www/html/resources/js/components/Individual/Partial/ViewDemographicsComponent.vue"]]);
const _sfc_main$$ = {
  name: "DemographicsComponent",
  components: { ViewDemographicsComponent, EditDemographicsDataComponent, FlipCard },
  data() {
    return {
      flipped: false
    };
  },
  props: {
    individual: {
      type: Object,
      required: true
    }
  },
  mounted() {
    this.id = this.$route.params.id;
  },
  methods: {
    onSave(individual) {
      this.flipped = false;
      this.$emit("demographics-changed", individual);
    }
  }
};
function _sfc_render$$(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_view_demographics_component = resolveComponent("view-demographics-component");
  const _component_edit_demographics_data_component = resolveComponent("edit-demographics-data-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, null, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[2] || (_cache[2] = [
          createTextVNode(" Demographics ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(_component_view_demographics_component, {
                individual: $props.individual,
                onEditDemographics: _cache[0] || (_cache[0] = ($event) => $data.flipped = true)
              }, null, 8, ["individual"])
            ]),
            back: withCtx(() => [
              createVNode(_component_edit_demographics_data_component, {
                individual: $props.individual,
                "edit-mode": true,
                "read-only": false,
                onCancelEditDemographics: _cache[1] || (_cache[1] = ($event) => $data.flipped = false),
                onSavedDemographics: $options.onSave
              }, null, 8, ["individual", "onSavedDemographics"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const DemographicsComponent = /* @__PURE__ */ _export_sfc(_sfc_main$$, [["render", _sfc_render$$], ["__file", "/var/www/html/resources/js/components/Individual/Partial/DemographicsComponent.vue"]]);
const _sfc_main$_ = {
  name: "BasicDataComponent",
  components: { AffiliateSwitchComponent },
  mixins: [billHighway],
  props: {
    individual: {
      type: Object,
      required: true
    },
    editMode: {
      type: Boolean,
      required: true
    },
    switchAffiliate: {
      type: Object,
      required: false
    }
  },
  watch: {
    individual: {
      immediate: true,
      deep: true,
      handler(newValue) {
        this.editableIndividual = this.editMode ? cloneDeep(newValue) : newValue;
        this.$nextTick(() => {
          this.editableIndividual.selectedUnionRelationshipTypeId = newValue.selectedUnionRelationshipTypeId;
          this.selectedUnionRelationshipTypeId = newValue.selectedUnionRelationshipTypeId;
          this.loadLocalDuesCategories();
        });
      }
    },
    selectedStopReason: {
      handler(value) {
        if (value === "Establish new relationship") {
          this.readOnly = false;
        }
      }
    },
    switchAffiliate: {
      handler(value) {
        if (value) {
          this.switchName = "Switch to " + value.AffiliateName;
          this.selectedAffiliateId = this.$store.getters["user/selectedAffiliate"].AffiliateId;
        }
      }
    }
  },
  data() {
    return {
      prefixes: [],
      suffixes: [],
      chapters: [],
      unionRelationships: [],
      editableIndividual: {},
      duesCategories: [],
      paymentMethods: [],
      paymentFrequencies: [],
      selectedStopReason: null,
      alertMessage: "",
      showAlert: false,
      readOnly: false,
      selectedUnionRelationshipTypeId: null,
      selectedAffiliateId: null,
      submissionId: null,
      switchName: null,
      overlay: true
    };
  },
  mounted() {
    this.readOnly = this.editMode;
    this.selectedAffiliateId = this.$store.getters["user/selectedAffiliate"].AffiliateId;
    axios.get("/api/v2/prefix").then((response) => {
      this.prefixes = response.data.data;
    });
    axios.get("/api/v2/suffix").then((response) => {
      this.suffixes = response.data.data;
    });
    this.editableIndividual = this.editMode ? clone(this.individual) : this.individual;
    if (this.selectedAffiliate) {
      axios.get("/api/v2/aggregate/individual/unionRelationshipType/" + this.selectedAffiliate.AffiliateId).then((response) => {
        this.unionRelationships = response.data.data;
        if (this.individual.selectedUnionRelationshipTypeId) {
          this.selectedUnionRelationshipTypeId = this.individual.selectedUnionRelationshipTypeId;
        }
      });
      axios.get("/api/v2/chapter?sort=ChapterName&filter[AffiliateId]=" + this.selectedAffiliate.AffiliateId + "&filter[IsStructural]=0").then((response) => {
        this.chapters = response.data.data;
      });
    }
    axios.get("/api/v2/paymentMethod").then((response) => {
      this.paymentMethods = response.data.data;
    });
    axios.get("/api/v2/paymentFrequency").then((response) => {
      this.paymentFrequencies = response.data.data;
    });
    this.prepareFormData();
    this.submissionId = this.$route.query.submissionId;
    if (this.submissionId != void 0 && this.overlay === true) {
      setTimeout(() => {
        this.overlay = false;
      }, 3500);
    } else {
      this.overlay = false;
    }
  },
  computed: {
    loading() {
      return this.editMode ? typeof this.individual.FirstName === "undefined" : false;
    },
    label() {
      return this.editMode ? (this.individual.FirstName || "") + " " + (this.individual.LastName || "") : "Create individual";
    },
    selectedAffiliate() {
      return this.$store.getters["user/selectedAffiliate"];
    },
    sameAffiliate() {
      if (this.switchAffiliate) {
        this.selectedAffiliateId = this.$store.getters["user/selectedAffiliate"].AffiliateId;
        return this.selectedAffiliateId == this.switchAffiliate.AffiliateId;
      } else {
        return true;
      }
    },
    affiliateOptions() {
      return [
        {
          AffiliateId: this.selectedAffiliate ? this.selectedAffiliate.AffiliateId : null,
          AffiliateName: this.selectedAffiliate ? this.selectedAffiliate.AffiliateName : null
        }
      ];
    },
    rules() {
      const rules = {};
      rules["required"] = (value) => !!value || "Required.";
      rules["copeAmount"] = (value) => this.editableIndividual.selectedPaymentMethod || this.editableIndividual.selectedPaymentFrequency ? !!value || "Required" : true;
      rules["copeDecimal"] = (value) => value ? /^[+-]?(?=.?\d)\d*(\.\d{0,3})?$/gm.test(value) || "Should be a decimal value with max 3 decimals" : true;
      return rules;
    },
    computedUnionRelationshipTypeId: {
      get() {
        return this.editableIndividual.selectedUnionRelationshipTypeId || null;
      },
      set(value) {
        this.editableIndividual.selectedUnionRelationshipTypeId = value;
        this.loadLocalDuesCategories();
      }
    }
  },
  methods: {
    saveBasicData() {
      if (this.editMode) {
        this.updateIndividual();
      }
    },
    updateIndividual() {
      let data = {
        FirstName: this.editableIndividual.FirstName,
        LastName: this.editableIndividual.LastName,
        MiddleName: this.editableIndividual.MiddleName,
        PreviousName: this.editableIndividual.PreviousName,
        PreferredName: this.editableIndividual.PreferredName,
        PrefixId: this.editableIndividual.PrefixId,
        SuffixId: this.editableIndividual.SuffixId,
        LocalDuesCategoryId: this.editableIndividual.selectedDuesCategory,
        ChapterId: this.editableIndividual.selectedChapter,
        PaymentMethodId: this.editableIndividual.selectedPaymentMethod,
        PaymentFrequencyId: this.editableIndividual.selectedPaymentFrequency,
        AffiliateId: this.selectedAffiliate
      };
      axios.put("/api/v2/individual/" + this.individual.IndividualId, data).then((response) => {
        this.updateBillHighwayIndividual(this.individual.IndividualId, this.selectedAffiliate.AffiliateId, "basicDetails");
        this.afterSave(this.editableIndividual);
      }).finally();
    },
    cancel() {
      this.editableIndividual = clone(this.individual);
      this.$emit("cancel-edit-individual");
    },
    prepareFormData() {
      if (!this.editableIndividual.IndividualId) {
        return;
      }
      const individualAffiliate = this.editableIndividual.individualAffiliates.filter((individualAffiliate2) => {
        return !individualAffiliate2.EndDate;
      }).pop();
      console.log("individualAffiliate:", individualAffiliate);
      if (individualAffiliate) {
        this.editableIndividual.selectedDuesCategory = individualAffiliate.LocalDuesCategoryId;
        this.editableIndividual.selectedUnionRelationshipTypeId = individualAffiliate.UnionRelationshipTypeId;
        this.selectedUnionRelationshipTypeId = individualAffiliate.UnionRelationshipTypeId;
        this.editableIndividual.selectedPaymentMethod = individualAffiliate.PaymentMethodId;
        this.editableIndividual.selectedPaymentFrequency = individualAffiliate.PaymentFrequencyId;
        this.editableIndividual.selectedChapter = individualAffiliate.ChapterId;
        this.editableIndividual.startDate = individualAffiliate.StartDate;
      }
    },
    afterSave(data) {
      this.editableIndividual = data;
      this.$emit("saved-individual", clone(data));
    },
    fieldVisible(fieldName) {
      if (!this.editableIndividual.selectedUnionRelationshipTypeId || this.unionRelationships.length === 0) {
        return false;
      }
      const unionRelationship = this.unionRelationships.filter((unionRelationship2) => {
        return unionRelationship2.UnionRelationshipTypeId === this.editableIndividual.selectedUnionRelationshipTypeId;
      }).pop();
      if (!unionRelationship) {
        return false;
      }
      switch (fieldName) {
        case "Chapter":
          return this.selectedAffiliate.hasChapters && unionRelationship.UnionRelationshipTypeName !== "Other";
        case "Dues category":
          return unionRelationship.UnionRelationshipTypeName === "Member" || unionRelationship.UnionRelationshipTypeName === "Agency Fee Payer";
        case "Cope":
          return unionRelationship.UnionRelationshipTypeName === "Member" && this.selectedAffiliate.hasCope;
      }
      return false;
    },
    loadLocalDuesCategories() {
      if (this.selectedUnionRelationshipTypeId) {
        axios.get("/api/v2/custom/localduescategory/byunionrelationshiptypewithfrequency/" + this.selectedUnionRelationshipTypeId).then((response) => {
          this.duesCategories = response.data.data;
          const localDuesData = response.data.data.filter((filterData) => filterData.LocalDuesCategoryId == this.editableIndividual.selectedDuesCategory);
          if (localDuesData && localDuesData[0] && localDuesData[0].PaymentFrequency && localDuesData[0].PaymentFrequency.PaymentFrequencyId) {
            this.editableIndividual.PaymentFrequencyId = localDuesData[0].PaymentFrequency.PaymentFrequencyId;
            this.editableIndividual.selectedPaymentFrequency = localDuesData[0].PaymentFrequency.PaymentFrequencyId;
          }
          if (this.editableIndividual.copeAmount == "0.00" || this.editableIndividual.copeAmount === void 0 || this.editableIndividual.copeAmount === null || parseInt(this.editableIndividual.copeAmount) <= 0) {
            this.editableIndividual.copeAmount = "0.00";
            this.editableIndividual.selectedPaymentMethod = null;
            this.editableIndividual.selectedPaymentFrequency = null;
          }
        });
      }
    }
  }
};
const _hoisted_1$H = {
  key: 0,
  class: "text-red"
};
const _hoisted_2$E = {
  key: 0,
  class: "text-red"
};
const _hoisted_3$y = {
  key: 0,
  class: "text-red"
};
const _hoisted_4$w = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$t = {
  key: 0,
  class: "text-red"
};
function _sfc_render$_(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_AffiliateSwitchComponent = resolveComponent("AffiliateSwitchComponent");
  return openBlock(), createBlock(VCard, null, {
    default: withCtx(() => [
      createVNode(VCardTitle, null, {
        default: withCtx(() => [
          createTextVNode(
            toDisplayString($options.label),
            1
            /* TEXT */
          )
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VCardText, null, {
        default: withCtx(() => [
          createVNode(VAlert, {
            type: "error",
            modelValue: $data.showAlert,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.showAlert = $event),
            closable: ""
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($data.alertMessage),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }, 8, ["modelValue"]),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createVNode(VSelect, {
                    items: $data.prefixes,
                    label: "Prefix",
                    "item-value": "PrefixId",
                    "item-title": "PrefixName",
                    modelValue: $data.editableIndividual.PrefixId,
                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.editableIndividual.PrefixId = $event),
                    variant: "underlined"
                  }, null, 8, ["items", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    modelValue: $data.editableIndividual.FirstName,
                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.editableIndividual.FirstName = $event),
                    rules: [$options.rules.required],
                    variant: "underlined"
                  }, {
                    label: withCtx(() => [
                      $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_1$H, "* ")) : createCommentVNode("v-if", true),
                      _cache[21] || (_cache[21] = createTextVNode("First name: "))
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["modelValue", "rules"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    label: "Middle name:",
                    modelValue: $data.editableIndividual.MiddleName,
                    "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.editableIndividual.MiddleName = $event),
                    variant: "underlined"
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    modelValue: $data.editableIndividual.LastName,
                    "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.editableIndividual.LastName = $event),
                    rules: [$options.rules.required],
                    variant: "underlined"
                  }, {
                    label: withCtx(() => [
                      $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_2$E, "* ")) : createCommentVNode("v-if", true),
                      _cache[22] || (_cache[22] = createTextVNode("Last name: "))
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["modelValue", "rules"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createVNode(VSelect, {
                    items: $data.suffixes,
                    label: "Suffix",
                    "item-value": "SuffixId",
                    "item-title": "SuffixName",
                    modelValue: $data.editableIndividual.SuffixId,
                    "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.editableIndividual.SuffixId = $event),
                    variant: "underlined"
                  }, null, 8, ["items", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    label: "Preferred name:",
                    modelValue: $data.editableIndividual.PreferredName,
                    "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.editableIndividual.PreferredName = $event),
                    variant: "underlined"
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    label: "Original last name:",
                    modelValue: $data.editableIndividual.PreviousName,
                    "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.editableIndividual.PreviousName = $event),
                    variant: "underlined"
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          !$props.editMode ? (openBlock(), createBlock(VRow, { key: 0 }, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "8"
              }, {
                default: withCtx(() => [
                  createVNode(VSelect, {
                    items: $data.unionRelationships,
                    "item-value": "UnionRelationshipTypeId",
                    "item-title": "UnionRelationshipTypeName",
                    modelValue: $options.computedUnionRelationshipTypeId,
                    "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $options.computedUnionRelationshipTypeId = $event),
                    rules: [$options.rules.required],
                    readonly: $data.readOnly,
                    variant: "underlined"
                  }, {
                    label: withCtx(() => [
                      $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_3$y, "* ")) : createCommentVNode("v-if", true),
                      _cache[23] || (_cache[23] = createTextVNode("Union Relationship "))
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["items", "modelValue", "rules", "readonly"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(VSelect, {
                    items: $options.affiliateOptions,
                    label: "Affiliate",
                    "item-value": "AffiliateId",
                    "item-title": "AffiliateName",
                    modelValue: $data.selectedAffiliateId,
                    "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.selectedAffiliateId = $event),
                    readonly: "",
                    disabled: "",
                    variant: "underlined"
                  }, null, 8, ["items", "modelValue"]),
                  $props.switchAffiliate && !$options.sameAffiliate ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                    key: 0,
                    "component-name": "IndividualNew2",
                    "param-name": "submissionId",
                    "param-value": $data.submissionId,
                    "display-value": $data.switchName,
                    "affiliate-id": $props.switchAffiliate.AffiliateId,
                    "affiliate-name": $props.switchAffiliate.AffiliateName,
                    "affiliate-number": $props.switchAffiliate.AffiliateNumber
                  }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : createCommentVNode("v-if", true)
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true),
          !$props.editMode ? (openBlock(), createBlock(VRow, { key: 1 }, {
            default: withCtx(() => [
              $options.fieldVisible("Chapter") ? (openBlock(), createBlock(VCol, {
                key: 0,
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(VSelect, {
                    items: $data.chapters,
                    label: "Chapter",
                    "item-value": "ChapterId",
                    "item-title": "ChapterName",
                    modelValue: $data.editableIndividual.selectedChapter,
                    "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $data.editableIndividual.selectedChapter = $event),
                    variant: "underlined"
                  }, null, 8, ["items", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createVNode(VMenu, {
                    offset: 40,
                    transition: "scale-transition",
                    "min-width": "290px"
                  }, {
                    activator: withCtx(({ props }) => [
                      createVNode(VTextField, mergeProps({
                        modelValue: $data.editableIndividual.startDate,
                        "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.editableIndividual.startDate = $event),
                        hint: "YYYY-MM-DD",
                        rules: [$options.rules.required]
                      }, props, { variant: "underlined" }), {
                        label: withCtx(() => [
                          $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_4$w, "* ")) : createCommentVNode("v-if", true),
                          _cache[24] || (_cache[24] = createTextVNode("Start date "))
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1040, ["modelValue", "rules"])
                    ]),
                    default: withCtx(() => [
                      createVNode(VDatePicker, {
                        modelValue: $data.editableIndividual.startDate,
                        "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => $data.editableIndividual.startDate = $event),
                        "no-title": "",
                        scrollable: ""
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true),
          !$props.editMode && $options.fieldVisible("Dues category") ? (openBlock(), createBlock(VRow, { key: 2 }, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(VSelect, {
                    items: $data.duesCategories,
                    "item-value": "LocalDuesCategoryId",
                    "item-title": "LocalDuesCategoryName",
                    rules: [$options.rules.required],
                    modelValue: $data.editableIndividual.selectedDuesCategory,
                    "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => $data.editableIndividual.selectedDuesCategory = $event),
                    variant: "underlined"
                  }, {
                    label: withCtx(() => [
                      $options.rules.required ? (openBlock(), createElementBlock("span", _hoisted_5$t, "* ")) : createCommentVNode("v-if", true),
                      _cache[25] || (_cache[25] = createTextVNode("Dues category "))
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["items", "rules", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(VSelect, {
                    items: $data.paymentMethods,
                    label: "Dues Payment Method",
                    "item-value": "PaymentMethodId",
                    "item-title": "PaymentMethodName",
                    modelValue: $data.editableIndividual.PaymentMethodId,
                    "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => $data.editableIndividual.PaymentMethodId = $event),
                    variant: "underlined"
                  }, null, 8, ["items", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(VSelect, {
                    items: $data.paymentFrequencies,
                    label: "Dues Payment Frequency",
                    "item-value": "PaymentFrequencyId",
                    "item-title": "PaymentFrequencyName",
                    modelValue: $data.editableIndividual.PaymentFrequencyId,
                    "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => $data.editableIndividual.PaymentFrequencyId = $event),
                    variant: "underlined"
                  }, null, 8, ["items", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true),
          !$props.editMode && $options.fieldVisible("Cope") ? (openBlock(), createBlock(VRow, { key: 3 }, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    label: "COPE Amount:",
                    modelValue: $data.editableIndividual.copeAmount,
                    "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => $data.editableIndividual.copeAmount = $event),
                    prefix: "$",
                    rules: [$options.rules.copeAmount, $options.rules.copeDecimal],
                    variant: "underlined"
                  }, null, 8, ["modelValue", "rules"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createVNode(VSelect, {
                    items: $data.paymentMethods,
                    label: "COPE Payment Method",
                    "item-value": "PaymentMethodId",
                    "item-title": "PaymentMethodName",
                    modelValue: $data.editableIndividual.selectedPaymentMethod,
                    "onUpdate:modelValue": _cache[17] || (_cache[17] = ($event) => $data.editableIndividual.selectedPaymentMethod = $event),
                    variant: "underlined"
                  }, null, 8, ["items", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(VSelect, {
                    items: $data.paymentFrequencies,
                    label: "COPE Payment Frequency",
                    "item-value": "PaymentFrequencyId",
                    "item-title": "PaymentFrequencyName",
                    modelValue: $data.editableIndividual.selectedPaymentFrequency,
                    "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => $data.editableIndividual.selectedPaymentFrequency = $event),
                    variant: "underlined"
                  }, null, 8, ["items", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true),
          $props.editMode ? (openBlock(), createBlock(VCardActions, { key: 4 }, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                variant: "elevated",
                onClick: _cache[19] || (_cache[19] = ($event) => $options.cancel())
              }, {
                default: withCtx(() => _cache[26] || (_cache[26] = [
                  createTextVNode("Cancel")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VBtn, {
                variant: "elevated",
                color: "success",
                href: "",
                onClick: _cache[20] || (_cache[20] = ($event) => $options.saveBasicData())
              }, {
                default: withCtx(() => _cache[27] || (_cache[27] = [
                  createTextVNode("Save")
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const BasicDataComponent$1 = /* @__PURE__ */ _export_sfc(_sfc_main$_, [["render", _sfc_render$_], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Edit/BasicDataComponent.vue"]]);
const _sfc_main$Z = {
  name: "ViewEduesComponent",
  props: {
    individual: {
      type: Object,
      required: true
    },
    loading: {
      type: Boolean,
      default: true
    }
    // individualEmployers: {
    //     type: Array,
    //     required: true
    // }
  },
  data() {
    return {
      billHighwayData: {},
      individualData: {},
      isActive: false
    };
  },
  methods: {
    formatDate(date) {
      return format(subHours(new Date(date)), "MMMM do yyyy, h:mm a");
    },
    updatedPhoneNumber(pNum) {
      let phoneString = pNum.replace(/[^+\d]+/g, "");
      const x2 = phoneString.replace(/\D/g, "").match(/(\d{0,3})(\d{0,3})(\d{0,4})/);
      pNum = !x2[2] ? x2[1] : `(${x2[1]}) ${x2[2]}-${x2[3]}`;
      return pNum;
    }
  },
  mounted() {
    this.id = this.$route.params.id;
  },
  watch: {
    individual: {
      deep: true,
      handler(value) {
        this.billHighwayData = this.individual.billHighWayData;
        this.individualData = this.individual.individualData;
        return value;
      }
    }
  }
};
const _hoisted_1$G = { key: 1 };
const _hoisted_2$D = { key: 0 };
const _hoisted_3$x = { key: 1 };
const _hoisted_4$v = {
  key: 0,
  class: "mb-0"
};
const _hoisted_5$s = { class: "text-subtitle-1" };
const _hoisted_6$q = {
  key: 1,
  class: "mb-0"
};
const _hoisted_7$m = { class: "text-subtitle-1" };
function _sfc_render$Z(_ctx, _cache, $props, $setup, $data, $options) {
  return withDirectives((openBlock(), createBlock(
    VContainer,
    null,
    {
      default: withCtx(() => [
        createVNode(VRow, null, {
          default: withCtx(() => [
            createVNode(VCol, { class: "text-right" }, {
              default: withCtx(() => [
                createVNode(VBtn, {
                  size: "small",
                  onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("edit-edues"))
                }, {
                  default: withCtx(() => _cache[1] || (_cache[1] = [
                    createTextVNode("Edit eDues Payment")
                  ])),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          _: 1
          /* STABLE */
        }),
        createVNode(VRow, null, {
          default: withCtx(() => [
            createVNode(VCol, { cols: "12" }, {
              default: withCtx(() => [
                createBaseVNode("div", null, [
                  _cache[14] || (_cache[14] = createBaseVNode(
                    "h5",
                    { class: "mt-10 bhTitle" },
                    "BillHighway Status: ",
                    -1
                    /* HOISTED */
                  )),
                  createVNode(VCard, {
                    class: "d-flex justify-space-around mb-4 mt-6 pb-4 stat-card",
                    flat: ""
                  }, {
                    default: withCtx(() => [
                      createVNode(VCard, {
                        class: "pa-2",
                        border: "",
                        color: "transparent",
                        flat: ""
                      }, {
                        default: withCtx(() => [
                          _cache[2] || (_cache[2] = createTextVNode(" Record Status ")),
                          $data.billHighwayData.MemberStatusDesc !== "Active" && $data.billHighwayData.MemberStatusDesc !== "Active - Manual Payment" ? (openBlock(), createElementBlock(
                            "span",
                            {
                              key: 0,
                              class: normalizeClass(["stat-error", { "stat-error": $data.billHighwayData.MemberStatusDesc !== "Active" && $data.billHighwayData.MemberStatusDesc !== "Active - Manual Payment" }])
                            },
                            " Inactive ",
                            2
                            /* CLASS */
                          )) : (openBlock(), createElementBlock(
                            "span",
                            _hoisted_1$G,
                            toDisplayString($data.billHighwayData.MemberStatusDesc),
                            1
                            /* TEXT */
                          ))
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      $data.billHighwayData.AutoPayInfo ? (openBlock(), createBlock(VCard, {
                        key: 0,
                        class: "pa-2",
                        border: "",
                        color: "transparent",
                        flat: ""
                      }, {
                        default: withCtx(() => [
                          _cache[3] || (_cache[3] = createTextVNode(" Payment (Last 4) ")),
                          $data.billHighwayData.AutoPayInfo.PaymentMethod === "Credit Card" ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_2$D,
                            toDisplayString($data.billHighwayData.AutoPayInfo.CardNumberLastFour),
                            1
                            /* TEXT */
                          )) : (openBlock(), createElementBlock(
                            "span",
                            _hoisted_3$x,
                            toDisplayString($data.billHighwayData.AutoPayInfo.AccountNumberLastFour),
                            1
                            /* TEXT */
                          ))
                        ]),
                        _: 1
                        /* STABLE */
                      })) : createCommentVNode("v-if", true),
                      createVNode(VCard, {
                        class: "pa-2",
                        border: "",
                        color: "transparent",
                        flat: ""
                      }, {
                        default: withCtx(() => [
                          _cache[4] || (_cache[4] = createTextVNode(" Billing Type ID ")),
                          createBaseVNode(
                            "span",
                            null,
                            toDisplayString($data.billHighwayData.BillingTypeId),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VCard, {
                        class: "pa-2",
                        border: "",
                        color: "transparent",
                        flat: ""
                      }, {
                        default: withCtx(() => [
                          _cache[5] || (_cache[5] = createTextVNode(" AutoPay ")),
                          createBaseVNode(
                            "span",
                            {
                              class: normalizeClass({ "stat-error": $data.billHighwayData.AutoPayStatus !== "Active" })
                            },
                            toDisplayString($data.billHighwayData.AutoPayStatus),
                            3
                            /* TEXT, CLASS */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VCard, {
                        class: "pa-2",
                        border: "",
                        color: "transparent",
                        flat: ""
                      }, {
                        default: withCtx(() => [
                          _cache[6] || (_cache[6] = createTextVNode(" Current balance ")),
                          createBaseVNode(
                            "span",
                            {
                              class: normalizeClass({ "stat-error": $data.billHighwayData.CurrentBalance > 0 })
                            },
                            "$" + toDisplayString($data.billHighwayData.CurrentBalance),
                            3
                            /* TEXT, CLASS */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  _cache[15] || (_cache[15] = createBaseVNode(
                    "h5",
                    { class: "mt-10" },
                    "Submission Information:",
                    -1
                    /* HOISTED */
                  )),
                  createVNode(VCard, {
                    class: "d-flex mb-2 mt-2 pa-2 sub-info",
                    flat: ""
                  }, {
                    default: withCtx(() => [
                      createVNode(VRow, { class: "d-flex flex-wrap" }, {
                        default: withCtx(() => [
                          createVNode(VCol, {
                            cols: "12",
                            lg: "6"
                          }, {
                            default: withCtx(() => [
                              _cache[7] || (_cache[7] = createBaseVNode(
                                "h5",
                                null,
                                "AFT GUID",
                                -1
                                /* HOISTED */
                              )),
                              createBaseVNode(
                                "span",
                                null,
                                toDisplayString($data.billHighwayData.UserId),
                                1
                                /* TEXT */
                              )
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createCommentVNode(' <v-col\n                                cols="12"\n                                lg="6"\n                            >\n                                <h5>Billhighway Payment Reference</h5>\n                                <span>{{ billHighwayData.MemberTypeDesc }}</span>\n                            </v-col> '),
                          createVNode(VCol, {
                            cols: "12",
                            lg: "6"
                          }, {
                            default: withCtx(() => [
                              _cache[8] || (_cache[8] = createBaseVNode(
                                "h5",
                                null,
                                "Billhighway ID",
                                -1
                                /* HOISTED */
                              )),
                              createBaseVNode(
                                "span",
                                null,
                                toDisplayString($data.billHighwayData.BhUserId),
                                1
                                /* TEXT */
                              )
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, {
                            cols: "12",
                            lg: "6"
                          }, {
                            default: withCtx(() => [
                              _cache[9] || (_cache[9] = createBaseVNode(
                                "h5",
                                null,
                                "Billing Type",
                                -1
                                /* HOISTED */
                              )),
                              createBaseVNode(
                                "span",
                                null,
                                toDisplayString($data.billHighwayData.BillingTypeId) + " - " + toDisplayString($data.billHighwayData.BillingTypeName),
                                1
                                /* TEXT */
                              )
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          $data.individualData.IndividualEmails ? (openBlock(), createBlock(VCol, {
                            key: 0,
                            cols: "12",
                            lg: "6"
                          }, {
                            default: withCtx(() => [
                              _cache[10] || (_cache[10] = createBaseVNode(
                                "h5",
                                null,
                                "Email",
                                -1
                                /* HOISTED */
                              )),
                              createBaseVNode(
                                "span",
                                null,
                                toDisplayString($data.individualData.IndividualEmails.Email),
                                1
                                /* TEXT */
                              )
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true),
                          $data.individualData.IndividualPhones ? (openBlock(), createBlock(VCol, {
                            key: 1,
                            cols: "12",
                            lg: "6"
                          }, {
                            default: withCtx(() => [
                              _cache[11] || (_cache[11] = createBaseVNode(
                                "h5",
                                null,
                                "Phone Number",
                                -1
                                /* HOISTED */
                              )),
                              createCommentVNode(" <span>{{ user[0].IndividualPhones.PhoneNumber }}</span> "),
                              createCommentVNode(" <span>\n                                    {{  '(' + individualData.IndividualPhones.Number.substring(0, 3) + ') '\n                                    + individualData.IndividualPhones.Number.substring(3, 6) + '-'\n                                    + individualData.IndividualPhones.Number.substring(6) }}\n                                </span> "),
                              createBaseVNode(
                                "span",
                                null,
                                toDisplayString($options.updatedPhoneNumber($data.individualData.IndividualPhones.Number)),
                                1
                                /* TEXT */
                              )
                            ]),
                            _: 1
                            /* STABLE */
                          })) : createCommentVNode("v-if", true)
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCard, {
                    class: "d-flex justify-space-around mb-6 pa-2 date-sub",
                    flat: ""
                  }, {
                    default: withCtx(() => [
                      createVNode(VRow, { class: "d-flex justify-end" }, {
                        default: withCtx(() => [
                          createVNode(VCol, {
                            cols: "12",
                            lg: "6",
                            class: "date-submitted"
                          }, {
                            default: withCtx(() => [
                              $data.individualData.Source ? (openBlock(), createElementBlock("h5", _hoisted_4$v, [
                                _cache[12] || (_cache[12] = createTextVNode(" Source: ")),
                                createBaseVNode(
                                  "span",
                                  _hoisted_5$s,
                                  toDisplayString($data.individualData.Source),
                                  1
                                  /* TEXT */
                                )
                              ])) : createCommentVNode("v-if", true),
                              $data.individualData.SubmittedDate ? (openBlock(), createElementBlock("h5", _hoisted_6$q, [
                                _cache[13] || (_cache[13] = createTextVNode(" Date Submitted: ")),
                                createBaseVNode(
                                  "span",
                                  _hoisted_7$m,
                                  toDisplayString($options.formatDate($data.individualData.SubmittedDate)) + " EST ",
                                  1
                                  /* TEXT */
                                )
                              ])) : createCommentVNode("v-if", true)
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ])
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          _: 1
          /* STABLE */
        })
      ]),
      _: 1
      /* STABLE */
    },
    512
    /* NEED_PATCH */
  )), [
    [vShow, !$props.loading]
  ]);
}
const ViewEduesComponent = /* @__PURE__ */ _export_sfc(_sfc_main$Z, [["render", _sfc_render$Z], ["__scopeId", "data-v-b0275019"], ["__file", "/var/www/html/resources/js/components/Individual/Partial/ViewEduesComponent.vue"]]);
const _sfc_main$Y = {
  name: "EditEduesPaymentComponent",
  props: {
    individual: {
      type: Object,
      required: true
    },
    billHighwayData: {
      type: Array,
      required: true
    },
    flipped: { type: Boolean, default: false },
    type: {
      type: [String, Object, Array],
      default: ""
    },
    value: {
      type: [Object, String],
      default: ""
    },
    label: { type: String, default: "MFP Custom Payment" },
    field: { type: Object, default: () => {
    } },
    required: { type: Boolean, default: false },
    designer: { type: Boolean, default: false }
  },
  mixins: [contactsMixin],
  emits: ["input"],
  data: () => ({
    formValid: true,
    form: {},
    disableButton: false,
    errorResponse: null,
    errorMessage: "",
    dialogSuccess: false,
    dialogError: false,
    affiliateId: null,
    paymentMethods: [
      { value: "Bank Draft", text: "Bank Draft" },
      { value: "Credit Card", text: "Credit Card" }
    ],
    cardTypes: [
      { value: "Visa", text: "Visa" },
      { value: "Master Card", text: "Master Card" },
      { value: "Discover", text: "Discover" },
      { value: "Amex", text: "Amex" }
    ],
    paymentMethodSelectedIndex: 0,
    paymentMethodsAllowed: ["Bank Draft"],
    billhighwayPaymentMethodIndex: 0,
    cardTypesAllowedIndexes: [0, 1, 2, 3],
    creditCardInformation: {
      cardHolderName: "",
      cardNumber: "",
      exp: "",
      cvv: ""
    },
    bankDraftInformation: {
      accountType: "",
      accountHolderName: "",
      routingNumber: "",
      accountNumber: ""
    },
    cardTypesAllowedColors: [
      "#6d93a6",
      "#6d93a6",
      "#6d93a6",
      "#6d93a6"
    ],
    selectPayment: false,
    activePicker: null,
    expDate: null,
    expDateFormatted: null,
    expMenu: false,
    minDate: null,
    rules: [],
    creditCardRules: [
      (v) => !!v || "This field is required",
      (v) => /^\d+$/.test(v) || "This field allows numbers only"
      // (v) => ccValidation.test(v) || 'Please enter a valid credit card number (no spaces)',
    ],
    cvvRules: [
      (v) => !!v || "This field is required",
      (v) => /[0-9]{3,4}/.test(v) || "This field allows numbers only"
    ],
    routingRules: [
      (v) => !!v || "This field is required",
      (v) => /[0-9]{8,9}/.test(v) || "This field allows numbers only"
    ],
    accountRules: [
      (v) => !!v || "This field is required",
      (v) => /^\d{1,17}$/.test(v) || "This field allows numbers only"
    ],
    loading: false,
    dialogPaymentMethod: false
  }),
  created() {
    this.affiliateId = this.$store.getters["user/selectedAffiliate"].AffiliateId;
  },
  computed: {},
  watch: {
    paymentMethodsAllowed() {
      this.change();
    },
    cardTypesAllowed() {
      this.change();
    },
    expDate() {
      this.expDateFormatted = this.formatDate(this.expDate);
    },
    expMenu(val) {
      if (val) {
        setTimeout(() => {
          this.activePicker = "YEAR";
        }, 0);
      }
    }
  },
  mounted() {
    this.rules.push((v) => !v || /^(\d{2})-(\d{4})+$/.test(v) || "Date must be valid (MM-YYYY)");
    this.creditCardRules.push((v) => !v || this.checkCreditCard(v, false).success || "Please enter a valid credit card number (no spaces)");
    this.creditCardRules.push((v) => this.userCardTypeAllowed(v) || "Please enter a valid credit card number for the allowed card type (no spaces)");
    if (this.value.PaymentMethodsAllowed) {
      this.paymentMethodsAllowed = this.value.PaymentMethodsAllowed;
      this.cardTypesAllowedIndexes = this.value.CardTypesAllowed;
    }
    const autoPayInfo = this.getBillhighwayAutoPayInfo();
    if (autoPayInfo && autoPayInfo.PaymentMethod === "Credit Card") {
      this.billhighwayPaymentMethodIndex = this.paymentMethodSelectedIndex = 1;
    }
    this.change = debounce(() => {
      this.$emit("input", this.getPaymentInformationObject());
    }, 500);
  },
  methods: {
    validate() {
      this.$refs.form.validate();
    },
    formatExpDate() {
      const ele = this.creditCardInformation.exp;
      const x2 = ele.replace(/\D/g, "").match(/(\d{0,2})(\d{0,4})/);
      this.creditCardInformation.exp = !x2[2] ? x2[1] : `${x2[1]}-${x2[2]}`;
      return this.creditCardInformation.exp;
    },
    formatDate(expDate) {
      if (!expDate) return null;
      const [year, month] = expDate.split("-");
      this.creditCardInformation.exp = `${month}-${year}`;
      return this.creditCardInformation.exp;
    },
    save(expDate) {
      this.$refs.expMenu.save(expDate);
    },
    getBillhighwayAutoPayInfo() {
      if (this.billHighwayData && this.billHighwayData.length > 0 && this.billHighwayData[0][1]) {
        return this.billHighwayData[0][1].AutoPayInfo;
      }
      return null;
    },
    showPaymentMethodAlert() {
      if (this.billhighwayPaymentMethodIndex !== this.paymentMethodSelectedIndex) {
        this.dialogPaymentMethod = true;
      }
    },
    noPaymentMethodAlert() {
      this.dialogPaymentMethod = false;
      this.paymentMethodSelectedIndex = this.billhighwayPaymentMethodIndex;
      this.$emit("input", this.getPaymentInformationObject());
    },
    yesPaymentMethodAlert() {
      this.dialogPaymentMethod = false;
      this.$emit("input", this.getPaymentInformationObject());
    },
    getPaymentInformationObject() {
      const paymentInfoObject = {
        PaymentMethodsAllowed: this.paymentMethodsAllowed,
        CardTypesAllowed: this.cardTypesAllowedIndexes
      };
      paymentInfoObject.PaymentMethodSelected = this.paymentMethods[this.paymentMethodSelectedIndex].value;
      if (this.paymentMethods[this.paymentMethodSelectedIndex].value === "Credit Card") {
        this.clearBankDraftInfo();
        paymentInfoObject.CreditCardInformation = this.creditCardInformation;
      } else if (this.paymentMethods[this.paymentMethodSelectedIndex].value === "Bank Draft") {
        this.clearCreditCardInfo();
        paymentInfoObject.BankDraftInformation = this.bankDraftInformation;
      }
      return paymentInfoObject;
    },
    clearCreditCardInfo() {
      this.creditCardInformation.cardHolderName = "";
      this.creditCardInformation.cardNumber = "";
      this.creditCardInformation.exp = "";
      this.creditCardInformation.cvv = "";
    },
    clearBankDraftInfo() {
      this.bankDraftInformation.accountType = "";
      this.bankDraftInformation.accountHolderName = "";
      this.bankDraftInformation.routingNumber = "";
      this.bankDraftInformation.accountNumber = "";
    },
    cancelPaymentUpdate() {
      this.clearCreditCardInfo();
      this.clearBankDraftInfo();
      this.$emit("cancel-edit-payment");
      setTimeout(this.$refs.form.resetValidation(), 5e3);
    },
    reloadPage() {
      this.dialogSuccess = false;
      this.$emit("cancel-edit-payment");
      const selectedIndividual = this.individual;
      const thisUserId = selectedIndividual.individualId;
      this.$emit("clicked-force-render", thisUserId);
    },
    identifyUserCardType() {
      if (this.creditCardInformation.cardNumber.length >= 0 && this.creditCardInformation.cardNumber.length < 6) {
        for (let i = 0; i < this.cardTypesAllowedColors.length; i++) {
          this.cardTypesAllowedColors[i] = "#6d93a6";
        }
      }
      if (this.creditCardInformation.cardNumber.length > 0 && this.creditCardInformation.cardNumber.length < 6) {
        const card = this.checkCreditCard(this.creditCardInformation.cardNumber, true);
        if (card && card.success) {
          const userCardIndex = this.cardTypes.map((e) => e.value).indexOf(card.type);
          this.cardTypesAllowedColors[userCardIndex] = "#385F73";
        }
      }
    },
    validateCardNumber(cardNumber) {
      const regex = new RegExp("^[0-9]{13,19}$");
      if (!regex.test(cardNumber)) {
        return false;
      }
      return this.luhnCheck(cardNumber);
    },
    luhnCheck(val) {
      let checksum = 0;
      let j = 1;
      for (let i = val.length - 1; i >= 0; i--) {
        let calc = 0;
        calc = Number(val.charAt(i)) * j;
        if (calc > 9) {
          checksum++;
          calc = calc - 10;
        }
        checksum = checksum + calc;
        if (j === 1) {
          j = 2;
        } else {
          j = 1;
        }
      }
      return checksum % 10 === 0;
    },
    userCardTypeAllowed(cardNumber) {
      const response = this.checkCreditCard(cardNumber, true);
      const userCardTypeIndex = this.cardTypes.map((type) => type.value).indexOf(response.type);
      return this.cardTypesAllowedIndexes.includes(userCardTypeIndex);
    },
    checkCreditCard(cardNumber, onlyPrefixCheck) {
      const ccErrors = [];
      ccErrors[0] = "Unknown card type";
      ccErrors[1] = "No card number provided";
      ccErrors[2] = "Credit card number is in invalid format";
      ccErrors[3] = "Credit card number is invalid";
      ccErrors[4] = "Credit card number has an inappropriate number of digits";
      ccErrors[5] = "Warning! This credit card number is associated with a scam attempt";
      const response = (success, message = null, type = null) => ({
        message,
        success,
        type
      });
      const cards = [];
      cards[0] = {
        name: this.cardTypes[0].value,
        length: "13,16",
        prefixes: "4",
        checkdigit: true
      };
      cards[1] = {
        name: this.cardTypes[1].value,
        length: "16",
        prefixes: "51,52,53,54,55",
        checkdigit: true
      };
      cards[2] = {
        name: this.cardTypes[2].value,
        length: "16",
        prefixes: "6011,622,64,65",
        checkdigit: true
      };
      cards[3] = {
        name: this.cardTypes[3].value,
        length: "15",
        prefixes: "34,37",
        checkdigit: true
      };
      if (cardNumber.length === 0) {
        return response(false, ccErrors[1]);
      }
      cardNumber = cardNumber.replace(/\s/g, "");
      if (!onlyPrefixCheck) {
        if (!this.validateCardNumber(cardNumber)) {
          return response(false, ccErrors[2]);
        }
      }
      if (cardNumber === "5490997771092064") {
        return response(false, ccErrors[5]);
      }
      let lengthValid = false;
      let prefixValid = false;
      let cardCompany = "";
      for (let i = 0; i < cards.length; i++) {
        const prefix = cards[i].prefixes.split(",");
        for (let j = 0; j < prefix.length; j++) {
          const exp = new RegExp("^" + prefix[j]);
          if (exp.test(cardNumber)) {
            prefixValid = true;
            if (onlyPrefixCheck) {
              cardCompany = cards[i].name;
              return response(true, null, cardCompany);
            }
          }
        }
        if (prefixValid) {
          const lengths = cards[i].length.split(",");
          for (let j = 0; j < lengths.length; j++) {
            if (cardNumber.length === parseInt(lengths[j], 10)) {
              lengthValid = true;
            }
          }
        }
        if (lengthValid && prefixValid) {
          cardCompany = cards[i].name;
          return response(true, null, cardCompany);
        }
      }
      if (!prefixValid) {
        return response(false, ccErrors[3]);
      }
      if (!lengthValid) {
        return response(false, ccErrors[4]);
      }
      return response(true, null, cardCompany);
    },
    submit() {
      const thisIndividual = this.individual;
      const userId = thisIndividual.individualId;
      const data = {};
      data.affiliateId = this.affiliateId;
      data.PaymentMethodSelected = this.paymentMethods[this.paymentMethodSelectedIndex].value;
      data.CreditCardInformation = this.creditCardInformation;
      data.BankDraftInformation = this.bankDraftInformation;
      if (this.$refs.form.validate()) {
        this.loading = true;
        this.disableButton = true;
        return axios$1.post(`/api/v3/memberforms/admin/submission/update-payment/${userId}`, data).then((response) => {
          this.dialogSuccess = true;
          this.clearCreditCardInfo();
          this.clearBankDraftInfo();
          setTimeout(this.$refs.form.resetValidation(), 5e3);
          this.formValid = true;
          this.loading = false;
        }).catch((error) => {
          this.errorResponse = error.response;
          this.formValid = true;
          this.dialogError = true;
          this.errorMessage = error.response.data.errors.payment[0];
        }).finally(() => {
          this.loading = false;
          this.formValid = false;
        });
      }
    }
  }
};
const _hoisted_1$F = {
  key: 0,
  class: "text-red"
};
const _hoisted_2$C = {
  key: 0,
  class: "text-red"
};
const _hoisted_3$w = { class: "cc-group" };
const _hoisted_4$u = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$r = {
  key: 0,
  class: "text-red"
};
const _hoisted_6$p = {
  class: "d-flex justify-start",
  flat: "",
  tile: ""
};
const _hoisted_7$l = {
  key: 0,
  class: "text-red"
};
const _hoisted_8$g = {
  key: 0,
  class: "text-red"
};
const _hoisted_9$g = {
  key: 0,
  class: "text-red"
};
const _hoisted_10$e = { class: "payment-loader" };
function _sfc_render$Y(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, {
    fluid: "",
    class: "select-payment"
  }, {
    default: withCtx(() => [
      createVNode(VForm, {
        ref: "form",
        modelValue: _ctx.formValid,
        "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => _ctx.formValid = $event),
        autocomplete: "off",
        class: "v-form"
      }, {
        default: withCtx(() => [
          createCommentVNode(" Select Payment Method "),
          createVNode(VRow, { id: "payemntForm" }, {
            default: withCtx(() => [
              createVNode(VCol, { cols: "12" }, {
                default: withCtx(() => [
                  createVNode(VCard, {
                    flat: "",
                    tile: ""
                  }, {
                    default: withCtx(() => [
                      createVNode(VRow, {
                        align: "center",
                        justify: "center"
                      }, {
                        default: withCtx(() => [
                          createVNode(VCol, {
                            cols: "12",
                            class: "ma-0"
                          }, {
                            default: withCtx(() => [
                              createVNode(VBtnToggle, {
                                modelValue: _ctx.paymentMethodSelectedIndex,
                                "onUpdate:modelValue": [
                                  _cache[0] || (_cache[0] = ($event) => _ctx.paymentMethodSelectedIndex = $event),
                                  _cache[1] || (_cache[1] = ($event) => $options.showPaymentMethodAlert())
                                ],
                                mandatory: "",
                                class: "d-flex justify-center"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    id: "bd-enab",
                                    variant: "outlined",
                                    color: "indigo",
                                    class: "ma-2 spm-btn"
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(
                                        toDisplayString(_ctx.paymentMethods[0].text),
                                        1
                                        /* TEXT */
                                      )
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VBtn, {
                                    id: "cc-enab",
                                    variant: "outlined",
                                    color: "indigo",
                                    class: "ma-2 spm-btn"
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(
                                        toDisplayString(_ctx.paymentMethods[1].text),
                                        1
                                        /* TEXT */
                                      )
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }, 8, ["modelValue"]),
                              createVNode(VDialog, {
                                modelValue: _ctx.dialogPaymentMethod,
                                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.dialogPaymentMethod = $event),
                                persistent: "",
                                "max-width": "350"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VCard, null, {
                                    default: withCtx(() => [
                                      createVNode(VCardTitle, { class: "text-h6" }, {
                                        default: withCtx(() => _cache[22] || (_cache[22] = [
                                          createBaseVNode(
                                            "span",
                                            null,
                                            "Payment Method",
                                            -1
                                            /* HOISTED */
                                          )
                                        ])),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCardText, { class: "text-subtitle-1" }, {
                                        default: withCtx(() => [
                                          createTextVNode(
                                            toDisplayString($props.individual.FirstName) + " " + toDisplayString($props.individual.LastName) + " is currently using " + toDisplayString(_ctx.paymentMethods[_ctx.billhighwayPaymentMethodIndex].value) + ". Do you wish to use " + toDisplayString(_ctx.paymentMethods[_ctx.paymentMethodSelectedIndex].value) + " as payment method for this individual? ",
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VCardActions, null, {
                                        default: withCtx(() => [
                                          createVNode(VSpacer),
                                          createVNode(VBtn, {
                                            elevation: "2",
                                            color: "error",
                                            class: "px-4",
                                            onClick: $options.noPaymentMethodAlert
                                          }, {
                                            default: withCtx(() => _cache[23] || (_cache[23] = [
                                              createTextVNode(" No ")
                                            ])),
                                            _: 1
                                            /* STABLE */
                                          }, 8, ["onClick"]),
                                          createVNode(VBtn, {
                                            elevation: "2",
                                            color: "success",
                                            class: "px-4",
                                            onClick: $options.yesPaymentMethodAlert
                                          }, {
                                            default: withCtx(() => _cache[24] || (_cache[24] = [
                                              createTextVNode(" Yes ")
                                            ])),
                                            _: 1
                                            /* STABLE */
                                          }, 8, ["onClick"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }, 8, ["modelValue"])
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createCommentVNode(" Credit Card "),
              _ctx.paymentMethods[_ctx.paymentMethodSelectedIndex].value === "Credit Card" ? (openBlock(), createBlock(VCol, {
                key: 0,
                class: "credit_card_form"
              }, {
                default: withCtx(() => [
                  createVNode(VCard, {
                    flat: "",
                    tile: ""
                  }, {
                    default: withCtx(() => [
                      createVNode(VRow, null, {
                        default: withCtx(() => [
                          createVNode(VCol, { cols: "12" }, {
                            default: withCtx(() => [
                              createVNode(VTextField, {
                                id: "cardName",
                                modelValue: _ctx.creditCardInformation.cardHolderName,
                                "onUpdate:modelValue": [
                                  _cache[3] || (_cache[3] = ($event) => _ctx.creditCardInformation.cardHolderName = $event),
                                  _cache[4] || (_cache[4] = ($event) => _ctx.$emit("input", $options.getPaymentInformationObject()))
                                ],
                                label: "Card Holders Name",
                                placeholder: "Card Holders Name",
                                required: "true"
                              }, {
                                label: withCtx(() => [
                                  $props.required ? (openBlock(), createElementBlock("span", _hoisted_1$F, _cache[25] || (_cache[25] = [
                                    createBaseVNode(
                                      "strong",
                                      null,
                                      "* ",
                                      -1
                                      /* HOISTED */
                                    )
                                  ]))) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    " " + toDisplayString("Card Holders Name" + ($props.required ? " (required)" : "")),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 1
                                /* STABLE */
                              }, 8, ["modelValue"])
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, {
                            cols: "12",
                            lg: "5"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTextField, {
                                id: "cardNumber",
                                modelValue: _ctx.creditCardInformation.cardNumber,
                                "onUpdate:modelValue": [
                                  _cache[5] || (_cache[5] = ($event) => _ctx.creditCardInformation.cardNumber = $event),
                                  _cache[6] || (_cache[6] = ($event) => {
                                    $options.identifyUserCardType();
                                    _ctx.$emit("input", $options.getPaymentInformationObject());
                                  })
                                ],
                                rules: _ctx.creditCardRules,
                                label: "Card Number",
                                placeholder: "Card Number",
                                required: "true",
                                clearable: ""
                              }, {
                                label: withCtx(() => [
                                  $props.required ? (openBlock(), createElementBlock("span", _hoisted_2$C, _cache[26] || (_cache[26] = [
                                    createBaseVNode(
                                      "strong",
                                      null,
                                      "* ",
                                      -1
                                      /* HOISTED */
                                    )
                                  ]))) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    " " + toDisplayString("Card Number" + ($props.required ? " (required)" : "")),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 1
                                /* STABLE */
                              }, 8, ["modelValue", "rules"])
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, {
                            cols: "12",
                            lg: "7"
                          }, {
                            default: withCtx(() => [
                              createBaseVNode("div", _hoisted_3$w, [
                                _ctx.cardTypesAllowedIndexes.includes(0) ? (openBlock(), createBlock(VCard, {
                                  key: 0,
                                  color: _ctx.cardTypesAllowedColors[0],
                                  dark: _ctx.cardTypesAllowedColors[0] == "#385F73",
                                  width: "60",
                                  class: "mr-2"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VImg, { src: "/vendor/memberforms/images/cc/cc-visa.png" })
                                  ]),
                                  _: 1
                                  /* STABLE */
                                }, 8, ["color", "dark"])) : createCommentVNode("v-if", true),
                                _ctx.cardTypesAllowedIndexes.includes(1) ? (openBlock(), createBlock(VCard, {
                                  key: 1,
                                  color: _ctx.cardTypesAllowedColors[1],
                                  dark: _ctx.cardTypesAllowedColors[1] == "#385F73",
                                  width: "60",
                                  class: "mr-2"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VImg, { src: "/vendor/memberforms/images/cc/cc-mastercard.png" })
                                  ]),
                                  _: 1
                                  /* STABLE */
                                }, 8, ["color", "dark"])) : createCommentVNode("v-if", true),
                                _ctx.cardTypesAllowedIndexes.includes(2) ? (openBlock(), createBlock(VCard, {
                                  key: 2,
                                  color: _ctx.cardTypesAllowedColors[2],
                                  dark: _ctx.cardTypesAllowedColors[2] == "#385F73",
                                  width: "60",
                                  class: "mr-2"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VImg, { src: "/vendor/memberforms/images/cc/cc-discover.png" })
                                  ]),
                                  _: 1
                                  /* STABLE */
                                }, 8, ["color", "dark"])) : createCommentVNode("v-if", true),
                                _ctx.cardTypesAllowedIndexes.includes(3) ? (openBlock(), createBlock(VCard, {
                                  key: 3,
                                  color: _ctx.cardTypesAllowedColors[3],
                                  dark: _ctx.cardTypesAllowedColors[3] == "#385F73",
                                  width: "60",
                                  class: "mr-2"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VImg, { src: "/vendor/memberforms/images/cc/cc-amex.png" })
                                  ]),
                                  _: 1
                                  /* STABLE */
                                }, 8, ["color", "dark"])) : createCommentVNode("v-if", true)
                              ])
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VRow, null, {
                        default: withCtx(() => [
                          createVNode(VCol, {
                            cols: "12",
                            lg: "6"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTextField, {
                                id: "cvvNumber",
                                ref: "expMenu",
                                modelValue: _ctx.creditCardInformation.exp,
                                "onUpdate:modelValue": [
                                  _cache[7] || (_cache[7] = ($event) => _ctx.creditCardInformation.exp = $event),
                                  _cache[8] || (_cache[8] = ($event) => _ctx.$emit("input", $options.getPaymentInformationObject()))
                                ],
                                rules: _ctx.rules,
                                label: "Expiration Date",
                                placeholder: "MM-YYYY",
                                hint: "MM-YYYY",
                                "prepend-icon": "mdi:mdi-calendar",
                                required: "true",
                                clearable: "",
                                maxlength: "7",
                                onkeyup: $options.formatExpDate()
                              }, {
                                label: withCtx(() => [
                                  $props.required ? (openBlock(), createElementBlock("span", _hoisted_4$u, _cache[27] || (_cache[27] = [
                                    createBaseVNode(
                                      "strong",
                                      null,
                                      "* ",
                                      -1
                                      /* HOISTED */
                                    )
                                  ]))) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    " " + toDisplayString("Expiration Date" + ($props.required ? " (required)" : "")),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 1
                                /* STABLE */
                              }, 8, ["modelValue", "rules", "onkeyup"])
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, {
                            cols: "12",
                            lg: "6"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTextField, {
                                id: "cvvNumber",
                                modelValue: _ctx.creditCardInformation.cvv,
                                "onUpdate:modelValue": [
                                  _cache[9] || (_cache[9] = ($event) => _ctx.creditCardInformation.cvv = $event),
                                  _cache[10] || (_cache[10] = ($event) => _ctx.$emit("input", $options.getPaymentInformationObject()))
                                ],
                                rules: _ctx.cvvRules,
                                label: "CVV Number",
                                "data-ref": "cvvNumber",
                                placeholder: "CVV Number",
                                autocomplete: "off",
                                minlength: 3,
                                maxlength: 4,
                                clearable: "",
                                required: "true"
                              }, {
                                label: withCtx(() => [
                                  $props.required ? (openBlock(), createElementBlock("span", _hoisted_5$r, _cache[28] || (_cache[28] = [
                                    createBaseVNode(
                                      "strong",
                                      null,
                                      "* ",
                                      -1
                                      /* HOISTED */
                                    )
                                  ]))) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    " " + toDisplayString("CVV Number" + ($props.required ? " (required)" : "")),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 1
                                /* STABLE */
                              }, 8, ["modelValue", "rules"])
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : _ctx.paymentMethods[_ctx.paymentMethodSelectedIndex].value === "Bank Draft" ? (openBlock(), createElementBlock(
                Fragment,
                { key: 1 },
                [
                  createCommentVNode(" Bank Draft "),
                  createVNode(VCol, { class: "bank_draft_form" }, {
                    default: withCtx(() => [
                      createVNode(VCard, {
                        flat: "",
                        tile: ""
                      }, {
                        default: withCtx(() => [
                          createBaseVNode("div", _hoisted_6$p, [
                            createVNode(VRadioGroup, {
                              modelValue: _ctx.bankDraftInformation.accountType,
                              "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => _ctx.bankDraftInformation.accountType = $event),
                              mandatory: "",
                              inline: ""
                            }, {
                              default: withCtx(() => [
                                createVNode(VRadio, {
                                  label: "Checking",
                                  value: "checking",
                                  name: "checking"
                                }),
                                createVNode(VRadio, {
                                  label: "Savings",
                                  value: "savings",
                                  name: "savings"
                                })
                              ]),
                              _: 1
                              /* STABLE */
                            }, 8, ["modelValue"])
                          ]),
                          createVNode(VCol, { cols: "12" }, {
                            default: withCtx(() => [
                              createVNode(VTextField, {
                                id: "accountHolderName",
                                modelValue: _ctx.bankDraftInformation.accountHolderName,
                                "onUpdate:modelValue": [
                                  _cache[12] || (_cache[12] = ($event) => _ctx.bankDraftInformation.accountHolderName = $event),
                                  _cache[13] || (_cache[13] = ($event) => _ctx.$emit("input", $options.getPaymentInformationObject()))
                                ],
                                label: "Account Holder Name",
                                placeholder: "Account Holder Name"
                              }, {
                                label: withCtx(() => [
                                  $props.required ? (openBlock(), createElementBlock("span", _hoisted_7$l, _cache[29] || (_cache[29] = [
                                    createBaseVNode(
                                      "strong",
                                      null,
                                      "* ",
                                      -1
                                      /* HOISTED */
                                    )
                                  ]))) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    " " + toDisplayString("Account Holder Name" + ($props.required ? " (required)" : "")),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 1
                                /* STABLE */
                              }, 8, ["modelValue"])
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, { cols: "12" }, {
                            default: withCtx(() => [
                              createVNode(VTextField, {
                                id: "routingNumber",
                                modelValue: _ctx.bankDraftInformation.routingNumber,
                                "onUpdate:modelValue": [
                                  _cache[14] || (_cache[14] = ($event) => _ctx.bankDraftInformation.routingNumber = $event),
                                  _cache[15] || (_cache[15] = ($event) => _ctx.$emit("input", $options.getPaymentInformationObject()))
                                ],
                                rules: _ctx.routingRules,
                                label: "Routing Number",
                                placeholder: "Routing Number",
                                name: "Routing Number",
                                autocomplete: "off",
                                clearable: "",
                                maxlength: "9"
                              }, {
                                label: withCtx(() => [
                                  $props.required ? (openBlock(), createElementBlock("span", _hoisted_8$g, _cache[30] || (_cache[30] = [
                                    createBaseVNode(
                                      "strong",
                                      null,
                                      "* ",
                                      -1
                                      /* HOISTED */
                                    )
                                  ]))) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    " " + toDisplayString("Routing Number" + ($props.required ? " (required)" : "")),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 1
                                /* STABLE */
                              }, 8, ["modelValue", "rules"])
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, { cols: "12" }, {
                            default: withCtx(() => [
                              createVNode(VTextField, {
                                id: "accountNumber",
                                modelValue: _ctx.bankDraftInformation.accountNumber,
                                "onUpdate:modelValue": [
                                  _cache[16] || (_cache[16] = ($event) => _ctx.bankDraftInformation.accountNumber = $event),
                                  _cache[17] || (_cache[17] = ($event) => _ctx.$emit("input", $options.getPaymentInformationObject()))
                                ],
                                rules: _ctx.accountRules,
                                label: "Account Number",
                                placeholder: "Account Number",
                                name: "Account Number",
                                autocomplete: "off",
                                minlength: 1,
                                maxlength: 17,
                                clearable: ""
                              }, {
                                label: withCtx(() => [
                                  $props.required ? (openBlock(), createElementBlock("span", _hoisted_9$g, _cache[31] || (_cache[31] = [
                                    createBaseVNode(
                                      "strong",
                                      null,
                                      "* ",
                                      -1
                                      /* HOISTED */
                                    )
                                  ]))) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    " " + toDisplayString("Account Number" + ($props.required ? " (required)" : "")),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 1
                                /* STABLE */
                              }, 8, ["modelValue", "rules"])
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ],
                2112
                /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
              )) : createCommentVNode("v-if", true)
            ]),
            _: 1
            /* STABLE */
          }),
          withDirectives(createBaseVNode(
            "div",
            _hoisted_10$e,
            [
              createVNode(VProgressCircular, {
                indeterminate: "",
                color: "primary"
              })
            ],
            512
            /* NEED_PATCH */
          ), [
            [vShow, _ctx.loading]
          ])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"]),
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, {
            cols: "12",
            lg: "6",
            offset: "6",
            class: "text-right hidden-md-and-down"
          }, {
            default: withCtx(() => [
              createVNode(VBtn, {
                class: "px-4",
                onClick: $options.cancelPaymentUpdate
              }, {
                default: withCtx(() => _cache[32] || (_cache[32] = [
                  createTextVNode("Cancel")
                ])),
                _: 1
                /* STABLE */
              }, 8, ["onClick"]),
              createVNode(VBtn, {
                disabled: !_ctx.formValid,
                color: "success",
                class: "px-4",
                onClick: $options.submit
              }, {
                default: withCtx(() => _cache[33] || (_cache[33] = [
                  createTextVNode(" Save ")
                ])),
                _: 1
                /* STABLE */
              }, 8, ["disabled", "onClick"])
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCol, { class: "hidden-lg-and-up" }, {
            default: withCtx(() => [
              createVNode(VBtn, {
                class: "px-4",
                onClick: $options.cancelPaymentUpdate
              }, {
                default: withCtx(() => _cache[34] || (_cache[34] = [
                  createTextVNode("Cancel")
                ])),
                _: 1
                /* STABLE */
              }, 8, ["onClick"]),
              createVNode(VBtn, {
                disabled: !_ctx.formValid,
                color: "success",
                class: "px-4",
                onClick: $options.submit
              }, {
                default: withCtx(() => _cache[35] || (_cache[35] = [
                  createTextVNode(" Save ")
                ])),
                _: 1
                /* STABLE */
              }, 8, ["disabled", "onClick"])
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VDialog, {
        modelValue: _ctx.dialogSuccess,
        "onUpdate:modelValue": _cache[19] || (_cache[19] = ($event) => _ctx.dialogSuccess = $event),
        persistent: "",
        "max-width": "350"
      }, {
        default: withCtx(() => [
          createVNode(VCard, null, {
            default: withCtx(() => [
              createVNode(VCardTitle, { class: "text-h6" }, {
                default: withCtx(() => _cache[36] || (_cache[36] = [
                  createTextVNode(" Payment Information ")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardText, { class: "text-subtitle-1" }, {
                default: withCtx(() => _cache[37] || (_cache[37] = [
                  createTextVNode(" Updated successfully! ")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardActions, null, {
                default: withCtx(() => [
                  createVNode(VSpacer),
                  createVNode(VBtn, {
                    elevation: "2",
                    color: "primary",
                    class: "px-4",
                    onClick: $options.reloadPage
                  }, {
                    default: withCtx(() => _cache[38] || (_cache[38] = [
                      createTextVNode(" Close ")
                    ])),
                    _: 1
                    /* STABLE */
                  }, 8, ["onClick"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"]),
      createVNode(VDialog, {
        modelValue: _ctx.dialogError,
        "onUpdate:modelValue": _cache[21] || (_cache[21] = ($event) => _ctx.dialogError = $event),
        persistent: "",
        "max-width": "350"
      }, {
        default: withCtx(() => [
          createVNode(VCard, null, {
            default: withCtx(() => [
              createVNode(VCardTitle, { class: "text-h6 text-white bg-error" }, {
                default: withCtx(() => _cache[39] || (_cache[39] = [
                  createTextVNode(" Invalid Payment Information ")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardText, { class: "text-subtitle-1 py-3" }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString(_ctx.errorMessage),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardActions, null, {
                default: withCtx(() => [
                  createVNode(VSpacer),
                  createVNode(VBtn, {
                    elevation: "2",
                    color: "error",
                    class: "px-4",
                    onClick: _cache[20] || (_cache[20] = ($event) => {
                      _ctx.dialogError = false;
                    })
                  }, {
                    default: withCtx(() => _cache[40] || (_cache[40] = [
                      createTextVNode(" Close ")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"])
    ]),
    _: 1
    /* STABLE */
  });
}
const EditEduesPaymentComponent = /* @__PURE__ */ _export_sfc(_sfc_main$Y, [["render", _sfc_render$Y], ["__scopeId", "data-v-1223969c"], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Edit/EditEduesPaymentComponent.vue"]]);
const _sfc_main$X = {
  name: "EduesComponent",
  components: { ViewEduesComponent, EditEduesPaymentComponent, FlipCard },
  data() {
    return {
      flipped: false,
      individual: {},
      individualData: {},
      editMode: false,
      selectedAffiliateId: null,
      bhData: [],
      indData: [],
      billHighwayData: [],
      isActive: false,
      loading: false
    };
  },
  mounted() {
    this.id = this.$route.params.id;
    this.selectedAffiliateId = this.$store.getters["user/selectedAffiliate"].AffiliateId;
  },
  computed: {},
  methods: {
    forceRender() {
      this.getEduesDetailsApi();
    },
    onExpand({ value }) {
      if (value) {
        this.getEduesDetailsApi();
      }
    },
    onSave() {
      this.flipped = false;
    },
    getEduesDetailsApi() {
      this.loading = true;
      const individualId = this.id;
      return axios.get("/api/v3/memberforms/admin/edues-submission-details/" + individualId + "/" + this.selectedAffiliateId).then((response) => {
        this.individual = response.data;
        console.log("response.data", response.data);
        this.individualData = response.data.individualData;
        const memberArray = Object.entries(response.data).map((arr) => ({
          bhData: arr[0],
          indData: arr[1]
        }));
        this.billHighwayData = [[memberArray[1].indData, memberArray[2].indData]];
      }).finally(() => {
        this.loading = false;
      });
    },
    onEditEdues(employer) {
      this.editMode = true;
      this.flipped = true;
    }
  }
};
function _sfc_render$X(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_view_edues_component = resolveComponent("view-edues-component");
  const _component_edit_edues_payment_component = resolveComponent("edit-edues-payment-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[1] || (_cache[1] = [
          createTextVNode(" eDues ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VProgressLinear, {
            active: $data.loading,
            indeterminate: true,
            color: "#7bb8da"
          }, null, 8, ["active"]),
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(_component_view_edues_component, {
                individual: $data.individual,
                onEditEdues: $options.onEditEdues,
                loading: $data.loading
              }, null, 8, ["individual", "onEditEdues", "loading"])
            ]),
            back: withCtx(() => [
              createVNode(_component_edit_edues_payment_component, {
                "edit-mode": $data.editMode,
                "read-only": false,
                individual: $data.individualData,
                "bill-highway-data": $data.billHighwayData,
                onCancelEditPayment: _cache[0] || (_cache[0] = ($event) => $data.flipped = false),
                onSavedEdues: $options.onSave,
                onClickedForceRender: $options.forceRender
              }, null, 8, ["edit-mode", "individual", "bill-highway-data", "onSavedEdues", "onClickedForceRender"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const EduesComponent = /* @__PURE__ */ _export_sfc(_sfc_main$X, [["render", _sfc_render$X], ["__file", "/var/www/html/resources/js/components/Individual/Partial/EduesComponent.vue"]]);
const _sfc_main$W = {
  name: "ViewEmployersComponent",
  props: {
    individual: {
      type: Object,
      required: true
    },
    individualEmployers: {
      type: Array,
      required: true
    }
  },
  methods: {
    isLocked(IndividualEmployer) {
      return IndividualEmployer.EndDate && compareAsc(/* @__PURE__ */ new Date(), IndividualEmployer.EndDate) > 0;
    },
    getClass(individualEmployer) {
      return this.isLocked(individualEmployer) ? "past-relationship" : "current-relationship";
    }
  },
  mounted() {
    this.id = this.$route.params.id;
  },
  watch: {
    individual: {
      deep: true,
      handler(value) {
        return value;
      }
    }
  }
};
const _hoisted_1$E = { class: "data-container" };
const _hoisted_2$B = { class: "data-value" };
const _hoisted_3$v = { class: "data-container" };
const _hoisted_4$t = {
  key: 0,
  class: "data-value"
};
const _hoisted_5$q = { class: "data-container" };
const _hoisted_6$o = {
  key: 0,
  class: "data-value"
};
const _hoisted_7$k = { class: "data-container" };
const _hoisted_8$f = {
  key: 0,
  class: "data-value"
};
const _hoisted_9$f = { class: "data-container" };
const _hoisted_10$d = { class: "data-value" };
const _hoisted_11$c = { class: "data-container" };
const _hoisted_12$c = { class: "data-value" };
const _hoisted_13$a = { class: "data-container" };
const _hoisted_14$a = { class: "data-value" };
const _hoisted_15$a = { class: "data-container" };
const _hoisted_16$a = {
  key: 0,
  class: "data-value"
};
const _hoisted_17$9 = { key: 1 };
const _hoisted_18$9 = { class: "data-container" };
const _hoisted_19$9 = {
  key: 0,
  class: "data-value"
};
const _hoisted_20$8 = { key: 1 };
const _hoisted_21$8 = { class: "data-container" };
const _hoisted_22$7 = { class: "data-value" };
const _hoisted_23$7 = { class: "data-container" };
const _hoisted_24$7 = {
  key: 0,
  class: "data-value"
};
const _hoisted_25$7 = { class: "data-container" };
const _hoisted_26$7 = { class: "data-value" };
const _hoisted_27$7 = { class: "data-container" };
const _hoisted_28$7 = { class: "data-value" };
const _hoisted_29$7 = { class: "data-container" };
const _hoisted_30$7 = { class: "data-value" };
const _hoisted_31$7 = { class: "data-container" };
const _hoisted_32$5 = {
  key: 0,
  class: "data-value"
};
const _hoisted_33$5 = { key: 1 };
const _hoisted_34$4 = { class: "data-container" };
const _hoisted_35$4 = {
  key: 0,
  class: "data-value"
};
const _hoisted_36$4 = { key: 1 };
const _hoisted_37$4 = { class: "data-container" };
const _hoisted_38$3 = { class: "data-value" };
const _hoisted_39$3 = { class: "data-container" };
const _hoisted_40$3 = { class: "data-value" };
const _hoisted_41$3 = { key: 0 };
const _hoisted_42$3 = { class: "data-container" };
const _hoisted_43$3 = {
  key: 0,
  class: "data-tag"
};
const _hoisted_44$3 = { class: "data-value" };
const _hoisted_45$3 = { key: 0 };
const _hoisted_46$3 = { class: "data-container" };
const _hoisted_47$3 = {
  key: 0,
  class: "data-tag"
};
const _hoisted_48$3 = { class: "data-value" };
const _hoisted_49$3 = { key: 0 };
const _hoisted_50$3 = { class: "data-container" };
const _hoisted_51$3 = {
  key: 0,
  class: "data-tag"
};
const _hoisted_52$3 = { class: "data-value" };
const _hoisted_53$3 = { key: 0 };
const _hoisted_54$3 = { class: "data-container" };
const _hoisted_55$3 = {
  key: 0,
  class: "data-tag"
};
const _hoisted_56$3 = { class: "data-value" };
const _hoisted_57$3 = { key: 0 };
const _hoisted_58$3 = { class: "data-container" };
const _hoisted_59$3 = {
  key: 0,
  class: "data-tag"
};
const _hoisted_60$3 = { class: "data-value" };
const _hoisted_61$3 = { key: 0 };
const _hoisted_62$3 = { class: "data-container" };
const _hoisted_63$3 = {
  key: 0,
  class: "data-tag"
};
const _hoisted_64$3 = { class: "data-value" };
const _hoisted_65$3 = { class: "data-container" };
const _hoisted_66$3 = {
  key: 0,
  class: "data-value"
};
const _hoisted_67$3 = {
  key: 1,
  class: "data-value"
};
function _sfc_render$W(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, { class: "text-right" }, {
            default: withCtx(() => [
              createVNode(VBtn, {
                size: "small",
                onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("add-individual-employer"))
              }, {
                default: withCtx(() => _cache[1] || (_cache[1] = [
                  createTextVNode("Add employer record")
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      (openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList($props.individualEmployers, (IndividualEmployer) => {
          return openBlock(), createBlock(
            VRow,
            {
              key: IndividualEmployer.IndividualEmployerId
            },
            {
              default: withCtx(() => [
                createVNode(VCol, {
                  class: normalizeClass($options.getClass(IndividualEmployer))
                }, {
                  default: withCtx(() => [
                    createVNode(
                      VContainer,
                      null,
                      {
                        default: withCtx(() => [
                          createVNode(
                            VRow,
                            null,
                            {
                              default: withCtx(() => [
                                createVNode(
                                  VCol,
                                  { cols: "9" },
                                  {
                                    default: withCtx(() => [
                                      createBaseVNode(
                                        "h4",
                                        null,
                                        toDisplayString(IndividualEmployer.Employer.EmployerName),
                                        1
                                        /* TEXT */
                                      )
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  },
                                  1024
                                  /* DYNAMIC_SLOTS */
                                ),
                                !$options.isLocked(IndividualEmployer) ? (openBlock(), createBlock(
                                  VCol,
                                  {
                                    key: 0,
                                    cols: "3",
                                    class: "text-right"
                                  },
                                  {
                                    default: withCtx(() => [
                                      createVNode(VBtn, {
                                        size: "small",
                                        onClick: ($event) => _ctx.$emit("edit-employer", IndividualEmployer)
                                      }, {
                                        default: withCtx(() => [..._cache[2] || (_cache[2] = [
                                          createTextVNode("Edit")
                                        ])]),
                                        _: 2
                                        /* DYNAMIC */
                                      }, 1032, ["onClick"])
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  },
                                  1024
                                  /* DYNAMIC_SLOTS */
                                )) : createCommentVNode("v-if", true)
                              ]),
                              _: 2
                              /* DYNAMIC */
                            },
                            1024
                            /* DYNAMIC_SLOTS */
                          ),
                          createVNode(
                            VRow,
                            null,
                            {
                              default: withCtx(() => [
                                createVNode(
                                  VCol,
                                  { cols: "6" },
                                  {
                                    default: withCtx(() => [
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_1$E, [
                                              _cache[3] || (_cache[3] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Employee ID:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              createBaseVNode(
                                                "div",
                                                _hoisted_2$B,
                                                toDisplayString(IndividualEmployer.EmployeeId),
                                                1
                                                /* TEXT */
                                              )
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_3$v, [
                                              _cache[4] || (_cache[4] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Job Title:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              IndividualEmployer.JobTitle ? (openBlock(), createElementBlock(
                                                "div",
                                                _hoisted_4$t,
                                                toDisplayString(IndividualEmployer.JobTitle.JobTitleName),
                                                1
                                                /* TEXT */
                                              )) : createCommentVNode("v-if", true)
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_5$q, [
                                              _cache[5] || (_cache[5] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Job Description:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              IndividualEmployer.JobDescription ? (openBlock(), createElementBlock(
                                                "div",
                                                _hoisted_6$o,
                                                toDisplayString(IndividualEmployer.JobDescription),
                                                1
                                                /* TEXT */
                                              )) : createCommentVNode("v-if", true)
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_7$k, [
                                              _cache[6] || (_cache[6] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Unit:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              IndividualEmployer.LocalJobClass && IndividualEmployer.LocalJobClass.Unit ? (openBlock(), createElementBlock(
                                                "div",
                                                _hoisted_8$f,
                                                toDisplayString(IndividualEmployer.LocalJobClass.Unit.UnitName),
                                                1
                                                /* TEXT */
                                              )) : createCommentVNode("v-if", true)
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_9$f, [
                                              _cache[7] || (_cache[7] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Hire Date:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              createBaseVNode(
                                                "div",
                                                _hoisted_10$d,
                                                toDisplayString(_ctx.$filters.formatDate(IndividualEmployer.HireDate)),
                                                1
                                                /* TEXT */
                                              )
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_11$c, [
                                              _cache[8] || (_cache[8] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Start Date:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              createBaseVNode(
                                                "div",
                                                _hoisted_12$c,
                                                toDisplayString(_ctx.$filters.formatDate(IndividualEmployer.StartDate)),
                                                1
                                                /* TEXT */
                                              )
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_13$a, [
                                              _cache[9] || (_cache[9] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Room:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              createBaseVNode(
                                                "div",
                                                _hoisted_14$a,
                                                toDisplayString(IndividualEmployer.RoomNumber),
                                                1
                                                /* TEXT */
                                              )
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_15$a, [
                                              _cache[10] || (_cache[10] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Tenured:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              IndividualEmployer.IsTenured == 1 ? (openBlock(), createElementBlock("span", _hoisted_16$a, "Yes")) : (openBlock(), createElementBlock("span", _hoisted_17$9, "No"))
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_18$9, [
                                              _cache[11] || (_cache[11] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Part Time:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              IndividualEmployer.IsPartTime == 1 ? (openBlock(), createElementBlock("span", _hoisted_19$9, "Yes")) : (openBlock(), createElementBlock("span", _hoisted_20$8, "No"))
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      )
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  },
                                  1024
                                  /* DYNAMIC_SLOTS */
                                ),
                                createVNode(
                                  VCol,
                                  { cols: "6" },
                                  {
                                    default: withCtx(() => [
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_21$8, [
                                              _cache[12] || (_cache[12] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Source:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              createBaseVNode(
                                                "div",
                                                _hoisted_22$7,
                                                toDisplayString(IndividualEmployer.Source),
                                                1
                                                /* TEXT */
                                              )
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_23$7, [
                                              _cache[13] || (_cache[13] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Subject:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              IndividualEmployer.Subject ? (openBlock(), createElementBlock(
                                                "div",
                                                _hoisted_24$7,
                                                toDisplayString(IndividualEmployer.Subject.SubjectName),
                                                1
                                                /* TEXT */
                                              )) : createCommentVNode("v-if", true)
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_25$7, [
                                              _cache[14] || (_cache[14] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Stop Date:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              createBaseVNode(
                                                "div",
                                                _hoisted_26$7,
                                                toDisplayString(_ctx.$filters.formatDate(IndividualEmployer.EndDate)),
                                                1
                                                /* TEXT */
                                              )
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_27$7, [
                                              _cache[15] || (_cache[15] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Stop Reason:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              createBaseVNode(
                                                "div",
                                                _hoisted_28$7,
                                                toDisplayString(IndividualEmployer.StopReason),
                                                1
                                                /* TEXT */
                                              )
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_29$7, [
                                              _cache[16] || (_cache[16] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Last Update:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              createBaseVNode(
                                                "div",
                                                _hoisted_30$7,
                                                toDisplayString(_ctx.$filters.formatDate(IndividualEmployer.UpdatedAt)),
                                                1
                                                /* TEXT */
                                              )
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      withDirectives(createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_31$7, [
                                              _cache[17] || (_cache[17] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Currently Working:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              IndividualEmployer.CurrentlyWorking == 1 ? (openBlock(), createElementBlock("span", _hoisted_32$5, "Yes")) : (openBlock(), createElementBlock("span", _hoisted_33$5, "No"))
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1536
                                        /* NEED_PATCH, DYNAMIC_SLOTS */
                                      ), [
                                        [vShow, false]
                                      ]),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_34$4, [
                                              _cache[18] || (_cache[18] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Preferred:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              IndividualEmployer.IsPreferred == 1 ? (openBlock(), createElementBlock("span", _hoisted_35$4, "Yes")) : (openBlock(), createElementBlock("span", _hoisted_36$4, "No"))
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_37$4, [
                                              _cache[19] || (_cache[19] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Position Id:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              createBaseVNode(
                                                "div",
                                                _hoisted_38$3,
                                                toDisplayString(IndividualEmployer.PositionId),
                                                1
                                                /* TEXT */
                                              )
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_39$3, [
                                              _cache[20] || (_cache[20] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Full Time Equivalent:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              createBaseVNode(
                                                "div",
                                                _hoisted_40$3,
                                                toDisplayString(IndividualEmployer.FullTimeEquivalent),
                                                1
                                                /* TEXT */
                                              )
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      )
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  },
                                  1024
                                  /* DYNAMIC_SLOTS */
                                )
                              ]),
                              _: 2
                              /* DYNAMIC */
                            },
                            1024
                            /* DYNAMIC_SLOTS */
                          ),
                          createVNode(VDivider, { horizantal: "" }),
                          createVNode(
                            VRow,
                            null,
                            {
                              default: withCtx(() => [
                                createVNode(
                                  VCol,
                                  { cols: "4" },
                                  {
                                    default: withCtx(() => [
                                      createVNode(VRow, null, {
                                        default: withCtx(() => [..._cache[21] || (_cache[21] = [
                                          createBaseVNode(
                                            "b",
                                            null,
                                            "Work Location:",
                                            -1
                                            /* HOISTED */
                                          )
                                        ])]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      IndividualEmployer.WorkLocation ? (openBlock(), createElementBlock("div", _hoisted_41$3, [
                                        createVNode(
                                          VRow,
                                          null,
                                          {
                                            default: withCtx(() => [
                                              createBaseVNode("div", _hoisted_42$3, [
                                                IndividualEmployer.WorkLocation.WorkLocationType ? (openBlock(), createElementBlock(
                                                  "div",
                                                  _hoisted_43$3,
                                                  toDisplayString(IndividualEmployer.WorkLocation.WorkLocationType.WorkLocationTypeName) + ": ",
                                                  1
                                                  /* TEXT */
                                                )) : createCommentVNode("v-if", true),
                                                createBaseVNode(
                                                  "div",
                                                  _hoisted_44$3,
                                                  toDisplayString(IndividualEmployer.WorkLocation.WorkLocationName),
                                                  1
                                                  /* TEXT */
                                                )
                                              ])
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        ),
                                        IndividualEmployer.WorkLocation.ParentWorkLocation ? (openBlock(), createElementBlock("div", _hoisted_45$3, [
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createBaseVNode("div", _hoisted_46$3, [
                                                  IndividualEmployer.WorkLocation.ParentWorkLocation.WorkLocationType ? (openBlock(), createElementBlock(
                                                    "div",
                                                    _hoisted_47$3,
                                                    toDisplayString(IndividualEmployer.WorkLocation.ParentWorkLocation.WorkLocationType.WorkLocationTypeName) + ": ",
                                                    1
                                                    /* TEXT */
                                                  )) : createCommentVNode("v-if", true),
                                                  createBaseVNode(
                                                    "div",
                                                    _hoisted_48$3,
                                                    toDisplayString(IndividualEmployer.WorkLocation.ParentWorkLocation.WorkLocationName),
                                                    1
                                                    /* TEXT */
                                                  )
                                                ])
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          IndividualEmployer.WorkLocation.ParentWorkLocation.ParentWorkLocation ? (openBlock(), createElementBlock("div", _hoisted_49$3, [
                                            createVNode(
                                              VRow,
                                              null,
                                              {
                                                default: withCtx(() => [
                                                  createBaseVNode("div", _hoisted_50$3, [
                                                    IndividualEmployer.WorkLocation.ParentWorkLocation.ParentWorkLocation.WorkLocationType ? (openBlock(), createElementBlock(
                                                      "div",
                                                      _hoisted_51$3,
                                                      toDisplayString(IndividualEmployer.WorkLocation.ParentWorkLocation.ParentWorkLocation.WorkLocationType.WorkLocationTypeName) + ": ",
                                                      1
                                                      /* TEXT */
                                                    )) : createCommentVNode("v-if", true),
                                                    createBaseVNode(
                                                      "div",
                                                      _hoisted_52$3,
                                                      toDisplayString(IndividualEmployer.WorkLocation.ParentWorkLocation.ParentWorkLocation.WorkLocationName),
                                                      1
                                                      /* TEXT */
                                                    )
                                                  ])
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            )
                                          ])) : createCommentVNode("v-if", true)
                                        ])) : createCommentVNode("v-if", true)
                                      ])) : createCommentVNode("v-if", true)
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  },
                                  1024
                                  /* DYNAMIC_SLOTS */
                                ),
                                createVNode(
                                  VCol,
                                  { cols: "4" },
                                  {
                                    default: withCtx(() => [
                                      createVNode(VRow, null, {
                                        default: withCtx(() => [..._cache[22] || (_cache[22] = [
                                          createBaseVNode(
                                            "b",
                                            null,
                                            "Work Structure:",
                                            -1
                                            /* HOISTED */
                                          )
                                        ])]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      IndividualEmployer.WorkStructure ? (openBlock(), createElementBlock("div", _hoisted_53$3, [
                                        createVNode(
                                          VRow,
                                          null,
                                          {
                                            default: withCtx(() => [
                                              createBaseVNode("div", _hoisted_54$3, [
                                                IndividualEmployer.WorkStructure.WorkStructureType ? (openBlock(), createElementBlock(
                                                  "div",
                                                  _hoisted_55$3,
                                                  toDisplayString(IndividualEmployer.WorkStructure.WorkStructureType.WorkStructureTypeName) + ": ",
                                                  1
                                                  /* TEXT */
                                                )) : createCommentVNode("v-if", true),
                                                createBaseVNode(
                                                  "div",
                                                  _hoisted_56$3,
                                                  toDisplayString(IndividualEmployer.WorkStructure.WorkStructureName),
                                                  1
                                                  /* TEXT */
                                                )
                                              ])
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        ),
                                        IndividualEmployer.WorkStructure.ParentWorkStructure ? (openBlock(), createElementBlock("div", _hoisted_57$3, [
                                          createVNode(
                                            VRow,
                                            null,
                                            {
                                              default: withCtx(() => [
                                                createBaseVNode("div", _hoisted_58$3, [
                                                  IndividualEmployer.WorkStructure.ParentWorkStructure.WorkStructureType ? (openBlock(), createElementBlock(
                                                    "div",
                                                    _hoisted_59$3,
                                                    toDisplayString(IndividualEmployer.WorkStructure.ParentWorkStructure.WorkStructureType.WorkStructureTypeName) + ": ",
                                                    1
                                                    /* TEXT */
                                                  )) : createCommentVNode("v-if", true),
                                                  createBaseVNode(
                                                    "div",
                                                    _hoisted_60$3,
                                                    toDisplayString(IndividualEmployer.WorkStructure.ParentWorkStructure.WorkStructureName),
                                                    1
                                                    /* TEXT */
                                                  )
                                                ])
                                              ]),
                                              _: 2
                                              /* DYNAMIC */
                                            },
                                            1024
                                            /* DYNAMIC_SLOTS */
                                          ),
                                          IndividualEmployer.WorkStructure.ParentWorkStructure.ParentWorkStructure ? (openBlock(), createElementBlock("div", _hoisted_61$3, [
                                            createVNode(
                                              VRow,
                                              null,
                                              {
                                                default: withCtx(() => [
                                                  createBaseVNode("div", _hoisted_62$3, [
                                                    IndividualEmployer.WorkStructure.ParentWorkStructure.ParentWorkStructure.WorkStructureType ? (openBlock(), createElementBlock(
                                                      "div",
                                                      _hoisted_63$3,
                                                      toDisplayString(IndividualEmployer.WorkStructure.ParentWorkStructure.ParentWorkStructure.WorkStructureType.WorkStructureTypeName) + ": ",
                                                      1
                                                      /* TEXT */
                                                    )) : createCommentVNode("v-if", true),
                                                    createBaseVNode(
                                                      "div",
                                                      _hoisted_64$3,
                                                      toDisplayString(IndividualEmployer.WorkStructure.ParentWorkStructure.ParentWorkStructure.WorkStructureName),
                                                      1
                                                      /* TEXT */
                                                    )
                                                  ])
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            )
                                          ])) : createCommentVNode("v-if", true)
                                        ])) : createCommentVNode("v-if", true)
                                      ])) : createCommentVNode("v-if", true)
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  },
                                  1024
                                  /* DYNAMIC_SLOTS */
                                ),
                                createVNode(
                                  VCol,
                                  { cols: "4" },
                                  {
                                    default: withCtx(() => [
                                      createVNode(VRow, null, {
                                        default: withCtx(() => [..._cache[23] || (_cache[23] = [
                                          createBaseVNode(
                                            "b",
                                            null,
                                            "Job Class:",
                                            -1
                                            /* HOISTED */
                                          )
                                        ])]),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createBaseVNode("div", _hoisted_65$3, [
                                              _cache[24] || (_cache[24] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "Local Job Class:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              IndividualEmployer.LocalJobClass ? (openBlock(), createElementBlock(
                                                "div",
                                                _hoisted_66$3,
                                                toDisplayString(IndividualEmployer.LocalJobClass.LocalJobClassName),
                                                1
                                                /* TEXT */
                                              )) : createCommentVNode("v-if", true),
                                              _cache[25] || (_cache[25] = createBaseVNode(
                                                "div",
                                                { class: "data-tag" },
                                                "National Job Class:",
                                                -1
                                                /* HOISTED */
                                              )),
                                              IndividualEmployer.LocalJobClass && IndividualEmployer.LocalJobClass.NationalJobClass ? (openBlock(), createElementBlock(
                                                "div",
                                                _hoisted_67$3,
                                                toDisplayString(IndividualEmployer.LocalJobClass.NationalJobClass.NationalJobClassName),
                                                1
                                                /* TEXT */
                                              )) : createCommentVNode("v-if", true)
                                            ])
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      )
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  },
                                  1024
                                  /* DYNAMIC_SLOTS */
                                )
                              ]),
                              _: 2
                              /* DYNAMIC */
                            },
                            1024
                            /* DYNAMIC_SLOTS */
                          )
                        ]),
                        _: 2
                        /* DYNAMIC */
                      },
                      1024
                      /* DYNAMIC_SLOTS */
                    )
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, 1032, ["class"])
              ]),
              _: 2
              /* DYNAMIC */
            },
            1024
            /* DYNAMIC_SLOTS */
          );
        }),
        128
        /* KEYED_FRAGMENT */
      ))
    ]),
    _: 1
    /* STABLE */
  });
}
const ViewEmployersComponent = /* @__PURE__ */ _export_sfc(_sfc_main$W, [["render", _sfc_render$W], ["__file", "/var/www/html/resources/js/components/Individual/Partial/ViewEmployersComponent.vue"]]);
const _sfc_main$V = {
  name: "EditEmployerDataComponent",
  components: { JobClassChooser, WorkStructureChooser, WorkLocationChooser },
  props: {
    individualEmployer: {
      type: Object,
      required: true
    },
    individual: {
      type: Object,
      required: true
    },
    readOnly: {
      type: Boolean,
      required: true
    },
    editMode: {
      type: Boolean,
      required: true
    },
    showSaveButton: {
      type: Boolean,
      default: true
    },
    selectedEmployer: {
      type: Number,
      required: false,
      default: null
    },
    selectedUnit: {
      type: Number,
      required: false,
      default: null
    },
    WorkLocation: {
      type: Number,
      required: false,
      default: null
    },
    WorkStructure: {
      type: Number,
      required: false,
      default: null
    }
  },
  watch: {
    editMode: {
      handler(value) {
        if (!value) {
          this.editableIndividualEmployer = null;
          this.selectedEmployerId = this.selectedUnitId = null;
        }
      }
    },
    selectedEmployerId: {
      handler(value) {
        if (value && value !== this.editableIndividualEmployer.EmployerId) {
          this.editableIndividualEmployer.EmployerId = value;
          this.loadOptions(value);
        }
        return value;
      },
      deep: true
    },
    selectedUnitId: {
      handler(value) {
        if (value && value !== this.editableIndividualEmployer.UnitId) {
          this.editableIndividualEmployer.UnitId = value;
        }
        return value;
      },
      deep: true
    },
    WorkLocation: {
      handler(value) {
        if (value && value !== this.WorkLocationId) {
          this.WorkLocationId = value;
        }
      }
    },
    WorkStructure: {
      handler(value) {
        if (value && value !== this.WorkStructureId) {
          this.WorkStructureId = value;
        }
      }
    },
    selectedEmployer: {
      handler(value) {
        if (value && value !== this.selectedEmployerId) {
          this.selectedEmployerId = value;
        }
        console.log(value);
      }
    },
    selectedUnit: {
      handler(value) {
        if (value && value !== this.selectedUnitId) {
          this.selectedUnitId = value;
        }
      }
    },
    individualEmployer: {
      handler(value) {
        if (this.editableIndividualEmployer && this.editableIndividualEmployer.IndividualEmployerId === this.individualEmployer.IndividualEmployerId) {
          return;
        }
        this.editableIndividualEmployer = this.individualEmployer.IndividualEmployerId ? clone(value) : value;
        if (this.individualEmployer.EmployerId) {
          this.selectedEmployerId = this.individualEmployer.EmployerId;
          this.selectedUnitId = this.editableIndividualEmployer.LocalJobClass ? this.editableIndividualEmployer.LocalJobClass.UnitId : null;
          this.editableIndividualEmployer.UnitId = this.editableIndividualEmployer.LocalJobClass ? this.editableIndividualEmployer.LocalJobClass.UnitId : null;
          this.loadOptions(this.individualEmployer.EmployerId);
        } else {
          this.selectedEmployerId = this.employers && this.employers.length === 1 ? this.employers[0].EmployerId : null;
          this.editableIndividualEmployer.EmployerId = this.selectedEmployerId;
        }
        if (this.editableIndividualEmployer.HireDate) {
          this.editableIndividualEmployer.HireDate = this.editableIndividualEmployer.HireDate.split("T")[0];
        }
        if (this.editableIndividualEmployer.StartDate) {
          this.editableIndividualEmployer.StartDate = this.editableIndividualEmployer.StartDate.split("T")[0];
        }
        if (this.editableIndividualEmployer.EndDate) {
          this.editableIndividualEmployer.EndDate = this.editableIndividualEmployer.EndDate.split("T")[0];
        }
        if (this.editableIndividualEmployer.StartDate) {
          this.maxHireDate = this.editableIndividualEmployer.StartDate;
        }
        this.WorkStructureId = this.editableIndividualEmployer.WorkStructureId;
        this.WorkLocationId = this.editableIndividualEmployer.WorkLocationId;
      },
      deep: true
    },
    editableIndividualEmployer: {
      handler(value) {
        if (this.editableIndividualEmployer.HireDate) {
          this.minStartDate = this.editableIndividualEmployer.HireDate;
        }
        if (this.editableIndividualEmployer.StartDate) {
          this.maxHireDate = this.editableIndividualEmployer.StartDate;
        }
        if (!this.editableIndividualEmployer.HireDate) ;
      },
      deep: true
    }
  },
  data() {
    return {
      employers: [],
      subjects: [],
      units: [],
      editableIndividualEmployer: {},
      WorkStructureId: null,
      WorkLocationId: null,
      selectedEmployerId: null,
      selectedUnitId: null,
      minStartDate: null,
      maxHireDate: null,
      rules: {
        required: (value) => !!value || "Required."
      }
    };
  },
  mounted() {
    axios.get("/api/v2/gender").then((response) => {
      this.genders = response.data.data;
    });
    if (this.selectedAffiliate) {
      axios.get("/api/v2/aggregate/employer/byaffiliate/" + this.selectedAffiliate.AffiliateId).then((response) => {
        this.employers = response.data.data;
      });
      axios.get("/api/v2/subject?sort=SubjectName&filter[AffiliateId]" + this.selectedAffiliate.AffiliateId).then((response) => {
        this.subjects = response.data.data;
      });
    }
    this.editableIndividualEmployer = this.individualEmployer.IndividualEmployerId ? clone(this.individualEmployer) : this.individualEmployer;
    this.WorkStructureId = this.editableIndividualEmployer.WorkStructureId;
    this.WorkLocationId = this.editableIndividualEmployer.WorkLocationId;
  },
  computed: {
    pageTitle() {
      if (!this.editMode) {
        return "Add Employer";
      } else {
        return "Edit Employer";
      }
    },
    loading() {
      return this.editMode ? typeof this.individualEmployer.FirstName === "undefined" : false;
    },
    selectedAffiliate() {
      return this.$store.getters["user/selectedAffiliate"];
    }
  },
  methods: {
    saveData() {
      this.editableIndividualEmployer.IndividualId = this.individual.IndividualId;
      this.editableIndividualEmployer.StartDate = this.editableIndividualEmployer.StartDate ? this.editableIndividualEmployer.StartDate : formatISO(/* @__PURE__ */ new Date());
      this.editableIndividualEmployer.FullTimeEquivalent = this.editableIndividualEmployer.FullTimeEquivalent ? parseInt(this.editableIndividualEmployer.FullTimeEquivalent) : 0;
      this.editableIndividualEmployer.IsPreferred = this.editableIndividualEmployer.IsPreferred != "" ? this.editableIndividualEmployer.IsPreferred : false;
      if (this.individualEmployer && this.individualEmployer.IndividualEmployerId) {
        axios.put("/api/v2/individualEmployer/" + this.individualEmployer.IndividualEmployerId + "?include=Employer,Subject,Unit,WorkLocation,WorkStructure,LocalJobClass,LocalJobClass.Unit,LocalJobClass.NationalJobClass,JobTitle", this.editableIndividualEmployer).then((response) => this.afterSave(response.data.data));
      } else {
        this.editableIndividualEmployer.IsPartTime = !!this.editableIndividualEmployer.IsPartTime;
        this.editableIndividualEmployer.IsTenured = !!this.editableIndividualEmployer.IsTenured;
        this.editableIndividualEmployer.IsPreferred = !!this.editableIndividualEmployer.IsPreferred;
        this.editableIndividualEmployer.CurrentlyWorking = true;
        axios.post("/api/v2/individualEmployer?include=Employer,Subject,Unit,WorkLocation,WorkStructure,LocalJobClass,LocalJobClass.Unit,LocalJobClass.NationalJobClass,JobTitle", this.editableIndividualEmployer).then((response) => this.afterSave(response.data.data));
      }
    },
    afterSave(data) {
      this.editableIndividualEmployer = {};
      this.$emit("saved-employer", data);
    },
    loadOptions(employerId) {
      axios.get("/api/v2/aggregate/employer/units/" + employerId).then((response) => {
        this.units = response.data.data;
      });
    },
    setPropertyValue(propertyName, value) {
      this.editableIndividualEmployer[propertyName] = value;
    },
    setWorkStructureId(value) {
      this.editableIndividualEmployer["WorkStructureId"] = value;
      this.WorkStructureId = value;
    },
    setWorkLocationId(value) {
      if (value === void 0) {
        value = null;
      }
      this.editableIndividualEmployer["WorkLocationId"] = value;
      this.WorkLocationId = value;
    }
  }
};
const _hoisted_1$D = {
  key: 0,
  class: "text-red"
};
const _hoisted_2$A = {
  key: 0,
  class: "text-red"
};
const _hoisted_3$u = { class: "data-container" };
const _hoisted_4$s = { class: "data-container" };
const _hoisted_5$p = {
  key: 0,
  class: "text-red"
};
const _hoisted_6$n = { class: "data-container" };
const _hoisted_7$j = { class: "data-container" };
const _hoisted_8$e = { class: "data-container" };
const _hoisted_9$e = { class: "data-container" };
const _hoisted_10$c = { class: "data-container" };
function _sfc_render$V(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_work_location_chooser = resolveComponent("work-location-chooser");
  const _component_work_structure_chooser = resolveComponent("work-structure-chooser");
  const _component_job_class_chooser = resolveComponent("job-class-chooser");
  return openBlock(), createBlock(VCard, null, {
    default: withCtx(() => [
      createVNode(VCardTitle, null, {
        default: withCtx(() => [
          createTextVNode(
            toDisplayString($options.pageTitle),
            1
            /* TEXT */
          )
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VCardText, null, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "8"
              }, {
                default: withCtx(() => [
                  createVNode(VAutocomplete, {
                    modelValue: $data.selectedEmployerId,
                    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.selectedEmployerId = $event),
                    items: $data.employers,
                    "item-title": "EmployerName",
                    "item-value": "EmployerId",
                    "persistent-hint": "",
                    rules: [$data.rules.required],
                    readonly: $props.editMode,
                    disabled: $props.editMode,
                    variant: "underlined"
                  }, {
                    label: withCtx(() => [
                      $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_1$D, "* ")) : createCommentVNode("v-if", true),
                      _cache[26] || (_cache[26] = createTextVNode("Search for an employer "))
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["modelValue", "items", "rules", "readonly", "disabled"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(VAutocomplete, {
                    items: $data.units,
                    "item-value": "UnitId",
                    "item-title": "UnitName",
                    modelValue: $data.selectedUnitId,
                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.selectedUnitId = $event),
                    rules: [$data.rules.required],
                    readonly: $props.editMode,
                    disabled: $props.editMode,
                    variant: "underlined"
                  }, {
                    label: withCtx(() => [
                      $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_2$A, "* ")) : createCommentVNode("v-if", true),
                      _cache[27] || (_cache[27] = createTextVNode("Unit "))
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["items", "modelValue", "rules", "readonly", "disabled"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(_component_work_location_chooser, {
                    "employer-id": $data.selectedEmployerId,
                    value: $data.WorkLocationId,
                    onSelectedWorkLocation: _cache[2] || (_cache[2] = ($event) => $options.setWorkLocationId($event))
                  }, null, 8, ["employer-id", "value"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(_component_work_structure_chooser, {
                    "employer-id": $data.selectedEmployerId,
                    value: $data.WorkStructureId,
                    onSelectedWorkStructure: _cache[3] || (_cache[3] = ($event) => $options.setWorkStructureId($event))
                  }, null, 8, ["employer-id", "value"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(_component_job_class_chooser, {
                    "unit-id": $data.selectedUnitId,
                    "job-class-id": $data.editableIndividualEmployer.LocalJobClassId,
                    "job-title-id": $data.editableIndividualEmployer.JobTitleId,
                    rules: $data.rules,
                    onSelectedJobClass: _cache[4] || (_cache[4] = ($event) => $options.setPropertyValue("LocalJobClassId", $event)),
                    onSelectedJobTitle: _cache[5] || (_cache[5] = ($event) => $options.setPropertyValue("JobTitleId", $event))
                  }, null, 8, ["unit-id", "job-class-id", "job-title-id", "rules"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    label: "Employee ID",
                    modelValue: $data.editableIndividualEmployer.EmployeeId,
                    "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.editableIndividualEmployer.EmployeeId = $event),
                    variant: "underlined"
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    label: "Job Description",
                    modelValue: $data.editableIndividualEmployer.JobDescription,
                    "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.editableIndividualEmployer.JobDescription = $event),
                    variant: "underlined"
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    label: "Room Number",
                    modelValue: $data.editableIndividualEmployer.RoomNumber,
                    "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.editableIndividualEmployer.RoomNumber = $event),
                    variant: "underlined"
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_3$u, [
                    createVNode(VMenu, {
                      offset: 40,
                      transition: "scale-transition",
                      "min-width": "290px"
                    }, {
                      activator: withCtx(({ props }) => [
                        createVNode(VTextField, mergeProps({
                          modelValue: $data.editableIndividualEmployer.HireDate,
                          "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.editableIndividualEmployer.HireDate = $event),
                          hint: "YYYY-MM-DD",
                          label: "Hire Date"
                        }, props, { variant: "underlined" }), null, 16, ["modelValue"])
                      ]),
                      default: withCtx(() => [
                        createVNode(VDatePicker, {
                          max: $data.maxHireDate ? $data.maxHireDate : $data.editableIndividualEmployer.StartDate,
                          modelValue: $data.editableIndividualEmployer.HireDate,
                          "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $data.editableIndividualEmployer.HireDate = $event),
                          "no-title": "",
                          scrollable: ""
                        }, null, 8, ["max", "modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_4$s, [
                    createVNode(VMenu, {
                      offset: 40,
                      transition: "scale-transition",
                      "min-width": "290px"
                    }, {
                      activator: withCtx(({ props }) => [
                        createVNode(VTextField, mergeProps({
                          rules: [$data.rules.required],
                          modelValue: $data.editableIndividualEmployer.StartDate,
                          "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.editableIndividualEmployer.StartDate = $event),
                          hint: "YYYY-MM-DD"
                        }, props, { variant: "underlined" }), {
                          label: withCtx(() => [
                            $data.rules.required ? (openBlock(), createElementBlock("span", _hoisted_5$p, "* ")) : createCommentVNode("v-if", true),
                            _cache[28] || (_cache[28] = createTextVNode("Start Date "))
                          ]),
                          _: 2
                          /* DYNAMIC */
                        }, 1040, ["rules", "modelValue"])
                      ]),
                      default: withCtx(() => [
                        createVNode(VDatePicker, {
                          min: $data.minStartDate,
                          modelValue: $data.editableIndividualEmployer.StartDate,
                          "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => $data.editableIndividualEmployer.StartDate = $event),
                          "no-title": "",
                          scrollable: ""
                        }, null, 8, ["min", "modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_6$n, [
                    createVNode(VMenu, {
                      offset: 40,
                      transition: "scale-transition",
                      "min-width": "290px"
                    }, {
                      activator: withCtx(({ props }) => [
                        createVNode(VTextField, mergeProps({
                          modelValue: $data.editableIndividualEmployer.EndDate,
                          "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => $data.editableIndividualEmployer.EndDate = $event),
                          hint: "YYYY-MM-DD",
                          label: "End Date"
                        }, props, { variant: "underlined" }), null, 16, ["modelValue"])
                      ]),
                      default: withCtx(() => [
                        createVNode(VDatePicker, {
                          modelValue: $data.editableIndividualEmployer.EndDate,
                          "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => $data.editableIndividualEmployer.EndDate = $event),
                          "no-title": "",
                          scrollable: ""
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_7$j, [
                    createVNode(VSelect, {
                      clearable: "",
                      label: "Subject",
                      items: $data.subjects,
                      "item-value": "SubjectId",
                      "item-title": "SubjectName",
                      modelValue: $data.editableIndividualEmployer.SubjectId,
                      "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => $data.editableIndividualEmployer.SubjectId = $event),
                      variant: "underlined"
                    }, null, 8, ["items", "modelValue"])
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_8$e, [
                    createVNode(VTextField, {
                      label: "Source",
                      modelValue: $data.editableIndividualEmployer.Source,
                      "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => $data.editableIndividualEmployer.Source = $event),
                      variant: "underlined"
                    }, null, 8, ["modelValue"])
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_9$e, [
                    createVNode(VTextField, {
                      label: "Stop reason",
                      modelValue: $data.editableIndividualEmployer.StopReason,
                      "onUpdate:modelValue": _cache[17] || (_cache[17] = ($event) => $data.editableIndividualEmployer.StopReason = $event),
                      variant: "underlined"
                    }, null, 8, ["modelValue"])
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "3",
                class: "switches"
              }, {
                default: withCtx(() => [
                  createVNode(VSwitch, {
                    color: "primary",
                    label: "Part Time",
                    modelValue: $data.editableIndividualEmployer.IsPartTime,
                    "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => $data.editableIndividualEmployer.IsPartTime = $event)
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "3",
                class: "switches"
              }, {
                default: withCtx(() => [
                  createVNode(VSwitch, {
                    color: "primary",
                    label: "Is Tenured",
                    modelValue: $data.editableIndividualEmployer.IsTenured,
                    "onUpdate:modelValue": _cache[19] || (_cache[19] = ($event) => $data.editableIndividualEmployer.IsTenured = $event)
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "3",
                class: "switches"
              }, {
                default: withCtx(() => [
                  createVNode(VSwitch, {
                    color: "primary",
                    label: "Preferred",
                    modelValue: $data.editableIndividualEmployer.IsPreferred,
                    "onUpdate:modelValue": _cache[20] || (_cache[20] = ($event) => $data.editableIndividualEmployer.IsPreferred = $event)
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "3",
                class: "switches"
              }, {
                default: withCtx(() => [
                  withDirectives(createVNode(VSwitch, {
                    color: "primary",
                    label: "Currently Working",
                    modelValue: $data.editableIndividualEmployer.CurrentlyWorking,
                    "onUpdate:modelValue": _cache[21] || (_cache[21] = ($event) => $data.editableIndividualEmployer.CurrentlyWorking = $event)
                  }, null, 8, ["modelValue"]), [
                    [vShow, false]
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    label: "Position Id",
                    modelValue: $data.editableIndividualEmployer.PositionId,
                    "onUpdate:modelValue": _cache[22] || (_cache[22] = ($event) => $data.editableIndividualEmployer.PositionId = $event),
                    variant: "underlined"
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "3"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_10$c, [
                    createVNode(VTextField, {
                      label: "Full Time Equivalent(Use 0 to 100)",
                      modelValue: $data.editableIndividualEmployer.FullTimeEquivalent,
                      "onUpdate:modelValue": _cache[23] || (_cache[23] = ($event) => $data.editableIndividualEmployer.FullTimeEquivalent = $event),
                      variant: "underlined"
                    }, null, 8, ["modelValue"])
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      !$props.readOnly && $props.showSaveButton ? (openBlock(), createBlock(VCardActions, { key: 0 }, {
        default: withCtx(() => [
          createVNode(VSpacer),
          createVNode(VBtn, {
            onClick: _cache[24] || (_cache[24] = ($event) => _ctx.$emit("cancel-edit-employer")),
            variant: "elevated"
          }, {
            default: withCtx(() => _cache[29] || (_cache[29] = [
              createTextVNode("Cancel")
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VBtn, {
            color: "success",
            href: "",
            onClick: _cache[25] || (_cache[25] = ($event) => $options.saveData()),
            variant: "elevated"
          }, {
            default: withCtx(() => _cache[30] || (_cache[30] = [
              createTextVNode("Save")
            ])),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })) : createCommentVNode("v-if", true)
    ]),
    _: 1
    /* STABLE */
  });
}
const EditEmployerDataComponent = /* @__PURE__ */ _export_sfc(_sfc_main$V, [["render", _sfc_render$V], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Edit/EditEmployerDataComponent.vue"]]);
const _sfc_main$U = {
  name: "EmployersComponent",
  components: { EditEmployerDataComponent, ViewEmployersComponent, FlipCard },
  mixins: [markAsPreferredMixin],
  data() {
    return {
      flipped: false,
      individualEmployer: {},
      individual: {},
      individualEmployers: [],
      loading: false,
      editMode: false,
      selectedAffiliateId: null
    };
  },
  mounted() {
    this.id = this.$route.params.id;
    this.selectedAffiliateId = this.$store.getters["user/selectedAffiliate"].AffiliateId;
  },
  computed: {
    nonStructuralEmployers() {
      return this.individualEmployers.filter((individualEmployer) => individualEmployer.Employer && !individualEmployer.Employer.IsStructural);
    }
  },
  methods: {
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    onSave(employer) {
      this.flipped = false;
      const index = this.individualEmployers.findIndex((individualEmployer) => {
        return employer.IndividualEmployerId === individualEmployer.IndividualEmployerId;
      });
      if (index === -1) {
        this.individualEmployers.unshift(employer);
      } else {
        this.individualEmployers[index] = employer;
      }
      this.handleIsPreferred(this.individualEmployers, employer, "IndividualEmployerId", "IndividualId");
      this.individualEmployers = [...this.individualEmployers];
    },
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/individual/" + this.id + "?include=individualEmployers.Employer,individualEmployers.Subject,individualEmployers.WorkLocation,individualEmployers.WorkStructure,individualEmployers.WorkLocation.WorkLocationType,individualEmployers.WorkStructure.WorkStructureType,individualEmployers.LocalJobClass,individualEmployers.LocalJobClass.Unit,individualEmployers.LocalJobClass.NationalJobClass,individualEmployers.WorkLocation.ParentWorkLocation,individualEmployers.WorkStructure.ParentWorkStructure,individualEmployers.JobTitle").then((response) => {
        this.individual = response.data.data;
        if (response.data.data.individualEmployers) {
          this.individualEmployers = response.data.data.individualEmployers;
        }
      }).finally(() => {
        this.loading = false;
      });
    },
    onEditEmployer(employer) {
      this.individualEmployer = employer;
      this.editMode = true;
      this.flipped = true;
    },
    onAddEmployer() {
      this.individualEmployer = {};
      this.editMode = false;
      this.flipped = true;
    }
  }
};
function _sfc_render$U(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_view_employers_component = resolveComponent("view-employers-component");
  const _component_edit_employer_data_component = resolveComponent("edit-employer-data-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[1] || (_cache[1] = [
          createTextVNode(" Employers ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VProgressLinear, {
            active: $data.loading,
            indeterminate: true,
            color: "#7bb8da"
          }, null, 8, ["active"]),
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(_component_view_employers_component, {
                individual: $data.individual,
                onAddIndividualEmployer: $options.onAddEmployer,
                onEditEmployer: $options.onEditEmployer,
                "individual-employers": $options.nonStructuralEmployers
              }, null, 8, ["individual", "onAddIndividualEmployer", "onEditEmployer", "individual-employers"])
            ]),
            back: withCtx(() => [
              createVNode(_component_edit_employer_data_component, {
                "edit-mode": $data.editMode,
                "read-only": false,
                "individual-employer": $data.individualEmployer,
                individual: $data.individual,
                onCancelEditEmployer: _cache[0] || (_cache[0] = ($event) => $data.flipped = false),
                onSavedEmployer: $options.onSave
              }, null, 8, ["edit-mode", "individual-employer", "individual", "onSavedEmployer"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const EmployersComponent = /* @__PURE__ */ _export_sfc(_sfc_main$U, [["render", _sfc_render$U], ["__file", "/var/www/html/resources/js/components/Individual/Partial/EmployersComponent.vue"]]);
const _sfc_main$T = {
  name: "MembershipCardComponent",
  data() {
    return {
      individual: {},
      memberlogin: {},
      individualguid: 0,
      memberLoginName: "",
      memberIds: [],
      editableMembershipCard: {},
      headers: [
        { title: "Member Id", value: "MemberId" },
        { title: "Card Mail Date", value: "CardMailDate" },
        { title: "Card Activation Date", value: "CardActivationDate" },
        { title: "Is Replacement Card Requested", value: "IsReplacementCardRequested" },
        { title: "Replacement Card Request Date", value: "ReplacementCardRequestedDate" },
        // {title: 'Is Digital Card Requested', value: 'IsDigitalCardRequested'},
        // {title: 'Is using Digital ID', value: 'DigitalCardRemovedDate'},
        // {title: 'Date of use', value: 'DigitalCardRequestedDate'},
        { title: "Digital Card Email sent", value: "DigitalCardEmailSentDate" },
        { title: "Digital Card Wallet", value: "DigitalCardInstalledDate" }
      ],
      alert: false,
      alertType: "success",
      alertText: "",
      alertTextDesc: "",
      dialogConfirm: false,
      dialog: false,
      message: ""
    };
  },
  mounted() {
    this.id = this.$route.params.id;
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/individual/" + this.id + "?include=individualAffiliates.MemberIdMapping").then((response) => {
        this.individual = response.data.data;
        this.memberIds = this.individual.individualAffiliates[0].MemberIdMapping;
        this.individualguid = this.individual.IndividualGuid;
        this.getMemberDataFromApi();
      }).finally(() => {
        this.loading = false;
      });
    },
    getMemberDataFromApi() {
      this.loading = true;
      let url = "/api/v2/aggregate/indvidual/memberlogin/" + this.individualguid + "?scope=global";
      return axios.get(url).then((response) => {
        this.memberlogin = response.data.data;
        this.memberLoginName = this.memberlogin[0].name;
      }).finally(() => {
        this.loading = false;
      });
    },
    openDialog(id) {
      this.dialogConfirm = true;
    },
    sendEmail() {
      this.loading = true;
      this.dialogConfirm = false;
      let url = "/api/v2/aggregate/individual/sendEmail/" + this.memberIds[0].MemberId;
      let formData = new FormData();
      return axios.post(url, formData).then(() => {
        this.message = "Email sent successfully";
        this.dialog = true;
      }).catch(() => {
        this.message = "Something went wrong, please contact support team";
        this.dialog = true;
      }).finally(() => {
        this.loading = false;
      });
    },
    requestNewCard() {
      this.loading = true;
      if (this.memberIds[0] != null) {
        this.editableMembershipCard = this.memberIds[0];
        this.editableMembershipCard.IsReplacementCardRequested = true;
        this.editableMembershipCard.ReplacementCardRequestedDate = /* @__PURE__ */ new Date();
        return axios.put("/api/v2/MemberIdMapping/" + this.editableMembershipCard.MemberIdMappingId, this.editableMembershipCard).then((response) => {
          this.getDataFromApi();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Your request has been submitted!";
          this.alertTextDesc = 'The selected member will be sent a new card in the next card run. Replacement cards are processed on the 20th of the month, and then printed and mailed - this can take three-four weeks, depending on volume and USPS mail-times.<br />Printing a temporary membership card: You can print a temporary card by going to <a href="https://members.aft.org/members/login">https://members.aft.org/members/login</a>. Once you create an account, you will then have the option to print a temporary card.';
        }).finally(() => {
          this.loading = false;
        });
      }
    },
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    }
  }
};
const _hoisted_1$C = { key: 0 };
const _hoisted_2$z = { key: 0 };
const _hoisted_3$t = { key: 1 };
const _hoisted_4$r = { key: 0 };
const _hoisted_5$o = { key: 1 };
const _hoisted_6$m = { key: 2 };
function _sfc_render$T(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[7] || (_cache[7] = [
          createTextVNode(" Membership Card Tracking ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          this.memberIds && this.memberIds.length > 0 ? (openBlock(), createBlock(VRow, { key: 0 }, {
            default: withCtx(() => [
              createVNode(VCol, { class: "d-flex justify-end ga-2" }, {
                default: withCtx(() => [
                  createVNode(VBtn, {
                    size: "small",
                    onClick: _cache[0] || (_cache[0] = ($event) => $options.requestNewCard())
                  }, {
                    default: withCtx(() => _cache[8] || (_cache[8] = [
                      createTextVNode("Request New Card")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VBtn, {
                    size: "small",
                    color: "primary",
                    onClick: _cache[1] || (_cache[1] = ($event) => $options.openDialog(_ctx.id))
                  }, {
                    append: withCtx(() => [
                      createVNode(VImg, {
                        height: "24",
                        width: "24",
                        src: "/images/mail.png"
                      })
                    ]),
                    default: withCtx(() => [
                      _cache[9] || (_cache[9] = createTextVNode(" Request Digital Membership Card "))
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "mobile-detail-col" }, {
                default: withCtx(() => [
                  createVNode(VAlert, {
                    type: $data.alertType,
                    modelValue: $data.alert,
                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.alert = $event),
                    closable: "",
                    "close-text": "Dismiss",
                    title: $data.alertText
                  }, {
                    default: withCtx(() => [
                      createTextVNode(
                        toDisplayString($data.alertTextDesc),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["type", "modelValue", "title"]),
                  createVNode(VDataTable, {
                    headers: $data.headers,
                    items: $data.memberIds,
                    "mobile-breakpoint": 992,
                    class: "v-outlined mobile-global-card-table"
                  }, {
                    [`item.CardMailDate`]: withCtx(({ item }) => [
                      createTextVNode(
                        toDisplayString(_ctx.$filters.formatDate(item.CardMailDate)),
                        1
                        /* TEXT */
                      )
                    ]),
                    [`item.CardActivationDate`]: withCtx(({ item }) => [
                      createTextVNode(
                        toDisplayString(_ctx.$filters.formatDate(item.CardActivationDate)),
                        1
                        /* TEXT */
                      )
                    ]),
                    [`item.IsReplacementCardRequested`]: withCtx(({ item }) => [
                      item.IsReplacementCardRequested ? (openBlock(), createElementBlock("span", _hoisted_1$C, " Yes ")) : createCommentVNode("v-if", true)
                    ]),
                    [`item.ReplacementCardRequestedDate`]: withCtx(({ item }) => [
                      createTextVNode(
                        toDisplayString(_ctx.$filters.formatDate(item.ReplacementCardRequestedDate)),
                        1
                        /* TEXT */
                      )
                    ]),
                    [`item.DigitalCardEmailSentDate`]: withCtx(({ item }) => [
                      item.DigitalCardEmailSentDate ? (openBlock(), createElementBlock(
                        "span",
                        _hoisted_2$z,
                        toDisplayString(_ctx.$filters.formatDate(item.DigitalCardEmailSentDate)),
                        1
                        /* TEXT */
                      )) : (openBlock(), createElementBlock("span", _hoisted_3$t, " Never Emailed "))
                    ]),
                    [`item.DigitalCardInstalledDate`]: withCtx(({ item }) => [
                      item.DigitalCardRemovedDate ? (openBlock(), createElementBlock("span", _hoisted_4$r, " Uninstalled ")) : item.DigitalCardInstalledDate ? (openBlock(), createElementBlock("span", _hoisted_5$o, " Installed ")) : (openBlock(), createElementBlock("span", _hoisted_6$m, " Uninstalled "))
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["headers", "items"]),
                  createVNode(VCard, null, {
                    default: withCtx(() => [
                      createVNode(VCardTitle, null, {
                        default: withCtx(() => _cache[10] || (_cache[10] = [
                          createTextVNode("Member Benefit Login Information")
                        ])),
                        _: 1
                        /* STABLE */
                      }),
                      $data.memberLoginName ? (openBlock(), createBlock(VCardText, { key: 0 }, {
                        default: withCtx(() => [
                          createBaseVNode("p", null, [
                            _cache[11] || (_cache[11] = createBaseVNode(
                              "b",
                              null,
                              "Username:",
                              -1
                              /* HOISTED */
                            )),
                            createTextVNode(
                              " " + toDisplayString($data.memberLoginName),
                              1
                              /* TEXT */
                            )
                          ])
                        ]),
                        _: 1
                        /* STABLE */
                      })) : createCommentVNode("v-if", true)
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VDialog, {
            modelValue: $data.dialogConfirm,
            "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.dialogConfirm = $event),
            persistent: "",
            "max-width": "290"
          }, {
            default: withCtx(() => [
              createVNode(VCard, null, {
                default: withCtx(() => [
                  createVNode(VCardTitle, { class: "text-h5" }, {
                    default: withCtx(() => _cache[12] || (_cache[12] = [
                      createTextVNode(" Are you sure ")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCardText, null, {
                    default: withCtx(() => _cache[13] || (_cache[13] = [
                      createTextVNode("Do you want to send email?")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCardActions, null, {
                    default: withCtx(() => [
                      createVNode(VSpacer),
                      createVNode(VBtn, {
                        color: "red-darken-1",
                        variant: "text",
                        onClick: _cache[3] || (_cache[3] = ($event) => $data.dialogConfirm = false)
                      }, {
                        default: withCtx(() => _cache[14] || (_cache[14] = [
                          createTextVNode(" Cancel ")
                        ])),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VBtn, {
                        color: "green-darken-1",
                        variant: "text",
                        onClick: $options.sendEmail
                      }, {
                        append: withCtx(() => [
                          createVNode(VImg, {
                            height: "24",
                            width: "24",
                            src: "/images/mail.png"
                          })
                        ]),
                        default: withCtx(() => [
                          _cache[15] || (_cache[15] = createTextVNode(" Send "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["onClick"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }, 8, ["modelValue"]),
          createVNode(VDialog, {
            modelValue: $data.dialog,
            "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.dialog = $event),
            persistent: "",
            "max-width": "290"
          }, {
            default: withCtx(() => [
              createVNode(VCard, null, {
                default: withCtx(() => [
                  createVNode(VCardText, null, {
                    default: withCtx(() => [
                      createTextVNode(
                        toDisplayString($data.message),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCardActions, null, {
                    default: withCtx(() => [
                      createVNode(VSpacer),
                      createVNode(VBtn, {
                        color: "green-darken-1",
                        variant: "text",
                        onClick: _cache[5] || (_cache[5] = ($event) => $data.dialog = false)
                      }, {
                        default: withCtx(() => _cache[16] || (_cache[16] = [
                          createTextVNode(" Dismiss ")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }, 8, ["modelValue"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const MembershipCardComponent = /* @__PURE__ */ _export_sfc(_sfc_main$T, [["render", _sfc_render$T], ["__file", "/var/www/html/resources/js/components/Individual/Partial/MembershipCardComponent.vue"]]);
const _sfc_main$S = {
  name: "PoliticalDataComponent",
  data() {
    return {
      flipped: false
    };
  },
  props: {
    individual: {
      type: Object,
      required: true
    }
  }
};
const _hoisted_1$B = { class: "data-container" };
const _hoisted_2$y = { class: "data-value" };
const _hoisted_3$s = { class: "data-container" };
const _hoisted_4$q = { class: "data-value" };
const _hoisted_5$n = { class: "data-container" };
const _hoisted_6$l = { class: "data-value" };
const _hoisted_7$i = { class: "data-container" };
const _hoisted_8$d = { class: "data-value" };
const _hoisted_9$d = { class: "data-container" };
const _hoisted_10$b = { class: "data-value" };
const _hoisted_11$b = { class: "data-container" };
const _hoisted_12$b = { class: "data-value" };
const _hoisted_13$9 = { class: "data-container" };
const _hoisted_14$9 = { class: "data-value" };
const _hoisted_15$9 = { class: "data-container" };
const _hoisted_16$9 = { class: "data-value" };
const _hoisted_17$8 = { key: 0 };
const _hoisted_18$8 = { key: 1 };
const _hoisted_19$8 = { class: "data-container" };
const _hoisted_20$7 = { class: "data-value" };
const _hoisted_21$7 = { key: 0 };
function _sfc_render$S(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanel, null, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[0] || (_cache[0] = [
          createTextVNode(" Political Data ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                md: "6",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_1$B, [
                    _cache[1] || (_cache[1] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Congressional District:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode(
                      "div",
                      _hoisted_2$y,
                      toDisplayString($props.individual.CongressionalDistrict),
                      1
                      /* TEXT */
                    )
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                md: "6",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_3$s, [
                    _cache[2] || (_cache[2] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "State Senate District:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode(
                      "div",
                      _hoisted_4$q,
                      toDisplayString($props.individual.StateSenateDistrict),
                      1
                      /* TEXT */
                    )
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                md: "6",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_5$n, [
                    _cache[3] || (_cache[3] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "State House District:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode(
                      "div",
                      _hoisted_6$l,
                      toDisplayString($props.individual.StateHouseDistrict),
                      1
                      /* TEXT */
                    )
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                md: "6",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_7$i, [
                    _cache[4] || (_cache[4] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Residential School District:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode(
                      "div",
                      _hoisted_8$d,
                      toDisplayString($props.individual.ResidentialSchoolDistrict),
                      1
                      /* TEXT */
                    )
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                md: "6",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_9$d, [
                    _cache[5] || (_cache[5] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Voter Precinct:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode(
                      "div",
                      _hoisted_10$b,
                      toDisplayString($props.individual.VoterPrecinct),
                      1
                      /* TEXT */
                    )
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                md: "6",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_11$b, [
                    _cache[6] || (_cache[6] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Township:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode(
                      "div",
                      _hoisted_12$b,
                      toDisplayString($props.individual.Township),
                      1
                      /* TEXT */
                    )
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                md: "6",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_13$9, [
                    _cache[7] || (_cache[7] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Ward:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode(
                      "div",
                      _hoisted_14$9,
                      toDisplayString($props.individual.Ward),
                      1
                      /* TEXT */
                    )
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                md: "6",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_15$9, [
                    _cache[8] || (_cache[8] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Is Registered to Vote:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode("div", _hoisted_16$9, [
                      $props.individual.IsRegisteredVoter == true ? (openBlock(), createElementBlock("span", _hoisted_17$8, " Yes ")) : createCommentVNode("v-if", true),
                      $props.individual.IsRegisteredVoter == false ? (openBlock(), createElementBlock("span", _hoisted_18$8, " No ")) : createCommentVNode("v-if", true)
                    ])
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                md: "6",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_19$8, [
                    _cache[9] || (_cache[9] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Party Affiliation:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode("div", _hoisted_20$7, [
                      $props.individual.PoliticalParty ? (openBlock(), createElementBlock(
                        "span",
                        _hoisted_21$7,
                        toDisplayString($props.individual.PoliticalParty.PoliticalPartyName),
                        1
                        /* TEXT */
                      )) : createCommentVNode("v-if", true)
                    ])
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                md: "6",
                lg: "4"
              }, {
                default: withCtx(() => [
                  createCommentVNode(' <div class="data-container">\n                        <div class="data-tag">IsPoliticallyActive:</div>\n                        <div class="data-value">\n                            <span v-if="individual.IsPoliticallyActive == true">\n                                Yes\n                            </span>\n                            <span v-if="individual.IsPoliticallyActive == false">\n                                No\n                            </span>\n                        </div>\n                    </div> ')
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const PoliticalDataComponent = /* @__PURE__ */ _export_sfc(_sfc_main$S, [["render", _sfc_render$S], ["__file", "/var/www/html/resources/js/components/Individual/Partial/PoliticalDataComponent.vue"]]);
const _sfc_main$R = {
  name: "QuickCommentsComponent",
  mixins: [headersMixin],
  components: {
    FlipCard,
    IndividualAutocomplete
  },
  props: {
    individual: {
      type: Object,
      default: {}
    }
  },
  data() {
    return {
      menu1: false,
      flipped: false,
      showDialog: false,
      headers: [
        { title: "Rating", value: "Rating", visible: true, sortable: false },
        { title: "Comment", value: "IndividualQuickComment", visible: true, sortable: false },
        { title: "Contact Date", value: "ContactDate", visible: true, sortable: false },
        { title: "Contact Type", value: "IndividualAssessment.AssessmentContactType.AssessmentContactTypeName", visible: true, sortable: false },
        { title: "Submitted By", value: "SubmittedByIndividual", visible: true, sortable: false },
        { title: "Actions", value: "actions", visible: true, sortable: false }
      ],
      quickComments: [],
      totalQuickComments: 0,
      loading: false,
      assessmentContactTypes: [],
      addingAssessment: this.newAssessment(),
      addingComment: this.newComment(),
      addingAction: this.newAction(),
      rules: {
        required: (value) => !!value || "Required.",
        requireOne: () => this.addingComment.IndividualQuickComment !== "" || this.addingAssessment.Rating !== null || this.addingAction.Action1 !== null || this.addingAction.Action2 !== null || this.addingAction.Action3 !== null || this.addingAction.Action4 !== null || this.addingAction.Action5 !== null || "Comment or Assessment or Action Required",
        requiredWithAssessment: (value) => !!this.addingAssessment.Rating ? !!value || "Required." : true
      },
      valid: true,
      affiliateId: this.getAffiliateId(),
      action: null,
      actionHeaders: [
        { title: "Actions", value: "actions", visible: true, sortable: false },
        { title: "Yes", value: "yes", visible: true, sortable: false },
        { title: "No", value: "no", visible: true, sortable: false }
      ]
    };
  },
  computed: {
    computedAction: function computedAction() {
      const actions2 = [];
      if (this.action) {
        actions2.push({ actions: "1", yes: this.action.Action1, no: this.action.Action1 == null || this.action.Action1 === "" ? null : !this.action.Action1 });
        actions2.push({ actions: "2", yes: this.action.Action2, no: this.action.Action2 == null || this.action.Action2 === "" ? null : !this.action.Action2 });
        actions2.push({ actions: "3", yes: this.action.Action3, no: this.action.Action3 == null || this.action.Action3 === "" ? null : !this.action.Action3 });
        actions2.push({ actions: "4", yes: this.action.Action4, no: this.action.Action4 == null || this.action.Action4 === "" ? null : !this.action.Action4 });
        actions2.push({ actions: "5", yes: this.action.Action5, no: this.action.Action5 == null || this.action.Action5 === "" ? null : !this.action.Action5 });
      }
      return actions2;
    }
  },
  mounted() {
    this.id = this.$route.params.id;
    this.addingAssessment.IndividualId = this.addingComment.IndividualId = this.addingAction.IndividualId = this.id;
    axios.get("/api/v2/assessmentContactType").then((response) => {
      console.log({ types: response.data.data });
      this.assessmentContactTypes = response.data.data;
    });
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      axios.get("/api/v2/aggregate/individual/individualQuickComment/" + this.id + "?scope=global").then((response) => {
        this.quickComments = response.data.data;
        this.totalQuickComments = response.data.meta.total;
      }).finally(() => {
        this.loading = false;
      });
    },
    getActionsFromApi(id) {
      this.loading = true;
      axios.get("/api/v2/aggregate/individual/action/" + id + "?scope=global").then((response) => {
        this.action = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    onShowActions(item) {
      console.log(item);
      this.action = null;
      this.showDialog = true;
      this.getActionsFromApi(item.IndividualQuickCommentId);
    },
    onCloseActionsBtn() {
      console.log("close actions");
      this.showDialog = false;
    },
    async onSave(event) {
      this.loading = true;
      const results = await event;
      this.loading = false;
      if (!results.valid) {
        return;
      }
      if (this.addingComment.IndividualQuickComment.length === 0) {
        this.addingComment.IndividualQuickComment = "no comment";
      }
      axios.post("/api/v2/IndividualQuickComment", this.addingComment).then((res) => {
        const comment = res.data.data;
        if (this.addingAssessment.Rating && this.addingAssessment.Rating >= 1) {
          this.addingAssessment.Rating = this.addingAssessment.Rating - 1;
          this.addingAssessment.IndividualQuickCommentId = comment.IndividualQuickCommentId;
          this.addingAssessment.ContactDate = comment.CommentDate;
          this.addingAssessment.SubmittedByIndividualId = comment.SubmittedByIndividualId;
          axios.post("/api/v2/individualAssessment", this.addingAssessment).then(() => {
            this.getDataFromApi();
            this.flipped = false;
          });
        } else {
          this.getDataFromApi();
          this.flipped = false;
        }
        if (this.addingAction.Action1 !== null || this.addingAction.Action2 !== null || this.addingAction.Action3 !== null || this.addingAction.Action4 !== null || this.addingAction.Action5 !== null) {
          this.addingAction.IndividualQuickCommentId = comment.IndividualQuickCommentId;
          this.addingAction.ActionDate = comment.CommentDate;
          this.addingAction.SubmittedByIndividualId = comment.SubmittedByIndividualId;
          axios.post("/api/v2/action", this.addingAction).then((res2) => {
            this.action = res2.data.data;
          });
        }
        if (!this.addingAssessment.Rating) {
          this.getDataFromApi();
          this.flipped = false;
        }
      });
    },
    onCancel() {
      this.flipped = false;
    },
    newAssessment() {
      return {
        IndividualId: this.id,
        Rating: null,
        ContactDate: (/* @__PURE__ */ new Date()).toISOString().substr(0, 10),
        SubmittedByIndividualId: null,
        AssessmentContactTypeId: 0,
        IndividualQuickCommentId: 0
      };
    },
    newComment() {
      return {
        IndividualQuickComment: "",
        IndividualId: this.id,
        CommentDate: (/* @__PURE__ */ new Date()).toISOString().substr(0, 10),
        SubmittedByIndividualId: null
      };
    },
    newAction() {
      return {
        SubmittedByIndividualId: null,
        IndividualId: this.id,
        IndividualQuickCommentId: 0,
        Action1: null,
        Action2: null,
        Action3: null,
        Action4: null,
        Action5: null,
        ActionDate: null
      };
    },
    getRatingText(rating) {
      if (rating === 1) {
        return "N/A";
      }
      return rating - 1;
    },
    getAffiliateId() {
      return this.$store.getters["user/selectedAffiliate"].AffiliateId;
    },
    resetRadios() {
      this.addingAction.Action1 = null;
      this.addingAction.Action2 = null;
      this.addingAction.Action3 = null;
      this.addingAction.Action4 = null;
      this.addingAction.Action5 = null;
      this.addingAssessment.Rating = null;
    },
    flipOn() {
      this.flipped = true;
      this.addingAssessment = this.newAssessment();
      this.addingComment = this.newComment();
      this.addingAction = this.newAction();
    }
  }
};
const _hoisted_1$A = { key: 0 };
const _hoisted_2$x = { key: 0 };
const _hoisted_3$r = { class: "data-container" };
const _hoisted_4$p = { class: "data-value" };
function _sfc_render$R(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_IndividualAutocomplete = resolveComponent("IndividualAutocomplete");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[19] || (_cache[19] = [
          createTextVNode(" Quick Comments and Assessments ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(VCard, null, {
                default: withCtx(() => [
                  createVNode(VCardText, null, {
                    default: withCtx(() => [
                      createVNode(VDataTableServer, {
                        headers: _ctx.getHeaders($data.headers),
                        items: $data.quickComments,
                        "items-length": $data.totalQuickComments,
                        loading: $data.loading,
                        class: "elevation-1",
                        "hide-default-footer": true
                      }, {
                        [`item.Rating`]: withCtx(({ item }) => {
                          var _a2;
                          return [
                            createVNode(VChip, {
                              variant: "elevated",
                              color: ((_a2 = item == null ? void 0 : item.IndividualAssessment) == null ? void 0 : _a2.Rating) ? "primary" : "default"
                            }, {
                              default: withCtx(() => {
                                var _a3;
                                return [
                                  createTextVNode(
                                    toDisplayString(((_a3 = item == null ? void 0 : item.IndividualAssessment) == null ? void 0 : _a3.Rating) ?? "N/A"),
                                    1
                                    /* TEXT */
                                  )
                                ];
                              }),
                              _: 2
                              /* DYNAMIC */
                            }, 1032, ["color"])
                          ];
                        }),
                        [`item.IndividualQuickComment`]: withCtx(({ item }) => [
                          createBaseVNode(
                            "span",
                            null,
                            toDisplayString(item.IndividualQuickComment),
                            1
                            /* TEXT */
                          )
                        ]),
                        [`item.SubmittedByIndividual`]: withCtx(({ item }) => [
                          item.SubmittedByIndividual ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_1$A,
                            toDisplayString(item.SubmittedByIndividual.FirstName) + " " + toDisplayString(item.SubmittedByIndividual.LastName),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ]),
                        [`item.IndividualAssessment`]: withCtx(({ item }) => [
                          item.IndividualAssessment ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_2$x,
                            toDisplayString(item.IndividualAssessment.AssessmentContactType.AssessmentContactTypeName),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ]),
                        [`item.ContactDate`]: withCtx(({ item }) => [
                          createBaseVNode(
                            "span",
                            null,
                            toDisplayString(_ctx.$filters.formatDate(item.CommentDate)),
                            1
                            /* TEXT */
                          )
                        ]),
                        [`item.actions`]: withCtx(({ item }) => [
                          createBaseVNode("span", null, [
                            createVNode(VBtn, {
                              onClick: ($event) => $options.onShowActions(item)
                            }, {
                              default: withCtx(() => _cache[20] || (_cache[20] = [
                                createTextVNode("View")
                              ])),
                              _: 2
                              /* DYNAMIC */
                            }, 1032, ["onClick"])
                          ])
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["headers", "items", "items-length", "loading"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCardActions, null, {
                    default: withCtx(() => [
                      createVNode(VSpacer),
                      createVNode(VBtn, {
                        color: "primary",
                        onClick: _cache[0] || (_cache[0] = ($event) => $options.flipOn()),
                        variant: "elevated"
                      }, {
                        default: withCtx(() => _cache[21] || (_cache[21] = [
                          createTextVNode("ADD")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VDialog, {
                modelValue: $data.showDialog,
                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.showDialog = $event),
                width: "500"
              }, {
                default: withCtx(() => [
                  createVNode(VCard, null, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, { class: "text-right" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    size: "small",
                                    color: "default",
                                    onClick: _cache[1] || (_cache[1] = ($event) => $options.onCloseActionsBtn())
                                  }, {
                                    default: withCtx(() => _cache[22] || (_cache[22] = [
                                      createTextVNode("Back")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, null, {
                                default: withCtx(() => [
                                  createVNode(VDataTable, {
                                    headers: _ctx.getHeaders($data.actionHeaders),
                                    items: $options.computedAction,
                                    loading: $data.loading,
                                    "mobile-breakpoint": 992,
                                    class: "elevation-1 mobile-global-card-table",
                                    "hide-default-footer": true
                                  }, {
                                    [`item.yes`]: withCtx(({ item }) => [
                                      item.yes ? (openBlock(), createBlock(VIcon, {
                                        key: 0,
                                        size: "lg",
                                        icon: "mdi:mdi-check-circle",
                                        color: "green"
                                      })) : createCommentVNode("v-if", true)
                                    ]),
                                    [`item.no`]: withCtx(({ item }) => [
                                      item.no ? (openBlock(), createBlock(VIcon, {
                                        key: 0,
                                        size: "lg",
                                        icon: "mdi:mdi-close-circle",
                                        color: "red"
                                      })) : createCommentVNode("v-if", true)
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  }, 1032, ["headers", "items", "loading"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }, 8, ["modelValue"])
            ]),
            back: withCtx(() => [
              createVNode(VForm, {
                ref: "form",
                modelValue: $data.valid,
                "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => $data.valid = $event),
                "validate-on": "submit",
                onSubmit: withModifiers($options.onSave, ["prevent"])
              }, {
                default: withCtx(() => [
                  createVNode(VCard, null, {
                    default: withCtx(() => [
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, null, {
                                default: withCtx(() => [
                                  createBaseVNode("div", _hoisted_3$r, [
                                    _cache[23] || (_cache[23] = createBaseVNode(
                                      "div",
                                      { class: "data-tag" },
                                      "Comment:",
                                      -1
                                      /* HOISTED */
                                    )),
                                    createBaseVNode("div", _hoisted_4$p, [
                                      createVNode(VTextarea, {
                                        variant: "outlined",
                                        modelValue: $data.addingComment.IndividualQuickComment,
                                        "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.addingComment.IndividualQuickComment = $event),
                                        rules: [$data.rules.requireOne]
                                      }, null, 8, ["modelValue", "rules"])
                                    ])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, null, {
                                default: withCtx(() => [
                                  createVNode(VMenu, {
                                    title: "Contact Date:",
                                    modelValue: $data.menu1,
                                    "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.menu1 = $event),
                                    "close-on-content-click": false,
                                    offset: 40,
                                    transition: "scale-transition",
                                    "min-width": "290px"
                                  }, {
                                    activator: withCtx(({ props }) => [
                                      createVNode(VTextField, mergeProps({
                                        modelValue: $data.addingComment.CommentDate,
                                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.addingComment.CommentDate = $event),
                                        hint: "YYYY-MM-DD"
                                      }, props, { variant: "underlined" }), null, 16, ["modelValue"])
                                    ]),
                                    default: withCtx(() => [
                                      createVNode(VDatePicker, {
                                        modelValue: $data.addingComment.CommentDate,
                                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.addingComment.CommentDate = $event),
                                        onInput: _cache[6] || (_cache[6] = ($event) => $data.menu1 = false)
                                      }, null, 8, ["modelValue"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, null, {
                                default: withCtx(() => [
                                  createVNode(_component_IndividualAutocomplete, {
                                    modelValue: $data.addingComment.SubmittedByIndividualId,
                                    "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.addingComment.SubmittedByIndividualId = $event),
                                    individual: "",
                                    affiliateId: $data.affiliateId,
                                    label: "Submitted By",
                                    affiliateParentFilter: true,
                                    rules: [$data.rules.required]
                                  }, null, 8, ["modelValue", "affiliateId", "rules"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, null, {
                                default: withCtx(() => [
                                  createVNode(VLabel, null, {
                                    default: withCtx(() => _cache[24] || (_cache[24] = [
                                      createTextVNode("Assessment Rating:")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createBaseVNode("div", null, [
                                    createVNode(VRating, {
                                      modelValue: $data.addingAssessment.Rating,
                                      "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.addingAssessment.Rating = $event),
                                      length: "5",
                                      hover: ""
                                    }, {
                                      item: withCtx((props) => [
                                        createVNode(VChip, {
                                          class: "ma-1",
                                          size: "large",
                                          color: props.isFilled ? "primary" : "default",
                                          variant: "elevated"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(
                                              toDisplayString(props.index === 0 ? "N/A" : props.index),
                                              1
                                              /* TEXT */
                                            )
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        }, 1032, ["color"])
                                      ]),
                                      _: 1
                                      /* STABLE */
                                    }, 8, ["modelValue"])
                                  ])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, null, {
                                default: withCtx(() => [
                                  createVNode(VLabel, null, {
                                    default: withCtx(() => _cache[25] || (_cache[25] = [
                                      createTextVNode("Contact Type")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VSelect, {
                                    items: $data.assessmentContactTypes,
                                    "item-title": "AssessmentContactTypeName",
                                    "item-value": "AssessmentContactTypeId",
                                    modelValue: $data.addingAssessment.AssessmentContactTypeId,
                                    "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $data.addingAssessment.AssessmentContactTypeId = $event),
                                    rules: [$data.rules.requiredWithAssessment],
                                    variant: "underlined"
                                  }, null, 8, ["items", "modelValue", "rules"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, null, {
                                default: withCtx(() => [
                                  createVNode(VLabel, null, {
                                    default: withCtx(() => _cache[26] || (_cache[26] = [
                                      createTextVNode("Actions")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, {
                                cols: "6",
                                md: "4",
                                lg: "2"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VRadioGroup, {
                                    modelValue: $data.addingAction.Action1,
                                    "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.addingAction.Action1 = $event)
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VLabel, null, {
                                        default: withCtx(() => _cache[27] || (_cache[27] = [
                                          createTextVNode("1")
                                        ])),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VRadio, {
                                        label: "yes",
                                        value: "1"
                                      }),
                                      createVNode(VRadio, {
                                        label: "refused",
                                        value: "0"
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, {
                                cols: "6",
                                md: "4",
                                lg: "2"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VRadioGroup, {
                                    modelValue: $data.addingAction.Action2,
                                    "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => $data.addingAction.Action2 = $event)
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VLabel, null, {
                                        default: withCtx(() => _cache[28] || (_cache[28] = [
                                          createTextVNode("2")
                                        ])),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VRadio, {
                                        label: "yes",
                                        value: "1"
                                      }),
                                      createVNode(VRadio, {
                                        label: "refused",
                                        value: "0"
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, {
                                cols: "6",
                                md: "4",
                                lg: "2"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VRadioGroup, {
                                    modelValue: $data.addingAction.Action3,
                                    "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => $data.addingAction.Action3 = $event)
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VLabel, null, {
                                        default: withCtx(() => _cache[29] || (_cache[29] = [
                                          createTextVNode("3")
                                        ])),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VRadio, {
                                        label: "yes",
                                        value: "1"
                                      }),
                                      createVNode(VRadio, {
                                        label: "refused",
                                        value: "0"
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, {
                                cols: "6",
                                md: "4",
                                lg: "2"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VRadioGroup, {
                                    modelValue: $data.addingAction.Action4,
                                    "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => $data.addingAction.Action4 = $event)
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VLabel, null, {
                                        default: withCtx(() => _cache[30] || (_cache[30] = [
                                          createTextVNode("4")
                                        ])),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VRadio, {
                                        label: "yes",
                                        value: "1"
                                      }),
                                      createVNode(VRadio, {
                                        label: "refused",
                                        value: "0"
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, {
                                cols: "6",
                                md: "4",
                                lg: "2"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VRadioGroup, {
                                    modelValue: $data.addingAction.Action5,
                                    "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => $data.addingAction.Action5 = $event)
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VLabel, null, {
                                        default: withCtx(() => _cache[31] || (_cache[31] = [
                                          createTextVNode("5")
                                        ])),
                                        _: 1
                                        /* STABLE */
                                      }),
                                      createVNode(VRadio, {
                                        label: "yes",
                                        value: "1"
                                      }),
                                      createVNode(VRadio, {
                                        label: "refused",
                                        value: "0"
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, null, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "default",
                                    onClick: _cache[16] || (_cache[16] = ($event) => $options.resetRadios())
                                  }, {
                                    default: withCtx(() => _cache[32] || (_cache[32] = [
                                      createTextVNode("Reset")
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VCardActions, null, {
                        default: withCtx(() => [
                          createVNode(VSpacer),
                          createVNode(VBtn, {
                            color: "default",
                            onClick: _cache[17] || (_cache[17] = ($event) => $options.onCancel()),
                            variant: "elevated"
                          }, {
                            default: withCtx(() => _cache[33] || (_cache[33] = [
                              createTextVNode("Cancel")
                            ])),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VBtn, {
                            color: "green",
                            type: "submit",
                            variant: "elevated"
                          }, {
                            default: withCtx(() => _cache[34] || (_cache[34] = [
                              createTextVNode("Save")
                            ])),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }, 8, ["modelValue", "onSubmit"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const QuickCommentsComponent = /* @__PURE__ */ _export_sfc(_sfc_main$R, [["render", _sfc_render$R], ["__scopeId", "data-v-7c1e0767"], ["__file", "/var/www/html/resources/js/components/Individual/Partial/QuickCommentsComponent.vue"]]);
const _sfc_main$Q = {
  name: "ViewUnionRelationshipComponent",
  props: {
    individualCope: {
      type: Array,
      required: true
    },
    individualEmployers: {
      type: Array,
      required: true
    },
    individualAffiliates: {
      type: Array,
      required: true
    },
    individual: {
      required: true
    },
    clicked: {
      type: Boolean
    }
  },
  data() {
    return {
      showRelationship: "current",
      currentPanel: 0,
      pastPanel: -1,
      alert: false,
      alertType: "success",
      alertText: ""
    };
  },
  computed: {
    selectedAffiliate() {
      return this.$store.getters["user/selectedAffiliate"];
    },
    activeIndividualAffiliates() {
      return this.individualAffiliates.filter(
        (individualAffiliate) => !individualAffiliate.EndDate || compareAsc(individualAffiliate.EndDate, /* @__PURE__ */ new Date()) > 0
        // now before EndDate
      );
    },
    endedIndividualAffiliates() {
      return this.individualAffiliates.filter(
        (individualAffiliate) => individualAffiliate.EndDate && compareAsc(/* @__PURE__ */ new Date(), individualAffiliate.EndDate) > 0
        // now after EndDate
      );
    },
    activeEmployments() {
      return this.individualEmployers.filter(
        (individualEmployer) => !individualEmployer.EndDate || compareAsc(individualEmployer.EndDate, /* @__PURE__ */ new Date()) > 0
        // now before EndDate
      );
    },
    copeWithProperty(propertyName) {
      return this.individualCope.filter((cope) => cope[propertyName]);
    },
    showPast() {
      return this.showRelationship === "past" ? 0 : -1;
    }
  },
  mounted() {
    setTimeout(this.isClicked, 5e3);
  },
  methods: {
    isClicked() {
      if (!this.clicked) {
        const button = document.getElementById("editBtn");
        button.click(function() {
          console.log("you are here");
        });
      }
    },
    reactivate(individualAffiliate) {
      return axios.put("/api/v2/custom/individualaffiliate/" + individualAffiliate.IndividualAffiliateId + "/reactivate?include=Affiliate,UnionRelationshipType,LocalDuesCategory,IndividualDeactivationReason,PaymentMethod,PaymentFrequency").then((response) => {
        if (response.data.data.statusCode === 422) {
          this.alert = true;
          this.alertType = "error";
          this.alertText = response.data.data.message;
          return;
        }
        this.$emit("individual-affiliate-reactivated", response.data.data);
      });
    },
    createNew() {
      this.$emit("edit-individual-affiliate", {});
    },
    fieldVisible(fieldName, unionRelationship) {
      switch (fieldName) {
        case "Dues category":
          return unionRelationship.UnionRelationshipTypeName === "Member" || unionRelationship.UnionRelationshipTypeName === "Agency Fee Payer" || unionRelationship.UnionRelationshipTypeName === "Retired Member";
        case "Cope":
          return unionRelationship.UnionRelationshipTypeName === "Member" && this.selectedAffiliate.hasCope;
        case "Establish":
          return unionRelationship.UnionRelationshipTypeName === "Retired Member";
      }
      return false;
    },
    hasChapter(employers) {
      return employers ? employers.filter((employer) => {
        var _a2;
        return (_a2 = employer == null ? void 0 : employer.Employer) == null ? void 0 : _a2.Chapter;
      }) : [];
    },
    hasUnit(employers) {
      return employers ? employers.filter((employer) => {
        var _a2;
        return (_a2 = employer == null ? void 0 : employer.LocalJobClass) == null ? void 0 : _a2.Unit;
      }) : [];
    }
  }
};
const _hoisted_1$z = { key: 0 };
const _hoisted_2$w = { key: 1 };
const _hoisted_3$q = { class: "data-container" };
const _hoisted_4$o = {
  key: 0,
  class: "data-value"
};
const _hoisted_5$m = { class: "data-container" };
const _hoisted_6$k = { class: "data-value" };
const _hoisted_7$h = {
  key: 0,
  class: "data-container"
};
const _hoisted_8$c = { class: "data-value" };
const _hoisted_9$c = { class: "data-container" };
const _hoisted_10$a = { class: "data-value" };
const _hoisted_11$a = { class: "data-container" };
const _hoisted_12$a = { class: "data-value" };
const _hoisted_13$8 = { key: 0 };
const _hoisted_14$8 = { class: "data-container" };
const _hoisted_15$8 = { class: "data-value" };
const _hoisted_16$8 = { key: 0 };
const _hoisted_17$7 = { class: "data-container" };
const _hoisted_18$7 = { class: "data-value" };
const _hoisted_19$7 = { key: 0 };
const _hoisted_20$6 = { class: "data-container" };
const _hoisted_21$6 = { class: "data-value" };
const _hoisted_22$6 = { class: "data-container" };
const _hoisted_23$6 = { class: "data-value" };
const _hoisted_24$6 = { class: "data-container" };
const _hoisted_25$6 = {
  key: 0,
  class: "data-value"
};
const _hoisted_26$6 = { class: "data-container" };
const _hoisted_27$6 = { class: "data-value" };
const _hoisted_28$6 = { key: 0 };
const _hoisted_29$6 = { key: 1 };
const _hoisted_30$6 = { class: "data-container" };
const _hoisted_31$6 = { class: "data-value" };
const _hoisted_32$4 = { key: 0 };
const _hoisted_33$4 = { key: 1 };
const _hoisted_34$3 = { key: 0 };
const _hoisted_35$3 = { key: 1 };
const _hoisted_36$3 = { class: "data-container" };
const _hoisted_37$3 = { class: "data-value" };
const _hoisted_38$2 = { class: "data-container" };
const _hoisted_39$2 = { class: "data-value" };
const _hoisted_40$2 = { class: "data-container" };
const _hoisted_41$2 = { class: "data-value" };
const _hoisted_42$2 = { class: "data-container" };
const _hoisted_43$2 = {
  key: 0,
  class: "data-value"
};
const _hoisted_44$2 = { class: "data-container" };
const _hoisted_45$2 = { class: "data-value" };
const _hoisted_46$2 = {
  key: 0,
  class: "data-container"
};
const _hoisted_47$2 = { class: "data-value" };
const _hoisted_48$2 = { class: "data-container" };
const _hoisted_49$2 = { class: "data-value" };
const _hoisted_50$2 = { class: "data-container" };
const _hoisted_51$2 = { class: "data-value" };
const _hoisted_52$2 = { key: 0 };
const _hoisted_53$2 = { key: 1 };
const _hoisted_54$2 = { class: "data-container" };
const _hoisted_55$2 = { class: "data-value" };
const _hoisted_56$2 = { class: "data-container" };
const _hoisted_57$2 = { class: "data-value" };
const _hoisted_58$2 = { class: "data-container" };
const _hoisted_59$2 = {
  key: 0,
  class: "data-value"
};
const _hoisted_60$2 = { class: "data-container" };
const _hoisted_61$2 = { class: "data-value" };
const _hoisted_62$2 = { key: 0 };
const _hoisted_63$2 = { class: "data-container" };
const _hoisted_64$2 = { class: "data-value" };
const _hoisted_65$2 = { key: 0 };
const _hoisted_66$2 = { class: "data-container" };
const _hoisted_67$2 = { class: "data-value" };
const _hoisted_68$1 = { key: 0 };
function _sfc_render$Q(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VAlert, {
        type: $data.alertType,
        modelValue: $data.alert,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
        closable: "",
        "close-text": "Dismiss"
      }, {
        default: withCtx(() => [
          createTextVNode(
            toDisplayString($data.alertText),
            1
            /* TEXT */
          )
        ]),
        _: 1
        /* STABLE */
      }, 8, ["type", "modelValue"]),
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, null, {
            default: withCtx(() => [
              createVNode(VBtnToggle, {
                modelValue: $data.showRelationship,
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.showRelationship = $event),
                density: "compact",
                variant: "outlined",
                class: "d-flex justify-end"
              }, {
                default: withCtx(() => [
                  createVNode(VBtn, {
                    size: "small",
                    value: "past"
                  }, {
                    default: withCtx(() => _cache[4] || (_cache[4] = [
                      createTextVNode("past and current")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VBtn, {
                    size: "small",
                    value: "current"
                  }, {
                    default: withCtx(() => _cache[5] || (_cache[5] = [
                      createTextVNode("only current")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }, 8, ["modelValue"])
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VRow, { class: "hidden-md-and-down" }, {
        default: withCtx(() => [
          createVNode(VCol, { class: "text-center" }, {
            default: withCtx(() => [
              $props.individualAffiliates.length > 0 && $data.pastPanel !== 0 && $options.activeIndividualAffiliates.length === 0 && $options.endedIndividualAffiliates.length > 0 ? (openBlock(), createElementBlock("p", _hoisted_1$z, " No current relationships. You can review if there are any past relationships.")) : createCommentVNode("v-if", true),
              $props.individualAffiliates.length > 0 && $data.pastPanel !== 0 && $options.activeIndividualAffiliates.length === 0 && $options.endedIndividualAffiliates.length === 0 ? (openBlock(), createElementBlock("p", _hoisted_2$w, " No current and past relationships.")) : createCommentVNode("v-if", true)
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      (openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList($options.activeIndividualAffiliates, (affiliate) => {
          return openBlock(), createBlock(
            VRow,
            {
              key: affiliate.AffiliateId
            },
            {
              default: withCtx(() => [
                createVNode(
                  VCol,
                  null,
                  {
                    default: withCtx(() => [
                      createVNode(
                        VExpansionPanels,
                        { "model-value": 0 },
                        {
                          default: withCtx(() => [
                            createVNode(
                              VExpansionPanel,
                              null,
                              {
                                default: withCtx(() => [
                                  createVNode(
                                    VExpansionPanelText,
                                    { class: "current-relationship" },
                                    {
                                      default: withCtx(() => [
                                        createVNode(
                                          VRow,
                                          null,
                                          {
                                            default: withCtx(() => [
                                              createVNode(
                                                VCol,
                                                { class: "d-flex justify-end ga-2" },
                                                {
                                                  default: withCtx(() => [
                                                    createVNode(VBtn, {
                                                      size: "small",
                                                      id: "editBtn",
                                                      onClick: ($event) => _ctx.$emit("edit-individual-affiliate", affiliate)
                                                    }, {
                                                      default: withCtx(() => [..._cache[6] || (_cache[6] = [
                                                        createTextVNode("Edit")
                                                      ])]),
                                                      _: 2
                                                      /* DYNAMIC */
                                                    }, 1032, ["onClick"]),
                                                    affiliate.UnionRelationshipType && $options.fieldVisible("Establish", affiliate.UnionRelationshipType) && $options.activeIndividualAffiliates.length <= 1 ? (openBlock(), createBlock(VBtn, {
                                                      key: 0,
                                                      size: "small",
                                                      onClick: _cache[2] || (_cache[2] = ($event) => $options.createNew())
                                                    }, {
                                                      default: withCtx(() => [..._cache[7] || (_cache[7] = [
                                                        createTextVNode("Establish new relationship")
                                                      ])]),
                                                      _: 1
                                                      /* STABLE */
                                                    })) : createCommentVNode("v-if", true)
                                                  ]),
                                                  _: 2
                                                  /* DYNAMIC */
                                                },
                                                1024
                                                /* DYNAMIC_SLOTS */
                                              )
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        ),
                                        createVNode(
                                          VRow,
                                          null,
                                          {
                                            default: withCtx(() => [
                                              createVNode(
                                                VCol,
                                                {
                                                  cols: "12",
                                                  lg: "3"
                                                },
                                                {
                                                  default: withCtx(() => [
                                                    createBaseVNode("div", _hoisted_3$q, [
                                                      _cache[8] || (_cache[8] = createBaseVNode(
                                                        "div",
                                                        { class: "data-tag" },
                                                        "Relationship:",
                                                        -1
                                                        /* HOISTED */
                                                      )),
                                                      affiliate.UnionRelationshipType ? (openBlock(), createElementBlock(
                                                        "div",
                                                        _hoisted_4$o,
                                                        toDisplayString(affiliate.UnionRelationshipType.UnionRelationshipTypeName),
                                                        1
                                                        /* TEXT */
                                                      )) : createCommentVNode("v-if", true)
                                                    ])
                                                  ]),
                                                  _: 2
                                                  /* DYNAMIC */
                                                },
                                                1024
                                                /* DYNAMIC_SLOTS */
                                              ),
                                              createVNode(VCol, {
                                                cols: "12",
                                                lg: "3"
                                              }, {
                                                default: withCtx(() => [
                                                  createBaseVNode("div", _hoisted_5$m, [
                                                    _cache[9] || (_cache[9] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "Member ID:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode("div", _hoisted_6$k, [
                                                      (openBlock(true), createElementBlock(
                                                        Fragment,
                                                        null,
                                                        renderList($props.individual.individualMembers, (member) => {
                                                          return openBlock(), createElementBlock(
                                                            "div",
                                                            mergeProps({ ref_for: true }, member, {
                                                              key: member.MemberIdMappingId
                                                            }),
                                                            toDisplayString(member.MemberId),
                                                            17
                                                            /* TEXT, FULL_PROPS */
                                                          );
                                                        }),
                                                        128
                                                        /* KEYED_FRAGMENT */
                                                      ))
                                                    ])
                                                  ])
                                                ]),
                                                _: 1
                                                /* STABLE */
                                              }),
                                              $options.activeEmployments.length > 0 ? (openBlock(), createBlock(VCol, {
                                                key: 0,
                                                cols: "12",
                                                lg: "3"
                                              }, {
                                                default: withCtx(() => [
                                                  _ctx.$store.getters["user/selectedAffiliate"].hasChapters ? (openBlock(), createElementBlock("div", _hoisted_7$h, [
                                                    _cache[10] || (_cache[10] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "Chapter:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode("div", _hoisted_8$c, [
                                                      (openBlock(true), createElementBlock(
                                                        Fragment,
                                                        null,
                                                        renderList($options.hasChapter($options.activeEmployments), (employer) => {
                                                          return openBlock(), createElementBlock(
                                                            "span",
                                                            mergeProps({ ref_for: true }, employer, {
                                                              key: employer.IndividualEmployerId
                                                            }),
                                                            toDisplayString(employer.Employer.Chapter.ChapterName),
                                                            17
                                                            /* TEXT, FULL_PROPS */
                                                          );
                                                        }),
                                                        128
                                                        /* KEYED_FRAGMENT */
                                                      ))
                                                    ])
                                                  ])) : createCommentVNode("v-if", true)
                                                ]),
                                                _: 1
                                                /* STABLE */
                                              })) : createCommentVNode("v-if", true),
                                              $options.activeEmployments.length > 0 ? (openBlock(), createBlock(VCol, {
                                                key: 1,
                                                cols: "12",
                                                lg: "3"
                                              }, {
                                                default: withCtx(() => [
                                                  createBaseVNode("div", _hoisted_9$c, [
                                                    _cache[11] || (_cache[11] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "Unit:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode("div", _hoisted_10$a, [
                                                      (openBlock(true), createElementBlock(
                                                        Fragment,
                                                        null,
                                                        renderList($options.hasUnit($options.activeEmployments), (employer) => {
                                                          return openBlock(), createElementBlock(
                                                            "span",
                                                            mergeProps({ ref_for: true }, employer, {
                                                              key: employer.IndividualEmployerId
                                                            }),
                                                            toDisplayString(employer.LocalJobClass.Unit.UnitName),
                                                            17
                                                            /* TEXT, FULL_PROPS */
                                                          );
                                                        }),
                                                        128
                                                        /* KEYED_FRAGMENT */
                                                      ))
                                                    ])
                                                  ])
                                                ]),
                                                _: 1
                                                /* STABLE */
                                              })) : createCommentVNode("v-if", true)
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        ),
                                        affiliate.UnionRelationshipType && $options.fieldVisible("Dues category", affiliate.UnionRelationshipType) ? (openBlock(), createBlock(
                                          VRow,
                                          { key: 0 },
                                          {
                                            default: withCtx(() => [
                                              createVNode(
                                                VCol,
                                                {
                                                  cols: "12",
                                                  lg: "4"
                                                },
                                                {
                                                  default: withCtx(() => [
                                                    createBaseVNode("div", _hoisted_11$a, [
                                                      _cache[12] || (_cache[12] = createBaseVNode(
                                                        "div",
                                                        { class: "data-tag" },
                                                        "Local dues Category:",
                                                        -1
                                                        /* HOISTED */
                                                      )),
                                                      createBaseVNode("div", _hoisted_12$a, [
                                                        affiliate.LocalDuesCategory ? (openBlock(), createElementBlock(
                                                          "span",
                                                          _hoisted_13$8,
                                                          toDisplayString(affiliate.LocalDuesCategory.LocalDuesCategoryName),
                                                          1
                                                          /* TEXT */
                                                        )) : createCommentVNode("v-if", true)
                                                      ])
                                                    ])
                                                  ]),
                                                  _: 2
                                                  /* DYNAMIC */
                                                },
                                                1024
                                                /* DYNAMIC_SLOTS */
                                              ),
                                              createVNode(
                                                VCol,
                                                {
                                                  cols: "12",
                                                  lg: "4"
                                                },
                                                {
                                                  default: withCtx(() => [
                                                    createBaseVNode("div", _hoisted_14$8, [
                                                      _cache[13] || (_cache[13] = createBaseVNode(
                                                        "div",
                                                        { class: "data-tag" },
                                                        "Dues Payment Method:",
                                                        -1
                                                        /* HOISTED */
                                                      )),
                                                      createBaseVNode("div", _hoisted_15$8, [
                                                        affiliate.PaymentMethod ? (openBlock(), createElementBlock(
                                                          "span",
                                                          _hoisted_16$8,
                                                          toDisplayString(affiliate.PaymentMethod.PaymentMethodName),
                                                          1
                                                          /* TEXT */
                                                        )) : createCommentVNode("v-if", true)
                                                      ])
                                                    ])
                                                  ]),
                                                  _: 2
                                                  /* DYNAMIC */
                                                },
                                                1024
                                                /* DYNAMIC_SLOTS */
                                              ),
                                              createVNode(
                                                VCol,
                                                {
                                                  cols: "12",
                                                  lg: "4"
                                                },
                                                {
                                                  default: withCtx(() => [
                                                    createBaseVNode("div", _hoisted_17$7, [
                                                      _cache[14] || (_cache[14] = createBaseVNode(
                                                        "div",
                                                        { class: "data-tag" },
                                                        "Dues Payment Frequency:",
                                                        -1
                                                        /* HOISTED */
                                                      )),
                                                      createBaseVNode("div", _hoisted_18$7, [
                                                        affiliate.PaymentFrequency ? (openBlock(), createElementBlock(
                                                          "span",
                                                          _hoisted_19$7,
                                                          toDisplayString(affiliate.PaymentFrequency.PaymentFrequencyName),
                                                          1
                                                          /* TEXT */
                                                        )) : createCommentVNode("v-if", true)
                                                      ])
                                                    ])
                                                  ]),
                                                  _: 2
                                                  /* DYNAMIC */
                                                },
                                                1024
                                                /* DYNAMIC_SLOTS */
                                              )
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        )) : createCommentVNode("v-if", true),
                                        createVNode(
                                          VRow,
                                          null,
                                          {
                                            default: withCtx(() => [
                                              createVNode(
                                                VCol,
                                                {
                                                  cols: "12",
                                                  lg: "3"
                                                },
                                                {
                                                  default: withCtx(() => [
                                                    createBaseVNode("div", _hoisted_20$6, [
                                                      _cache[15] || (_cache[15] = createBaseVNode(
                                                        "div",
                                                        { class: "data-tag" },
                                                        "Start date:",
                                                        -1
                                                        /* HOISTED */
                                                      )),
                                                      createBaseVNode(
                                                        "div",
                                                        _hoisted_21$6,
                                                        toDisplayString(_ctx.$filters.formatDate(affiliate.StartDate)),
                                                        1
                                                        /* TEXT */
                                                      )
                                                    ])
                                                  ]),
                                                  _: 2
                                                  /* DYNAMIC */
                                                },
                                                1024
                                                /* DYNAMIC_SLOTS */
                                              ),
                                              affiliate.EndDate ? (openBlock(), createBlock(
                                                VCol,
                                                {
                                                  key: 0,
                                                  cols: "12",
                                                  lg: "3"
                                                },
                                                {
                                                  default: withCtx(() => [
                                                    createBaseVNode("div", _hoisted_22$6, [
                                                      _cache[16] || (_cache[16] = createBaseVNode(
                                                        "div",
                                                        { class: "data-tag" },
                                                        "Stop date:",
                                                        -1
                                                        /* HOISTED */
                                                      )),
                                                      createBaseVNode(
                                                        "div",
                                                        _hoisted_23$6,
                                                        toDisplayString(_ctx.$filters.formatDate(affiliate.EndDate)),
                                                        1
                                                        /* TEXT */
                                                      )
                                                    ])
                                                  ]),
                                                  _: 2
                                                  /* DYNAMIC */
                                                },
                                                1024
                                                /* DYNAMIC_SLOTS */
                                              )) : createCommentVNode("v-if", true),
                                              affiliate.EndDate && affiliate.IndividualDeactivationReason ? (openBlock(), createBlock(
                                                VCol,
                                                {
                                                  key: 1,
                                                  cols: "12",
                                                  lg: "3"
                                                },
                                                {
                                                  default: withCtx(() => [
                                                    createBaseVNode("div", _hoisted_24$6, [
                                                      _cache[17] || (_cache[17] = createBaseVNode(
                                                        "div",
                                                        { class: "data-tag" },
                                                        "Stop Reason:",
                                                        -1
                                                        /* HOISTED */
                                                      )),
                                                      affiliate.IndividualDeactivationReason ? (openBlock(), createElementBlock(
                                                        "div",
                                                        _hoisted_25$6,
                                                        toDisplayString(affiliate.IndividualDeactivationReason.IndividualDeactivationReasonName),
                                                        1
                                                        /* TEXT */
                                                      )) : createCommentVNode("v-if", true)
                                                    ])
                                                  ]),
                                                  _: 2
                                                  /* DYNAMIC */
                                                },
                                                1024
                                                /* DYNAMIC_SLOTS */
                                              )) : createCommentVNode("v-if", true),
                                              createVNode(
                                                VCol,
                                                {
                                                  cols: "12",
                                                  lg: "3"
                                                },
                                                {
                                                  default: withCtx(() => [
                                                    createBaseVNode("div", _hoisted_26$6, [
                                                      _cache[18] || (_cache[18] = createBaseVNode(
                                                        "div",
                                                        { class: "data-tag" },
                                                        "Currently working:",
                                                        -1
                                                        /* HOISTED */
                                                      )),
                                                      createBaseVNode("div", _hoisted_27$6, [
                                                        affiliate.IsCurrent == true ? (openBlock(), createElementBlock("span", _hoisted_28$6, " Yes ")) : createCommentVNode("v-if", true),
                                                        affiliate.IsCurrent == false ? (openBlock(), createElementBlock("span", _hoisted_29$6, " No ")) : createCommentVNode("v-if", true)
                                                      ])
                                                    ])
                                                  ]),
                                                  _: 2
                                                  /* DYNAMIC */
                                                },
                                                1024
                                                /* DYNAMIC_SLOTS */
                                              )
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        ),
                                        affiliate.UnionRelationshipType && $options.fieldVisible("Cope", affiliate.UnionRelationshipType) ? (openBlock(), createBlock(
                                          VRow,
                                          { key: 1 },
                                          {
                                            default: withCtx(() => [
                                              createVNode(
                                                VCol,
                                                {
                                                  cols: "12",
                                                  lg: "2"
                                                },
                                                {
                                                  default: withCtx(() => [
                                                    createBaseVNode("div", _hoisted_30$6, [
                                                      _cache[19] || (_cache[19] = createBaseVNode(
                                                        "div",
                                                        { class: "data-tag" },
                                                        "Cope type:",
                                                        -1
                                                        /* HOISTED */
                                                      )),
                                                      createBaseVNode("div", _hoisted_31$6, [
                                                        affiliate.Affiliate.AffiliatePerCapita && !affiliate.Affiliate.AffiliatePerCapita.HasCope ? (openBlock(), createElementBlock("span", _hoisted_32$4, "None")) : createCommentVNode("v-if", true),
                                                        affiliate.Affiliate.AffiliatePerCapita && affiliate.Affiliate.AffiliatePerCapita.HasCope ? (openBlock(), createElementBlock("span", _hoisted_33$4, [
                                                          affiliate.Affiliate.AffiliatePerCapita.IsCopeVoluntary ? (openBlock(), createElementBlock("span", _hoisted_34$3, "Voluntary")) : createCommentVNode("v-if", true),
                                                          !affiliate.Affiliate.AffiliatePerCapita.IsCopeVoluntary ? (openBlock(), createElementBlock("span", _hoisted_35$3, "Not Voluntary")) : createCommentVNode("v-if", true)
                                                        ])) : createCommentVNode("v-if", true)
                                                      ])
                                                    ])
                                                  ]),
                                                  _: 2
                                                  /* DYNAMIC */
                                                },
                                                1024
                                                /* DYNAMIC_SLOTS */
                                              ),
                                              createVNode(VCol, {
                                                cols: "12",
                                                lg: "3"
                                              }, {
                                                default: withCtx(() => [
                                                  createBaseVNode("div", _hoisted_36$3, [
                                                    _cache[20] || (_cache[20] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "COPE amount:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode("div", _hoisted_37$3, [
                                                      (openBlock(true), createElementBlock(
                                                        Fragment,
                                                        null,
                                                        renderList($props.individualCope, (cope) => {
                                                          return openBlock(), createElementBlock(
                                                            "span",
                                                            mergeProps({ ref_for: true }, cope, {
                                                              key: cope.IndividualCopeId
                                                            }),
                                                            " $" + toDisplayString(cope.CopeAmount),
                                                            17
                                                            /* TEXT, FULL_PROPS */
                                                          );
                                                        }),
                                                        128
                                                        /* KEYED_FRAGMENT */
                                                      ))
                                                    ])
                                                  ])
                                                ]),
                                                _: 1
                                                /* STABLE */
                                              }),
                                              createVNode(VCol, {
                                                cols: "12",
                                                lg: "4"
                                              }, {
                                                default: withCtx(() => [
                                                  createBaseVNode("div", _hoisted_38$2, [
                                                    _cache[21] || (_cache[21] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "COPE payment frequency:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode("div", _hoisted_39$2, [
                                                      (openBlock(true), createElementBlock(
                                                        Fragment,
                                                        null,
                                                        renderList($options.copeWithProperty("CopePaymentFrequency"), (cope) => {
                                                          return openBlock(), createElementBlock(
                                                            "span",
                                                            mergeProps({ ref_for: true }, cope, {
                                                              key: cope.IndividualCopeId
                                                            }),
                                                            toDisplayString(cope.CopePaymentFrequency.PaymentFrequencyName),
                                                            17
                                                            /* TEXT, FULL_PROPS */
                                                          );
                                                        }),
                                                        128
                                                        /* KEYED_FRAGMENT */
                                                      ))
                                                    ])
                                                  ])
                                                ]),
                                                _: 1
                                                /* STABLE */
                                              }),
                                              createVNode(VCol, {
                                                cols: "12",
                                                lg: "3"
                                              }, {
                                                default: withCtx(() => [
                                                  createBaseVNode("div", _hoisted_40$2, [
                                                    _cache[22] || (_cache[22] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "COPE payment method:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode("div", _hoisted_41$2, [
                                                      (openBlock(true), createElementBlock(
                                                        Fragment,
                                                        null,
                                                        renderList($options.copeWithProperty("CopePaymentMethod"), (cope) => {
                                                          return openBlock(), createElementBlock(
                                                            "span",
                                                            mergeProps({ ref_for: true }, cope, {
                                                              key: cope.IndividualCopeId
                                                            }),
                                                            toDisplayString(cope.CopePaymentMethod.PaymentMethodName),
                                                            17
                                                            /* TEXT, FULL_PROPS */
                                                          );
                                                        }),
                                                        128
                                                        /* KEYED_FRAGMENT */
                                                      ))
                                                    ])
                                                  ])
                                                ]),
                                                _: 1
                                                /* STABLE */
                                              })
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        )) : createCommentVNode("v-if", true)
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                )
              ]),
              _: 2
              /* DYNAMIC */
            },
            1024
            /* DYNAMIC_SLOTS */
          );
        }),
        128
        /* KEYED_FRAGMENT */
      )),
      (openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList($options.endedIndividualAffiliates, (affiliate, index) => {
          return openBlock(), createBlock(
            VRow,
            {
              key: affiliate.AffiliateId
            },
            {
              default: withCtx(() => [
                createVNode(
                  VCol,
                  null,
                  {
                    default: withCtx(() => [
                      affiliate.EndDate ? (openBlock(), createBlock(VExpansionPanels, {
                        key: 0,
                        "model-value": $options.showPast
                      }, {
                        default: withCtx(() => [
                          createVNode(
                            VExpansionPanel,
                            null,
                            {
                              default: withCtx(() => [
                                createVNode(
                                  VExpansionPanelText,
                                  { class: "past-relationship" },
                                  {
                                    default: withCtx(() => [
                                      index === 0 && $options.activeIndividualAffiliates.length === 0 ? (openBlock(), createBlock(
                                        VRow,
                                        { key: 0 },
                                        {
                                          default: withCtx(() => [
                                            createVNode(
                                              VCol,
                                              { class: "d-flex justify-end ga-2" },
                                              {
                                                default: withCtx(() => [
                                                  createVNode(VBtn, {
                                                    size: "small",
                                                    onClick: _cache[3] || (_cache[3] = ($event) => $options.createNew())
                                                  }, {
                                                    default: withCtx(() => [..._cache[23] || (_cache[23] = [
                                                      createTextVNode("Establish new relationship")
                                                    ])]),
                                                    _: 1
                                                    /* STABLE */
                                                  }),
                                                  createVNode(VBtn, {
                                                    size: "small",
                                                    onClick: ($event) => $options.reactivate(affiliate)
                                                  }, {
                                                    default: withCtx(() => [..._cache[24] || (_cache[24] = [
                                                      createTextVNode("Restore")
                                                    ])]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  }, 1032, ["onClick"])
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            )
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      )) : createCommentVNode("v-if", true),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createVNode(
                                              VCol,
                                              {
                                                cols: "12",
                                                lg: "4"
                                              },
                                              {
                                                default: withCtx(() => [
                                                  createBaseVNode("div", _hoisted_42$2, [
                                                    _cache[25] || (_cache[25] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "Relationship:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    affiliate.UnionRelationshipType ? (openBlock(), createElementBlock(
                                                      "div",
                                                      _hoisted_43$2,
                                                      toDisplayString(affiliate.UnionRelationshipType.UnionRelationshipTypeName),
                                                      1
                                                      /* TEXT */
                                                    )) : createCommentVNode("v-if", true)
                                                  ]),
                                                  createBaseVNode("div", _hoisted_44$2, [
                                                    _cache[26] || (_cache[26] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "Member ID:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode("div", _hoisted_45$2, [
                                                      (openBlock(true), createElementBlock(
                                                        Fragment,
                                                        null,
                                                        renderList($props.individual.individualMembers, (member) => {
                                                          return openBlock(), createElementBlock(
                                                            "div",
                                                            mergeProps({ ref_for: true }, member, {
                                                              key: member.MemberIdMappingId
                                                            }),
                                                            toDisplayString(member.MemberId),
                                                            17
                                                            /* TEXT, FULL_PROPS */
                                                          );
                                                        }),
                                                        128
                                                        /* KEYED_FRAGMENT */
                                                      ))
                                                    ])
                                                  ]),
                                                  _ctx.$store.getters["user/selectedAffiliate"].hasChapters ? (openBlock(), createElementBlock("div", _hoisted_46$2, [
                                                    _cache[27] || (_cache[27] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "Chapter:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode("div", _hoisted_47$2, [
                                                      (openBlock(true), createElementBlock(
                                                        Fragment,
                                                        null,
                                                        renderList($options.hasChapter($props.individualEmployers), (employer) => {
                                                          return openBlock(), createElementBlock(
                                                            "span",
                                                            mergeProps({ ref_for: true }, employer, {
                                                              key: employer.IndividualEmployerId
                                                            }),
                                                            toDisplayString(employer.Employer.Chapter.ChapterName),
                                                            17
                                                            /* TEXT, FULL_PROPS */
                                                          );
                                                        }),
                                                        128
                                                        /* KEYED_FRAGMENT */
                                                      ))
                                                    ])
                                                  ])) : createCommentVNode("v-if", true),
                                                  createBaseVNode("div", _hoisted_48$2, [
                                                    _cache[28] || (_cache[28] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "Unit:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode("div", _hoisted_49$2, [
                                                      (openBlock(true), createElementBlock(
                                                        Fragment,
                                                        null,
                                                        renderList($options.hasUnit($props.individualEmployers), (employer) => {
                                                          return openBlock(), createElementBlock(
                                                            "span",
                                                            mergeProps({ ref_for: true }, employer, {
                                                              key: employer.IndividualEmployerId
                                                            }),
                                                            toDisplayString(employer.LocalJobClass.Unit.UnitName),
                                                            17
                                                            /* TEXT, FULL_PROPS */
                                                          );
                                                        }),
                                                        128
                                                        /* KEYED_FRAGMENT */
                                                      ))
                                                    ])
                                                  ])
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            ),
                                            createVNode(
                                              VCol,
                                              {
                                                cols: "12",
                                                lg: "4"
                                              },
                                              {
                                                default: withCtx(() => [
                                                  createBaseVNode("div", _hoisted_50$2, [
                                                    _cache[29] || (_cache[29] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "Currently working:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode("div", _hoisted_51$2, [
                                                      affiliate.IsCurrent == true ? (openBlock(), createElementBlock("span", _hoisted_52$2, " Yes ")) : createCommentVNode("v-if", true),
                                                      affiliate.IsCurrent == false ? (openBlock(), createElementBlock("span", _hoisted_53$2, " No ")) : createCommentVNode("v-if", true)
                                                    ])
                                                  ])
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            ),
                                            createVNode(
                                              VCol,
                                              {
                                                cols: "12",
                                                lg: "4"
                                              },
                                              {
                                                default: withCtx(() => [
                                                  createBaseVNode("div", _hoisted_54$2, [
                                                    _cache[30] || (_cache[30] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "Start date:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode(
                                                      "div",
                                                      _hoisted_55$2,
                                                      toDisplayString(_ctx.$filters.formatDate(affiliate.StartDate)),
                                                      1
                                                      /* TEXT */
                                                    )
                                                  ]),
                                                  createBaseVNode("div", _hoisted_56$2, [
                                                    _cache[31] || (_cache[31] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "Stop date:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode(
                                                      "div",
                                                      _hoisted_57$2,
                                                      toDisplayString(_ctx.$filters.formatDate(affiliate.EndDate)),
                                                      1
                                                      /* TEXT */
                                                    )
                                                  ]),
                                                  createBaseVNode("div", _hoisted_58$2, [
                                                    _cache[32] || (_cache[32] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "Stop reason:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    affiliate.IndividualDeactivationReason ? (openBlock(), createElementBlock(
                                                      "div",
                                                      _hoisted_59$2,
                                                      toDisplayString(affiliate.IndividualDeactivationReason.IndividualDeactivationReasonName),
                                                      1
                                                      /* TEXT */
                                                    )) : createCommentVNode("v-if", true)
                                                  ])
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            )
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      affiliate.UnionRelationshipType && $options.fieldVisible("Dues category", affiliate.UnionRelationshipType) ? (openBlock(), createBlock(
                                        VRow,
                                        { key: 1 },
                                        {
                                          default: withCtx(() => [
                                            createVNode(
                                              VCol,
                                              {
                                                cols: "12",
                                                lg: "4"
                                              },
                                              {
                                                default: withCtx(() => [
                                                  createBaseVNode("div", _hoisted_60$2, [
                                                    _cache[33] || (_cache[33] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "Local dues Category:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode("div", _hoisted_61$2, [
                                                      affiliate.LocalDuesCategory ? (openBlock(), createElementBlock(
                                                        "span",
                                                        _hoisted_62$2,
                                                        toDisplayString(affiliate.LocalDuesCategory.LocalDuesCategoryName),
                                                        1
                                                        /* TEXT */
                                                      )) : createCommentVNode("v-if", true)
                                                    ])
                                                  ])
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            ),
                                            createVNode(
                                              VCol,
                                              {
                                                cols: "12",
                                                lg: "4"
                                              },
                                              {
                                                default: withCtx(() => [
                                                  createBaseVNode("div", _hoisted_63$2, [
                                                    _cache[34] || (_cache[34] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "Dues Payment Method:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode("div", _hoisted_64$2, [
                                                      affiliate.PaymentMethod ? (openBlock(), createElementBlock(
                                                        "span",
                                                        _hoisted_65$2,
                                                        toDisplayString(affiliate.PaymentMethod.PaymentMethodName),
                                                        1
                                                        /* TEXT */
                                                      )) : createCommentVNode("v-if", true)
                                                    ])
                                                  ])
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            ),
                                            createVNode(
                                              VCol,
                                              {
                                                cols: "12",
                                                lg: "4"
                                              },
                                              {
                                                default: withCtx(() => [
                                                  createBaseVNode("div", _hoisted_66$2, [
                                                    _cache[35] || (_cache[35] = createBaseVNode(
                                                      "div",
                                                      { class: "data-tag" },
                                                      "Dues Payment Frequency:",
                                                      -1
                                                      /* HOISTED */
                                                    )),
                                                    createBaseVNode("div", _hoisted_67$2, [
                                                      affiliate.PaymentFrequency ? (openBlock(), createElementBlock(
                                                        "span",
                                                        _hoisted_68$1,
                                                        toDisplayString(affiliate.PaymentFrequency.PaymentFrequencyName),
                                                        1
                                                        /* TEXT */
                                                      )) : createCommentVNode("v-if", true)
                                                    ])
                                                  ])
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            )
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      )) : createCommentVNode("v-if", true)
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  },
                                  1024
                                  /* DYNAMIC_SLOTS */
                                )
                              ]),
                              _: 2
                              /* DYNAMIC */
                            },
                            1024
                            /* DYNAMIC_SLOTS */
                          )
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["model-value"])) : createCommentVNode("v-if", true)
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                )
              ]),
              _: 2
              /* DYNAMIC */
            },
            1024
            /* DYNAMIC_SLOTS */
          );
        }),
        128
        /* KEYED_FRAGMENT */
      ))
    ]),
    _: 1
    /* STABLE */
  });
}
const ViewUnionRelationshipComponent = /* @__PURE__ */ _export_sfc(_sfc_main$Q, [["render", _sfc_render$Q], ["__file", "/var/www/html/resources/js/components/Individual/Partial/ViewUnionRelationshipComponent.vue"]]);
const _sfc_main$P = {
  name: "EditUnionRelationshipDataComponent",
  props: {
    individualAffiliate: {
      type: Object,
      required: true
    },
    individualCope: {
      type: Object,
      required: true
    },
    individual: {
      type: Object,
      required: true
    },
    readOnly: {
      type: Boolean,
      required: true
    },
    eduesStatus: {
      type: Boolean,
      required: false,
      default: false
    }
  },
  watch: {
    individualAffiliate: {
      handler(value) {
        this.editableIndividualAffiliate = clone(value);
        if (this.editableIndividualAffiliate.StartDate) {
          this.editableIndividualAffiliate.StartDate = this.editableIndividualAffiliate.StartDate.split("T")[0];
        }
        if (this.editableIndividualAffiliate.EndDate) {
          this.editableIndividualAffiliate.EndDate = this.editableIndividualAffiliate.EndDate.split("T")[0];
        }
        this.setupFormData();
        if (this.individualAffiliate.UnionRelationshipTypeId) {
          this.selectedUnionRelationshipTypeId = this.individualAffiliate.UnionRelationshipTypeId;
          axios.get("/api/v2/custom/individual/stop-reasons/" + this.individualAffiliate.UnionRelationshipTypeId).then((response) => {
            this.stopReasons = response.data.data;
          });
        }
      }
    },
    individualCope: {
      handler(value) {
        this.editableIndividualCope = this.individualCope.IndividualCopeId ? clone(value) : value;
      },
      deep: true
    },
    selectedUnionRelationshipTypeId: {
      handler(value) {
        this.editableIndividualAffiliate.UnionRelationshipTypeId = value;
        this.selectedUnionRelationshipLabel = this.getSelectedUnionRelationshipLabel();
        this.loadLocalDuesCategories();
      },
      deep: true
    }
  },
  data() {
    return {
      editableIndividualAffiliate: {},
      editableIndividualCope: {},
      selectedUnionRelationshipTypeId: null,
      chapters: [],
      unionRelationships: [],
      duesCategories: [],
      paymentMethods: [],
      paymentFrequencies: [],
      selectedAffiliateName: "",
      stopReasons: [],
      dialog: false,
      dialog2: false,
      valid: true,
      selectedUnionRelationshipLabel: ""
    };
  },
  mounted() {
    axios.get("/api/v2/gender").then((response) => {
      this.genders = response.data.data;
    });
    console.log("eduesStatus:", this.eduesStatus);
    if (this.selectedAffiliate) {
      if (this.editMode) {
        axios.get("/api/v2/unionRelationshipType").then((response) => {
          this.unionRelationships = response.data.data;
        });
      } else {
        axios.get("/api/v2/aggregate/individual/unionRelationshipType/" + this.selectedAffiliate.AffiliateId).then((response) => {
          this.unionRelationships = response.data.data;
          if (this.editableIndividualAffiliate.UnionRelationshipType && this.unionRelationships.findIndex((unionRelationshipType) => unionRelationshipType.UnionRelationshipTypeId === this.selectedUnionRelationshipTypeId) !== -1) {
            this.unionRelationships.unshift(this.editableIndividualAffiliate.UnionRelationshipType);
          }
        });
      }
      axios.get("/api/v2/chapter?sort=ChapterName&filter[AffiliateId]=" + this.selectedAffiliate.AffiliateId + "&filter[IsStructural]=0").then((response) => {
        this.chapters = response.data.data;
      });
    }
    if (this.selectedUnionRelationshipTypeId) {
      this.selectedUnionRelationshipLabel = this.getSelectedUnionRelationshipLabel();
    }
    axios.get("/api/v2/paymentMethod").then((response) => {
      this.paymentMethods = response.data.data;
    });
    axios.get("/api/v2/paymentFrequency").then((response) => {
      this.paymentFrequencies = response.data.data;
    });
    this.editableIndividualAffiliate = clone(this.individualAffiliate);
    if (this.editableIndividualAffiliate.StartDate) {
      this.editableIndividualAffiliate.StartDate = this.editableIndividualAffiliate.StartDate.split("T")[0];
    }
    if (this.editableIndividualAffiliate.EndDate) {
      this.editableIndividualAffiliate.EndDate = this.editableIndividualAffiliate.EndDate.split("T")[0];
    }
    this.editableIndividualCope = clone(this.individualCope);
    this.setupFormData();
    this.loadLocalDuesCategories();
  },
  computed: {
    selectedAffiliate() {
      return this.$store.getters["user/selectedAffiliate"];
    },
    editMode() {
      return !!this.individualAffiliate.IndividualAffiliateId;
    },
    selectedAffiliateId() {
      return this.$store.getters["user/selectedAffiliate"].AffiliateId;
    },
    rules() {
      const rules = {};
      rules["required"] = (value) => !!value || "Required.";
      rules["copeAmount"] = (value) => this.editableIndividualCope.CopePaymentMethodId || this.editableIndividualCope.CopePaymentFrequencyId ? !!value || "Required" : true;
      rules["copeAmountUpdate"] = (value) => this.eduesStatus && parseFloat(this.individualCope.CopeAmount) === 0 && parseFloat(this.editableIndividualCope.CopeAmount) > 0 ? " Individual needs to submit cope voluntarily" : true;
      rules["copeDecimal"] = (value) => value ? /^[+-]?(?=.?\d)\d*(\.\d{0,3})?/gm.test(value) || "You cannot add more than 3 decimals" : true;
      rules["stopReasonEndDate"] = (value) => this.editableIndividualAffiliate.IndividualDeactivationReasonId ? !!value || "Required" : true;
      rules["stopReason"] = (value) => this.editableIndividualAffiliate.EndDate ? !!value || "Required" : true;
      rules["startEnd"] = (value) => value && this.editableIndividualAffiliate.EndDate ? compareAsc(this.editableIndividualAffiliate.EndDate, value) > 0 || "Start date should be before end date" : true;
      rules["endStart"] = (value) => value && this.editableIndividualAffiliate.StartDate ? compareAsc(value, this.editableIndividualAffiliate.StartDate) > 0 || "Start date should be before end date" : true;
      return rules;
    }
  },
  methods: {
    updateStartDate(date) {
      this.editableIndividualAffiliate.StartDate = format(date, "yyyy-MM-dd");
    },
    updateEndDate(date) {
      this.editableIndividualAffiliate.EndDate = format(date, "yyyy-MM-dd");
    },
    async saveData(event) {
      const results = await event;
      if (!results.valid) {
        return;
      }
      if (this.editableIndividualAffiliate.IndividualDeactivationReasonId && this.editableIndividualAffiliate.IndividualDeactivationReasonId !== this.individualAffiliate.IndividualDeactivationReasonId) {
        this.dialog = true;
        return;
      }
      this.doSaveData();
    },
    getSelectedUnionRelationshipLabel() {
      if (this.editableIndividualAffiliate.UnionRelationshipType) {
        return this.editableIndividualAffiliate.UnionRelationshipType.UnionRelationshipTypeName;
      }
      const index = this.unionRelationships.findIndex((unionRelationship) => {
        return unionRelationship.UnionRelationshipTypeId === this.selectedUnionRelationshipTypeId;
      });
      return index >= 0 ? this.unionRelationships[index].UnionRelationshipTypeName : "";
    },
    doSaveData() {
      this.dialog = false;
      this.dialog2 = false;
      this.editableIndividualAffiliate.IndividualId = this.individual.IndividualId;
      this.editableIndividualAffiliate.IndividualCope = this.editableIndividualCope;
      this.editableIndividualAffiliate.IndividualCope.CopeAmount = this.editableIndividualCope.CopeAmount === void 0 || this.editableIndividualCope.CopeAmount == "" || this.editableIndividualCope.CopeAmount == null ? "0.00" : this.editableIndividualCope.CopeAmount;
      this.editableIndividualAffiliate.StartDate = this.editableIndividualAffiliate.StartDate ? this.editableIndividualAffiliate.StartDate : formatISO(/* @__PURE__ */ new Date());
      if (this.editMode) {
        axios.put("/api/v2/custom/individualaffiliate/" + this.individualAffiliate.IndividualAffiliateId + "?include=Affiliate,UnionRelationshipType,LocalDuesCategory,IndividualDeactivationReason,PaymentMethod,PaymentFrequency&scope=global", this.editableIndividualAffiliate).then((response) => this.afterSave(response));
      } else {
        this.editableIndividualAffiliate.AffiliateId = this.selectedAffiliateId;
        this.editableIndividualAffiliate.IndividualCope = this.editableIndividualCope;
        axios.post("/api/v2/individualAffiliate?include=Affiliate,UnionRelationshipType,LocalDuesCategory,IndividualDeactivationReason,PaymentMethod,PaymentFrequency", this.editableIndividualAffiliate).then((response) => this.$emit("saved-individual-affiliate", { individualAffiliate: response.data.data, status: 205 }));
      }
    },
    onCancel() {
      this.editableIndividualAffiliate = !this.editMode ? {} : clone(this.individualAffiliate);
      if (this.editableIndividualAffiliate.StartDate) {
        this.editableIndividualAffiliate.StartDate = this.editableIndividualAffiliate.StartDate.split("T")[0];
      }
      if (this.editableIndividualAffiliate.EndDate) {
        this.editableIndividualAffiliate.EndDate = this.editableIndividualAffiliate.EndDate.split("T")[0];
      }
      this.$emit("cancel-edit-individual-affiliate");
    },
    afterSave(response) {
      switch (response.status) {
        case 205:
          this.resetFormValues();
          this.$emit("saved-individual-affiliate", { individualAffiliate: null, status: response.status });
          break;
        case 204:
          this.resetFormValues();
          this.$router.push({ name: "Individuals" });
          break;
        case 206:
          this.dialog2 = true;
          break;
        case 200:
          this.resetFormValues();
          this.$emit("saved-individual-affiliate", { individualAffiliate: response.data, status: response.status });
          break;
        case 418:
        default:
          console.log(response.statusText);
      }
    },
    resetFormValues() {
      this.$refs.form.reset();
      this.editableIndividualAffiliate = {};
      this.editableIndividualCope = {};
      this.selectedUnionRelationshipTypeId = null;
    },
    fieldVisible(fieldName) {
      if (!this.editableIndividualAffiliate.UnionRelationshipTypeId || this.unionRelationships.length === 0) {
        return false;
      }
      let unionRelationship = this.unionRelationships.filter((unionRelationship2) => {
        return unionRelationship2.UnionRelationshipTypeId === this.editableIndividualAffiliate.UnionRelationshipTypeId;
      }).pop();
      if (!unionRelationship) {
        unionRelationship = this.editableIndividualAffiliate.UnionRelationshipType;
      }
      if (!unionRelationship) {
        return false;
      }
      switch (fieldName) {
        case "Dues category":
          return unionRelationship.UnionRelationshipTypeName === "Member" || unionRelationship.UnionRelationshipTypeName === "Agency Fee Payer" || unionRelationship.UnionRelationshipTypeName === "Retired Member" || this.isJoiningUnion();
        case "Cope":
          return unionRelationship.UnionRelationshipTypeName === "Member" && this.selectedAffiliate.hasCope;
      }
      return false;
    },
    isJoiningUnion() {
      if (!this.editableIndividualAffiliate.IndividualDeactivationReasonId) {
        return false;
      }
      const stopReason = this.stopReasons.find((stopReason2) => {
        return stopReason2.IndividualDeactivationReasonId === this.editableIndividualAffiliate.IndividualDeactivationReasonId;
      });
      return stopReason ? stopReason.IndividualDeactivationReasonName.toLowerCase() === "joined union" : false;
    },
    setupFormData() {
      this.editableIndividualAffiliate.LocalDuesCategoryId = this.individualAffiliate.UnionRelationshipType && (this.individualAffiliate.UnionRelationshipType.UnionRelationshipTypeName === "Member" || this.individualAffiliate.UnionRelationshipType.UnionRelationshipTypeName === "Agency Fee Payer" || this.individualAffiliate.UnionRelationshipType.UnionRelationshipTypeName === "Retired Member") ? this.editableIndividualAffiliate.LocalDuesCategoryId : null;
      this.editableIndividualAffiliate.PaymentMethodId = this.individualAffiliate.UnionRelationshipType && (this.individualAffiliate.UnionRelationshipType.UnionRelationshipTypeName === "Member" || this.individualAffiliate.UnionRelationshipType.UnionRelationshipTypeName === "Agency Fee Payer" || this.individualAffiliate.UnionRelationshipType.UnionRelationshipTypeName === "Retired Member") ? this.editableIndividualAffiliate.PaymentMethodId : null;
      this.editableIndividualAffiliate.PaymentFrequencyId = this.individualAffiliate.UnionRelationshipType && (this.individualAffiliate.UnionRelationshipType.UnionRelationshipTypeName === "Member" || this.individualAffiliate.UnionRelationshipType.UnionRelationshipTypeName === "Agency Fee Payer" || this.individualAffiliate.UnionRelationshipType.UnionRelationshipTypeName === "Retired Member") ? this.editableIndividualAffiliate.PaymentFrequencyId : null;
      this.selectedAffiliateName = this.$store.getters["user/selectedAffiliate"].AffiliateName;
    },
    loadLocalDuesCategories() {
      if (this.editableIndividualAffiliate.UnionRelationshipTypeId) {
        axios.get("/api/v2/custom/localduescategory/byunionrelationshiptype/" + this.editableIndividualAffiliate.UnionRelationshipTypeId + "/" + this.individual.IndividualId).then((response) => {
          this.duesCategories = response.data.data;
        });
      }
    }
  }
};
function _sfc_render$P(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    Fragment,
    null,
    [
      createVNode(VForm, {
        ref: "form",
        modelValue: $data.valid,
        "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => $data.valid = $event),
        "validate-on": "submit",
        onSubmit: withModifiers($options.saveData, ["prevent"])
      }, {
        default: withCtx(() => [
          createVNode(VCard, null, {
            default: withCtx(() => [
              createVNode(VCardTitle, null, {
                default: withCtx(() => _cache[18] || (_cache[18] = [
                  createTextVNode("Edit Union Relationship")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardText, null, {
                default: withCtx(() => [
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      createVNode(VCol, {
                        cols: "12",
                        lg: "8"
                      }, {
                        default: withCtx(() => [
                          !$options.editMode ? (openBlock(), createBlock(VSelect, {
                            key: 0,
                            items: $data.unionRelationships,
                            label: "Union Relationship",
                            "item-value": "UnionRelationshipTypeId",
                            "item-title": "UnionRelationshipTypeName",
                            modelValue: $data.selectedUnionRelationshipTypeId,
                            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.selectedUnionRelationshipTypeId = $event),
                            variant: "underlined"
                          }, null, 8, ["items", "modelValue"])) : (openBlock(), createBlock(VTextField, {
                            key: 1,
                            label: "Union Relationship",
                            modelValue: $data.selectedUnionRelationshipLabel,
                            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.selectedUnionRelationshipLabel = $event),
                            readonly: "",
                            disabled: "",
                            variant: "underlined"
                          }, null, 8, ["modelValue"]))
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VCol, {
                        cols: "12",
                        lg: "4"
                      }, {
                        default: withCtx(() => [
                          createVNode(VTextField, {
                            label: "Affiliate:",
                            modelValue: $data.selectedAffiliateName,
                            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.selectedAffiliateName = $event),
                            readonly: "",
                            disabled: "",
                            variant: "underlined"
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  $options.fieldVisible("Dues category") ? (openBlock(), createBlock(VRow, { key: 0 }, {
                    default: withCtx(() => [
                      createVNode(VCol, {
                        cols: "12",
                        lg: "4"
                      }, {
                        default: withCtx(() => [
                          createVNode(VSelect, {
                            items: $data.duesCategories,
                            label: "Dues category",
                            "item-value": "LocalDuesCategoryId",
                            "item-title": "LocalDuesCategoryName",
                            modelValue: $data.editableIndividualAffiliate.LocalDuesCategoryId,
                            "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.editableIndividualAffiliate.LocalDuesCategoryId = $event),
                            rules: [$options.rules.required],
                            variant: "underlined"
                          }, null, 8, ["items", "modelValue", "rules"])
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VCol, {
                        cols: "12",
                        lg: "4"
                      }, {
                        default: withCtx(() => [
                          createVNode(VSelect, {
                            items: $data.paymentMethods,
                            label: "Dues Payment Method",
                            "item-value": "PaymentMethodId",
                            "item-title": "PaymentMethodName",
                            modelValue: $data.editableIndividualAffiliate.PaymentMethodId,
                            "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.editableIndividualAffiliate.PaymentMethodId = $event),
                            variant: "underlined"
                          }, null, 8, ["items", "modelValue"])
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VCol, {
                        cols: "12",
                        lg: "4"
                      }, {
                        default: withCtx(() => [
                          createVNode(VSelect, {
                            items: $data.paymentFrequencies,
                            label: "Dues Payment Frequency",
                            "item-value": "PaymentFrequencyId",
                            "item-title": "PaymentFrequencyName",
                            modelValue: $data.editableIndividualAffiliate.PaymentFrequencyId,
                            "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.editableIndividualAffiliate.PaymentFrequencyId = $event),
                            variant: "underlined"
                          }, null, 8, ["items", "modelValue"])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })) : createCommentVNode("v-if", true),
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      createVNode(VCol, {
                        cols: "12",
                        lg: "4"
                      }, {
                        default: withCtx(() => [
                          createVNode(VMenu, {
                            offset: 40,
                            transition: "scale-transition",
                            "min-width": "290px"
                          }, {
                            activator: withCtx(({ props }) => [
                              createVNode(VTextField, mergeProps({
                                modelValue: $data.editableIndividualAffiliate.StartDate,
                                "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.editableIndividualAffiliate.StartDate = $event),
                                hint: "YYYY-MM-DD",
                                label: "Start date",
                                rules: [$options.rules.startEnd]
                              }, props, { variant: "underlined" }), null, 16, ["modelValue", "rules"])
                            ]),
                            default: withCtx(() => [
                              createVNode(VDatePicker, {
                                "model-value": "editableIndividualAffiliate.StartDate",
                                onInput: $options.updateStartDate,
                                color: "primary"
                              }, null, 8, ["onInput"])
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      $options.editMode ? (openBlock(), createBlock(VCol, {
                        key: 0,
                        cols: "12",
                        lg: "4"
                      }, {
                        default: withCtx(() => [
                          createVNode(VMenu, {
                            offset: 40,
                            transition: "scale-transition",
                            "min-width": "290px"
                          }, {
                            activator: withCtx(({ props }) => [
                              createVNode(VTextField, mergeProps({
                                modelValue: $data.editableIndividualAffiliate.EndDate,
                                "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.editableIndividualAffiliate.EndDate = $event),
                                rules: [$options.rules.endStart, $options.rules.stopReasonEndDate],
                                label: "End date",
                                hint: "YYYY-MM-DD"
                              }, props, { variant: "underlined" }), null, 16, ["modelValue", "rules"])
                            ]),
                            default: withCtx(() => [
                              createVNode(VDatePicker, {
                                "model-value": "editableIndividualAffiliate.EndDate",
                                "onUpdate:modelValue": $options.updateEndDate,
                                color: "primary"
                              }, null, 8, ["onUpdate:modelValue"])
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })) : createCommentVNode("v-if", true),
                      $options.editMode ? (openBlock(), createBlock(VCol, {
                        key: 1,
                        cols: "12",
                        lg: "4"
                      }, {
                        default: withCtx(() => [
                          createVNode(VSelect, {
                            items: $data.stopReasons,
                            label: "Stop reason",
                            "item-value": "IndividualDeactivationReasonId",
                            "item-title": "IndividualDeactivationReasonName",
                            modelValue: $data.editableIndividualAffiliate.IndividualDeactivationReasonId,
                            "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.editableIndividualAffiliate.IndividualDeactivationReasonId = $event),
                            rules: [$options.rules.stopReason],
                            variant: "underlined"
                          }, null, 8, ["items", "modelValue", "rules"])
                        ]),
                        _: 1
                        /* STABLE */
                      })) : createCommentVNode("v-if", true)
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      $options.editMode ? (openBlock(), createBlock(VCol, {
                        key: 0,
                        cols: "12",
                        lg: "4",
                        class: "switches"
                      }, {
                        default: withCtx(() => [
                          createVNode(VSwitch, {
                            color: "primary",
                            label: "Currently Working",
                            modelValue: $data.editableIndividualAffiliate.IsCurrent,
                            "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.editableIndividualAffiliate.IsCurrent = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                        /* STABLE */
                      })) : createCommentVNode("v-if", true)
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  $options.fieldVisible("Cope") ? (openBlock(), createBlock(VRow, { key: 1 }, {
                    default: withCtx(() => [
                      createVNode(VCol, {
                        cols: "12",
                        lg: "4"
                      }, {
                        default: withCtx(() => [
                          createVNode(VTextField, {
                            label: "COPE Amount:",
                            modelValue: $data.editableIndividualCope.CopeAmount,
                            "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $data.editableIndividualCope.CopeAmount = $event),
                            prefix: "$",
                            rules: [$options.rules.copeAmount, $options.rules.copeDecimal, $options.rules.copeAmountUpdate]
                          }, null, 8, ["modelValue", "rules"])
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VCol, {
                        cols: "12",
                        lg: "4"
                      }, {
                        default: withCtx(() => [
                          createVNode(VSelect, {
                            items: $data.paymentMethods,
                            label: "COPE Payment Method",
                            "item-value": "PaymentMethodId",
                            "item-title": "PaymentMethodName",
                            modelValue: $data.editableIndividualCope.CopePaymentMethodId,
                            "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.editableIndividualCope.CopePaymentMethodId = $event)
                          }, null, 8, ["items", "modelValue"])
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VCol, {
                        cols: "12",
                        lg: "4"
                      }, {
                        default: withCtx(() => [
                          createVNode(VSelect, {
                            items: $data.paymentFrequencies,
                            label: "COPE Payment Frequency",
                            "item-value": "PaymentFrequencyId",
                            "item-title": "PaymentFrequencyName",
                            modelValue: $data.editableIndividualCope.CopePaymentFrequencyId,
                            "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => $data.editableIndividualCope.CopePaymentFrequencyId = $event)
                          }, null, 8, ["items", "modelValue"])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })) : createCommentVNode("v-if", true)
                ]),
                _: 1
                /* STABLE */
              }),
              !$props.readOnly ? (openBlock(), createBlock(VCardActions, { key: 0 }, {
                default: withCtx(() => [
                  createVNode(VSpacer),
                  createVNode(VBtn, {
                    onClick: $options.onCancel,
                    variant: "elevated"
                  }, {
                    default: withCtx(() => _cache[19] || (_cache[19] = [
                      createTextVNode("Cancel")
                    ])),
                    _: 1
                    /* STABLE */
                  }, 8, ["onClick"]),
                  createVNode(VBtn, {
                    color: "success",
                    type: "submit",
                    variant: "elevated"
                  }, {
                    default: withCtx(() => _cache[20] || (_cache[20] = [
                      createTextVNode("Save")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true)
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue", "onSubmit"]),
      createVNode(VDialog, {
        modelValue: $data.dialog,
        "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => $data.dialog = $event),
        "max-width": "290"
      }, {
        default: withCtx(() => [
          createVNode(VCard, null, {
            default: withCtx(() => [
              createVNode(VCardTitle, { class: "text-h5" }, {
                default: withCtx(() => _cache[21] || (_cache[21] = [
                  createTextVNode("Warning")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardText, null, {
                default: withCtx(() => _cache[22] || (_cache[22] = [
                  createTextVNode(" Setting a Stop Reason and end date will update the individual's union relationship status. Please review your changes and confirm you want to proceed. ")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardActions, null, {
                default: withCtx(() => [
                  createVNode(VSpacer),
                  createVNode(VBtn, {
                    color: "green-darken-1",
                    variant: "text",
                    onClick: _cache[14] || (_cache[14] = ($event) => $data.dialog = false)
                  }, {
                    default: withCtx(() => _cache[23] || (_cache[23] = [
                      createTextVNode(" Cancel ")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VBtn, {
                    color: "green-darken-1",
                    variant: "text",
                    onClick: $options.doSaveData
                  }, {
                    default: withCtx(() => _cache[24] || (_cache[24] = [
                      createTextVNode(" Proceed ")
                    ])),
                    _: 1
                    /* STABLE */
                  }, 8, ["onClick"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"]),
      createVNode(VDialog, {
        modelValue: $data.dialog2,
        "onUpdate:modelValue": _cache[17] || (_cache[17] = ($event) => $data.dialog2 = $event),
        "max-width": "290"
      }, {
        default: withCtx(() => [
          createVNode(VCard, null, {
            default: withCtx(() => [
              createVNode(VCardTitle, { class: "text-h5" }, {
                default: withCtx(() => _cache[25] || (_cache[25] = [
                  createTextVNode("Warning")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardText, null, {
                default: withCtx(() => _cache[26] || (_cache[26] = [
                  createTextVNode(" The Stop Reason selected cannot be completed. This individual record has a union relationship with another affiliate. Please contact the AFT for further assistance. ")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardActions, null, {
                default: withCtx(() => [
                  createVNode(VSpacer),
                  createVNode(VBtn, {
                    color: "green-darken-1",
                    variant: "text",
                    onClick: _cache[16] || (_cache[16] = ($event) => $data.dialog2 = false)
                  }, {
                    default: withCtx(() => _cache[27] || (_cache[27] = [
                      createTextVNode(" OK ")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"])
    ],
    64
    /* STABLE_FRAGMENT */
  );
}
const EditUnionRelationshipDataComponent = /* @__PURE__ */ _export_sfc(_sfc_main$P, [["render", _sfc_render$P], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Edit/EditUnionRelationshipDataComponent.vue"]]);
const _sfc_main$O = {
  name: "UnionRelationshipsComponent",
  components: { EditUnionRelationshipDataComponent, ViewUnionRelationshipComponent, FlipCard },
  mixins: [billHighway],
  data() {
    return {
      flipped: false,
      individualAffiliate: {},
      individual: {},
      individualEmployers: [],
      individualAffiliates: [],
      individualCope: [],
      loading: false,
      selectedAffiliateId: null,
      hash: "",
      panel: "",
      clicked: false,
      eduesStatus: false
    };
  },
  mounted() {
    this.id = this.$route.params.id;
    this.selectedAffiliateId = this.$store.getters["user/selectedAffiliate"].AffiliateId;
    this.hash = window.location.hash.substring(1);
    this.getEduesStatusApi();
  },
  watch: {
    hash(hash) {
      if (hash === "unionRelationship") {
        this.scrollTo();
      }
    }
  },
  methods: {
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    scrollTo() {
      const getMeTo = document.getElementById("unionRelationship");
      getMeTo.scrollIntoView({ behavior: "smooth" }, true);
      this.panel = 0;
      this.getDataFromApi();
      setTimeout(this.clickEditBtn, 5e3);
    },
    clickEditBtn() {
      this.clicked = !this.clicked;
    },
    onSave({ individualAffiliate, status }) {
      if (status === 200 || status === 201) {
        const index = this.individualAffiliates.findIndex((indAffiliate) => {
          return indAffiliate.IndividualAffiliateId === individualAffiliate.IndividualAffiliateId;
        });
        if (index !== -1) {
          this.individualAffiliates[index] = individualAffiliate;
        } else {
          this.individualAffiliates.push(individualAffiliate);
        }
        this.individualAffiliates = [...this.individualAffiliates];
        axios.get("/api/v2/individualCope?filter[IndividualId]=" + this.id).then((response) => {
          this.individualCope = response.data.data;
        });
      } else if (status === 205) {
        axios.get("/api/v2/individualAffiliate?filter[IndividualId]=" + this.id + "&include=Affiliate,UnionRelationshipType,LocalDuesCategory,IndividualDeactivationReason,PaymentMethod,PaymentFrequency&sort=-EndDate").then((response) => {
          this.individualAffiliates = response.data.data;
        });
        axios.get("/api/v2/individualCope?filter[IndividualId]=" + this.id).then((response) => {
          this.individualCope = response.data.data;
        });
        axios.get("/api/v2/individualEmployer?filter[IndividualId]=" + this.id + "&include=LocalJobClass.Unit,Employer.Chapter").then((response) => {
          this.individualEmployers = response.data.data;
        });
      }
      this.updateBillHighwayIndividual(this.individual.IndividualId, this.selectedAffiliateId, "unionRelationship");
      this.flipped = false;
    },
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/individual/" + this.id + "?include=individualAffiliates.Affiliate,individualAffiliates.UnionRelationshipType,individualAffiliates.LocalDuesCategory,individualAffiliates.IndividualDeactivationReason,individualAffiliates.PaymentMethod,individualAffiliates.PaymentFrequency,individualEmployers,individualEmployers.LocalJobClass,individualEmployers.LocalJobClass.Unit,individualCope,individualEmployers.Employer,individualEmployers.Employer.Chapter,individualMembers").then((response) => {
        this.individual = response.data.data;
        if (response.data.data.individualEmployers) {
          this.individualEmployers = response.data.data.individualEmployers;
          this.individualAffiliates = response.data.data.individualAffiliates;
          this.individualCope = response.data.data.individualCope;
        }
      }).finally(() => {
        this.loading = false;
      });
    },
    onEditRelationship(individualAffiliate) {
      this.individualAffiliate = individualAffiliate;
      this.flipped = true;
    },
    onReactivated(responseIndividualAffiliate) {
      const index = this.individualAffiliates.findIndex((individualAffiliateList) => {
        return individualAffiliateList.IndividualAffiliateId = responseIndividualAffiliate.IndividualAffiliateId;
      });
      if (index !== -1) {
        this.individualAffiliates[index] = responseIndividualAffiliate;
        this.individualAffiliates = [...this.individualAffiliates];
      }
    },
    getEduesStatusApi() {
      return axios.get("/api/v3/memberforms/admin/individual-edues-status/" + this.id).then((response) => {
        if (response.data.eduesStatus) {
          this.eduesStatus = true;
        }
      }).finally(() => {
      });
    }
  }
};
function _sfc_render$O(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_view_union_relationship_component = resolveComponent("view-union-relationship-component");
  const _component_edit_union_relationship_data_component = resolveComponent("edit-union-relationship-data-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, {
    id: "unionRelationship",
    "onGroup:selected": $options.onExpand
  }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[1] || (_cache[1] = [
          createTextVNode(" Union Relationships ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VProgressLinear, {
            active: $data.loading,
            indeterminate: true,
            color: "#7bb8da"
          }, null, 8, ["active"]),
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(_component_view_union_relationship_component, {
                individual: $data.individual,
                onEditIndividualAffiliate: $options.onEditRelationship,
                "individual-employers": $data.individualEmployers,
                "individual-affiliates": $data.individualAffiliates,
                "individual-cope": $data.individualCope,
                clicked: !$data.clicked,
                onIndividualAffiliateReactivated: $options.onReactivated
              }, null, 8, ["individual", "onEditIndividualAffiliate", "individual-employers", "individual-affiliates", "individual-cope", "clicked", "onIndividualAffiliateReactivated"])
            ]),
            back: withCtx(() => [
              createVNode(_component_edit_union_relationship_data_component, {
                "read-only": false,
                individual: $data.individual,
                "individual-affiliate": $data.individualAffiliate,
                onCancelEditIndividualAffiliate: _cache[0] || (_cache[0] = ($event) => $data.flipped = false),
                onSavedIndividualAffiliate: $options.onSave,
                "individual-cope": $data.individualCope.length > 0 ? $data.individualCope[0] : {},
                "edues-status": $data.eduesStatus
              }, null, 8, ["individual", "individual-affiliate", "onSavedIndividualAffiliate", "individual-cope", "edues-status"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const UnionRelationshipsComponent = /* @__PURE__ */ _export_sfc(_sfc_main$O, [["render", _sfc_render$O], ["__file", "/var/www/html/resources/js/components/Individual/Partial/UnionRelationshipsComponent.vue"]]);
const _sfc_main$N = {
  name: "AffiliateSwitchRolesComponent",
  props: {
    componentName: {
      required: true
    },
    sectionName: {
      required: false
    },
    affiliateName: {},
    affiliateNumber: {}
  },
  data: () => ({
    visible: false
  }),
  methods: {
    doSwitch() {
      this.visible = false;
      this.$router.push("/affiliate#" + this.sectionName);
    }
  }
};
function _sfc_render$N(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    Fragment,
    null,
    [
      createVNode(VDialog, {
        modelValue: _ctx.visible,
        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.visible = $event),
        width: "500"
      }, {
        default: withCtx(() => [
          createVNode(VCard, { class: "v-card--outlined v-sheet--tile mt-4 pa-4" }, {
            default: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createBaseVNode(
                        "h5",
                        null,
                        "In order to edit this individual's " + toDisplayString($props.componentName.toLowerCase()) + " role, you will be directed to the Affiliate Record for [" + toDisplayString($props.affiliateName) + "] [" + toDisplayString($props.affiliateNumber) + "] to access the Manage " + toDisplayString($props.componentName) + " Roles form.",
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        color: "default",
                        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.visible = false)
                      }, {
                        default: withCtx(() => _cache[4] || (_cache[4] = [
                          createTextVNode("Cancel")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        color: "primary",
                        onClick: _cache[1] || (_cache[1] = ($event) => $options.doSwitch())
                      }, {
                        default: withCtx(() => _cache[5] || (_cache[5] = [
                          createTextVNode("OK")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"]),
      createVNode(VBtn, {
        size: "small",
        class: "affiliate-switch",
        onClick: _cache[3] || (_cache[3] = ($event) => _ctx.visible = true)
      }, {
        default: withCtx(() => _cache[6] || (_cache[6] = [
          createTextVNode("Manage on Affiliate Record")
        ])),
        _: 1
        /* STABLE */
      })
    ],
    64
    /* STABLE_FRAGMENT */
  );
}
const AffiliateSwitchRolesComponent = /* @__PURE__ */ _export_sfc(_sfc_main$N, [["render", _sfc_render$N], ["__file", "/var/www/html/resources/js/components/Affiliate/AffiliateSwitchRolesComponent.vue"]]);
const _sfc_main$M = {
  name: "UnionRolesComponent",
  components: { AffiliateSwitchRolesComponent },
  data() {
    return {
      id: "",
      currentPanel: 0,
      pastPanel: -1,
      individualOfficers: [],
      IndividualAffiliate: {},
      currentIndividualOfficers: [],
      pastIndividualOfficers: [],
      individualStaff: [],
      currentIndividualStaff: [],
      pastIndividualStaff: [],
      currentIndividualCommitteeMembers: [],
      pastIndividualCommitteeMembers: [],
      individualCommitteeMembers: [],
      individualGroups: [],
      currentIndividualGroups: [],
      pastIndividualGroups: [],
      loading: false,
      Affiliate: {},
      officerroles: [
        { title: "Title", value: "AffiliateOfficerRole.AffiliateOfficerRoleName" },
        { title: "Affiliate number", value: "AffiliateNumber" },
        { title: "Affiliate name", value: "AffiliateName" },
        { title: "Elected?", value: "IsElected" },
        { title: "Start date", value: "TermStartDate" },
        { title: "End date", value: "TermEndDate" }
      ],
      staffroles: [
        { title: "Title", value: "StaffTitle" },
        { title: "Function area", value: "StaffDepartment.StaffDepartmentName" },
        { title: "Affiliate name", value: "AffiliateName" },
        { title: "Affiliate number", value: "AffiliateNumber" },
        { title: "Start date", value: "TermStartDate" },
        { title: "End date", value: "TermEndDate" }
      ],
      committeeroles: [
        { title: "Title", value: "CommitteeMemberType.CommitteeMemberTypeName" },
        { title: "Committee", value: "AffiliateCommittee.AffiliateCommitteeName" },
        { title: "Affiliate name", value: "AffiliateName" },
        { title: "Affiliate number", value: "AffiliateNumber" },
        { title: "Start date", value: "StartDate" },
        { title: "End date", value: "EndDate" }
      ],
      groups: [
        { title: "Group", value: "AffiliateGroup.AffiliateGroupName" },
        { title: "Affiliate number", value: "AffiliateNumber" },
        { title: "Affiliate name", value: "AffiliateName" },
        { title: "Start date", value: "StartDate" },
        { title: "End date", value: "EndDate" }
      ]
    };
  },
  mounted() {
    this.id = this.$route.params.id;
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/aggregate/individual/unionroles/" + this.id).then((response) => {
        this.IndividualAffiliate = response.data.data[0].Affiliate;
        this.individualOfficers = response.data.data[0].individualOfficers;
        this.currentIndividualOfficers = response.data.data[0].currentIndividualOfficers;
        this.pastIndividualOfficers = response.data.data[0].pastIndividualOfficers;
        this.individualStaff = response.data.data[0].individualStaff;
        this.currentIndividualStaff = response.data.data[0].currentIndividualStaff;
        this.pastIndividualStaff = response.data.data[0].pastIndividualStaff;
        this.individualCommitteeMembers = response.data.data[0].individualCommitteeMember;
        this.currentIndividualCommitteeMembers = response.data.data[0].currentIndividualCommitteeMember;
        this.pastIndividualCommitteeMembers = response.data.data[0].pastIndividualCommitteeMember;
        this.individualGroups = response.data.data[0].individualGroupMember;
        this.currentIndividualGroups = response.data.data[0].currentIndividualGroupMember;
        this.pastIndividualGroups = response.data.data[0].pastIndividualGroupMember;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (value) {
        this.getDataFromApi();
      }
    },
    openCurrent() {
      this.currentPanel = 0;
      this.pastPanel = -1;
    },
    openPast() {
      this.currentPanel = -1;
      this.pastPanel = 0;
    }
  }
};
const _hoisted_1$y = { key: 0 };
const _hoisted_2$v = { key: 0 };
const _hoisted_3$p = { key: 0 };
const _hoisted_4$n = { key: 0 };
const _hoisted_5$l = { key: 0 };
const _hoisted_6$j = { key: 0 };
const _hoisted_7$g = { key: 0 };
const _hoisted_8$b = { key: 0 };
const _hoisted_9$b = { key: 0 };
const _hoisted_10$9 = { key: 0 };
const _hoisted_11$9 = { key: 0 };
const _hoisted_12$9 = { key: 0 };
const _hoisted_13$7 = { key: 0 };
const _hoisted_14$7 = { key: 0 };
const _hoisted_15$7 = { key: 0 };
const _hoisted_16$7 = { key: 0 };
function _sfc_render$M(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_AffiliateSwitchRolesComponent = resolveComponent("AffiliateSwitchRolesComponent");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[4] || (_cache[4] = [
          createTextVNode(" Union Roles ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VProgressLinear, {
            active: $data.loading,
            indeterminate: true,
            color: "#7bb8da"
          }, null, 8, ["active"]),
          createVNode(VRow, { class: "hidden-md-and-down" }, {
            default: withCtx(() => [
              createVNode(VCol, { class: "text-right" }, {
                default: withCtx(() => [
                  createVNode(VBtn, {
                    size: "small",
                    onClick: _cache[0] || (_cache[0] = ($event) => $options.openCurrent())
                  }, {
                    default: withCtx(() => _cache[5] || (_cache[5] = [
                      createTextVNode("Show current roles")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VBtn, {
                    size: "small",
                    onClick: _cache[1] || (_cache[1] = ($event) => $options.openPast())
                  }, {
                    default: withCtx(() => _cache[6] || (_cache[6] = [
                      createTextVNode("Show current and previous roles")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createCommentVNode(" Mobile Buttons "),
          createVNode(VCol, { class: "hidden-lg-and-up" }, {
            default: withCtx(() => [
              createVNode(VBtn, {
                size: "x-small",
                onClick: _cache[2] || (_cache[2] = ($event) => $options.openPast())
              }, {
                default: withCtx(() => _cache[7] || (_cache[7] = [
                  createTextVNode("Show current and previous roles")
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCol, { class: "hidden-lg-and-up" }, {
            default: withCtx(() => [
              createVNode(VBtn, {
                size: "x-small",
                onClick: _cache[3] || (_cache[3] = ($event) => $options.openCurrent())
              }, {
                default: withCtx(() => _cache[8] || (_cache[8] = [
                  createTextVNode("Show current roles")
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createVNode(VExpansionPanels, { "model-value": $data.currentPanel }, {
                    default: withCtx(() => [
                      createVNode(VExpansionPanel, null, {
                        default: withCtx(() => [
                          createVNode(VExpansionPanelText, null, {
                            default: withCtx(() => [
                              createVNode(VRow, null, {
                                default: withCtx(() => [
                                  createVNode(VCol, {
                                    cols: "12",
                                    lg: "2"
                                  }, {
                                    default: withCtx(() => _cache[9] || (_cache[9] = [
                                      createBaseVNode(
                                        "h4",
                                        null,
                                        "Officer roles",
                                        -1
                                        /* HOISTED */
                                      )
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VCol, { cols: "10" }, {
                                    default: withCtx(() => [
                                      createVNode(_component_AffiliateSwitchRolesComponent, {
                                        "component-name": "Officer",
                                        "section-name": "officerRole",
                                        "affiliate-name": $data.IndividualAffiliate.AffiliateName,
                                        "affiliate-number": $data.IndividualAffiliate.AffiliateNumber
                                      }, null, 8, ["affiliate-name", "affiliate-number"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VRow, null, {
                                default: withCtx(() => [
                                  createVNode(VCol, { cols: "12" }, {
                                    default: withCtx(() => [
                                      createVNode(VDataTable, {
                                        "hide-default-footer": true,
                                        headers: $data.officerroles,
                                        "mobile-breakpoint": 992,
                                        class: "mobile-global-card-table",
                                        items: $data.currentIndividualOfficers
                                      }, {
                                        [`item.AffiliateName`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateName),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.AffiliateNumber`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateNumber),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.TermStartDate`]: withCtx((props) => [
                                          props.item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_1$y,
                                            toDisplayString(_ctx.$filters.formatDate(props.item.TermStartDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        [`item.TermEndDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_2$v,
                                            toDisplayString(_ctx.$filters.formatDate(item.TermEndDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      }, 1032, ["headers", "items"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VRow, null, {
                                default: withCtx(() => [
                                  createVNode(VCol, {
                                    cols: "12",
                                    lg: "2"
                                  }, {
                                    default: withCtx(() => _cache[10] || (_cache[10] = [
                                      createBaseVNode(
                                        "h4",
                                        null,
                                        "Staff roles",
                                        -1
                                        /* HOISTED */
                                      )
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VCol, { cols: "10" }, {
                                    default: withCtx(() => [
                                      createVNode(_component_AffiliateSwitchRolesComponent, {
                                        "component-name": "Staff",
                                        "section-name": "staffRole",
                                        "affiliate-name": $data.IndividualAffiliate.AffiliateName,
                                        "affiliate-number": $data.IndividualAffiliate.AffiliateNumber
                                      }, null, 8, ["affiliate-name", "affiliate-number"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VRow, null, {
                                default: withCtx(() => [
                                  createVNode(VCol, { cols: "12" }, {
                                    default: withCtx(() => [
                                      createVNode(VDataTable, {
                                        "hide-default-footer": true,
                                        headers: $data.staffroles,
                                        "mobile-breakpoint": 992,
                                        class: "mobile-global-card-table",
                                        items: $data.currentIndividualStaff
                                      }, {
                                        [`item.AffiliateName`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateName),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.AffiliateNumber`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateNumber),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.TermStartDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_3$p,
                                            toDisplayString(_ctx.$filters.formatDate(item.TermStartDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        [`item.TermEndDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_4$n,
                                            toDisplayString(_ctx.$filters.formatDate(item.TermEndDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      }, 1032, ["headers", "items"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              _cache[11] || (_cache[11] = createBaseVNode(
                                "h4",
                                null,
                                "Committee roles",
                                -1
                                /* HOISTED */
                              )),
                              createVNode(VRow, null, {
                                default: withCtx(() => [
                                  createVNode(VCol, { cols: "12" }, {
                                    default: withCtx(() => [
                                      createVNode(VDataTable, {
                                        "hide-default-footer": true,
                                        headers: $data.committeeroles,
                                        "mobile-breakpoint": 992,
                                        class: "mobile-global-card-table",
                                        items: $data.currentIndividualCommitteeMembers
                                      }, {
                                        [`item.AffiliateName`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateName),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.AffiliateNumber`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateNumber),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.StartDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_5$l,
                                            toDisplayString(_ctx.$filters.formatDate(item.StartDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        [`item.EndDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_6$j,
                                            toDisplayString(_ctx.$filters.formatDate(item.EndDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      }, 1032, ["headers", "items"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              _cache[12] || (_cache[12] = createBaseVNode(
                                "h4",
                                null,
                                "Groups",
                                -1
                                /* HOISTED */
                              )),
                              createVNode(VRow, null, {
                                default: withCtx(() => [
                                  createVNode(VCol, { cols: "12" }, {
                                    default: withCtx(() => [
                                      createVNode(VDataTable, {
                                        "hide-default-footer": true,
                                        headers: $data.groups,
                                        "mobile-breakpoint": 992,
                                        class: "mobile-global-card-table",
                                        items: $data.currentIndividualGroups
                                      }, {
                                        [`item.AffiliateName`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateName),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.AffiliateNumber`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateNumber),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.StartDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_7$g,
                                            toDisplayString(_ctx.$filters.formatDate(item.StartDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        [`item.EndDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_8$b,
                                            toDisplayString(_ctx.$filters.formatDate(item.EndDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      }, 1032, ["headers", "items"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["model-value"]),
                  createVNode(VExpansionPanels, { "model-value": $data.pastPanel }, {
                    default: withCtx(() => [
                      createVNode(VExpansionPanel, null, {
                        default: withCtx(() => [
                          createVNode(VExpansionPanelText, null, {
                            default: withCtx(() => [
                              createVNode(VRow, null, {
                                default: withCtx(() => [
                                  createVNode(VCol, {
                                    cols: "12",
                                    lg: "2"
                                  }, {
                                    default: withCtx(() => _cache[13] || (_cache[13] = [
                                      createBaseVNode(
                                        "h4",
                                        null,
                                        "Officer roles",
                                        -1
                                        /* HOISTED */
                                      )
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VCol, { cols: "10" }, {
                                    default: withCtx(() => [
                                      createVNode(_component_AffiliateSwitchRolesComponent, {
                                        "component-name": "Officer",
                                        "section-name": "officerRole",
                                        "affiliate-name": $data.IndividualAffiliate.AffiliateName,
                                        "affiliate-number": $data.IndividualAffiliate.AffiliateNumber
                                      }, null, 8, ["affiliate-name", "affiliate-number"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VRow, null, {
                                default: withCtx(() => [
                                  createVNode(VCol, { cols: "12" }, {
                                    default: withCtx(() => [
                                      createVNode(VDataTable, {
                                        "hide-default-footer": true,
                                        headers: $data.officerroles,
                                        "mobile-breakpoint": 992,
                                        class: "mobile-global-card-table",
                                        items: $data.pastIndividualOfficers
                                      }, {
                                        [`item.AffiliateName`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateName),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.AffiliateNumber`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateNumber),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.TermStartDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_9$b,
                                            toDisplayString(_ctx.$filters.formatDate(item.TermStartDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        [`item.TermEndDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_10$9,
                                            toDisplayString(_ctx.$filters.formatDate(item.TermEndDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      }, 1032, ["headers", "items"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VRow, null, {
                                default: withCtx(() => [
                                  createVNode(VCol, { cols: "2" }, {
                                    default: withCtx(() => _cache[14] || (_cache[14] = [
                                      createBaseVNode(
                                        "h4",
                                        null,
                                        "Staff roles",
                                        -1
                                        /* HOISTED */
                                      )
                                    ])),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(VCol, { cols: "10" }, {
                                    default: withCtx(() => [
                                      createVNode(_component_AffiliateSwitchRolesComponent, {
                                        "component-name": "Staff",
                                        "section-name": "staffRole",
                                        "affiliate-name": $data.IndividualAffiliate.AffiliateName,
                                        "affiliate-number": $data.IndividualAffiliate.AffiliateNumber
                                      }, null, 8, ["affiliate-name", "affiliate-number"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VRow, null, {
                                default: withCtx(() => [
                                  createVNode(VCol, { cols: "12" }, {
                                    default: withCtx(() => [
                                      createVNode(VDataTable, {
                                        "hide-default-footer": true,
                                        headers: $data.staffroles,
                                        "mobile-breakpoint": 992,
                                        class: "mobile-global-card-table",
                                        items: $data.pastIndividualStaff
                                      }, {
                                        [`item.AffiliateName`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateName),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.AffiliateNumber`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateNumber),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.TermStartDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_11$9,
                                            toDisplayString(_ctx.$filters.formatDate(item.TermStartDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        [`item.TermEndDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_12$9,
                                            toDisplayString(_ctx.$filters.formatDate(item.TermEndDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      }, 1032, ["headers", "items"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              _cache[15] || (_cache[15] = createBaseVNode(
                                "h4",
                                null,
                                "Committee roles",
                                -1
                                /* HOISTED */
                              )),
                              createVNode(VRow, null, {
                                default: withCtx(() => [
                                  createVNode(VCol, { cols: "12" }, {
                                    default: withCtx(() => [
                                      createVNode(VDataTable, {
                                        "hide-default-footer": true,
                                        headers: $data.committeeroles,
                                        "mobile-breakpoint": 992,
                                        class: "mobile-global-card-table",
                                        items: $data.pastIndividualCommitteeMembers
                                      }, {
                                        [`item.AffiliateName`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateName),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.AffiliateNumber`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateNumber),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.StartDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_13$7,
                                            toDisplayString(_ctx.$filters.formatDate(item.StartDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        [`item.EndDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_14$7,
                                            toDisplayString(_ctx.$filters.formatDate(item.EndDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      }, 1032, ["headers", "items"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              _cache[16] || (_cache[16] = createBaseVNode(
                                "h4",
                                null,
                                "Groups",
                                -1
                                /* HOISTED */
                              )),
                              createVNode(VRow, null, {
                                default: withCtx(() => [
                                  createVNode(VCol, { cols: "12" }, {
                                    default: withCtx(() => [
                                      createVNode(VDataTable, {
                                        "hide-default-footer": true,
                                        headers: $data.groups,
                                        "mobile-breakpoint": 992,
                                        class: "mobile-global-card-table",
                                        items: $data.pastIndividualGroups
                                      }, {
                                        [`item.AffiliateName`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateName),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.AffiliateNumber`]: withCtx((props) => [
                                          createTextVNode(
                                            toDisplayString($data.IndividualAffiliate.AffiliateNumber),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        [`item.StartDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_15$7,
                                            toDisplayString(_ctx.$filters.formatDate(item.StartDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        [`item.EndDate`]: withCtx(({ item }) => [
                                          item ? (openBlock(), createElementBlock(
                                            "span",
                                            _hoisted_16$7,
                                            toDisplayString(_ctx.$filters.formatDate(item.EndDate)),
                                            1
                                            /* TEXT */
                                          )) : createCommentVNode("v-if", true)
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      }, 1032, ["headers", "items"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["model-value"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const UnionRolesComponent = /* @__PURE__ */ _export_sfc(_sfc_main$M, [["render", _sfc_render$M], ["__file", "/var/www/html/resources/js/components/Individual/Partial/UnionRolesComponent.vue"]]);
const _sfc_main$L = {
  name: "ViewBasicDataComponent",
  props: {
    individual: {
      type: Object,
      required: true
    },
    officerRoles: {
      type: Array,
      required: false
    },
    shouldDisplayDataComponent: {
      type: Boolean,
      default: true
    }
  },
  methods: {
    swipe(direction) {
      this.$emit("swipeToClose");
    },
    getUniqueAffiliates(individualAffiliates, fieldName) {
      const affiliates = [];
      if (!individualAffiliates) {
        return affiliates;
      }
      for (const individualAffiliate of individualAffiliates) {
        if (individualAffiliate.Affiliate && affiliates.indexOf(individualAffiliate.Affiliate[fieldName]) === -1) {
          affiliates.push(individualAffiliate.Affiliate[fieldName]);
        }
      }
      return affiliates.join(",");
    },
    getUniqueAffiliatesById(individualAffiliates, fieldName, AffiliateId) {
      const affiliates = [];
      if (!individualAffiliates) {
        return affiliates;
      }
      for (const individualAffiliate of individualAffiliates) {
        if (individualAffiliate.Affiliate && individualAffiliate.Affiliate.AffiliateId == AffiliateId && affiliates.indexOf(individualAffiliate.Affiliate[fieldName]) === -1) {
          affiliates.push(individualAffiliate.Affiliate[fieldName]);
        }
      }
      return affiliates.join(",");
    },
    isActiveMember(individualAffiliates, AffiliateId) {
      const isActive = false;
      if (!individualAffiliates) {
        return isActive;
      }
      const activeIndividualAffiliates = individualAffiliates.map((affiliate) => affiliate.Affiliate.AffiliateId);
      if (activeIndividualAffiliates.indexOf(AffiliateId) == -1) {
        return isActive;
      }
      return true;
    },
    getUniqueAffiliateUnionRelationshipNames(individualAffiliates) {
      const affiliates = [];
      if (!individualAffiliates) {
        return affiliates;
      }
      for (const individualAffiliate of individualAffiliates) {
        if (individualAffiliate.UnionRelationshipType && affiliates.indexOf(individualAffiliate.UnionRelationshipType.UnionRelationshipTypeName) === -1) {
          affiliates.push(individualAffiliate.UnionRelationshipType.UnionRelationshipTypeName);
        }
      }
      return affiliates;
    },
    employerStructural(employers) {
      return employers ? employers.filter((employer) => employer.Employer && employer.Employer.IsStructural == 0) : [];
    },
    itemsWithProperty(items, property) {
      return items.filter((item) => item[property]);
    },
    individualWithEmployer(individuals) {
      return individuals.filter((individual) => individual.individualEmployers[0].Employer);
    }
  }
};
const _hoisted_1$x = { class: "data-container" };
const _hoisted_2$u = { class: "data-value" };
const _hoisted_3$o = { class: "data-container" };
const _hoisted_4$m = { class: "data-value" };
const _hoisted_5$k = { class: "data-container" };
const _hoisted_6$i = { class: "data-value" };
const _hoisted_7$f = { class: "data-container" };
const _hoisted_8$a = { class: "data-value" };
const _hoisted_9$a = { class: "data-container" };
const _hoisted_10$8 = { class: "data-value" };
const _hoisted_11$8 = { key: 0 };
const _hoisted_12$8 = { class: "data-container" };
const _hoisted_13$6 = { class: "data-value" };
const _hoisted_14$6 = { key: 0 };
const _hoisted_15$6 = { class: "data-container" };
const _hoisted_16$6 = { class: "data-value" };
const _hoisted_17$6 = { class: "data-container" };
const _hoisted_18$6 = { class: "data-value" };
const _hoisted_19$6 = { key: 0 };
const _hoisted_20$5 = { class: "data-container" };
const _hoisted_21$5 = { class: "data-value" };
const _hoisted_22$5 = { key: 0 };
const _hoisted_23$5 = { class: "data-container" };
const _hoisted_24$5 = { class: "data-value" };
const _hoisted_25$5 = { class: "data-container" };
const _hoisted_26$5 = { class: "data-value" };
const _hoisted_27$5 = { key: 0 };
const _hoisted_28$5 = { key: 1 };
const _hoisted_29$5 = { key: 2 };
const _hoisted_30$5 = { class: "data-container" };
const _hoisted_31$5 = { class: "data-value" };
const _hoisted_32$3 = { key: 0 };
const _hoisted_33$3 = { key: 0 };
const _hoisted_34$2 = { key: 1 };
const _hoisted_35$2 = { class: "data-container" };
const _hoisted_36$2 = { class: "data-value" };
const _hoisted_37$2 = { key: 0 };
const _hoisted_38$1 = { class: "data-container" };
const _hoisted_39$1 = { class: "data-value" };
const _hoisted_40$1 = { key: 0 };
const _hoisted_41$1 = { class: "data-container" };
const _hoisted_42$1 = { class: "data-value" };
const _hoisted_43$1 = { key: 0 };
const _hoisted_44$1 = { class: "mobile-link-style" };
const _hoisted_45$1 = {
  key: 0,
  class: "data-container mobile-data-container"
};
const _hoisted_46$1 = { class: "data-value" };
const _hoisted_47$1 = {
  key: 1,
  class: "data-container mobile-data-container"
};
const _hoisted_48$1 = { class: "data-value" };
const _hoisted_49$1 = {
  key: 2,
  class: "data-container mobile-data-container"
};
const _hoisted_50$1 = { class: "data-value" };
const _hoisted_51$1 = {
  key: 3,
  class: "data-container mobile-data-container"
};
const _hoisted_52$1 = { class: "data-value" };
const _hoisted_53$1 = {
  key: 4,
  class: "data-container mobile-data-container"
};
const _hoisted_54$1 = { class: "data-value" };
const _hoisted_55$1 = { class: "data-container mobile-data-container" };
const _hoisted_56$1 = { class: "data-value" };
const _hoisted_57$1 = { class: "data-container mobile-data-container" };
const _hoisted_58$1 = { class: "data-value" };
const _hoisted_59$1 = { class: "data-container mobile-data-container" };
const _hoisted_60$1 = { class: "data-value" };
const _hoisted_61$1 = { class: "data-container mobile-data-container" };
const _hoisted_62$1 = { class: "data-value" };
const _hoisted_63$1 = { class: "data-container mobile-data-container" };
const _hoisted_64$1 = {
  key: 0,
  class: "data-value"
};
const _hoisted_65$1 = { class: "data-container mobile-data-container" };
const _hoisted_66$1 = { class: "data-value" };
const _hoisted_67$1 = { class: "data-container mobile-data-container" };
const _hoisted_68 = { class: "data-value" };
const _hoisted_69 = { class: "data-container mobile-data-container" };
const _hoisted_70 = { class: "data-value" };
const _hoisted_71 = { class: "data-container mobile-data-container" };
const _hoisted_72 = {
  key: 0,
  class: "data-value"
};
const _hoisted_73 = { class: "data-container mobile-data-container" };
const _hoisted_74 = { class: "data-value" };
const _hoisted_75 = { class: "data-container mobile-data-container" };
const _hoisted_76 = { class: "data-value" };
const _hoisted_77 = { class: "data-container mobile-data-container" };
const _hoisted_78 = { class: "data-value" };
const _hoisted_79 = { key: 0 };
const _hoisted_80 = { class: "data-container mobile-data-container" };
const _hoisted_81 = { class: "data-value" };
const _hoisted_82 = { key: 0 };
function _sfc_render$L(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_router_link = resolveComponent("router-link");
  return $props.shouldDisplayDataComponent ? (openBlock(), createBlock(VCard, { key: 0 }, {
    default: withCtx(() => [
      createVNode(VCardTitle, { class: "details-header d-flex justify-space-between" }, {
        default: withCtx(() => [
          createTextVNode(
            toDisplayString($props.individual.Prefix && $props.individual.Prefix.PrefixName) + " " + toDisplayString($props.individual.FirstName) + " " + toDisplayString($props.individual.MiddleName) + " " + toDisplayString($props.individual.LastName) + toDisplayString($props.individual.Suffix && $props.individual.Suffix.SuffixName ? ", " + $props.individual.Suffix.SuffixName : "") + " ",
            1
            /* TEXT */
          ),
          createVNode(VBtn, {
            class: "hidden-md-and-down",
            onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("edit-individual"))
          }, {
            default: withCtx(() => _cache[2] || (_cache[2] = [
              createTextVNode("Edit")
            ])),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VCardText, null, {
        default: withCtx(() => [
          createVNode(VContainer, null, {
            default: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "6"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_1$x, [
                        _cache[3] || (_cache[3] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Preferred Name:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode(
                          "div",
                          _hoisted_2$u,
                          toDisplayString($props.individual.PreferredName),
                          1
                          /* TEXT */
                        )
                      ]),
                      createBaseVNode("div", _hoisted_3$o, [
                        _cache[4] || (_cache[4] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Original Last Name:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode(
                          "div",
                          _hoisted_4$m,
                          toDisplayString($props.individual.PreviousName),
                          1
                          /* TEXT */
                        )
                      ]),
                      createBaseVNode("div", _hoisted_5$k, [
                        _cache[5] || (_cache[5] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Affiliate Number:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_6$i, [
                          createBaseVNode(
                            "span",
                            null,
                            toDisplayString($options.getUniqueAffiliates($props.individual.individualAffiliates, "AffiliateNumber")),
                            1
                            /* TEXT */
                          )
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_7$f, [
                        _cache[6] || (_cache[6] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Affiliate Name:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_8$a, [
                          createBaseVNode(
                            "span",
                            null,
                            toDisplayString($options.getUniqueAffiliates($props.individual.individualAffiliates, "AffiliateName")),
                            1
                            /* TEXT */
                          )
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_9$a, [
                        _cache[7] || (_cache[7] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Union Relationship:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_10$8, [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($props.individual.activeIndividualAffiliates, (affiliate) => {
                              return openBlock(), createElementBlock(
                                "div",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                [
                                  affiliate.UnionRelationshipType ? (openBlock(), createElementBlock(
                                    "span",
                                    _hoisted_11$8,
                                    toDisplayString(affiliate.UnionRelationshipType.UnionRelationshipTypeName),
                                    1
                                    /* TEXT */
                                  )) : createCommentVNode("v-if", true)
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_12$8, [
                        _cache[8] || (_cache[8] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Local Dues/Fee Category:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_13$6, [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($props.individual.activeIndividualAffiliates, (affiliate) => {
                              return openBlock(), createElementBlock(
                                "div",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                [
                                  affiliate.LocalDuesCategory ? (openBlock(), createElementBlock(
                                    "span",
                                    _hoisted_14$6,
                                    toDisplayString(affiliate.LocalDuesCategory.LocalDuesCategoryName),
                                    1
                                    /* TEXT */
                                  )) : createCommentVNode("v-if", true)
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_15$6, [
                        _cache[9] || (_cache[9] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Relationship Start Date:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_16$6, [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($props.individual.activeIndividualAffiliates, (affiliate) => {
                              return openBlock(), createElementBlock(
                                "div",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                toDisplayString(_ctx.$filters.formatDate(affiliate.StartDate)),
                                17
                                /* TEXT, FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_17$6, [
                        _cache[10] || (_cache[10] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Member ID:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_18$6, [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($props.individual.individualMembers, (member) => {
                              return openBlock(), createElementBlock(
                                "div",
                                mergeProps({ ref_for: true }, member, {
                                  key: member.MemberIdMappingId
                                }),
                                [
                                  $options.isActiveMember($props.individual.activeIndividualAffiliates, member.AffiliateId) ? (openBlock(), createElementBlock(
                                    "div",
                                    _hoisted_19$6,
                                    toDisplayString(member.MemberId) + " (" + toDisplayString($options.getUniqueAffiliatesById($props.individual.individualAffiliates, "AffiliateName", member.AffiliateId)) + " - " + toDisplayString($options.getUniqueAffiliatesById($props.individual.individualAffiliates, "AffiliateNumber", member.AffiliateId)) + ") ",
                                    1
                                    /* TEXT */
                                  )) : createCommentVNode("v-if", true)
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "6"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_20$5, [
                        _cache[11] || (_cache[11] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Employer:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_21$5, [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.employerStructural($props.individual.activeIndividualEmployers), (employer, index) => {
                              return openBlock(), createElementBlock(
                                "div",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_22$5, ", ")) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    " " + toDisplayString(employer.Employer.EmployerName),
                                    1
                                    /* TEXT */
                                  )
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_23$5, [
                        _cache[12] || (_cache[12] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Employee ID:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_24$5, [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($props.individual.activeIndividualEmployers, (employer) => {
                              return openBlock(), createElementBlock(
                                "div",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                toDisplayString(employer.EmployeeId),
                                17
                                /* TEXT, FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_25$5, [
                        _cache[13] || (_cache[13] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Is Working:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_26$5, [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($props.individual.activeIndividualAffiliates, (affiliate, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                [
                                  affiliate.IsCurrent == true ? (openBlock(), createElementBlock("span", _hoisted_27$5, " Yes ")) : createCommentVNode("v-if", true),
                                  affiliate.IsCurrent == false ? (openBlock(), createElementBlock("span", _hoisted_28$5, " No ")) : createCommentVNode("v-if", true),
                                  index != $props.individual.activeIndividualAffiliates.length - 1 ? (openBlock(), createElementBlock("span", _hoisted_29$5, ", ")) : createCommentVNode("v-if", true)
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_30$5, [
                        _cache[14] || (_cache[14] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Last Assessment Rating:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_31$5, [
                          $props.individual.individualQuickComments && $props.individual.individualQuickComments.length > 0 ? (openBlock(), createElementBlock("span", _hoisted_32$3, [
                            $props.individual.individualQuickComments[$props.individual.individualQuickComments.length - 1].IndividualAssessment ? (openBlock(), createElementBlock(
                              "span",
                              _hoisted_33$3,
                              toDisplayString($props.individual.individualQuickComments[$props.individual.individualQuickComments.length - 1].IndividualAssessment.Rating),
                              1
                              /* TEXT */
                            )) : createCommentVNode("v-if", true),
                            !$props.individual.individualQuickComments[$props.individual.individualQuickComments.length - 1].IndividualAssessment ? (openBlock(), createElementBlock("span", _hoisted_34$2)) : createCommentVNode("v-if", true)
                          ])) : createCommentVNode("v-if", true)
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_35$2, [
                        _cache[15] || (_cache[15] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Address:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_36$2, [
                          $props.individual && $props.individual.individualAddressesOrdered && $props.individual.individualAddressesOrdered.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_37$2,
                            toDisplayString($props.individual.individualAddressesOrdered[0].AddressLine1) + ", " + toDisplayString($props.individual.individualAddressesOrdered[0].AddressLine2 && $props.individual.individualAddressesOrdered[0].AddressLine2.trim().length > 0 ? $props.individual.individualAddressesOrdered[0].AddressLine2 + ", " : "") + " " + toDisplayString($props.individual.individualAddressesOrdered[0].City) + ", " + toDisplayString($props.individual.individualAddressesOrdered[0].StateTerritory ? $props.individual.individualAddressesOrdered[0].StateTerritory.StateTerritoryCode : "") + ", " + toDisplayString($props.individual.individualAddressesOrdered[0].PostalCode),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_38$1, [
                        _cache[16] || (_cache[16] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Email:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_39$1, [
                          $props.individual && $props.individual.individualEmailsOrdered && $props.individual.individualEmailsOrdered.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_40$1,
                            toDisplayString($props.individual.individualEmailsOrdered[0].Email),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_41$1, [
                        _cache[17] || (_cache[17] = createBaseVNode(
                          "div",
                          { class: "data-tag" },
                          "Phone:",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_42$1, [
                          $props.individual && $props.individual.individualPhonesOrdered && $props.individual.individualPhonesOrdered.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_43$1,
                            toDisplayString($props.individual.individualPhonesOrdered[0].PhoneNumber),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createCommentVNode(" MOBILE Breakpoint "),
          !$props.shouldDisplayDataComponent ? (openBlock(), createBlock(VContainer, {
            key: 0,
            class: "hidden-lg-and-up"
          }, {
            default: withCtx(() => [
              withDirectives((openBlock(), createBlock(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createBaseVNode("h3", _hoisted_44$1, [
                        createVNode(_component_router_link, {
                          to: { name: "IndividualDetails", params: { id: $props.individual.IndividualId } }
                        }, {
                          default: withCtx(() => [
                            createTextVNode(
                              toDisplayString($props.individual.FirstName) + " " + toDisplayString($props.individual.LastName),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["to"])
                      ]),
                      _cache[36] || (_cache[36] = createBaseVNode(
                        "div",
                        { class: "mobile-link-note-container" },
                        [
                          createBaseVNode("div", { class: "data-value" }, [
                            createBaseVNode("span", null, "Click on the name to view and edit the individual record.")
                          ])
                        ],
                        -1
                        /* HOISTED */
                      )),
                      $props.individual.PreferredName ? (openBlock(), createElementBlock("div", _hoisted_45$1, [
                        createBaseVNode("div", _hoisted_46$1, [
                          _cache[18] || (_cache[18] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Preferred Name: ",
                            -1
                            /* HOISTED */
                          )),
                          createBaseVNode(
                            "span",
                            null,
                            toDisplayString($props.individual.PreferredName),
                            1
                            /* TEXT */
                          )
                        ])
                      ])) : createCommentVNode("v-if", true),
                      $props.individual.FirstName ? (openBlock(), createElementBlock("div", _hoisted_47$1, [
                        createBaseVNode("div", _hoisted_48$1, [
                          _cache[19] || (_cache[19] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "First Name: ",
                            -1
                            /* HOISTED */
                          )),
                          createBaseVNode(
                            "span",
                            null,
                            toDisplayString($props.individual.FirstName),
                            1
                            /* TEXT */
                          )
                        ])
                      ])) : createCommentVNode("v-if", true),
                      $props.individual.MiddleName ? (openBlock(), createElementBlock("div", _hoisted_49$1, [
                        createBaseVNode("div", _hoisted_50$1, [
                          _cache[20] || (_cache[20] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Middle Name: ",
                            -1
                            /* HOISTED */
                          )),
                          createBaseVNode(
                            "span",
                            null,
                            toDisplayString($props.individual.MiddleName),
                            1
                            /* TEXT */
                          )
                        ])
                      ])) : createCommentVNode("v-if", true),
                      $props.individual.LastName ? (openBlock(), createElementBlock("div", _hoisted_51$1, [
                        createBaseVNode("div", _hoisted_52$1, [
                          _cache[21] || (_cache[21] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Last Name: ",
                            -1
                            /* HOISTED */
                          )),
                          createBaseVNode(
                            "span",
                            null,
                            toDisplayString($props.individual.LastName),
                            1
                            /* TEXT */
                          )
                        ])
                      ])) : createCommentVNode("v-if", true),
                      $props.individual.YearOfBirth ? (openBlock(), createElementBlock("div", _hoisted_53$1, [
                        createBaseVNode("div", _hoisted_54$1, [
                          _cache[22] || (_cache[22] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Date of Birth: ",
                            -1
                            /* HOISTED */
                          )),
                          createBaseVNode(
                            "span",
                            null,
                            toDisplayString($props.individual.MonthOfBirth) + "/" + toDisplayString($props.individual.DayOfBirth) + "/" + toDisplayString($props.individual.YearOfBirth),
                            1
                            /* TEXT */
                          )
                        ])
                      ])) : createCommentVNode("v-if", true),
                      createBaseVNode("div", _hoisted_55$1, [
                        createBaseVNode("div", _hoisted_56$1, [
                          _cache[23] || (_cache[23] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Union Relationship: ",
                            -1
                            /* HOISTED */
                          )),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.getUniqueAffiliateUnionRelationshipNames($props.individual.individualAffiliates), (unionRelationshipTypeName, index) => {
                              return openBlock(), createElementBlock("span", { key: index }, [
                                createBaseVNode(
                                  "span",
                                  null,
                                  toDisplayString(unionRelationshipTypeName),
                                  1
                                  /* TEXT */
                                )
                              ]);
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_57$1, [
                        createBaseVNode("div", _hoisted_58$1, [
                          _cache[24] || (_cache[24] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Affiliates: ",
                            -1
                            /* HOISTED */
                          )),
                          createBaseVNode(
                            "span",
                            null,
                            toDisplayString($options.getUniqueAffiliates($props.individual.activeIndividualAffiliates, "AffiliateName")),
                            1
                            /* TEXT */
                          )
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_59$1, [
                        createBaseVNode("div", _hoisted_60$1, [
                          _cache[25] || (_cache[25] = createBaseVNode(
                            "div",
                            { class: "mobile-detail-column-name" },
                            "Member ID: ",
                            -1
                            /* HOISTED */
                          )),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($props.individual.individualMembers, (member) => {
                              return openBlock(), createElementBlock(
                                "div",
                                mergeProps({ ref_for: true }, member, {
                                  key: member.MemberIdMappingId
                                }),
                                toDisplayString(member.MemberId),
                                17
                                /* TEXT, FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_61$1, [
                        createBaseVNode("div", _hoisted_62$1, [
                          _cache[26] || (_cache[26] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Local Dues/Fee Category: ",
                            -1
                            /* HOISTED */
                          )),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.itemsWithProperty($props.individual.activeIndividualAffiliates, "LocalDuesCategory"), (affiliate) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                toDisplayString(affiliate.LocalDuesCategory.LocalDuesCategoryName),
                                17
                                /* TEXT, FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_63$1, [
                        $props.individual.individualEmployers ? (openBlock(), createElementBlock("div", _hoisted_64$1, [
                          _cache[27] || (_cache[27] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Employee ID: ",
                            -1
                            /* HOISTED */
                          )),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.itemsWithProperty($props.individual.individualEmployers, "EmployeeId"), (employer) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.EmployerId
                                }),
                                toDisplayString(employer.EmployeeId),
                                17
                                /* TEXT, FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])) : createCommentVNode("v-if", true)
                      ]),
                      createBaseVNode("div", _hoisted_65$1, [
                        createBaseVNode("div", _hoisted_66$1, [
                          _cache[28] || (_cache[28] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Employer: ",
                            -1
                            /* HOISTED */
                          )),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($props.individual.individualEmployers, (employer) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                toDisplayString(employer.Employer.EmployerName),
                                17
                                /* TEXT, FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_67$1, [
                        createBaseVNode("div", _hoisted_68, [
                          _cache[29] || (_cache[29] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Employer Start Date Range: ",
                            -1
                            /* HOISTED */
                          )),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($props.individual.individualEmployers, (employer) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.EmployerId
                                }),
                                toDisplayString(_ctx.$filters.formatDate(employer.StartDate)),
                                17
                                /* TEXT, FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_69, [
                        createBaseVNode("div", _hoisted_70, [
                          _cache[30] || (_cache[30] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Employer End Date Range: ",
                            -1
                            /* HOISTED */
                          )),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($props.individual.individualEmployers, (employer) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                toDisplayString(_ctx.$filters.formatDate(employer.EndDate)),
                                17
                                /* TEXT, FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_71, [
                        $props.individual.individualEmployers ? (openBlock(), createElementBlock("div", _hoisted_72, [
                          _cache[31] || (_cache[31] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Job Category: ",
                            -1
                            /* HOISTED */
                          )),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.itemsWithProperty($props.individual.individualEmployers, "LocalJobClass"), (employer) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                toDisplayString(employer.LocalJobClass.LocalJobClassName),
                                17
                                /* TEXT, FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])) : createCommentVNode("v-if", true)
                      ]),
                      createBaseVNode("div", _hoisted_73, [
                        createBaseVNode("div", _hoisted_74, [
                          _cache[32] || (_cache[32] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Staff Roles: ",
                            -1
                            /* HOISTED */
                          )),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($props.individual.activeIndividualAffiliates, (affiliate) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                [
                                  (openBlock(true), createElementBlock(
                                    Fragment,
                                    null,
                                    renderList(affiliate.individualStaff, (staff) => {
                                      return openBlock(), createElementBlock(
                                        "span",
                                        mergeProps({ ref_for: true }, staff, {
                                          key: staff.AffiliateStaffId
                                        }),
                                        toDisplayString(staff.StaffTitle),
                                        17
                                        /* TEXT, FULL_PROPS */
                                      );
                                    }),
                                    128
                                    /* KEYED_FRAGMENT */
                                  ))
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_75, [
                        createBaseVNode("div", _hoisted_76, [
                          _cache[33] || (_cache[33] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Officer Roles: ",
                            -1
                            /* HOISTED */
                          )),
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($props.officerRoles, (officerRole) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, officerRole, {
                                  key: officerRole.AffiliateOfficerRoleId
                                }),
                                toDisplayString(officerRole.AffiliateOfficerRoleName),
                                17
                                /* TEXT, FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_77, [
                        createBaseVNode("div", _hoisted_78, [
                          _cache[34] || (_cache[34] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Last Assessment Rating: ",
                            -1
                            /* HOISTED */
                          )),
                          $props.individual.individualQuickComments && $props.individual.individualQuickComments.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_79,
                            toDisplayString($props.individual.individualQuickComments[$props.individual.individualQuickComments.length - 1].IndividualAssessment.Rating),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ])
                      ]),
                      createBaseVNode("div", _hoisted_80, [
                        createBaseVNode("div", _hoisted_81, [
                          _cache[35] || (_cache[35] = createBaseVNode(
                            "span",
                            { class: "mobile-detail-column-name" },
                            "Last Assessment Date: ",
                            -1
                            /* HOISTED */
                          )),
                          $props.individual.individualQuickComments && $props.individual.individualQuickComments.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_82,
                            toDisplayString(_ctx.$filters.formatDate($props.individual.individualQuickComments[$props.individual.individualQuickComments.length - 1].CommentDate)),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })), [
                [Touch, { right: () => $options.swipe("right") }]
              ])
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VCardActions, null, {
        default: withCtx(() => [
          createVNode(VSpacer),
          createCommentVNode(" Mobile Edit button "),
          createVNode(VBtn, {
            class: "hidden-lg-and-up",
            variant: "elevated",
            onClick: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("edit-individual"))
          }, {
            default: withCtx(() => _cache[37] || (_cache[37] = [
              createTextVNode("Edit")
            ])),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  })) : createCommentVNode("v-if", true);
}
const BasicDataComponent = /* @__PURE__ */ _export_sfc(_sfc_main$L, [["render", _sfc_render$L], ["__file", "/var/www/html/resources/js/components/Individual/Partial/ViewBasicDataComponent.vue"]]);
const _sfc_main$K = {
  name: "IndividualDetailsComponent",
  components: {
    UnionRelationshipsComponent,
    AllUnionRelationshipsComponent,
    DemographicsComponent,
    FlipCard,
    "address-information-component": AddressInformationComponent$1,
    "email-information-component": EmailInformationComponent$1,
    "phone-information-component": PhoneInformationComponent$1,
    "social-media-information-component": SocialMediaInformationComponent,
    "individual-union-roles-component": UnionRolesComponent,
    "membership-card-component": MembershipCardComponent,
    "individual-employers-component": EmployersComponent,
    "individual-quick-comments-component": QuickCommentsComponent,
    "individual-basic-data-component": BasicDataComponent,
    "individual-edit-basic-data-component": BasicDataComponent$1,
    "edit-demographics-data-component": EditDemographicsDataComponent,
    "individual-political-data-component": PoliticalDataComponent,
    "file-attachment-component": FileAttachmentComponent,
    "activity-log-component": ActivityLogComponent,
    "edues-component": EduesComponent
  },
  data() {
    return {
      id: 0,
      individual: {},
      flipped: false,
      loading: false,
      notAllowed: false,
      eduesStatus: false
    };
  },
  mounted() {
    if (this.$route.params.id) {
      this.id = this.$route.params.id;
      this.getDataFromApi();
      this.getEduesStatusApi();
    } else {
      this.loading = false;
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/individual/" + this.id + "?include=individualAffiliates.Affiliate,Gender,Prefix,Suffix,MaritalStatus,individualEducationLevels,individualEducationLevels.LocalEducationLevel,individualMembers,activeindividualAffiliates.UnionRelationshipType,activeIndividualAffiliates.LocalDuesCategory,individualAddressesOrdered,individualAddressesOrdered.StateTerritory,individualEmailsOrdered,individualPhonesOrdered,activeIndividualEmployers,activeIndividualEmployers.JobTitle,activeIndividualEmployers.Employer,activeIndividualEmployers.Employer.Chapter,individualQuickComments.IndividualAssessment,PoliticalParty").then((response) => {
        this.individual = response.data.data;
      }).catch(() => {
        this.notAllowed = true;
        this.$router.push({ name: "Individuals" });
      }).finally(() => {
        this.loading = false;
      });
    },
    getEduesStatusApi() {
      this.loading = true;
      const individualId = this.id;
      return axios.get("/api/v3/memberforms/admin/individual-edues-status/" + individualId).then((response) => {
        if (response.data.eduesStatus) {
          this.eduesStatus = true;
        }
      }).finally(() => {
        this.loading = false;
      });
    },
    onSavedIndividual(individual) {
      this.flipped = false;
      this.getDataFromApi();
    }
  },
  watch: {
    $route(to, from) {
      this.id = to.params.id;
      this.getDataFromApi();
    }
  }
};
const _hoisted_1$w = { key: 0 };
const _hoisted_2$t = { class: "pt-4" };
function _sfc_render$K(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_individual_basic_data_component = resolveComponent("individual-basic-data-component");
  const _component_individual_edit_basic_data_component = resolveComponent("individual-edit-basic-data-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  const _component_demographics_component = resolveComponent("demographics-component");
  const _component_address_information_component = resolveComponent("address-information-component");
  const _component_email_information_component = resolveComponent("email-information-component");
  const _component_phone_information_component = resolveComponent("phone-information-component");
  const _component_social_media_information_component = resolveComponent("social-media-information-component");
  const _component_union_relationships_component = resolveComponent("union-relationships-component");
  const _component_all_union_relationships_component = resolveComponent("all-union-relationships-component");
  const _component_individual_union_roles_component = resolveComponent("individual-union-roles-component");
  const _component_membership_card_component = resolveComponent("membership-card-component");
  const _component_individual_employers_component = resolveComponent("individual-employers-component");
  const _component_individual_quick_comments_component = resolveComponent("individual-quick-comments-component");
  const _component_individual_political_data_component = resolveComponent("individual-political-data-component");
  const _component_activity_log_component = resolveComponent("activity-log-component");
  const _component_edues_component = resolveComponent("edues-component");
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VProgressLinear, {
        active: $data.loading,
        indeterminate: true,
        color: "#7bb8da"
      }, null, 8, ["active"]),
      createVNode(VAlert, {
        type: "error",
        modelValue: $data.notAllowed,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.notAllowed = $event)
      }, {
        default: withCtx(() => _cache[3] || (_cache[3] = [
          createTextVNode("You do not have access to this record. Please check your global filter to ensure you have the correct Affiliate selected.")
        ])),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"]),
      !$data.notAllowed ? (openBlock(), createElementBlock("div", _hoisted_1$w, [
        createVNode(_component_FlipCard, { flipped: $data.flipped }, {
          front: withCtx(() => [
            createVNode(_component_individual_basic_data_component, {
              individual: $data.individual,
              onEditIndividual: _cache[1] || (_cache[1] = ($event) => $data.flipped = true)
            }, null, 8, ["individual"])
          ]),
          back: withCtx(() => [
            createVNode(_component_individual_edit_basic_data_component, {
              individual: $data.individual,
              "edit-mode": !!$data.individual.IndividualId,
              onSavedIndividual: $options.onSavedIndividual,
              onCancelEditIndividual: _cache[2] || (_cache[2] = ($event) => $data.flipped = false)
            }, null, 8, ["individual", "edit-mode", "onSavedIndividual"])
          ]),
          _: 1
          /* STABLE */
        }, 8, ["flipped"]),
        createBaseVNode("div", _hoisted_2$t, [
          createVNode(VExpansionPanels, null, {
            default: withCtx(() => [
              createVNode(_component_demographics_component, {
                individual: $data.individual,
                onDemographicsChanged: $options.onSavedIndividual
              }, null, 8, ["individual", "onDemographicsChanged"]),
              createVNode(_component_address_information_component, { individual: $data.individual }, null, 8, ["individual"]),
              createVNode(_component_email_information_component, { individual: $data.individual }, null, 8, ["individual"]),
              createVNode(_component_phone_information_component, { individual: $data.individual }, null, 8, ["individual"]),
              createVNode(_component_social_media_information_component, { individual: $data.individual }, null, 8, ["individual"]),
              createVNode(_component_union_relationships_component),
              createVNode(_component_all_union_relationships_component),
              createVNode(_component_individual_union_roles_component, { individual: $data.individual }, null, 8, ["individual"]),
              createVNode(_component_membership_card_component, { individual: $data.individual }, null, 8, ["individual"]),
              createVNode(_component_individual_employers_component),
              createVNode(_component_individual_quick_comments_component, { individual: $data.individual }, null, 8, ["individual"]),
              createVNode(_component_individual_political_data_component, { individual: $data.individual }, null, 8, ["individual"]),
              createCommentVNode('\n                    <v-card class="v-card--outlined v-sheet--tile mt-4">\n                        <file-attachment-component :entityId="id" fileAttachmentTypeName="Individual" allowedFileExtensions=".xls, .xlsx, .csv" v-if="id"></file-attachment-component>\n                    </v-card>\n                    '),
              createVNode(_component_activity_log_component, { individual: $data.individual }, null, 8, ["individual"]),
              $data.eduesStatus ? (openBlock(), createBlock(_component_edues_component, {
                key: 0,
                individual: $data.individual
              }, null, 8, ["individual"])) : createCommentVNode("v-if", true)
            ]),
            _: 1
            /* STABLE */
          })
        ])
      ])) : createCommentVNode("v-if", true)
    ]),
    _: 1
    /* STABLE */
  });
}
const IndividualDetailsComponent = /* @__PURE__ */ _export_sfc(_sfc_main$K, [["render", _sfc_render$K], ["__file", "/var/www/html/resources/js/components/Individual/IndividualDetailsComponent.vue"]]);
const _sfc_main$J = {
  name: "DownloadComponent",
  props: {
    downloadBaseURL: {
      type: String
    },
    downloadAllUrlParams: {
      type: String,
      default: ""
    },
    downloadUrlParams: {
      type: String
    },
    configurationModel: {
      type: String
    },
    configurationKey: {
      type: String
    },
    include: {
      type: String,
      default: ""
    },
    useHomeAddress: {
      type: Boolean,
      default: false
    }
  },
  data: () => ({
    downloadURL: null,
    downloading: false,
    downloadingCancelToken: null,
    downloadTypes: [
      // { title: 'Export List Below (Excel)', format: 'xlsx', type: 'filtered', disabled: true },
      // { title: 'Export All Records and Fields (Excel)', format: 'xlsx', type: 'all', disabled: true },
      { title: "Export List Below (CSV)", format: "csv", type: "filtered", disabled: false },
      { title: "Export All Records and Fields (CSV)", format: "csv", type: "all", disabled: false }
    ],
    downloadRecordCount: 0,
    downloadRecordTotal: 0,
    downloadRecordChunk: 0,
    downloadPercent: 0,
    downloadSize: "calculating"
  }),
  methods: {
    download(options) {
      let self2 = this;
      let url = this.downloadBaseURL + "/download/" + options.format + "/" + options.type + "?model=" + this.configurationModel + "&key=" + this.configurationKey + "&" + this.include;
      url += "&useHomeAddress=" + this.useHomeAddress;
      console.log(url);
      if (options.type === "all") {
        url += "&" + this.downloadAllUrlParams;
      } else {
        url += "&" + this.downloadUrlParams;
      }
      this.downloading = true;
      this.downloadingCancelToken = axios.CancelToken.source();
      return axios({
        url,
        method: "GET",
        responseType: "blob",
        cancelToken: this.downloadingCancelToken.token,
        onDownloadProgress: function(event) {
          self2.downloadRecordTotal = parseInt(event.target.getResponseHeader("Content-Record-Count"));
          self2.downloadRecordChunk = parseInt(event.target.getResponseHeader("Content-Record-Chunk"));
          self2.downloadSize = event.loaded;
          self2.downloadRecordCount = self2.downloadRecordCount + self2.downloadRecordChunk;
          if (self2.downloadRecordCount >= self2.downloadRecordTotal) {
            self2.downloadRecordCount = self2.downloadRecordTotal;
            self2.downloadPercent = 100;
          } else {
            self2.downloadPercent = Math.round(self2.downloadRecordCount * 100 / self2.downloadRecordTotal);
          }
          console.log(self2.downloadRecordCount + " of " + self2.downloadRecordTotal);
          console.log("downloaded " + event.loaded);
        }
      }).then((response) => {
        const fileURL = window.URL.createObjectURL(new Blob([response.data]));
        const fileLink = document.createElement("a");
        fileLink.href = fileURL;
        let filename = "download.csv";
        const disposition = response.headers["content-disposition"];
        if (disposition && disposition.indexOf("attachment") !== -1) {
          const filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
          const matches = filenameRegex.exec(disposition);
          if (matches != null && matches[1]) {
            filename = matches[1].replace(/['"]/g, "");
          }
        }
        fileLink.setAttribute("download", filename);
        document.body.appendChild(fileLink);
        fileLink.click();
        fileLink.remove();
      }).catch((error) => {
        if (axios.isCancel(error)) ;
        else {
          console.log(error);
        }
        this.downloadingCancelToken = null;
        this.downloading = false;
      }).finally(() => {
        this.downloadingCancelToken = null;
        this.downloading = false;
        this.downloadSize = "calculating";
        this.downloadRecordCount = 0;
        this.downloadRecordTotal = 0;
        this.downloadPercent = 0;
      });
    },
    downloadCancel() {
      if (this.downloadingCancelToken) {
        this.downloadingCancelToken.cancel();
        this.downloadingCancelToken = null;
      }
      this.loading = false;
      this.downloading = false;
    }
  }
};
function _sfc_render$J(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, [
    createVNode(VMenu, { "open-on-hover": "" }, {
      activator: withCtx(({ props }) => [
        createVNode(
          VBtn,
          mergeProps({
            rounded: "lg",
            color: "primary"
          }, props, {
            icon: "mdi:mdi-cloud-download",
            class: "download-button"
          }),
          null,
          16
          /* FULL_PROPS */
        )
      ]),
      default: withCtx(() => [
        createVNode(VList, null, {
          default: withCtx(() => [
            (openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(_ctx.downloadTypes, (item, index) => {
                return openBlock(), createBlock(VListItem, {
                  key: index,
                  value: item.value,
                  disabled: item.disabled,
                  onClick: ($event) => $options.download(item)
                }, {
                  default: withCtx(() => [
                    createVNode(
                      VListItemTitle,
                      null,
                      {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(item.title),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 2
                        /* DYNAMIC */
                      },
                      1024
                      /* DYNAMIC_SLOTS */
                    )
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, 1032, ["value", "disabled", "onClick"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ]),
          _: 1
          /* STABLE */
        })
      ]),
      _: 1
      /* STABLE */
    }),
    createVNode(VDialog, {
      modelValue: _ctx.downloading,
      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.downloading = $event),
      persistent: "",
      "max-width": "320"
    }, {
      default: withCtx(() => [
        createVNode(VCard, null, {
          default: withCtx(() => [
            createVNode(VCardTitle, { class: "text-h5" }, {
              default: withCtx(() => _cache[2] || (_cache[2] = [
                createTextVNode("Downloading...")
              ])),
              _: 1
              /* STABLE */
            }),
            createVNode(VCardText, { class: "pb-0" }, {
              default: withCtx(() => [
                createVNode(VProgressLinear, {
                  indeterminate: _ctx.downloadRecordTotal === 0,
                  "model-value": _ctx.downloadRecordCount * 100 / _ctx.downloadRecordTotal
                }, null, 8, ["indeterminate", "model-value"]),
                createCommentVNode(' <p class="mb-0">{{ downloadPercent }}% : {{ downloadRecordCount }} of {{ downloadRecordTotal }} records received...</p> '),
                createCommentVNode(' <p v-if="downloadSize > 0" class="mb-0 small">{{ downloadSize }} bytes received...</p> ')
              ]),
              _: 1
              /* STABLE */
            }),
            createVNode(VCardActions, null, {
              default: withCtx(() => [
                createVNode(VSpacer),
                createVNode(VBtn, {
                  onClick: _cache[0] || (_cache[0] = ($event) => $options.downloadCancel())
                }, {
                  default: withCtx(() => _cache[3] || (_cache[3] = [
                    createTextVNode("Cancel")
                  ])),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          _: 1
          /* STABLE */
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["modelValue"])
  ]);
}
const DownloadComponent = /* @__PURE__ */ _export_sfc(_sfc_main$J, [["render", _sfc_render$J], ["__file", "/var/www/html/resources/js/components/Common/Grid/DownloadComponent.vue"]]);
const _sfc_main$I = {
  name: "IndividualListComponent",
  mixins: [headersMixin, configurationMixin, paginationUrlMixin, dataTablesMixin, mobileCheckMixin],
  components: {
    "filter-component": FilterComponent,
    "chooser-component": ColumnChooserComponent,
    "download-component": DownloadComponent,
    "basic-data-component": BasicDataComponent
  },
  data: () => ({
    shouldHideResults: false,
    filters: [],
    presets: [],
    totalIndividuals: 0,
    individuals: [],
    loading: false,
    showLabel: true,
    options: {
      sortBy: [{ key: "FullName", order: "asc" }],
      page: 1,
      itemsPerPage: 10
    },
    useHomeAddress: false,
    headers: [],
    hasSelectedItem: false,
    selectedItem: [],
    selectedAffiliate: {},
    isShowingFilters: false,
    collapsedFilter: false,
    fixedHeaders: false,
    fixedWidth: 0,
    cellWidth: 100,
    baseUrl: "/api/v2/individual",
    alwaysFilters: "filter[CustomEndDate]=1",
    urlInclude: "include=individualAddressesOrdered,Prefix,Suffix,individualAddressesOrdered.StateTerritory,individualEmailsOrdered,individualPhonesOrdered,activeIndividualAffiliates.Affiliate,activeIndividualEmployers,activeIndividualEmployers.JobTitle,activeIndividualEmployers.Employer,activeIndividualEmployers.Employer.Chapter,individualMembers,individualEmails,individualQuickComments,individualQuickComments.IndividualAssessment,activeIndividualAffiliates.LocalDuesCategory,activeIndividualAffiliates.UnionRelationshipType,activeIndividualAffiliates.PaymentMethod,activeIndividualEmployers.WorkLocation,activeIndividualEmployers.WorkLocation.ParentWorkLocation.WorkLocationType,activeIndividualEmployers.WorkLocation.ParentWorkLocation,activeIndividualEmployers.WorkStructure,activeIndividualEmployers.WorkStructure.WorkStructureType,activeIndividualEmployers.WorkStructure.ParentWorkStructure.WorkStructureType,activeIndividualEmployers.WorkStructure.ParentWorkStructure,activeIndividualEmployers.LocalJobClass,activeIndividualEmployers.LocalJobClass.Unit,activeIndividualEmployers.LocalJobClass.NationalJobClass,individualCope,activeIndividualAffiliates.individualOfficers.AffiliateOfficerRole,activeIndividualAffiliates.individualStaff,activeIndividualAffiliates.individualCommitteeMember.AffiliateCommittee,activeIndividualAffiliates.individualStaff.StaffDepartment,activeIndividualAffiliates.individualGroupMember,activeIndividualAffiliates.individualGroupMember.AffiliateGroup,activeIndividualAffiliates.individualCommitteeMember.CommitteeMemberType,individualPhonesOrdered"
  }),
  computed: {
    collapsedFilterRowTheme() {
      return this.collapsedFilter ? "collapsed-filter-row" : "row-inline-flex";
    },
    collapsedFilterColTheme() {
      return this.collapsedFilter ? "collapsed-filter-col" : "";
    },
    collapsedFilterPaddingColTheme() {
      return this.collapsedFilter ? "collapsed-table-col" : "";
    },
    fixedHeaderTheme() {
      return this.fixedHeaders ? "fixed-table-header" : "";
    }
  },
  mounted() {
    this.loadConfiguration("");
    document.getElementById("main-container").addEventListener("scroll", this.bodyScroll);
    this.initialSetup();
    this.selectedAffiliate = this.$store.getters["user/selectedAffiliate"];
  },
  watch: {
    options: {
      handler() {
        if (this.filters.length > 0) {
          this.getDataFromApi();
        }
      },
      deep: true,
      immediate: true
    },
    collapsedFilter: {
      handler() {
        if (this.numberOfCells > 0) {
          this.setTableWidth(this.numberOfCells);
        }
        if (this) {
          document.getElementsByClassName("v-data-table__thead")[0].style.left = "0px";
        }
        const rowCollapse = document.querySelector(".table-content-row__right");
        const isCollapsed = rowCollapse.classList.contains("collapsed-table-col");
        const dataTableCollapsed = document.querySelector(".v-data-table");
        if (isCollapsed) {
          dataTableCollapsed.classList.remove("collapse-table");
        } else {
          dataTableCollapsed.classList.add("collapse-table");
        }
      },
      deep: true
    },
    fixedHeaders: {
      handler() {
        if (this) {
          const table = this.$refs.tableContainer.getElementsByTagName("table")[0];
          table.style.width = this.fixedWidth + "px";
          document.getElementsByClassName("v-data-table__thead")[0].style.width = this.fixedWidth + "px";
        }
      },
      deep: true
    }
  },
  methods: {
    getHomePhones: function(individualPhonesOrdered) {
      const phones = individualPhonesOrdered.filter((phone) => phone.IndividualPhoneTypeId == 1);
      return phones.length > 0 ? phones[0].fullPhone : "";
    },
    getMobilePhones: function(individualPhonesOrdered) {
      const phones = individualPhonesOrdered.filter((phone) => phone.IndividualPhoneTypeId == 3);
      return phones.length > 0 ? phones[0].fullPhone : "";
    },
    getHomeEmails: function(individualEmailsOrdered) {
      const emails = individualEmailsOrdered.filter((email) => email.IndividualEmailTypeId == 1);
      return emails.length > 0 ? emails[0].Email : "";
    },
    getWorkEmails: function(individualEmailsOrdered) {
      const emails = individualEmailsOrdered.filter((email) => email.IndividualEmailTypeId == 2);
      return emails.length > 0 ? emails[0].Email : "";
    },
    loadConfiguration(key2) {
      this.getConfiguration("individual", key2).then((response) => {
        const hasChapters = this.$store.getters["user/selectedAffiliate"].hasChapters;
        this.headers = response.data.fields.filter((fields) => hasChapters || fields["value"] !== "activeIndividualEmployers.ChapterName");
        this.headers = this.headers.filter((fields) => fields["value"] !== "PreferredAddress.AddressLine1" && fields["value"] !== "PreferredAddress.AddressLine2" && fields["value"] !== "PreferredAddress.City" && fields["value"] !== "PreferredAddress.StateTerritoryCode" && fields["value"] !== "PreferredAddress.PostalCode");
        this.filters = this.parseQueryParams(response.data.filters.filter((filter) => hasChapters || filter["name"] !== "activeIndividualEmployers.Employer.Chapter.ChapterId"));
        this.setPresetData(response.data);
        this.updateFilter();
        this.getDataFromApi();
      });
    },
    initConfiguration() {
      this.getConfiguration("individual", key).then((response) => {
        const hasChapters = this.$store.getters["user/selectedAffiliate"].hasChapters;
        this.headers = this.parseHiddenColumn(response.data.fields.filter((fields) => hasChapters || fields["value"] !== "activeIndividualEmployers.ChapterName"));
        this.filters = this.parseQueryParams(response.data.filters.filter((filter) => hasChapters || filter["name"] !== "activeIndividualEmployers.Employer.Chapter.ChapterId"));
        this.setPresetData(response.data);
        this.updateFilter();
        this.getDataFromApi();
      });
    },
    initialSetup() {
      this.handleTableObserver();
      this.bodyDynamicStyle();
      this.headerDynamicStyle();
      this.footerDynamicSyle();
    },
    bodyScroll() {
      if (!this.loading && !this.collapsedFilter) {
        const leftPosition = this.$refs.tableContainer.getBoundingClientRect().left + 15;
        document.getElementsByClassName("v-data-table__thead")[0].style.left = leftPosition + "px";
      } else {
        document.getElementsByClassName("v-data-table__thead")[0].style.left = this.$refs.tableContainer.getBoundingClientRect().left + "px";
      }
    },
    onScroll(e) {
      if (typeof window === "undefined" || !this.headers) return;
      const top = window.pageYOffset || e.target.scrollTop || 0;
      if (top > 60 && !this.fixedHeaders && this.totalIndividuals !== 0) {
        this.fixedHeaders = true;
      } else if (top < 60 && this.fixedHeaders) {
        this.fixedHeaders = false;
      }
    },
    shouldShowResultsAndSortingTypeText() {
      return !!(this.totalIndividuals && !this.hasSelectedItem && !this.shouldHideResults);
    },
    hideResults() {
      this.shouldHideResults = true;
    },
    mobileSort(sortBy) {
      this.shouldHideResults = false;
      this.options.sortBy = sortBy;
    },
    displaySelectedRow(value) {
      this.hasSelectedItem = true;
      this.selectedItem = value;
    },
    shouldCollapseFilter(val) {
      this.collapsedFilter = val;
    },
    getUniqueOfficerRoles(individualAffiliates) {
      const officerRoles = [];
      for (const individualAffiliate of individualAffiliates) {
        if (typeof individualAffiliate.individualOfficers === "undefined" || !individualAffiliate.individualOfficers) {
          continue;
        }
        for (const individualOfficer of individualAffiliate.individualOfficers) {
          if (individualOfficer.AffiliateOfficerRole && officerRoles.filter((officerRole) => {
            return officerRole.AffiliateOfficerRoleId === individualOfficer.AffiliateOfficerRole.AffiliateOfficerRoleId;
          }).length === 0) {
            officerRoles.push(individualOfficer.AffiliateOfficerRole);
          }
        }
      }
      return officerRoles;
    },
    removeFilter(role) {
      for (const search of this.filters) {
        if ((search.label === "Officer Roles" || search.label === "Staff Roles" || search.label === "Committee Roles" || search.label === "Group Roles") && search.label !== role) {
          search.value = "";
          search.visible = false;
        }
      }
    },
    updateFilter() {
      for (const search of this.filters) {
        if (search.label === "Union Roles") {
          this.removeFilter(search.value);
          this.filters.filter((filter) => filter.label === search.value).map((filter) => {
            filter.visible = true;
          });
        }
      }
    },
    getFilters() {
      return this.filters.filter((filter) => {
        return filter.visible;
      });
    },
    selectedAffiliateMembers(members) {
      return members.filter((member) => member.AffiliateId === this.selectedAffiliate.AffiliateId);
    },
    employerStructural(employers) {
      return employers.filter((employer) => employer.Employer && employer.Employer.IsStructural == 0);
    },
    employersWithJobClassUnit(employers) {
      return employers.filter((employer) => employer.LocalJobClass && employer.LocalJobClass.Unit);
    },
    employersWithNationalJobClass(employers) {
      return employers.filter((employer) => employer.LocalJobClass && employer.LocalJobClass.NationalJobClass);
    },
    itemsWithProperty(items, property) {
      return items.filter((item) => item[property]);
    },
    getOptionsUrlParams() {
      const { sortBy, page, itemsPerPage } = this.options;
      const sortDefault = sortBy[0] ?? { key: "FullName", order: "asc" };
      let sortByField = sortDefault.key ?? "FullName";
      const sortDirection = sortDefault.order === "asc" ? "" : "-";
      if (sortByField === "FullName") {
        sortByField = "LastName,FirstName";
      }
      let filter = "";
      filter += "&" + this.alwaysFilters;
      for (const search of this.filters) {
        if (search.value !== "") {
          filter += "&filter[" + search.name + "]=" + search.value;
        }
      }
      let urlParams = "page=" + page + "&per_page=" + itemsPerPage + "&sort=" + sortDirection + sortByField;
      if (filter !== "") {
        urlParams += filter;
      }
      return urlParams;
    },
    getDataFromApi() {
      if (this.loading) {
        return;
      }
      this.loading = true;
      let url = this.baseUrl + "?" + this.getOptionsUrlParams() + "&" + this.urlInclude;
      this.updateQueryParams(this.options, this.filters, this.headers);
      return axios.get(url).then((response) => {
        this.individuals = response.data.data;
        this.totalIndividuals = response.data.meta.total;
      }).finally(() => {
        this.loading = false;
      });
    },
    updateTableOnSearch() {
      this.options.page = 1;
      this.totalIndividuals = 0;
      this.individuals = [];
      this.fixedHeaders = false;
    },
    onDestroyComponent() {
      window.removeEventListener("scroll", this.handleScroll);
      document.getElementById("main-container").removeEventListener("scroll", this.bodyScroll);
      this.destroyObserver();
      this.destroyDynamicStyle();
    }
  },
  unmounted() {
    this.onDestroyComponent();
  }
};
const _hoisted_1$v = {
  key: 0,
  class: "hidden-md-and-down"
};
const _hoisted_2$s = { class: "tableContainer__inner" };
const _hoisted_3$n = { class: "d-flex flex-wrap align-md-center ga-8" };
const _hoisted_4$l = { class: "downloadButtonTop" };
const _hoisted_5$j = { key: 0 };
const _hoisted_6$h = { key: 0 };
const _hoisted_7$e = { key: 0 };
const _hoisted_8$9 = { key: 0 };
const _hoisted_9$9 = { key: 0 };
const _hoisted_10$7 = { key: 0 };
const _hoisted_11$7 = { key: 0 };
const _hoisted_12$7 = { key: 0 };
const _hoisted_13$5 = { key: 0 };
const _hoisted_14$5 = { key: 0 };
const _hoisted_15$5 = { key: 1 };
const _hoisted_16$5 = { key: 2 };
const _hoisted_17$5 = { key: 0 };
const _hoisted_18$5 = { key: 0 };
const _hoisted_19$5 = { key: 1 };
const _hoisted_20$4 = { key: 0 };
const _hoisted_21$4 = { key: 0 };
const _hoisted_22$4 = { key: 1 };
const _hoisted_23$4 = { key: 0 };
const _hoisted_24$4 = { key: 0 };
const _hoisted_25$4 = { key: 1 };
const _hoisted_26$4 = { key: 0 };
const _hoisted_27$4 = { key: 0 };
const _hoisted_28$4 = { key: 1 };
const _hoisted_29$4 = { key: 0 };
const _hoisted_30$4 = { key: 0 };
const _hoisted_31$4 = { key: 0 };
const _hoisted_32$2 = { key: 0 };
const _hoisted_33$2 = { key: 0 };
const _hoisted_34$1 = { key: 0 };
const _hoisted_35$1 = { key: 0 };
const _hoisted_36$1 = { key: 0 };
const _hoisted_37$1 = { key: 0 };
const _hoisted_38 = { key: 0 };
const _hoisted_39 = { key: 0 };
const _hoisted_40 = { key: 1 };
const _hoisted_41 = { key: 0 };
const _hoisted_42 = { key: 0 };
const _hoisted_43 = { key: 0 };
const _hoisted_44 = { key: 0 };
const _hoisted_45 = { key: 0 };
const _hoisted_46 = { key: 0 };
const _hoisted_47 = { key: 0 };
const _hoisted_48 = { key: 0 };
const _hoisted_49 = { key: 0 };
const _hoisted_50 = { key: 0 };
const _hoisted_51 = { key: 1 };
const _hoisted_52 = { key: 0 };
const _hoisted_53 = { key: 0 };
const _hoisted_54 = { key: 1 };
const _hoisted_55 = { key: 0 };
const _hoisted_56 = { key: 1 };
const _hoisted_57 = { key: 2 };
const _hoisted_58 = {
  key: 1,
  class: "hidden-lg-and-up"
};
const _hoisted_59 = {
  key: 2,
  class: "mobile-displaying-sort-p"
};
const _hoisted_60 = { class: "tr-mobile-individual" };
const _hoisted_61 = { class: "v-data-table__mobile-row mobile-row-header td-mobile-padding custom-mobile-row" };
const _hoisted_62 = {
  key: 0,
  class: "v-data-table__mobile-row td-mobile-padding custom-mobile-row"
};
const _hoisted_63 = { class: "v-data-table__mobile-row custom-mobile-row td-mobile-padding" };
const _hoisted_64 = { key: 0 };
const _hoisted_65 = { class: "td-mobile-padding" };
const _hoisted_66 = { key: 4 };
const _hoisted_67 = { class: "mobile-selected-item-container" };
function _sfc_render$I(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_filter_component = resolveComponent("filter-component");
  const _component_chooser_component = resolveComponent("chooser-component");
  const _component_download_component = resolveComponent("download-component");
  const _component_router_link = resolveComponent("router-link");
  const _component_basic_data_component = resolveComponent("basic-data-component");
  return openBlock(), createElementBlock(
    "div",
    {
      onKeyup: _cache[25] || (_cache[25] = withKeys((...args) => $options.getDataFromApi && $options.getDataFromApi(...args), ["enter"]))
    },
    [
      !_ctx.isOnMobile ? (openBlock(), createElementBlock("div", _hoisted_1$v, [
        createVNode(VContainer, { fluid: "" }, {
          default: withCtx(() => [
            createVNode(VRow, {
              class: normalizeClass([$options.collapsedFilterRowTheme, "flex-sm-nowrap table-content-row"])
            }, {
              default: withCtx(() => [
                createVNode(VCol, {
                  cols: "12",
                  lg: "2",
                  class: normalizeClass([$options.collapsedFilterColTheme, "table-content-row__left"])
                }, {
                  default: withCtx(() => [
                    createVNode(_component_filter_component, {
                      filters: _ctx.filters,
                      presets: _ctx.presets,
                      selectedPreset: _ctx.selectedPreset,
                      onChange: _cache[0] || (_cache[0] = ($event) => $options.updateFilter()),
                      onSearch: _cache[1] || (_cache[1] = ($event) => $options.getDataFromApi()),
                      onUpdateTableOnSearch: _cache[2] || (_cache[2] = ($event) => $options.updateTableOnSearch()),
                      onCollapsedFilterChanged: $options.shouldCollapseFilter,
                      onFilterChooserApplied: _cache[3] || (_cache[3] = ($event) => _ctx.onFilterChangeApplied(_ctx.filters, "individual", $event)),
                      onPresetsLoad: _cache[4] || (_cache[4] = ($event) => $options.loadConfiguration($event))
                    }, null, 8, ["filters", "presets", "selectedPreset", "onCollapsedFilterChanged"])
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["class"]),
                createVNode(VCol, {
                  cols: "10",
                  ref: "tableContainer",
                  class: normalizeClass([[$options.collapsedFilterPaddingColTheme, $options.fixedHeaderTheme], "table-content-row__right"])
                }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_2$s, [
                      createVNode(VDataTableServer, {
                        headers: _ctx.getHeaders(_ctx.headers),
                        items: _ctx.individuals,
                        options: _ctx.options,
                        "onUpdate:options": _cache[10] || (_cache[10] = ($event) => _ctx.options = $event),
                        "sort-by": _ctx.options.sortBy,
                        "onUpdate:sortBy": _cache[11] || (_cache[11] = ($event) => _ctx.options.sortBy = $event),
                        "items-length": _ctx.totalIndividuals,
                        loading: _ctx.loading,
                        class: "elevation-1 individual-results-table scrollable-table",
                        "fixed-header": "",
                        height: "80dvh",
                        "onUpdate:page": _cache[12] || (_cache[12] = ($event) => _ctx.scrollToBeginningOfPage())
                      }, {
                        top: withCtx(() => [
                          createBaseVNode("div", _hoisted_3$n, [
                            createVNode(_component_chooser_component, {
                              columns: _ctx.headers,
                              presets: _ctx.presets,
                              selectedPreset: _ctx.selectedPreset,
                              onApplied: _cache[5] || (_cache[5] = ($event) => _ctx.onHeaderChangeApplied("individual", $event)),
                              onPresetLoad: _cache[6] || (_cache[6] = ($event) => $options.loadConfiguration($event))
                            }, null, 8, ["columns", "presets", "selectedPreset"]),
                            createBaseVNode("span", _hoisted_4$l, [
                              createVNode(_component_download_component, {
                                downloadBaseURL: _ctx.baseUrl,
                                downloadAllUrlParams: _ctx.alwaysFilters,
                                downloadUrlParams: $options.getOptionsUrlParams(),
                                configurationModel: "individual",
                                configurationKey: _ctx.selectedPreset,
                                include: _ctx.urlInclude,
                                useHomeAddress: _ctx.useHomeAddress
                              }, null, 8, ["downloadBaseURL", "downloadAllUrlParams", "downloadUrlParams", "configurationKey", "include", "useHomeAddress"])
                            ]),
                            createVNode(VSwitch, {
                              modelValue: _ctx.useHomeAddress,
                              "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => _ctx.useHomeAddress = $event),
                              label: "Use Home Address",
                              class: "downloadButtonTopHomeAddress",
                              color: "primary"
                            }, null, 8, ["modelValue"]),
                            createVNode(VDataTableFooter)
                          ]),
                          _cache[26] || (_cache[26] = createBaseVNode(
                            "div",
                            { class: "top-scroller" },
                            [
                              createBaseVNode("div", { class: "inner-scroll" })
                            ],
                            -1
                            /* HOISTED */
                          ))
                        ]),
                        bottom: withCtx(() => [
                          createVNode(VRow, null, {
                            default: withCtx(() => [
                              createVNode(VCol, null, {
                                default: withCtx(() => [
                                  createVNode(_component_chooser_component, {
                                    columns: _ctx.headers,
                                    presets: _ctx.presets,
                                    selectedPreset: _ctx.selectedPreset,
                                    onApplied: _cache[8] || (_cache[8] = ($event) => _ctx.onHeaderChangeApplied("individual", $event)),
                                    onPresetLoad: _cache[9] || (_cache[9] = ($event) => $options.loadConfiguration($event))
                                  }, null, 8, ["columns", "presets", "selectedPreset"])
                                ]),
                                _: 1
                                /* STABLE */
                              }),
                              createVNode(VCol, null, {
                                default: withCtx(() => [
                                  createVNode(VDataTableFooter)
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        loader: withCtx(() => [
                          createVNode(VProgressLinear, {
                            indeterminate: "",
                            height: "8",
                            color: "#3f98c9"
                          })
                        ]),
                        [`item.FirstName`]: withCtx((props) => [
                          createVNode(_component_router_link, {
                            to: { name: "IndividualDetails", params: { id: props.item.IndividualId } }
                          }, {
                            default: withCtx(() => [
                              createTextVNode(
                                toDisplayString(props.item.FirstName),
                                1
                                /* TEXT */
                              )
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["to"])
                        ]),
                        [`item.MiddleName`]: withCtx((props) => [
                          props.item.MiddleName ? (openBlock(), createElementBlock("span", _hoisted_5$j, [
                            createVNode(_component_router_link, {
                              to: { name: "IndividualDetails", params: { id: props.item.IndividualId } }
                            }, {
                              default: withCtx(() => [
                                createTextVNode(
                                  toDisplayString(props.item.MiddleName),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              _: 2
                              /* DYNAMIC */
                            }, 1032, ["to"])
                          ])) : createCommentVNode("v-if", true)
                        ]),
                        [`item.LastName`]: withCtx((props) => [
                          createVNode(_component_router_link, {
                            to: { name: "IndividualDetails", params: { id: props.item.IndividualId } }
                          }, {
                            default: withCtx(() => [
                              createTextVNode(
                                toDisplayString(props.item.LastName),
                                1
                                /* TEXT */
                              )
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["to"])
                        ]),
                        [`item.FullName`]: withCtx((props) => [
                          createVNode(_component_router_link, {
                            to: { name: "IndividualDetails", params: { id: props.item.IndividualId } }
                          }, {
                            default: withCtx(() => [
                              createTextVNode(
                                toDisplayString(props.item.Prefix && props.item.Prefix.PrefixName) + " " + toDisplayString(props.item.FirstName) + " ",
                                1
                                /* TEXT */
                              ),
                              props.item.MiddleName != "Null" ? (openBlock(), createElementBlock(
                                "span",
                                _hoisted_6$h,
                                toDisplayString(props.item.MiddleName),
                                1
                                /* TEXT */
                              )) : createCommentVNode("v-if", true),
                              createTextVNode(
                                " " + toDisplayString(props.item.LastName) + toDisplayString(props.item.Suffix && props.item.Suffix.SuffixName ? ", " + props.item.Suffix.SuffixName : ""),
                                1
                                /* TEXT */
                              )
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["to"])
                        ]),
                        [`item.PreferredName`]: withCtx((props) => [
                          createVNode(_component_router_link, {
                            to: { name: "IndividualDetails", params: { id: props.item.IndividualId } }
                          }, {
                            default: withCtx(() => [
                              createTextVNode(
                                toDisplayString(props.item.PreferredName),
                                1
                                /* TEXT */
                              )
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["to"])
                        ]),
                        [`item.HomeEmail.Email`]: withCtx((props) => [
                          props.item.individualEmailsOrdered && props.item.individualEmailsOrdered.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_7$e,
                            toDisplayString($options.getHomeEmails(props.item.individualEmailsOrdered)),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ]),
                        [`item.WorkEmail.Email`]: withCtx((props) => [
                          props.item.individualEmailsOrdered && props.item.individualEmailsOrdered.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_8$9,
                            toDisplayString($options.getWorkEmails(props.item.individualEmailsOrdered)),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ]),
                        [`item.HomePhone.PhoneNumber`]: withCtx((props) => [
                          props.item.individualPhonesOrdered && props.item.individualPhonesOrdered.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_9$9,
                            toDisplayString($options.getHomePhones(props.item.individualPhonesOrdered)),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ]),
                        [`item.MobilePhone.PhoneNumber`]: withCtx((props) => [
                          props.item.individualPhonesOrdered && props.item.individualPhonesOrdered.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_10$7,
                            toDisplayString($options.getMobilePhones(props.item.individualPhonesOrdered)),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ]),
                        [`item.PreferredPhone.PhoneNumber`]: withCtx((props) => [
                          props.item.individualPhonesOrdered && props.item.individualPhonesOrdered.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_11$7,
                            toDisplayString(props.item.individualPhonesOrdered[0].PhoneNumber),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ]),
                        [`item.PreferredAddress.AddressLine`]: withCtx((props) => [
                          props.item.individualAddressesOrdered && props.item.individualAddressesOrdered.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_12$7,
                            toDisplayString(props.item.individualAddressesOrdered[0].AddressLine1) + ", " + toDisplayString(props.item.individualAddressesOrdered[0].AddressLine2 && props.item.individualAddressesOrdered[0].AddressLine2.trim().length > 0 ? props.item.individualAddressesOrdered[0].AddressLine2 + ", " : "") + " " + toDisplayString(props.item.individualAddressesOrdered[0].City) + ", " + toDisplayString(props.item.individualAddressesOrdered[0].StateTerritory ? props.item.individualAddressesOrdered[0].StateTerritory.StateTerritoryCode : "") + ", " + toDisplayString(props.item.individualAddressesOrdered[0].PostalCode),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ]),
                        [`item.individualAddresses`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(props.item.individualAddressesOrdered, (address) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, address, {
                                  key: address.IndividualAddressId
                                }),
                                toDisplayString(address.City),
                                17
                                /* TEXT, FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualAffiliates`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(props.item.activeIndividualAffiliates, (affiliate) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                [
                                  createVNode(_component_router_link, {
                                    to: { name: "AffiliateDisplay", params: { id: affiliate.Affiliate.AffiliateId } }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(
                                        toDisplayString(affiliate.Affiliate.AffiliateNumber),
                                        1
                                        /* TEXT */
                                      )
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  }, 1032, ["to"])
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.individualMembers`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.selectedAffiliateMembers(props.item.individualMembers), (member) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, member, {
                                  key: member.MemberIdMappingId
                                }),
                                toDisplayString(member.MemberId),
                                17
                                /* TEXT, FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualAffiliates.LocalDuesCategory`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.itemsWithProperty(props.item.activeIndividualAffiliates, "LocalDuesCategory"), (affiliate, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_13$5, ", ")) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    toDisplayString(affiliate.LocalDuesCategory.LocalDuesCategoryName),
                                    1
                                    /* TEXT */
                                  )
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualAffiliates.LocalDuesAmount`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.itemsWithProperty(props.item.activeIndividualAffiliates, "LocalDuesCategory"), (affiliate, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_14$5, ", ")) : createCommentVNode("v-if", true),
                                  affiliate.LocalDuesCategory.LocalDuesAmount ? (openBlock(), createElementBlock(
                                    "span",
                                    _hoisted_15$5,
                                    "$" + toDisplayString(affiliate.LocalDuesCategory.LocalDuesAmount),
                                    1
                                    /* TEXT */
                                  )) : createCommentVNode("v-if", true),
                                  affiliate.LocalDuesCategory.LocalDuesPercentage ? (openBlock(), createElementBlock(
                                    "span",
                                    _hoisted_16$5,
                                    toDisplayString(affiliate.LocalDuesCategory.LocalDuesPercentage) + "%",
                                    1
                                    /* TEXT */
                                  )) : createCommentVNode("v-if", true)
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualAffiliates.UnionRelationshipType`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.itemsWithProperty(props.item.activeIndividualAffiliates, "UnionRelationshipType"), (affiliate, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_17$5, ", ")) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    toDisplayString(affiliate.UnionRelationshipType.UnionRelationshipTypeName),
                                    1
                                    /* TEXT */
                                  )
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualAffiliates.PaymentMethod`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.itemsWithProperty(props.item.activeIndividualAffiliates, "PaymentMethod"), (affiliate) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                toDisplayString(affiliate.PaymentMethod.PaymentMethodName),
                                17
                                /* TEXT, FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualEmployers.WorkLocation`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.itemsWithProperty(props.item.activeIndividualEmployers, "WorkLocation"), (employer, index) => {
                              return openBlock(), createElementBlock(
                                "div",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_18$5, ", ")) : createCommentVNode("v-if", true),
                                  employer.WorkLocation.ParentWorkLocation ? (openBlock(), createElementBlock("div", _hoisted_19$5, [
                                    employer.WorkLocation.ParentWorkLocation.ParentWorkLocation ? (openBlock(), createElementBlock("div", _hoisted_20$4, [
                                      employer.WorkLocation.ParentWorkLocation.ParentWorkLocation.WorkLocationType ? (openBlock(), createElementBlock(
                                        "span",
                                        _hoisted_21$4,
                                        toDisplayString(employer.WorkLocation.ParentWorkLocation.ParentWorkLocation.WorkLocationType.WorkLocationTypeName) + ": ",
                                        1
                                        /* TEXT */
                                      )) : createCommentVNode("v-if", true),
                                      createTextVNode(
                                        " " + toDisplayString(employer.WorkLocation.ParentWorkLocation.ParentWorkLocation.WorkLocationName) + " | ",
                                        1
                                        /* TEXT */
                                      )
                                    ])) : createCommentVNode("v-if", true),
                                    employer.WorkLocation.ParentWorkLocation.WorkLocationType ? (openBlock(), createElementBlock(
                                      "span",
                                      _hoisted_22$4,
                                      toDisplayString(employer.WorkLocation.ParentWorkLocation.WorkLocationType.WorkLocationTypeName) + ": ",
                                      1
                                      /* TEXT */
                                    )) : createCommentVNode("v-if", true),
                                    createTextVNode(
                                      " " + toDisplayString(employer.WorkLocation.ParentWorkLocation.WorkLocationName) + " | ",
                                      1
                                      /* TEXT */
                                    )
                                  ])) : createCommentVNode("v-if", true),
                                  createBaseVNode("div", null, [
                                    employer.WorkLocation.WorkLocationType ? (openBlock(), createElementBlock(
                                      "span",
                                      _hoisted_23$4,
                                      toDisplayString(employer.WorkLocation.WorkLocationType.WorkLocationTypeName) + ": ",
                                      1
                                      /* TEXT */
                                    )) : createCommentVNode("v-if", true),
                                    createTextVNode(
                                      " " + toDisplayString(employer.WorkLocation.WorkLocationName),
                                      1
                                      /* TEXT */
                                    )
                                  ])
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualEmployers.WorkStructure`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.itemsWithProperty(props.item.activeIndividualEmployers, "WorkStructure"), (employer, index) => {
                              return openBlock(), createElementBlock(
                                "div",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_24$4, ", ")) : createCommentVNode("v-if", true),
                                  employer.WorkStructure.ParentWorkStructure ? (openBlock(), createElementBlock("div", _hoisted_25$4, [
                                    employer.WorkStructure.ParentWorkStructure.ParentWorkStructure ? (openBlock(), createElementBlock("div", _hoisted_26$4, [
                                      employer.WorkStructure.ParentWorkStructure.ParentWorkStructure.WorkStructureType ? (openBlock(), createElementBlock(
                                        "span",
                                        _hoisted_27$4,
                                        toDisplayString(employer.WorkStructure.ParentWorkStructure.ParentWorkStructure.WorkStructureType.WorkStructureTypeName) + ": ",
                                        1
                                        /* TEXT */
                                      )) : createCommentVNode("v-if", true),
                                      createTextVNode(
                                        " " + toDisplayString(employer.WorkStructure.ParentWorkStructure.ParentWorkStructure.WorkStructureName) + " | ",
                                        1
                                        /* TEXT */
                                      )
                                    ])) : createCommentVNode("v-if", true),
                                    employer.WorkStructure.ParentWorkStructure.WorkStructureType ? (openBlock(), createElementBlock(
                                      "span",
                                      _hoisted_28$4,
                                      toDisplayString(employer.WorkStructure.ParentWorkStructure.WorkStructureType.WorkStructureTypeName) + ": ",
                                      1
                                      /* TEXT */
                                    )) : createCommentVNode("v-if", true),
                                    createTextVNode(
                                      " " + toDisplayString(employer.WorkStructure.ParentWorkStructure.WorkStructureName) + " | ",
                                      1
                                      /* TEXT */
                                    )
                                  ])) : createCommentVNode("v-if", true),
                                  createBaseVNode("div", null, [
                                    employer.WorkStructure.WorkStructureType ? (openBlock(), createElementBlock(
                                      "span",
                                      _hoisted_29$4,
                                      toDisplayString(employer.WorkStructure.WorkStructureType.WorkStructureTypeName) + ": ",
                                      1
                                      /* TEXT */
                                    )) : createCommentVNode("v-if", true),
                                    createTextVNode(
                                      " " + toDisplayString(employer.WorkStructure.WorkStructureName),
                                      1
                                      /* TEXT */
                                    )
                                  ])
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualEmployers.EmployeeId`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(props.item.activeIndividualEmployers, (employer, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_30$4, ", ")) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    toDisplayString(employer.EmployeeId),
                                    1
                                    /* TEXT */
                                  )
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualEmployers.EmployerName`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.employerStructural(props.item.activeIndividualEmployers), (employer, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_31$4, ", ")) : createCommentVNode("v-if", true),
                                  createVNode(_component_router_link, {
                                    to: { name: "EmployerDetails", params: { id: employer.Employer.EmployerId } }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(
                                        toDisplayString(employer.Employer.EmployerName),
                                        1
                                        /* TEXT */
                                      )
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  }, 1032, ["to"])
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualEmployers.StartDate`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(props.item.activeIndividualEmployers, (employer, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_32$2, ", ")) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    toDisplayString(_ctx.$filters.formatDate(employer.StartDate)),
                                    1
                                    /* TEXT */
                                  )
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualEmployers.EndDate`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(props.item.activeIndividualEmployers, (employer, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_33$2, ", ")) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    toDisplayString(_ctx.$filters.formatDate(employer.EndDate)),
                                    1
                                    /* TEXT */
                                  )
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualEmployers.LocalJobClassName`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.itemsWithProperty(props.item.activeIndividualEmployers, "LocalJobClass"), (employer, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_34$1, ", ")) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    toDisplayString(employer.LocalJobClass.LocalJobClassName),
                                    1
                                    /* TEXT */
                                  )
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualEmployers.JobTitle`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.itemsWithProperty(props.item.activeIndividualEmployers, "JobTitle"), (employer, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_35$1, ", ")) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    toDisplayString(employer.JobTitle.JobTitleName),
                                    1
                                    /* TEXT */
                                  )
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualEmployers.JobDescription`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(props.item.activeIndividualEmployers, (employer, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_36$1, ", ")) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    toDisplayString(employer.JobDescription),
                                    1
                                    /* TEXT */
                                  )
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualEmployers.Unit`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.employersWithJobClassUnit(props.item.activeIndividualEmployers), (employer, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_37$1, ", ")) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    toDisplayString(employer.LocalJobClass.Unit.UnitName),
                                    1
                                    /* TEXT */
                                  )
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualEmployers.NationalJobClass`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.employersWithNationalJobClass(props.item.activeIndividualEmployers), (employer, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_38, ", ")) : createCommentVNode("v-if", true),
                                  createTextVNode(
                                    toDisplayString(employer.LocalJobClass.NationalJobClass.NationalJobClassName),
                                    1
                                    /* TEXT */
                                  )
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualEmployers.ChapterName`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.itemsWithProperty(props.item.activeIndividualEmployers, "Employer"), (employer, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, employer, {
                                  key: employer.IndividualEmployerId
                                }),
                                [
                                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_39, ", ")) : createCommentVNode("v-if", true),
                                  employer.Employer.Chapter ? (openBlock(), createElementBlock(
                                    "span",
                                    _hoisted_40,
                                    toDisplayString(employer.Employer.Chapter.ChapterName),
                                    1
                                    /* TEXT */
                                  )) : createCommentVNode("v-if", true)
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualAffiliates.AffiliateOfficerRoleName`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList($options.getUniqueOfficerRoles(props.item.activeIndividualAffiliates), (officerRole, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, officerRole, {
                                  key: officerRole.AffiliateOfficerRoleId
                                }),
                                [
                                  createTextVNode(
                                    toDisplayString(officerRole.AffiliateOfficerRoleName),
                                    1
                                    /* TEXT */
                                  ),
                                  index != $options.getUniqueOfficerRoles(props.item.activeIndividualAffiliates).length - 1 ? (openBlock(), createElementBlock("span", _hoisted_41, ", ")) : createCommentVNode("v-if", true)
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualAffiliates.StaffTitle`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(props.item.activeIndividualAffiliates, (affiliate) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                [
                                  (openBlock(true), createElementBlock(
                                    Fragment,
                                    null,
                                    renderList(affiliate.individualStaff, (staff, index) => {
                                      return openBlock(), createElementBlock(
                                        "span",
                                        mergeProps({ ref_for: true }, staff, {
                                          key: staff.AffiliateStaffId
                                        }),
                                        [
                                          createTextVNode(
                                            toDisplayString(staff.StaffTitle),
                                            1
                                            /* TEXT */
                                          ),
                                          index != affiliate.individualStaff.length - 1 ? (openBlock(), createElementBlock("span", _hoisted_42, ", ")) : createCommentVNode("v-if", true)
                                        ],
                                        16
                                        /* FULL_PROPS */
                                      );
                                    }),
                                    128
                                    /* KEYED_FRAGMENT */
                                  ))
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualAffiliates.individualGroupMember`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(props.item.activeIndividualAffiliates, (affiliate) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                [
                                  (openBlock(true), createElementBlock(
                                    Fragment,
                                    null,
                                    renderList(affiliate.individualGroupMember, (groupMember, index) => {
                                      return openBlock(), createElementBlock(
                                        "span",
                                        mergeProps({ ref_for: true }, groupMember, {
                                          key: groupMember.AffiliateGroupMemberId
                                        }),
                                        [
                                          groupMember.AffiliateGroup ? (openBlock(), createElementBlock("span", _hoisted_43, [
                                            createTextVNode(
                                              toDisplayString(groupMember.AffiliateGroup.AffiliateGroupName),
                                              1
                                              /* TEXT */
                                            ),
                                            index != affiliate.individualGroupMember.length - 1 ? (openBlock(), createElementBlock("span", _hoisted_44, ", ")) : createCommentVNode("v-if", true)
                                          ])) : createCommentVNode("v-if", true)
                                        ],
                                        16
                                        /* FULL_PROPS */
                                      );
                                    }),
                                    128
                                    /* KEYED_FRAGMENT */
                                  ))
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualAffiliates.individualCommitteeMember`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(props.item.activeIndividualAffiliates, (affiliate) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                [
                                  (openBlock(true), createElementBlock(
                                    Fragment,
                                    null,
                                    renderList(affiliate.individualCommitteeMember, (committeeMember, index) => {
                                      return openBlock(), createElementBlock(
                                        "span",
                                        mergeProps({ ref_for: true }, committeeMember, {
                                          key: committeeMember.AffiliateCommitteeMemberId
                                        }),
                                        [
                                          committeeMember.AffiliateCommittee ? (openBlock(), createElementBlock("span", _hoisted_45, [
                                            createTextVNode(
                                              toDisplayString(committeeMember.AffiliateCommittee.AffiliateCommitteeName),
                                              1
                                              /* TEXT */
                                            ),
                                            index != affiliate.individualCommitteeMember.length - 1 ? (openBlock(), createElementBlock("span", _hoisted_46, ", ")) : createCommentVNode("v-if", true)
                                          ])) : createCommentVNode("v-if", true)
                                        ],
                                        16
                                        /* FULL_PROPS */
                                      );
                                    }),
                                    128
                                    /* KEYED_FRAGMENT */
                                  ))
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.activeIndividualAffiliates.CommitteeMemberTypeName`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(props.item.activeIndividualAffiliates, (affiliate) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                [
                                  (openBlock(true), createElementBlock(
                                    Fragment,
                                    null,
                                    renderList(affiliate.individualCommitteeMember, (committeeMemberType, index) => {
                                      return openBlock(), createElementBlock(
                                        "span",
                                        mergeProps({ ref_for: true }, committeeMemberType, {
                                          key: committeeMemberType.AffiliateCommitteeMemberId
                                        }),
                                        [
                                          committeeMemberType.CommitteeMemberType ? (openBlock(), createElementBlock("span", _hoisted_47, [
                                            createTextVNode(
                                              toDisplayString(committeeMemberType.CommitteeMemberType.CommitteeMemberTypeName),
                                              1
                                              /* TEXT */
                                            ),
                                            index != affiliate.individualCommitteeMember.length - 1 ? (openBlock(), createElementBlock("span", _hoisted_48, ", ")) : createCommentVNode("v-if", true)
                                          ])) : createCommentVNode("v-if", true)
                                        ],
                                        16
                                        /* FULL_PROPS */
                                      );
                                    }),
                                    128
                                    /* KEYED_FRAGMENT */
                                  ))
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        [`item.individualAssessments.Rating`]: withCtx((props) => [
                          props.item.individualQuickComments.length > 0 ? (openBlock(), createElementBlock("span", _hoisted_49, [
                            props.item.individualQuickComments[props.item.individualQuickComments.length - 1].IndividualAssessment ? (openBlock(), createElementBlock(
                              "span",
                              _hoisted_50,
                              toDisplayString(props.item.individualQuickComments[props.item.individualQuickComments.length - 1].IndividualAssessment.Rating),
                              1
                              /* TEXT */
                            )) : createCommentVNode("v-if", true),
                            !props.item.individualQuickComments[props.item.individualQuickComments.length - 1].IndividualAssessment ? (openBlock(), createElementBlock("span", _hoisted_51)) : createCommentVNode("v-if", true)
                          ])) : createCommentVNode("v-if", true)
                        ]),
                        [`item.individualQuickComments.CommentDate`]: withCtx((props) => [
                          props.item.individualQuickComments.length > 0 ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_52,
                            toDisplayString(_ctx.$filters.formatDate(props.item.individualQuickComments[props.item.individualQuickComments.length - 1].CommentDate)),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true)
                        ]),
                        [`item.individualCope`]: withCtx((props) => [
                          props.item.individualCope.length > 0 ? (openBlock(), createElementBlock("span", _hoisted_53, " Yes ")) : createCommentVNode("v-if", true),
                          !props.item.individualCope.length > 0 ? (openBlock(), createElementBlock("span", _hoisted_54, " No ")) : createCommentVNode("v-if", true)
                        ]),
                        [`item.activeIndividualAffiliates.IsCurrent`]: withCtx((props) => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(props.item.activeIndividualAffiliates, (affiliate, index) => {
                              return openBlock(), createElementBlock(
                                "span",
                                mergeProps({ ref_for: true }, affiliate, {
                                  key: affiliate.IndividualAffiliateId
                                }),
                                [
                                  affiliate.IsCurrent == true ? (openBlock(), createElementBlock("span", _hoisted_55, " Yes ")) : createCommentVNode("v-if", true),
                                  affiliate.IsCurrent == false ? (openBlock(), createElementBlock("span", _hoisted_56, " No ")) : createCommentVNode("v-if", true),
                                  index != props.item.activeIndividualAffiliates.length - 1 ? (openBlock(), createElementBlock("span", _hoisted_57, ", ")) : createCommentVNode("v-if", true)
                                ],
                                16
                                /* FULL_PROPS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["headers", "items", "options", "sort-by", "items-length", "loading"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["class"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["class"])
          ]),
          _: 1
          /* STABLE */
        })
      ])) : createCommentVNode("v-if", true),
      createCommentVNode(" MOBILE Breakpoint "),
      _ctx.isOnMobile ? (openBlock(), createElementBlock("div", _hoisted_58, [
        !_ctx.hasSelectedItem ? (openBlock(), createBlock(_component_filter_component, {
          key: 0,
          filters: _ctx.filters,
          presets: _ctx.presets,
          selectedPreset: _ctx.selectedPreset,
          mobileIndividualHeaders: _ctx.getSortableHeaders(_ctx.headers),
          onSearch: _cache[13] || (_cache[13] = ($event) => $options.getDataFromApi()),
          onChange: _cache[14] || (_cache[14] = ($event) => $options.updateFilter()),
          onOnShowSort: _cache[15] || (_cache[15] = ($event) => $options.hideResults()),
          onOnHideSort: _cache[16] || (_cache[16] = ($event) => _ctx.shouldHideResults = false),
          onSort: $options.mobileSort,
          onOnShowFilters: _cache[17] || (_cache[17] = ($event) => $options.hideResults()),
          onOnHideFilters: _cache[18] || (_cache[18] = ($event) => _ctx.shouldHideResults = false),
          onFilterChooserApplied: _cache[19] || (_cache[19] = ($event) => _ctx.onFilterChangeApplied(_ctx.filters, "individual", $event)),
          onPresetsLoad: _cache[20] || (_cache[20] = ($event) => $options.loadConfiguration($event))
        }, null, 8, ["filters", "presets", "selectedPreset", "mobileIndividualHeaders", "onSort"])) : createCommentVNode("v-if", true),
        _ctx.hasSelectedItem ? (openBlock(), createBlock(VToolbar, {
          key: 1,
          density: "compact",
          flat: "",
          class: "hidden-lg-and-up mobile-has-selected-row"
        }, {
          default: withCtx(() => [
            createVNode(VSpacer),
            createVNode(VBtn, {
              icon: "mdi:mdi-close",
              onClick: _cache[21] || (_cache[21] = ($event) => _ctx.hasSelectedItem = false)
            })
          ]),
          _: 1
          /* STABLE */
        })) : createCommentVNode("v-if", true),
        $options.shouldShowResultsAndSortingTypeText() ? (openBlock(), createElementBlock(
          "p",
          _hoisted_59,
          "Displaying " + toDisplayString(_ctx.totalIndividuals) + " results.",
          1
          /* TEXT */
        )) : createCommentVNode("v-if", true),
        !_ctx.hasSelectedItem ? (openBlock(), createBlock(
          VCol,
          {
            key: 3,
            ref: "mobileTableContainer",
            class: "mobile-individuals-table"
          },
          {
            default: withCtx(() => [
              !_ctx.shouldHideResults ? (openBlock(), createBlock(VDataTableServer, {
                key: 0,
                items: _ctx.individuals,
                "items-length": _ctx.totalIndividuals,
                loading: _ctx.loading,
                "mobile-breakpoint": 992,
                "hide-default-header": "",
                class: "elevation-1",
                "sort-by": _ctx.options.sortBy,
                "onUpdate:sortBy": _cache[22] || (_cache[22] = ($event) => _ctx.options.sortBy = $event),
                options: _ctx.options,
                "onUpdate:options": _cache[23] || (_cache[23] = ($event) => _ctx.options = $event),
                "onClick:row": $options.displaySelectedRow
              }, {
                item: withCtx((row) => [
                  createBaseVNode("tr", _hoisted_60, [
                    createBaseVNode(
                      "td",
                      _hoisted_61,
                      toDisplayString(row.item.FirstName) + " " + toDisplayString(row.item.MiddleName) + " " + toDisplayString(row.item.LastName),
                      1
                      /* TEXT */
                    ),
                    row.item.individualEmailsOrdered && row.item.individualEmailsOrdered.length > 0 ? (openBlock(), createElementBlock(
                      "td",
                      _hoisted_62,
                      toDisplayString(row.item.individualEmailsOrdered[0].Email),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true),
                    createBaseVNode("td", _hoisted_63, [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(row.item.activeIndividualAffiliates, (affiliate) => {
                          return openBlock(), createElementBlock(
                            "span",
                            mergeProps({ ref_for: true }, affiliate, {
                              key: affiliate.IndividualAffiliateId
                            }),
                            [
                              affiliate.UnionRelationshipType ? (openBlock(), createElementBlock(
                                "span",
                                _hoisted_64,
                                toDisplayString(affiliate.UnionRelationshipType.UnionRelationshipTypeName),
                                1
                                /* TEXT */
                              )) : createCommentVNode("v-if", true)
                            ],
                            16
                            /* FULL_PROPS */
                          );
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    createBaseVNode("td", _hoisted_65, [
                      createVNode(VBtn, {
                        variant: "text",
                        icon: "mdi:mdi-menu-down",
                        size: "small",
                        onClick: ($event) => $options.displaySelectedRow(row.item)
                      }, null, 8, ["onClick"])
                    ])
                  ])
                ]),
                _: 1
                /* STABLE */
              }, 8, ["items", "items-length", "loading", "sort-by", "options", "onClick:row"])) : createCommentVNode("v-if", true)
            ]),
            _: 1
            /* STABLE */
          },
          512
          /* NEED_PATCH */
        )) : createCommentVNode("v-if", true),
        _ctx.hasSelectedItem ? (openBlock(), createElementBlock("div", _hoisted_66, [
          createBaseVNode("div", _hoisted_67, [
            createVNode(_component_basic_data_component, {
              onSwipeToClose: _cache[24] || (_cache[24] = ($event) => _ctx.hasSelectedItem = false),
              officerRoles: $options.getUniqueOfficerRoles(_ctx.selectedItem.activeIndividualAffiliates),
              individual: _ctx.selectedItem,
              shouldDisplayDataComponent: false
            }, null, 8, ["officerRoles", "individual"])
          ])
        ])) : createCommentVNode("v-if", true)
      ])) : createCommentVNode("v-if", true)
    ],
    32
    /* NEED_HYDRATION */
  );
}
const IndividualListComponent = /* @__PURE__ */ _export_sfc(_sfc_main$I, [["render", _sfc_render$I], ["__file", "/var/www/html/resources/js/components/Individual/IndividualListComponent.vue"]]);
const _sfc_main$H = {
  data: () => ({
    panel: [0],
    releaseNotes: []
  }),
  mounted() {
    this.getAnnouncements();
  },
  methods: {
    getAnnouncements() {
      axios.get("public-release-notes").then((response) => {
        this.releaseNotes = response.data.data;
      });
    }
  }
};
const _hoisted_1$u = ["innerHTML"];
function _sfc_render$H(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, {
            cols: "12",
            class: "mt-8"
          }, {
            default: withCtx(() => [
              createBaseVNode("div", null, [
                createVNode(VExpansionPanels, {
                  modelValue: _ctx.panel,
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.panel = $event),
                  class: "announcement mb-8 r-notes",
                  multiple: ""
                }, {
                  default: withCtx(() => [
                    (openBlock(true), createElementBlock(
                      Fragment,
                      null,
                      renderList(_ctx.releaseNotes, (releaseNote) => {
                        return openBlock(), createBlock(VExpansionPanel, {
                          key: releaseNote.id,
                          class: normalizeClass(["mb-4", "type-" + releaseNote.id])
                        }, {
                          default: withCtx(() => [
                            createVNode(
                              VExpansionPanelTitle,
                              null,
                              {
                                default: withCtx(() => [
                                  createBaseVNode(
                                    "h4",
                                    null,
                                    toDisplayString(releaseNote.title),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            ),
                            createVNode(
                              VExpansionPanelText,
                              { class: "border-sm" },
                              {
                                default: withCtx(() => [
                                  createVNode(
                                    VCard,
                                    {
                                      variant: "flat",
                                      class: "p-3"
                                    },
                                    {
                                      default: withCtx(() => [
                                        createBaseVNode("span", {
                                          innerHTML: releaseNote.description
                                        }, null, 8, _hoisted_1$u)
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        }, 1032, ["class"]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["modelValue"])
              ])
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const ReleaseNotesComponent = /* @__PURE__ */ _export_sfc(_sfc_main$H, [["render", _sfc_render$H], ["__scopeId", "data-v-27bdd15f"], ["__file", "/var/www/html/resources/js/components/Public/ReleaseNotesComponent.vue"]]);
const _sfc_main$G = {
  name: "NotFoundComponent",
  data: () => ({})
};
function _sfc_render$G(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, null, {
            default: withCtx(() => [
              createVNode(VCard, { class: "v-card--outlined v-sheet--tile p-4" }, {
                default: withCtx(() => _cache[0] || (_cache[0] = [
                  createBaseVNode(
                    "h1",
                    null,
                    "Page Not Found!",
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "br",
                    null,
                    null,
                    -1
                    /* HOISTED */
                  )
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const NotFoundComponent = /* @__PURE__ */ _export_sfc(_sfc_main$G, [["render", _sfc_render$G], ["__file", "/var/www/html/resources/js/components/Static/NotFoundComponent.vue"]]);
const _sfc_main$F = {
  name: "WhatsNewComponent",
  data: () => ({})
};
function _sfc_render$F(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, null, {
            default: withCtx(() => [
              createVNode(VCard, { class: "v-card--outlined v-sheet--tile p-4" }, {
                default: withCtx(() => _cache[0] || (_cache[0] = [
                  createBaseVNode(
                    "h3",
                    null,
                    "What's New!",
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "Quicker Reporting"),
                      createTextVNode(" – When you add or edit individual records, you can expect to see that updated information displayed on the grid right away. You can make changes to records and export those changes the next time you use the filters.")
                    ],
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "Fewer Clicks to Update Information"),
                      createTextVNode(" – Our new “flip card” editing feature lets you update contact information, union relationships, and employment details from a single page.")
                    ],
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "Units"),
                      createTextVNode(" – Regular affiliates with multiple employer contracts or bargaining units will now see that information displayed as Units. Federated locals will continue have access to their separate chartered chapters.")
                    ],
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "Retirees"),
                      createTextVNode(" – There are new options for how to manage your retired members! In addition to keeping retirees in special unit (not chapter!) of your local or moving them to the AFT national retiree-at-large local, you can now decide to share information about your retired members with a separate chartered retiree local or state federation.")
                    ],
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "Organizing Actions"),
                      createTextVNode(" – Quick Comments now features a place to connect Assessment ratings to a Yes or Refused response for up to 5 placeholder “Organizing Actions.” These can be actions like signing a petition, pledging to vote yes in a contract campaign, taking a photo holding a union sign – it’s up to you to decide what makes sense for your local.")
                    ],
                    -1
                    /* HOISTED */
                  )
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, null, {
            default: withCtx(() => [
              createVNode(VCard, { class: "v-card--outlined v-sheet--tile p-4" }, {
                default: withCtx(() => _cache[1] || (_cache[1] = [
                  createBaseVNode(
                    "h3",
                    null,
                    "Continued Support",
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "Member Information"),
                      createTextVNode(" – You can continue to update contact information, relationship status, and employment details for members, retired members, potential members, agency fee payers, and associated friends of the union.")
                    ],
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "Individuals Grid"),
                      createTextVNode(" – You can also continue to filter your bargaining units and display or export customized lists as needed. The gears now allow you to check which fields you want to see and make that change immediately without having to save a preset group.")
                    ],
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "Officers and Committees"),
                      createTextVNode(" – Affiliates will be able to add and remove individuals to current officer roles, as well as modify individuals on our standard list of committees or any committees you were already using in Connect.")
                    ],
                    -1
                    /* HOISTED */
                  )
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, null, {
            default: withCtx(() => [
              createVNode(VCard, { class: "v-card--outlined v-sheet--tile p-4" }, {
                default: withCtx(() => _cache[2] || (_cache[2] = [
                  createBaseVNode(
                    "h3",
                    null,
                    "On Hold",
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "Employment and Affiliate Structures"),
                      createTextVNode(" – While you will still be able to manage employment information and dues categories for individual bargaining unit members on their records, you won’t be able to add new worksites or dues categories until fall 2020. If you need modifications before then, contact us using the Feedback link and we can update it for you.")
                    ],
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "User Management"),
                      createTextVNode(" – All users who had accounts in Connect 1.0 will still be able to log in with their existing email addresses and passwords. Adding new users locally will be put on hold until Back to School 2020. If you need a new user before then, contact us using the Feedback link and we can create an account for you.")
                    ],
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "Forms & Events"),
                      createTextVNode(" – We’ve heard lots of feedback from users about problems with reporting on the Forms and Events features in Connect 1.0. To give our team time to work on modifications to those features, we’ve temporarily removed them. We expect that improved Forms and Events will return in time for Back to School 2020!")
                    ],
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "Chapter Permissions"),
                      createTextVNode(" – Current users can have access to an affiliate’s entire membership list. We anticipate that federated locals with chapter-level users will be able to restore that limited access in late 2020.")
                    ],
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "Custom Fields"),
                      createTextVNode(" – Custom fields will no longer be available in Connect 2.0. If you were actively using custom fields and have not yet had a conversation with the AFT field data staff person assigned to your state to figure out the best place for that data to be stored, you can contact us using the Feedback link.")
                    ],
                    -1
                    /* HOISTED */
                  )
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(VCol, null, {
            default: withCtx(() => [
              createVNode(VCard, { class: "v-card--outlined v-sheet--tile p-4" }, {
                default: withCtx(() => _cache[3] || (_cache[3] = [
                  createBaseVNode(
                    "h3",
                    null,
                    "Coming Soon",
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "Groups"),
                      createTextVNode(" – Groups is our anticipated replacement for keeping track of non-bargaining unit supporters and other organizations that your members belong to. Look for more details about this feature in time for Back to School 2020.")
                    ],
                    -1
                    /* HOISTED */
                  ),
                  createBaseVNode(
                    "p",
                    null,
                    [
                      createBaseVNode("strong", null, "Grades/Steps/Compensation"),
                      createTextVNode(" – In late 2020, you’ll be able to add detailed information about members’ compensation status under your bargaining contracts.")
                    ],
                    -1
                    /* HOISTED */
                  )
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const WhatsNewComponent = /* @__PURE__ */ _export_sfc(_sfc_main$F, [["render", _sfc_render$F], ["__scopeId", "data-v-da88322c"], ["__file", "/var/www/html/resources/js/components/Static/WhatsNewComponent.vue"]]);
const _sfc_main$E = {
  name: "ActivityListComponent",
  data() {
    return {
      loading: false,
      headers: [
        { title: "Date", sortable: true, value: "created_at" },
        { title: "Affiliate", sortable: true, value: "owner.AffiliateNumber" },
        // TODO: every model should have a DisplayName or something
        { title: "User", sortable: true, value: "user.name" },
        { title: "Email", sortable: true, value: "user.email" },
        { title: "Activity", sortable: true, value: "event" },
        { title: "Record", sortable: true, value: "auditable" },
        { title: "Modified", sortable: true, value: "modified" }
      ],
      audits: [],
      options: {}
    };
  },
  mounted() {
  },
  watch: {
    options: {
      handler() {
        this.getDataFromApi();
      },
      deep: true,
      immediate: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      const page = this.options.page || 1;
      const perPage = this.options.itemsPerPage || 15;
      axios.get("/admin/api/audit?page=" + page + "&per_page=" + perPage).then((response) => {
        this.audits = response.data.data;
        this.options.page = response.data.meta.current_page;
        this.options.itemsPerPage = response.data.meta.per_page;
        this.options.total = response.data.meta.total;
      }).finally(() => {
        this.loading = false;
      });
    },
    getNiceLabel(item, key2) {
      const related = item[key2.replace(/Id$/, "")];
      return (related ? related.label : false) || key2;
    },
    getNiceName(item, key2) {
      const related = item[key2.replace(/Id$/, "")];
      return item[key2] || (related ? related.display_name : false) || "[empty]";
    },
    formatDate(date) {
      return format(new Date(date), "h:mm:ss a, MMMM do yyyy");
    }
  }
};
const _hoisted_1$t = ["colspan"];
function _sfc_render$E(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      _cache[2] || (_cache[2] = createBaseVNode(
        "h2",
        { class: "mb-4" },
        "Activity Log",
        -1
        /* HOISTED */
      )),
      createVNode(VDataTableServer, {
        loading: $data.loading,
        headers: $data.headers,
        items: $data.audits,
        "item-key": $data.audits.id,
        "single-expand": false,
        options: $data.options,
        "onUpdate:options": _cache[0] || (_cache[0] = ($event) => $data.options = $event),
        "items-length": $data.options.total,
        "disable-sort": true,
        "show-expand": ""
      }, {
        [`item.created_at`]: withCtx(({ item }) => [
          createTextVNode(
            toDisplayString($options.formatDate(item.created_at)),
            1
            /* TEXT */
          )
        ]),
        [`item.auditable`]: withCtx(({ item }) => [
          createTextVNode(
            toDisplayString(item.auditable ? item.auditable.label : item.auditable_type),
            1
            /* TEXT */
          )
        ]),
        [`item.modified`]: withCtx(({ item }) => [
          createTextVNode(
            toDisplayString(Object.keys(item.old_values).join(", ")),
            1
            /* TEXT */
          )
        ]),
        "expanded-row": withCtx(({ columns, item }) => [
          createBaseVNode("tr", null, [
            createBaseVNode("td", {
              colspan: columns.length,
              class: "py-2"
            }, [
              createVNode(
                VTable,
                { density: "compact" },
                {
                  default: withCtx(() => [
                    _cache[1] || (_cache[1] = createBaseVNode(
                      "thead",
                      null,
                      [
                        createBaseVNode("tr", null, [
                          createBaseVNode("th", null, "Changed"),
                          createBaseVNode("th", null, "Old Value"),
                          createBaseVNode("th", null, "New Value")
                        ])
                      ],
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode("tbody", null, [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(item.new_values, (value, key2) => {
                          return openBlock(), createElementBlock("tr", null, [
                            createBaseVNode(
                              "td",
                              null,
                              toDisplayString($options.getNiceLabel(item.auditable, key2)),
                              1
                              /* TEXT */
                            ),
                            createBaseVNode(
                              "td",
                              {
                                class: normalizeClass(["deleted", { "null": $options.getNiceName(item.auditable, key2) === "[empty]" }])
                              },
                              toDisplayString($options.getNiceName(item.previous, key2)),
                              3
                              /* TEXT, CLASS */
                            ),
                            createBaseVNode(
                              "td",
                              {
                                class: normalizeClass({ "null": $options.getNiceName(item.auditable, key2) === "[empty]" })
                              },
                              toDisplayString($options.getNiceName(item.auditable, key2)),
                              3
                              /* TEXT, CLASS */
                            )
                          ]);
                        }),
                        256
                        /* UNKEYED_FRAGMENT */
                      ))
                    ])
                  ]),
                  _: 2
                  /* DYNAMIC */
                },
                1024
                /* DYNAMIC_SLOTS */
              )
            ], 8, _hoisted_1$t)
          ])
        ]),
        _: 2
        /* DYNAMIC */
      }, 1032, ["loading", "headers", "items", "item-key", "options", "items-length"])
    ]),
    _: 1
    /* STABLE */
  });
}
const ActivityListComponent = /* @__PURE__ */ _export_sfc(_sfc_main$E, [["render", _sfc_render$E], ["__scopeId", "data-v-becbd1c0"], ["__file", "/var/www/html/resources/js/components/Activity/ActivityListComponent.vue"]]);
const _sfc_main$D = {
  name: "AffiliateCreateComponent",
  data() {
    return {
      pickerAffiliateCharterDate: false,
      pickerAffiliateFiscalYearEnd: false,
      id: "",
      affiliate: {}
    };
  },
  mounted() {
    this.id = this.$route.params.id;
  },
  methods: {}
};
const _hoisted_1$s = { class: "data-container" };
const _hoisted_2$r = { class: "data-container" };
const _hoisted_3$m = { class: "data-container" };
const _hoisted_4$k = { class: "data-container" };
const _hoisted_5$i = { class: "data-container" };
const _hoisted_6$g = { class: "data-container" };
const _hoisted_7$d = { class: "data-container" };
const _hoisted_8$8 = { class: "data-container" };
const _hoisted_9$8 = { class: "data-container" };
const _hoisted_10$6 = { class: "data-container" };
const _hoisted_11$6 = { class: "data-container" };
const _hoisted_12$6 = { class: "data-container" };
const _hoisted_13$4 = { class: "data-container" };
const _hoisted_14$4 = { class: "data-container" };
const _hoisted_15$4 = { class: "data-container" };
const _hoisted_16$4 = { class: "data-container" };
const _hoisted_17$4 = { class: "data-container" };
const _hoisted_18$4 = { class: "data-container switches" };
const _hoisted_19$4 = { class: "data-container" };
const _hoisted_20$3 = { class: "data-container" };
const _hoisted_21$3 = { class: "data-container" };
const _hoisted_22$3 = { class: "data-container" };
const _hoisted_23$3 = { class: "data-container" };
const _hoisted_24$3 = { class: "data-container" };
const _hoisted_25$3 = { class: "data-container switches" };
const _hoisted_26$3 = { class: "data-container" };
const _hoisted_27$3 = { class: "data-container" };
const _hoisted_28$3 = { class: "data-container" };
const _hoisted_29$3 = { class: "data-container" };
const _hoisted_30$3 = { class: "data-container data-container-icon" };
const _hoisted_31$3 = { class: "data-container data-container-icon" };
function _sfc_render$D(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VCard, { class: "v-card--outlined v-sheet--tile px-6" }, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "6"
              }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    label: "Affiliate Name:",
                    "model-value": $data.affiliate.AffiliateName
                  }, null, 8, ["model-value"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "6",
                class: "text-right"
              }, {
                default: withCtx(() => [
                  createVNode(VBtn, { href: "#/affiliates/" }, {
                    default: withCtx(() => _cache[8] || (_cache[8] = [
                      createTextVNode("Cancel")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VBtn, {
                    color: "success",
                    href: ""
                  }, {
                    default: withCtx(() => _cache[9] || (_cache[9] = [
                      createTextVNode("Save")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_1$s, [
                    createVNode(VTextField, {
                      label: "Affiliate Number:",
                      "model-value": $data.affiliate.AffiliateNumber
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_2$r, [
                    createVNode(VTextField, {
                      label: "Affiliate Level:",
                      "model-value": $data.affiliate.AffiliateLevel
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_3$m, [
                    createVNode(VTextField, {
                      label: "Affiliate Status:",
                      "model-value": $data.affiliate.AffiliateStatus
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_4$k, [
                    createVNode(VTextField, {
                      label: "Acronym",
                      "model-value": $data.affiliate.AffiliateAcronym
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_5$i, [
                    createVNode(VTextField, {
                      label: "Abbreviated Name:",
                      "model-value": $data.affiliate.AffiliateAbbreviatedName
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_6$g, [
                    createVNode(VTextField, {
                      label: "Dues Structure Type Code:",
                      "model-value": $data.affiliate.AffiliateDuesStructureTypeCode
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_7$d, [
                    createVNode(VTextField, {
                      label: "Affiliate Type & Code:",
                      "model-value": $data.affiliate.AffiliateTypeAndCode
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_8$8, [
                    createVNode(VTextField, {
                      label: "Bargaining Unit:",
                      "model-value": $data.affiliate.AffiliateBargainingUnit
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_9$8, [
                    createVNode(VAutocomplete, {
                      multiple: "",
                      chips: "",
                      label: "Divisions:",
                      items: [
                        // Todo: remove this
                        "Division 1",
                        "Division 2",
                        "Division 3",
                        "Division 4"
                      ],
                      "model-value": $data.affiliate.AffiliateDivisions
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_10$6, [
                    createVNode(VTextField, {
                      label: "AFT Generate Member ID:",
                      "model-value": $data.affiliate.AffiliateAFTGenerateMemberID
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_11$6, [
                    createVNode(VAutocomplete, {
                      label: "Record Created By:",
                      items: [
                        // Todo: remove this
                        "Name 1",
                        "Name 2",
                        "Name 3",
                        "Name 4"
                      ],
                      "model-value": $data.affiliate.AffiliateRecordCreatedBy
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_12$6, [
                    createVNode(VTextField, {
                      label: "Last Update:",
                      "model-value": $data.affiliate.AffiliateLastUpdate
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_13$4, [
                    createVNode(VTextField, {
                      label: "Last Update By:",
                      "model-value": $data.affiliate.AffiliateLastUpdateBy
                    }, null, 8, ["model-value"])
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_14$4, [
                    createVNode(VTextField, {
                      label: "EIN:",
                      "model-value": $data.affiliate.AffiliateEIN
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_15$4, [
                    createVNode(VTextField, {
                      label: "Billhighway Group ID:",
                      "model-value": $data.affiliate.BillHighwayGroupID
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_16$4, [
                    createVNode(VTextField, {
                      label: "Direct Affiliation:",
                      "model-value": $data.affiliate.DirectAffiliation
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_17$4, [
                    createVNode(VTextField, {
                      label: "Geographical Region:",
                      "model-value": $data.affiliate.AffiliateGeoTypeId
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_18$4, [
                    createVNode(VSwitch, {
                      color: "primary",
                      label: "Chartered",
                      value: $data.affiliate.IsChartered
                    }, null, 8, ["value"])
                  ]),
                  createBaseVNode("div", _hoisted_19$4, [
                    createVNode(VMenu, {
                      modelValue: $data.pickerAffiliateCharterDate,
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.pickerAffiliateCharterDate = $event),
                      "close-on-content-click": false,
                      offset: 40,
                      transition: "scale-transition",
                      "min-width": "290px"
                    }, {
                      activator: withCtx(({ props }) => [
                        createVNode(VTextField, mergeProps({
                          modelValue: $data.affiliate.AffiliateCharterDate,
                          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.affiliate.AffiliateCharterDate = $event),
                          label: "Charter Date:",
                          readonly: ""
                        }, props), null, 16, ["modelValue"])
                      ]),
                      default: withCtx(() => [
                        createVNode(VDatePicker, {
                          modelValue: $data.affiliate.AffiliateCharterDate,
                          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.affiliate.AffiliateCharterDate = $event),
                          onInput: _cache[2] || (_cache[2] = ($event) => $data.pickerAffiliateCharterDate = false)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["modelValue"])
                  ]),
                  createBaseVNode("div", _hoisted_20$3, [
                    createVNode(VTextField, {
                      label: "Merged Local:",
                      "model-value": $data.affiliate.AffiliateMergedLocal
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_21$3, [
                    createVNode(VMenu, {
                      modelValue: $data.pickerAffiliateFiscalYearEnd,
                      "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.pickerAffiliateFiscalYearEnd = $event),
                      "close-on-content-click": false,
                      offset: 40,
                      transition: "scale-transition",
                      "min-width": "290px"
                    }, {
                      activator: withCtx(({ props }) => [
                        createVNode(VTextField, mergeProps({
                          modelValue: $data.affiliate.AffiliateFiscalYearEnd,
                          "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.affiliate.AffiliateFiscalYearEnd = $event),
                          label: "Fiscal Year End:",
                          readonly: ""
                        }, props), null, 16, ["modelValue"])
                      ]),
                      default: withCtx(() => [
                        createVNode(VDatePicker, {
                          modelValue: $data.affiliate.AffiliateFiscalYearEnd,
                          "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.affiliate.AffiliateFiscalYearEnd = $event),
                          onInput: _cache[6] || (_cache[6] = ($event) => $data.pickerAffiliateFiscalYearEnd = false)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["modelValue"])
                  ]),
                  createBaseVNode("div", _hoisted_22$3, [
                    createVNode(VTextField, {
                      label: "Mo. elections are held:",
                      "model-value": $data.affiliate.AffiliateElectionsHeld
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_23$3, [
                    createVNode(VTextField, {
                      label: "Mo. officer term starts:",
                      "model-value": $data.affiliate.OfficerTermStartMonth
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_24$3, [
                    createVNode(VTextField, {
                      label: "Election term length (# yrs):",
                      "model-value": $data.affiliate.ElectionTermYears
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_25$3, [
                    createVNode(VSwitch, {
                      color: "primary",
                      label: "Elections held even or odd years",
                      value: $data.affiliate.IsElectionYearOdd
                    }, null, 8, ["value"])
                  ]),
                  createBaseVNode("div", _hoisted_26$3, [
                    createVNode(VTextField, {
                      label: "Eligible for Delegates:",
                      "model-value": $data.affiliate.EligibleForDelegates
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_27$3, [
                    createVNode(VTextField, {
                      label: "Card Eligible:",
                      "model-value": $data.affiliate.AffiliateLastUpdateBy
                    }, null, 8, ["model-value"])
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, null, {
                default: withCtx(() => [
                  _cache[10] || (_cache[10] = createBaseVNode(
                    "h5",
                    { class: "h4-header mt-3" },
                    "Contact Information",
                    -1
                    /* HOISTED */
                  )),
                  createVNode(VAutocomplete, {
                    label: "Google Address Autocomplete:",
                    "model-value": $data.affiliate.AffiliateAddress
                  }, null, 8, ["model-value"]),
                  createBaseVNode("div", _hoisted_28$3, [
                    createVNode(VTextField, {
                      label: "Address:",
                      "model-value": $data.affiliate.AffiliateAddress
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_29$3, [
                    createVNode(VTextField, {
                      label: "Source:",
                      "model-value": $data.affiliate.AffiliateSource
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_30$3, [
                    createVNode(VTextField, {
                      label: "Email:",
                      "model-value": $data.affiliate.AffiliateEmail
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_31$3, [
                    createVNode(VTextField, {
                      label: "Website:",
                      "model-value": $data.affiliate.AffiliateWebsite
                    }, null, 8, ["model-value"])
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const AffiliateCreateComponent = /* @__PURE__ */ _export_sfc(_sfc_main$D, [["render", _sfc_render$D], ["__file", "/var/www/html/resources/js/components/Affiliate/AffiliateCreateComponent.vue"]]);
const _sfc_main$C = {
  name: "AffiliateEditMainComponent",
  data() {
    return {
      pickerAffiliateCharterDate: false,
      pickerAffiliateFiscalYearEnd: false,
      id: "",
      affiliate: {}
    };
  },
  mounted() {
    this.id = this.$route.params.id;
    this.getDataFromApi();
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/affiliate/" + this.id).then((response) => {
        this.affiliate = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$r = { class: "data-container" };
const _hoisted_2$q = { class: "data-container" };
const _hoisted_3$l = { class: "data-container" };
const _hoisted_4$j = { class: "data-container" };
const _hoisted_5$h = { class: "data-container" };
const _hoisted_6$f = { class: "data-container" };
const _hoisted_7$c = { class: "data-container" };
const _hoisted_8$7 = { class: "data-container" };
const _hoisted_9$7 = { class: "data-container" };
const _hoisted_10$5 = { class: "data-container" };
const _hoisted_11$5 = { class: "data-container" };
const _hoisted_12$5 = { class: "data-container" };
const _hoisted_13$3 = { class: "data-container" };
const _hoisted_14$3 = { class: "data-container" };
const _hoisted_15$3 = { class: "data-container" };
const _hoisted_16$3 = { class: "data-container" };
const _hoisted_17$3 = { class: "data-container" };
const _hoisted_18$3 = { class: "data-container" };
const _hoisted_19$3 = { class: "data-container" };
const _hoisted_20$2 = { class: "data-container" };
const _hoisted_21$2 = { class: "data-container" };
const _hoisted_22$2 = { class: "data-container" };
const _hoisted_23$2 = { class: "data-container" };
const _hoisted_24$2 = { class: "data-container" };
const _hoisted_25$2 = { class: "data-container" };
const _hoisted_26$2 = { class: "data-container" };
const _hoisted_27$2 = { class: "data-container" };
const _hoisted_28$2 = { class: "data-container" };
const _hoisted_29$2 = { class: "data-container" };
const _hoisted_30$2 = { class: "data-container data-container-icon" };
const _hoisted_31$2 = { class: "data-container data-container-icon" };
function _sfc_render$C(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VCard, { class: "v-card--outlined v-sheet--tile px-6" }, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "6"
              }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    label: "Affiliate Name:",
                    "model-value": $data.affiliate.AffiliateName
                  }, null, 8, ["model-value"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "12",
                lg: "6",
                class: "text-right"
              }, {
                default: withCtx(() => [
                  createVNode(VBtn, {
                    href: "#/affiliates/" + this.id
                  }, {
                    default: withCtx(() => _cache[8] || (_cache[8] = [
                      createTextVNode("Cancel")
                    ])),
                    _: 1
                    /* STABLE */
                  }, 8, ["href"]),
                  createVNode(VBtn, {
                    color: "success",
                    href: ""
                  }, {
                    default: withCtx(() => _cache[9] || (_cache[9] = [
                      createTextVNode("Save")
                    ])),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_1$r, [
                    createVNode(VTextField, {
                      label: "Affiliate Number:",
                      "model-value": $data.affiliate.AffiliateNumber
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_2$q, [
                    createVNode(VTextField, {
                      label: "Affiliate Level:",
                      "model-value": $data.affiliate.AffiliateLevel
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_3$l, [
                    createVNode(VTextField, {
                      label: "Affiliate Status:",
                      "model-value": $data.affiliate.AffiliateStatus
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_4$j, [
                    createVNode(VTextField, {
                      label: "Acronym",
                      "model-value": $data.affiliate.AffiliateAcronym
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_5$h, [
                    createVNode(VTextField, {
                      label: "Abbreviated Name:",
                      "model-value": $data.affiliate.AffiliateAbbreviatedName
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_6$f, [
                    createVNode(VTextField, {
                      label: "Dues Structure Type Code:",
                      "model-value": $data.affiliate.AffiliateDuesStructureTypeCode
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_7$c, [
                    createVNode(VTextField, {
                      label: "Affiliate Type & Code:",
                      "model-value": $data.affiliate.AffiliateTypeAndCode
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_8$7, [
                    createVNode(VTextField, {
                      label: "Bargaining Unit:",
                      "model-value": $data.affiliate.AffiliateBargainingUnit
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_9$7, [
                    createVNode(VAutocomplete, {
                      multiple: "",
                      chips: "",
                      label: "Divisions:",
                      items: [
                        // Todo: remove this
                        "Division 1",
                        "Division 2",
                        "Division 3",
                        "Division 4"
                      ],
                      "model-value": $data.affiliate.AffiliateDivisions
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_10$5, [
                    createVNode(VTextField, {
                      label: "AFT Generate Member ID:",
                      "model-value": $data.affiliate.AffiliateAFTGenerateMemberID
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_11$5, [
                    createVNode(VAutocomplete, {
                      label: "Record Created By:",
                      items: [
                        // Todo: remove this
                        "Name 1",
                        "Name 2",
                        "Name 3",
                        "Name 4"
                      ],
                      "model-value": $data.affiliate.AffiliateRecordCreatedBy
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_12$5, [
                    createVNode(VTextField, {
                      label: "Last Update:",
                      "model-value": $data.affiliate.AffiliateLastUpdate
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_13$3, [
                    createVNode(VTextField, {
                      label: "Last Update By:",
                      "model-value": $data.affiliate.AffiliateLastUpdateBy
                    }, null, 8, ["model-value"])
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_14$3, [
                    createVNode(VTextField, {
                      label: "EIN:",
                      "model-value": $data.affiliate.AffiliateEIN
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_15$3, [
                    createVNode(VTextField, {
                      label: "Billhighway Group ID:",
                      "model-value": $data.affiliate.BillHighwayGroupID
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_16$3, [
                    createVNode(VTextField, {
                      label: "Direct Affiliation:",
                      "model-value": $data.affiliate.DirectAffiliation
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_17$3, [
                    createVNode(VTextField, {
                      label: "Geographical Region:",
                      "model-value": $data.affiliate.AffiliateGeoTypeId
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_18$3, [
                    createVNode(VSwitch, {
                      color: "primary",
                      label: "Chartered",
                      value: $data.affiliate.IsChartered
                    }, null, 8, ["value"])
                  ]),
                  createBaseVNode("div", _hoisted_19$3, [
                    createVNode(VMenu, {
                      modelValue: $data.pickerAffiliateCharterDate,
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.pickerAffiliateCharterDate = $event),
                      "close-on-content-click": false,
                      offset: 40,
                      transition: "scale-transition",
                      "min-width": "290px"
                    }, {
                      activator: withCtx(({ props }) => [
                        createVNode(VTextField, mergeProps({
                          modelValue: $data.affiliate.AffiliateCharterDate,
                          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.affiliate.AffiliateCharterDate = $event),
                          label: "Charter Date:",
                          readonly: ""
                        }, props), null, 16, ["modelValue"])
                      ]),
                      default: withCtx(() => [
                        createVNode(VDatePicker, {
                          modelValue: $data.affiliate.AffiliateCharterDate,
                          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.affiliate.AffiliateCharterDate = $event),
                          onInput: _cache[2] || (_cache[2] = ($event) => $data.pickerAffiliateCharterDate = false)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["modelValue"])
                  ]),
                  createBaseVNode("div", _hoisted_20$2, [
                    createVNode(VTextField, {
                      label: "Merged Local:",
                      "model-value": $data.affiliate.AffiliateMergedLocal
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_21$2, [
                    createVNode(VMenu, {
                      modelValue: $data.pickerAffiliateFiscalYearEnd,
                      "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.pickerAffiliateFiscalYearEnd = $event),
                      "close-on-content-click": false,
                      offset: 40,
                      transition: "scale-transition",
                      "min-width": "290px"
                    }, {
                      activator: withCtx(({ props }) => [
                        createVNode(VTextField, mergeProps({
                          modelValue: $data.affiliate.AffiliateFiscalYearEnd,
                          "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.affiliate.AffiliateFiscalYearEnd = $event),
                          label: "Fiscal Year End:",
                          readonly: ""
                        }, props), null, 16, ["modelValue"])
                      ]),
                      default: withCtx(() => [
                        createVNode(VDatePicker, {
                          modelValue: $data.affiliate.AffiliateFiscalYearEnd,
                          "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.affiliate.AffiliateFiscalYearEnd = $event),
                          onInput: _cache[6] || (_cache[6] = ($event) => $data.pickerAffiliateFiscalYearEnd = false)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["modelValue"])
                  ]),
                  createBaseVNode("div", _hoisted_22$2, [
                    createVNode(VTextField, {
                      label: "Mo. elections are held:",
                      "model-value": $data.affiliate.AffiliateElectionsHeld
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_23$2, [
                    createVNode(VTextField, {
                      label: "Mo. officer term starts:",
                      "model-value": $data.affiliate.OfficerTermStartMonth
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_24$2, [
                    createVNode(VTextField, {
                      label: "Election term length (# yrs):",
                      "model-value": $data.affiliate.ElectionTermYears
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_25$2, [
                    createVNode(VSwitch, {
                      color: "primary",
                      label: "Elections held even or odd years",
                      value: $data.affiliate.IsElectionYearOdd
                    }, null, 8, ["value"])
                  ]),
                  createBaseVNode("div", _hoisted_26$2, [
                    createVNode(VTextField, {
                      label: "Eligible for Delegates:",
                      "model-value": $data.affiliate.EligibleForDelegates
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_27$2, [
                    createVNode(VTextField, {
                      label: "Card Eligible:",
                      "model-value": $data.affiliate.AffiliateLastUpdateBy
                    }, null, 8, ["model-value"])
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, null, {
                default: withCtx(() => [
                  _cache[10] || (_cache[10] = createBaseVNode(
                    "h5",
                    { class: "h4-header mt-3" },
                    "Contact Information",
                    -1
                    /* HOISTED */
                  )),
                  createVNode(VAutocomplete, {
                    label: "Google Address Autocomplete:",
                    "model-value": $data.affiliate.AffiliateAddress
                  }, null, 8, ["model-value"]),
                  createBaseVNode("div", _hoisted_28$2, [
                    createVNode(VTextField, {
                      label: "Address:",
                      "model-value": $data.affiliate.AffiliateAddress
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_29$2, [
                    createVNode(VTextField, {
                      label: "Source:",
                      "model-value": $data.affiliate.AffiliateSource
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_30$2, [
                    createVNode(VTextField, {
                      label: "Email:",
                      "model-value": $data.affiliate.AffiliateEmail
                    }, null, 8, ["model-value"])
                  ]),
                  createBaseVNode("div", _hoisted_31$2, [
                    createVNode(VTextField, {
                      label: "Website:",
                      "model-value": $data.affiliate.AffiliateWebsite
                    }, null, 8, ["model-value"])
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const AffiliateEditMainComponent = /* @__PURE__ */ _export_sfc(_sfc_main$C, [["render", _sfc_render$C], ["__file", "/var/www/html/resources/js/components/Affiliate/AffiliateEditMainComponent.vue"]]);
const _sfc_main$B = {
  name: "AffiliatesSearchComponent",
  mixins: [headersMixin, configurationMixin, paginationUrlMixin, emptySelectMixin, dataTablesMixin],
  components: { "chooser-component": ColumnChooserComponent, StateTerritorySelectComponent, AffiliateSwitchComponent },
  data: () => ({
    filters: null,
    filterId: {
      AffiliateName: 0,
      AffiliateNumber: 1,
      StateFedAssociation: 2,
      City: 3,
      HomeState: 4
    },
    headers: [],
    affiliates: [],
    totalAffiliates: 0,
    options: {
      sortBy: [],
      page: 1,
      itemsPerPage: 10
    },
    loading: false,
    searched: false,
    stateFeds: []
  }),
  watch: {
    options: {
      handler() {
        if (this.searched) {
          this.search();
        }
      },
      deep: true,
      immediate: true
    }
  },
  methods: {
    getFilter(field) {
      return this.filters.filter((filter) => filter.name === field);
    },
    displayIndividualFullName(individual) {
      return individual.FirstName + " " + individual.LastName;
    },
    search() {
      this.loading = true;
      const { page, itemsPerPage } = this.options;
      let url = "/api/v2/aggregate/affiliate/search?scope=global&page=" + page + "&per_page=" + itemsPerPage;
      let filterUrl = "";
      this.filters.map((filter) => {
        if (filter.value !== "") {
          filterUrl += "&" + filter.name + "=" + filter.value;
        }
      });
      if (filterUrl !== "") {
        url += filterUrl;
      }
      this.updateQueryParams(this.options, this.filters, this.headers);
      return axios.get(url).then((response) => {
        this.affiliates = response.data.data;
        this.totalAffiliates = response.data.meta.total;
      }).finally(() => {
        this.loading = false;
        this.searched = true;
      });
    },
    clear() {
      this.filters.map((filter) => {
        filter.value = "";
      });
      this.search();
    },
    loadConfiguration(key2) {
      this.getConfiguration("affiliateSearch", key2).then((response) => {
        this.headers = response.data.fields;
        this.configCommon(response);
        this.updateQueryParams(this.options, this.filters, this.headers);
      });
    },
    configCommon(response) {
      this.filters = this.parseQueryParams(response.data.filters);
      this.setPresetData(response.data);
      this.filters.forEach((filter, index) => {
        this.filterId[filter.name] = index;
      });
    },
    initConfiguration() {
      this.getConfiguration("affiliateSearch", "").then((response) => {
        this.headers = this.parseHiddenColumn(response.data.fields);
        this.configCommon(response);
        this.search();
      });
    }
  },
  mounted() {
    this.initConfiguration();
    axios.get("/api/v2/affiliate?scope=global&sort=AffiliateName&filter[AffiliateTypeId]=2&per_page=100").then((response) => {
      this.stateFeds = this.addEmptyElement(response.data.data, "AffiliateName", "AffiliateId");
    });
  }
};
const _hoisted_1$q = { class: "filter-row" };
const _hoisted_2$p = {
  key: 0,
  class: "data-container"
};
const _hoisted_3$k = {
  key: 0,
  class: "data-container"
};
const _hoisted_4$i = {
  key: 1,
  class: "data-container"
};
function _sfc_render$B(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_StateTerritorySelectComponent = resolveComponent("StateTerritorySelectComponent");
  const _component_AffiliateSwitchComponent = resolveComponent("AffiliateSwitchComponent");
  const _component_chooser_component = resolveComponent("chooser-component");
  return openBlock(), createBlock(VContainer, {
    fluid: "",
    onKeyup: withKeys($options.search, ["enter"])
  }, {
    default: withCtx(() => [
      createVNode(VCard, { class: "v-card--outlined v-sheet--tile mt-4 pa-4 mobile-search-container" }, {
        default: withCtx(() => [
          createBaseVNode("div", _hoisted_1$q, [
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, {
                  cols: "12",
                  lg: "4"
                }, {
                  default: withCtx(() => _cache[11] || (_cache[11] = [
                    createBaseVNode(
                      "h3",
                      null,
                      "Search for Affiliates",
                      -1
                      /* HOISTED */
                    )
                  ])),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            _ctx.filters ? (openBlock(), createBlock(VRow, { key: 0 }, {
              default: withCtx(() => [
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "outlined",
                      key: "text-first-name",
                      label: _ctx.filters[_ctx.filterId["AffiliateName"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["AffiliateName"]].value,
                      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.filters[_ctx.filterId["AffiliateName"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "outlined",
                      key: "text-first-name",
                      label: _ctx.filters[_ctx.filterId["AffiliateNumber"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["AffiliateNumber"]].value,
                      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.filters[_ctx.filterId["AffiliateNumber"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VSelect, {
                      label: _ctx.filters[_ctx.filterId["StateFedAssociation"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["StateFedAssociation"]].value,
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.filters[_ctx.filterId["StateFedAssociation"]].value = $event),
                      items: _ctx.stateFeds,
                      "item-value": "AffiliateId",
                      "item-title": "AffiliateName"
                    }, null, 8, ["label", "modelValue", "items"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "outlined",
                      key: "text-first-name",
                      label: _ctx.filters[_ctx.filterId["City"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["City"]].value,
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => _ctx.filters[_ctx.filterId["City"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(_component_StateTerritorySelectComponent, {
                      modelValue: _ctx.filters[_ctx.filterId["HomeState"]].value,
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => _ctx.filters[_ctx.filterId["HomeState"]].value = $event),
                      label: _ctx.filters[_ctx.filterId["HomeState"]].label,
                      itemValue: "StateTerritoryName"
                    }, null, 8, ["modelValue", "label"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VBtn, {
                      elevation: "0",
                      color: "primary",
                      class: "mb-4 btn-block",
                      onClick: _cache[5] || (_cache[5] = ($event) => $options.search())
                    }, {
                      default: withCtx(() => _cache[12] || (_cache[12] = [
                        createTextVNode("Search")
                      ])),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VBtn, {
                      elevation: "0",
                      color: "default",
                      class: "mb-4 btn-block",
                      onClick: _cache[6] || (_cache[6] = ($event) => $options.clear())
                    }, {
                      default: withCtx(() => _cache[13] || (_cache[13] = [
                        createTextVNode("Clear")
                      ])),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })) : createCommentVNode("v-if", true)
          ]),
          createVNode(VRow, { class: "affiliates-search" }, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createVNode(VDataTableServer, {
                    headers: _ctx.getHeaders(_ctx.headers),
                    items: _ctx.affiliates,
                    options: _ctx.options,
                    "onUpdate:options": _cache[7] || (_cache[7] = ($event) => _ctx.options = $event),
                    "items-length": _ctx.totalAffiliates,
                    loading: _ctx.loading,
                    class: "elevation-1 mobile-affiliate-search",
                    "no-data-text": "No match found",
                    "mobile-breakpoint": "960",
                    "onUpdate:page": _cache[8] || (_cache[8] = ($event) => _ctx.scrollToBeginningOfPage())
                  }, {
                    loader: withCtx(() => [
                      createVNode(VProgressLinear, {
                        indeterminate: "",
                        height: "8",
                        color: "#3f98c9"
                      })
                    ]),
                    [`item.AffiliateName`]: withCtx(({ item }) => [
                      createVNode(_component_AffiliateSwitchComponent, {
                        "component-name": "AffiliateDisplay",
                        "param-name": "id",
                        "param-value": item.AffiliateId,
                        "display-value": item.AffiliateName,
                        "affiliate-id": item.AffiliateId,
                        "affiliate-name": item.AffiliateName,
                        "affiliate-number": item.AffiliateNumber
                      }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])
                    ]),
                    [`item.AffiliateNumber`]: withCtx(({ item }) => [
                      createVNode(_component_AffiliateSwitchComponent, {
                        "component-name": "AffiliateDisplay",
                        "param-name": "id",
                        "param-value": item.AffiliateId,
                        "display-value": item.AffiliateNumber,
                        "affiliate-id": item.AffiliateId,
                        "affiliate-name": item.AffiliateName,
                        "affiliate-number": item.AffiliateNumber
                      }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])
                    ]),
                    [`item.Address`]: withCtx(({ item }) => [
                      item && item.affiliateAddressesOrdered && item.affiliateAddressesOrdered.length > 0 ? (openBlock(), createElementBlock(
                        "span",
                        _hoisted_2$p,
                        toDisplayString(item.affiliateAddressesOrdered[0].AddressLine1) + ", " + toDisplayString(item.affiliateAddressesOrdered[0].City) + ", " + toDisplayString(item.affiliateAddressesOrdered[0].StateTerritory ? item.affiliateAddressesOrdered[0].StateTerritory.StateTerritoryCode : "") + ", " + toDisplayString(item.affiliateAddressesOrdered[0].PostalCode),
                        1
                        /* TEXT */
                      )) : createCommentVNode("v-if", true)
                    ]),
                    [`item.ContactInformation`]: withCtx(({ item }) => [
                      item && item.affiliatePhonesOrdered && item.affiliatePhonesOrdered.length > 0 ? (openBlock(), createElementBlock(
                        "span",
                        _hoisted_3$k,
                        toDisplayString(item.affiliatePhonesOrdered[0].PhoneNumber),
                        1
                        /* TEXT */
                      )) : createCommentVNode("v-if", true),
                      _cache[14] || (_cache[14] = createBaseVNode(
                        "br",
                        null,
                        null,
                        -1
                        /* HOISTED */
                      )),
                      item && item.affiliateEmailsOrdered && item.affiliateEmailsOrdered.length > 0 ? (openBlock(), createElementBlock(
                        "span",
                        _hoisted_4$i,
                        toDisplayString(item.affiliateEmailsOrdered[0].Email),
                        1
                        /* TEXT */
                      )) : createCommentVNode("v-if", true)
                    ]),
                    [`item.President`]: withCtx(({ item }) => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(item.affiliateOfficers, (officer) => {
                          return openBlock(), createElementBlock(
                            Fragment,
                            {
                              key: "affiliate-officer-president-" + officer.IndividualId
                            },
                            [
                              officer.AffiliateOfficerRole && officer.AffiliateOfficerRole.OfficerRoleTitleId === 14 ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                                key: 0,
                                "component-name": "IndividualDetails",
                                "param-name": "id",
                                "param-value": officer.IndividualId,
                                "display-value": $options.displayIndividualFullName(officer.Individual),
                                "affiliate-id": item.AffiliateId,
                                "affiliate-name": item.AffiliateName,
                                "affiliate-number": item.AffiliateNumber
                              }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : createCommentVNode("v-if", true)
                            ],
                            64
                            /* STABLE_FRAGMENT */
                          );
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    [`item.SecretaryTreasurer`]: withCtx(({ item }) => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(item.affiliateOfficers, (officer) => {
                          return openBlock(), createElementBlock(
                            Fragment,
                            {
                              key: "affiliate-officer-secretary-treasurer-" + officer.IndividualId
                            },
                            [
                              officer.AffiliateOfficerRole && officer.AffiliateOfficerRole.OfficerRoleTitleId === 16 ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                                key: 0,
                                "component-name": "IndividualDetails",
                                "param-name": "id",
                                "param-value": officer.IndividualId,
                                "display-value": $options.displayIndividualFullName(officer.Individual),
                                "affiliate-id": item.AffiliateId,
                                "affiliate-name": item.AffiliateName,
                                "affiliate-number": item.AffiliateNumber
                              }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : createCommentVNode("v-if", true)
                            ],
                            64
                            /* STABLE_FRAGMENT */
                          );
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    [`item.Staff`]: withCtx(({ item }) => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(item.affiliateStaff, (staff) => {
                          return openBlock(), createElementBlock("span", {
                            key: "affiliate-staff-" + staff.AffiliateStaffId
                          }, [
                            staff.Individual && staff.TermEndDate === "" ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                              key: 0,
                              "component-name": "IndividualDetails",
                              "param-name": "id",
                              "param-value": staff.Individual.IndividualId,
                              "display-value": $options.displayIndividualFullName(staff.Individual),
                              "affiliate-id": item.AffiliateId,
                              "affiliate-name": item.AffiliateName,
                              "affiliate-number": item.AffiliateNumber
                            }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : createCommentVNode("v-if", true)
                          ]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["headers", "items", "options", "items-length", "loading"]),
                  createVNode(_component_chooser_component, {
                    columns: _ctx.headers,
                    presets: _ctx.presets,
                    selectedPreset: _ctx.selectedPreset,
                    onApplied: _cache[9] || (_cache[9] = ($event) => _ctx.onHeaderChangeApplied("affiliateSearch", $event)),
                    onPresetLoad: _cache[10] || (_cache[10] = ($event) => $options.loadConfiguration($event))
                  }, null, 8, ["columns", "presets", "selectedPreset"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onKeyup"]);
}
const AffiliatesSearchComponent = /* @__PURE__ */ _export_sfc(_sfc_main$B, [["render", _sfc_render$B], ["__file", "/var/www/html/resources/js/components/Affiliate/AffiliatesSearchComponent.vue"]]);
const _sfc_main$A = {
  name: "OfficerSearchComponent",
  components: { StateTerritorySelectComponent, "chooser-component": ColumnChooserComponent, AffiliateSwitchComponent },
  mixins: [headersMixin, configurationMixin, paginationUrlMixin, emptySelectMixin, dataTablesMixin],
  data: () => ({
    filterId: {
      FirstName: 0,
      LastName: 1,
      "individualMembers.MemberId": 2,
      "individualAffiliates.Affiliate.AffiliateName": 3,
      "individualAffiliates.Affiliate.AffiliateNumber": 4,
      "individualAffiliates.individualOfficers.AffiliateOfficerRole.OfficerRoleTitle.OfficerRoleTypeId": 5,
      "individualAddresses.City": 6,
      "individualAddresses.StateTerritory.StateTerritoryName": 7,
      "individualEmails.Email": 8,
      "individualPhones.PhoneNumber": 9,
      PreferredName: 10,
      MiddleName: 11
    },
    items: [],
    totalItems: 0,
    loading: false,
    filters: null,
    headers: [],
    options: {
      sortBy: [{ key: "FullName", order: "asc" }],
      page: 1,
      itemsPerPage: 10
    },
    officerRoles: []
  }),
  watch: {
    options: {
      handler() {
        if (this.filters) {
          this.search();
        }
      },
      deep: true
    }
  },
  methods: {
    getFilter(field) {
      return this.filters.filter((filter) => filter.name === field);
    },
    clear() {
      this.filters.map((filter) => {
        filter.value = "";
      });
    },
    search() {
      this.loading = true;
      const { sortBy, page, itemsPerPage } = this.options;
      const sortDefault = sortBy[0] ?? { key: "IndividualId", order: "asc" };
      let sortByField = sortDefault.key ?? "IndividualId";
      const sortDirection = sortDefault.order === "asc" ? "" : "-";
      if (sortBy[0] === "FullName") {
        sortByField = "LastName,FirstName,MiddleName";
      }
      let url = "/api/v2/individual?scope=global&include=activeIndividualAffiliates.Affiliate,individualAddressesOrdered.IndividualAddressType,individualAddressesOrdered.StateTerritory,individualMembers,individualEmailsOrdered,activeIndividualAffiliates.UnionRelationshipType,individualAffiliates.individualOfficers.AffiliateOfficerRole,individualPhonesOrdered.IndividualPhoneType&page=" + page + "&per_page=" + itemsPerPage + "&sort=" + sortDirection + sortByField;
      let filterUrl = "&filter[onlyOfficers]=1";
      for (const search of this.filters) {
        if (search.value !== "") {
          filterUrl += "&filter[" + search.name + "]=" + search.value;
        }
      }
      if (filterUrl !== "") {
        url += filterUrl;
      }
      this.updateQueryParams(this.options, this.filters, this.headers);
      return axios.get(url).then((response) => {
        this.items = response.data.data;
        this.totalItems = response.data.meta.total;
      }).finally(() => {
        this.loading = false;
      });
    },
    getUniqueOfficerRoles(individualAffiliates) {
      const officerRoles = [];
      for (const individualAffiliate of individualAffiliates) {
        if (typeof individualAffiliate.individualOfficers === "undefined" || !individualAffiliate.individualOfficers) {
          continue;
        }
        for (const individualOfficer of individualAffiliate.individualOfficers) {
          if (individualOfficer.AffiliateOfficerRole && officerRoles.filter((officerRole) => {
            return officerRole.AffiliateOfficerRoleId === individualOfficer.AffiliateOfficerRole.AffiliateOfficerRoleId;
          }).length === 0) {
            officerRoles.push(individualOfficer.AffiliateOfficerRole);
          }
        }
      }
      return officerRoles;
    },
    getIndividualName(individualAffiliate) {
      if (individualAffiliate.MiddleName != "Null" && individualAffiliate.MiddleName != null) {
        return individualAffiliate.FirstName + " " + individualAffiliate.MiddleName + " " + individualAffiliate.LastName;
      } else {
        return individualAffiliate.FirstName + " " + individualAffiliate.LastName;
      }
    },
    loadConfiguration(key2) {
      this.getConfiguration("OfficerRoleSearch", key2).then((response) => {
        this.headers = response.data.fields;
        this.configCommon(response);
        this.updateQueryParams(this.options, this.filters, this.headers);
      });
    },
    configCommon(response) {
      this.filters = this.parseQueryParams(response.data.filters);
      this.setPresetData(response.data);
      this.filters.forEach((filter, index) => {
        this.filterId[filter.name] = index;
      });
    },
    initConfiguration() {
      this.getConfiguration("OfficerRoleSearch", "").then((response) => {
        this.headers = this.parseHiddenColumn(response.data.fields);
        this.configCommon(response);
        this.search();
      });
    },
    firstAddress(addresses, typeName) {
      return addresses.filter((address) => address.IndividualAddressType && address.IndividualAddressType.IndividualAddressTypeName === typeName).slice(0, 1);
    },
    firstPhone(phone, typeName) {
      return phone.filter((phone2) => phone2.IndividualPhoneType && phone2.IndividualPhoneType.IndividualPhoneTypeName === typeName).slice(0, 1);
    },
    firstEmail(emails) {
      return emails.slice(0, 1);
    }
  },
  mounted() {
    axios.get("/api/v2/OfficerRoleType?scope=global&per_page=50").then((response) => {
      this.officerRoles = this.addEmptyElement(response.data.data, "OfficerRoleTypeId", "OfficerRoleTypeName");
    });
    this.initConfiguration();
    const dataTable = document.querySelector(".v-data-table__wrapper");
    const topScroll = document.querySelector(".search-top-scroller");
    $(dataTable).on("scroll", function(e) {
      $(topScroll).scrollLeft($(dataTable).scrollLeft());
    });
  }
};
const _hoisted_1$p = { class: "filter-row" };
const _hoisted_2$o = { class: "hidden-lg-and-up" };
const _hoisted_3$j = { key: 0 };
const _hoisted_4$h = { key: 0 };
const _hoisted_5$g = { key: 0 };
function _sfc_render$A(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_StateTerritorySelectComponent = resolveComponent("StateTerritorySelectComponent");
  const _component_AffiliateSwitchComponent = resolveComponent("AffiliateSwitchComponent");
  const _component_router_link = resolveComponent("router-link");
  const _component_chooser_component = resolveComponent("chooser-component");
  return openBlock(), createBlock(VContainer, {
    fluid: "",
    onKeyup: withKeys($options.search, ["enter"])
  }, {
    default: withCtx(() => [
      createVNode(VCard, { class: "v-card--outlined v-sheet--tile pa-4 mobile-search-container" }, {
        default: withCtx(() => [
          createBaseVNode("div", _hoisted_1$p, [
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, {
                  cols: "12",
                  lg: "4"
                }, {
                  default: withCtx(() => _cache[20] || (_cache[20] = [
                    createBaseVNode(
                      "h3",
                      null,
                      "Search for Officer",
                      -1
                      /* HOISTED */
                    )
                  ])),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            _ctx.filters ? (openBlock(), createBlock(VRow, { key: 0 }, {
              default: withCtx(() => [
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "underlined",
                      key: "text-member-id",
                      label: _ctx.filters[_ctx.filterId["individualMembers.MemberId"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["individualMembers.MemberId"]].value,
                      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.filters[_ctx.filterId["individualMembers.MemberId"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "underlined",
                      key: "text-affiliate-name",
                      label: _ctx.filters[_ctx.filterId["individualAffiliates.Affiliate.AffiliateName"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["individualAffiliates.Affiliate.AffiliateName"]].value,
                      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.filters[_ctx.filterId["individualAffiliates.Affiliate.AffiliateName"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "underlined",
                      key: "text-affiliate-number",
                      label: _ctx.filters[_ctx.filterId["individualAffiliates.Affiliate.AffiliateNumber"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["individualAffiliates.Affiliate.AffiliateNumber"]].value,
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.filters[_ctx.filterId["individualAffiliates.Affiliate.AffiliateNumber"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "underlined",
                      key: "text-phone-number",
                      label: _ctx.filters[_ctx.filterId["individualPhones.PhoneNumber"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["individualPhones.PhoneNumber"]].value,
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => _ctx.filters[_ctx.filterId["individualPhones.PhoneNumber"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "underlined",
                      key: "text-home-city",
                      label: _ctx.filters[_ctx.filterId["individualAddresses.City"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["individualAddresses.City"]].value,
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => _ctx.filters[_ctx.filterId["individualAddresses.City"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(_component_StateTerritorySelectComponent, {
                      modelValue: _ctx.filters[_ctx.filterId["individualAddresses.StateTerritory.StateTerritoryName"]].value,
                      "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => _ctx.filters[_ctx.filterId["individualAddresses.StateTerritory.StateTerritoryName"]].value = $event),
                      label: _ctx.filters[_ctx.filterId["individualAddresses.StateTerritory.StateTerritoryName"]].label,
                      itemValue: "StateTerritoryName"
                    }, null, 8, ["modelValue", "label"])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })) : createCommentVNode("v-if", true),
            _ctx.filters ? (openBlock(), createBlock(VRow, { key: 1 }, {
              default: withCtx(() => [
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "underlined",
                      key: "text-first-name",
                      label: _ctx.filters[_ctx.filterId["FirstName"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["FirstName"]].value,
                      "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => _ctx.filters[_ctx.filterId["FirstName"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "underlined",
                      key: "text-middle-name",
                      label: _ctx.filters[_ctx.filterId["MiddleName"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["MiddleName"]].value,
                      "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => _ctx.filters[_ctx.filterId["MiddleName"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "underlined",
                      key: "text-last-name",
                      label: _ctx.filters[_ctx.filterId["LastName"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["LastName"]].value,
                      "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => _ctx.filters[_ctx.filterId["LastName"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "underlined",
                      key: "text-preferred-name",
                      label: _ctx.filters[_ctx.filterId["PreferredName"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["PreferredName"]].value,
                      "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => _ctx.filters[_ctx.filterId["PreferredName"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "underlined",
                      key: "text-email",
                      label: _ctx.filters[_ctx.filterId["individualEmails.Email"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["individualEmails.Email"]].value,
                      "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => _ctx.filters[_ctx.filterId["individualEmails.Email"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VSelect, {
                      items: _ctx.officerRoles,
                      label: _ctx.filters[_ctx.filterId["individualAffiliates.individualOfficers.AffiliateOfficerRole.OfficerRoleTitle.OfficerRoleTypeId"]].label,
                      "item-value": "OfficerRoleTypeId",
                      "item-title": "OfficerRoleTypeName",
                      modelValue: _ctx.filters[_ctx.filterId["individualAffiliates.individualOfficers.AffiliateOfficerRole.OfficerRoleTitle.OfficerRoleTypeId"]].value,
                      "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => _ctx.filters[_ctx.filterId["individualAffiliates.individualOfficers.AffiliateOfficerRole.OfficerRoleTitle.OfficerRoleTypeId"]].value = $event)
                    }, null, 8, ["items", "label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VBtn, {
                      elevation: "0",
                      color: "primary",
                      class: "mb-4 btn-block",
                      onClick: _cache[12] || (_cache[12] = ($event) => $options.search())
                    }, {
                      default: withCtx(() => _cache[21] || (_cache[21] = [
                        createTextVNode("Search")
                      ])),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VBtn, {
                      elevation: "0",
                      color: "default",
                      class: "mb-4 btn-block",
                      onClick: _cache[13] || (_cache[13] = ($event) => $options.clear())
                    }, {
                      default: withCtx(() => _cache[22] || (_cache[22] = [
                        createTextVNode("Clear")
                      ])),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })) : createCommentVNode("v-if", true)
          ]),
          createCommentVNode(" Mobile buttons "),
          createBaseVNode("div", _hoisted_2$o, [
            createVNode(VCol, null, {
              default: withCtx(() => [
                createVNode(VBtn, {
                  elevation: "0",
                  color: "primary",
                  class: "mb-4 btn-block",
                  onClick: _cache[14] || (_cache[14] = ($event) => $options.search())
                }, {
                  default: withCtx(() => _cache[23] || (_cache[23] = [
                    createTextVNode("Search")
                  ])),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            createVNode(VCol, null, {
              default: withCtx(() => [
                createVNode(VBtn, {
                  elevation: "0",
                  color: "default",
                  class: "mb-4 btn-block",
                  onClick: _cache[15] || (_cache[15] = ($event) => $options.clear())
                }, {
                  default: withCtx(() => _cache[24] || (_cache[24] = [
                    createTextVNode("Clear")
                  ])),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          createVNode(VRow, { class: "cnct-search" }, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createVNode(VDataTableServer, {
                    headers: _ctx.getHeaders(_ctx.headers),
                    items: _ctx.items,
                    options: _ctx.options,
                    "onUpdate:options": _cache[16] || (_cache[16] = ($event) => _ctx.options = $event),
                    "items-length": _ctx.totalItems,
                    loading: _ctx.loading,
                    class: "elevation-1 mobile-officer-search",
                    "no-data-text": "No match found",
                    "mobile-breakpoint": "960",
                    "onUpdate:page": _cache[17] || (_cache[17] = ($event) => _ctx.scrollToBeginningOfPage())
                  }, {
                    top: withCtx(() => _cache[25] || (_cache[25] = [
                      createBaseVNode(
                        "div",
                        { class: "search-top-scroller" },
                        [
                          createBaseVNode("div", { class: "inner-scroll" })
                        ],
                        -1
                        /* HOISTED */
                      )
                    ])),
                    loader: withCtx(() => [
                      createVNode(VProgressLinear, {
                        indeterminate: "",
                        height: "8",
                        color: "#3f98c9"
                      })
                    ]),
                    [`item.FullName`]: withCtx(({ item }) => [
                      item.individualAffiliates && item.individualAffiliates.length === 1 ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                        key: 0,
                        "component-name": "IndividualDetails",
                        "param-name": "id",
                        "param-value": item.IndividualId,
                        "display-value": $options.getIndividualName(item),
                        "affiliate-id": item.individualAffiliates[0].Affiliate.AffiliateId,
                        "affiliate-name": item.individualAffiliates[0].Affiliate.AffiliateName,
                        "affiliate-number": item.individualAffiliates[0].Affiliate.AffiliateNumber
                      }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : (openBlock(), createBlock(_component_router_link, {
                        key: 1,
                        to: { name: "IndividualDetails", params: { id: item.IndividualId } }
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(item.FirstName) + " ",
                            1
                            /* TEXT */
                          ),
                          item.MiddleName != "Null" ? (openBlock(), createElementBlock(
                            "span",
                            _hoisted_3$j,
                            toDisplayString(item.MiddleName),
                            1
                            /* TEXT */
                          )) : createCommentVNode("v-if", true),
                          createTextVNode(
                            " " + toDisplayString(item.LastName),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["to"]))
                    ]),
                    [`item.FirstName`]: withCtx(({ item }) => [
                      item.individualAffiliates && item.individualAffiliates.length === 1 ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                        key: 0,
                        "component-name": "IndividualDetails",
                        "param-name": "id",
                        "param-value": item.IndividualId,
                        "display-value": item.FirstName,
                        "affiliate-id": item.individualAffiliates[0].Affiliate.AffiliateId,
                        "affiliate-name": item.individualAffiliates[0].Affiliate.AffiliateName,
                        "affiliate-number": item.individualAffiliates[0].Affiliate.AffiliateNumber
                      }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : (openBlock(), createBlock(_component_router_link, {
                        key: 1,
                        to: { name: "IndividualDetails", params: { id: item.IndividualId } }
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(item.FirstName),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["to"]))
                    ]),
                    [`item.PreferredName`]: withCtx(({ item }) => [
                      item.individualAffiliates && item.individualAffiliates.length === 1 ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                        key: 0,
                        "component-name": "IndividualDetails",
                        "param-name": "id",
                        "param-value": item.IndividualId,
                        "display-value": item.PreferredName,
                        "affiliate-id": item.individualAffiliates[0].Affiliate.AffiliateId,
                        "affiliate-name": item.individualAffiliates[0].Affiliate.AffiliateName,
                        "affiliate-number": item.individualAffiliates[0].Affiliate.AffiliateNumber
                      }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : (openBlock(), createBlock(_component_router_link, {
                        key: 1,
                        to: { name: "IndividualDetails", params: { id: item.IndividualId } }
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(item.PreferredName),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["to"]))
                    ]),
                    [`item.MiddleName`]: withCtx(({ item }) => [
                      item.MiddleName != "Null" ? (openBlock(), createElementBlock("span", _hoisted_4$h, [
                        item.individualAffiliates && item.individualAffiliates.length === 1 ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                          key: 0,
                          "component-name": "IndividualDetails",
                          "param-name": "id",
                          "param-value": item.IndividualId,
                          "display-value": item.MiddleName,
                          "affiliate-id": item.individualAffiliates[0].Affiliate.AffiliateId,
                          "affiliate-name": item.individualAffiliates[0].Affiliate.AffiliateName,
                          "affiliate-number": item.individualAffiliates[0].Affiliate.AffiliateNumber
                        }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : (openBlock(), createBlock(_component_router_link, {
                          key: 1,
                          to: { name: "IndividualDetails", params: { id: item.IndividualId } }
                        }, {
                          default: withCtx(() => [
                            createTextVNode(
                              toDisplayString(item.MiddleName),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        }, 1032, ["to"]))
                      ])) : createCommentVNode("v-if", true)
                    ]),
                    [`item.LastName`]: withCtx(({ item }) => [
                      item.individualAffiliates && item.individualAffiliates.length === 1 ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                        key: 0,
                        "component-name": "IndividualDetails",
                        "param-name": "id",
                        "param-value": item.IndividualId,
                        "display-value": item.LastName,
                        "affiliate-id": item.individualAffiliates[0].Affiliate.AffiliateId,
                        "affiliate-name": item.individualAffiliates[0].Affiliate.AffiliateName,
                        "affiliate-number": item.individualAffiliates[0].Affiliate.AffiliateNumber
                      }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : (openBlock(), createBlock(_component_router_link, {
                        key: 1,
                        to: { name: "IndividualDetails", params: { id: item.IndividualId } }
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(item.LastName),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["to"]))
                    ]),
                    [`item.individualMembers`]: withCtx(({ item }) => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(item.individualMembers, (member) => {
                          return openBlock(), createElementBlock(
                            "span",
                            {
                              key: member.MemberId
                            },
                            toDisplayString(member.MemberId),
                            1
                            /* TEXT */
                          );
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    [`item.activeIndividualAffiliates.UnionRelationship`]: withCtx(({ item }) => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(item.activeIndividualAffiliates, (activeIndividualAffiliates) => {
                          return openBlock(), createElementBlock(
                            "span",
                            null,
                            toDisplayString(activeIndividualAffiliates.UnionRelationshipType.UnionRelationshipTypeName),
                            1
                            /* TEXT */
                          );
                        }),
                        256
                        /* UNKEYED_FRAGMENT */
                      ))
                    ]),
                    [`item.AffiliateName`]: withCtx(({ item }) => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(item.activeIndividualAffiliates, (activeIndividualAffiliates) => {
                          return openBlock(), createElementBlock("div", {
                            key: activeIndividualAffiliates.Affiliate.AffiliateId
                          }, [
                            createVNode(_component_AffiliateSwitchComponent, {
                              "component-name": "AffiliateDisplay",
                              "param-name": "id",
                              "param-value": activeIndividualAffiliates.Affiliate.AffiliateId,
                              "display-value": activeIndividualAffiliates.Affiliate.AffiliateName,
                              "affiliate-id": activeIndividualAffiliates.Affiliate.AffiliateId,
                              "affiliate-name": activeIndividualAffiliates.Affiliate.AffiliateName,
                              "affiliate-number": activeIndividualAffiliates.Affiliate.AffiliateNumber
                            }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])
                          ]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    [`item.AffiliateNumber`]: withCtx(({ item }) => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(item.activeIndividualAffiliates, (activeIndividualAffiliates) => {
                          return openBlock(), createElementBlock("div", {
                            key: activeIndividualAffiliates.Affiliate.AffiliateId
                          }, [
                            createVNode(_component_AffiliateSwitchComponent, {
                              "component-name": "AffiliateDisplay",
                              "param-name": "id",
                              "param-value": activeIndividualAffiliates.Affiliate.AffiliateId,
                              "display-value": activeIndividualAffiliates.Affiliate.AffiliateNumber,
                              "affiliate-id": activeIndividualAffiliates.Affiliate.AffiliateId,
                              "affiliate-name": activeIndividualAffiliates.Affiliate.AffiliateName,
                              "affiliate-number": activeIndividualAffiliates.Affiliate.AffiliateNumber
                            }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])
                          ]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    [`item.individualAffiliates.AffiliateOfficerRoleName`]: withCtx(({ item }) => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList($options.getUniqueOfficerRoles(item.individualAffiliates), (officerRole) => {
                          return openBlock(), createElementBlock(
                            "span",
                            mergeProps({ ref_for: true }, officerRole, {
                              key: officerRole.AffiliateOfficerRole
                            }),
                            toDisplayString(officerRole.AffiliateOfficerRoleName),
                            17
                            /* TEXT, FULL_PROPS */
                          );
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    [`item.HomeAddress`]: withCtx(({ item }) => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList($options.firstAddress(item.individualAddressesOrdered, "Home"), (address) => {
                          return openBlock(), createElementBlock(
                            "span",
                            mergeProps({ ref_for: true }, address, {
                              key: address.IndividualAddressId
                            }),
                            [
                              createTextVNode(
                                toDisplayString(address.AddressLine1) + " ",
                                1
                                /* TEXT */
                              ),
                              _cache[27] || (_cache[27] = createBaseVNode(
                                "br",
                                null,
                                null,
                                -1
                                /* HOISTED */
                              )),
                              address.AddressLine2 ? (openBlock(), createElementBlock("span", _hoisted_5$g, [
                                createTextVNode(
                                  toDisplayString(address.AddressLine2) + " ",
                                  1
                                  /* TEXT */
                                ),
                                _cache[26] || (_cache[26] = createBaseVNode(
                                  "br",
                                  null,
                                  null,
                                  -1
                                  /* HOISTED */
                                ))
                              ])) : createCommentVNode("v-if", true),
                              createTextVNode(
                                " " + toDisplayString(address.City) + " " + toDisplayString(address.StateTerritory ? address.StateTerritory.StateTerritoryCode : "") + " " + toDisplayString(address.PostalCode),
                                1
                                /* TEXT */
                              )
                            ],
                            16
                            /* FULL_PROPS */
                          );
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    [`item.individualPhones`]: withCtx(({ item }) => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList($options.firstPhone(item.individualPhonesOrdered, "Mobile"), (phone) => {
                          return openBlock(), createElementBlock(
                            "span",
                            mergeProps({ ref_for: true }, phone, {
                              key: phone.IndividualPhoneId
                            }),
                            toDisplayString(phone.fullPhone),
                            17
                            /* TEXT, FULL_PROPS */
                          );
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    [`item.individualPhonesHome`]: withCtx(({ item }) => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList($options.firstPhone(item.individualPhonesOrdered, "Home"), (phone) => {
                          return openBlock(), createElementBlock(
                            "span",
                            mergeProps({ ref_for: true }, phone, {
                              key: phone.IndividualPhoneId
                            }),
                            toDisplayString(phone.fullPhone),
                            17
                            /* TEXT, FULL_PROPS */
                          );
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    [`item.individualEmails`]: withCtx(({ item }) => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList($options.firstEmail(item.individualEmailsOrdered), (email) => {
                          return openBlock(), createElementBlock(
                            "span",
                            mergeProps({ ref_for: true }, email, {
                              key: email.IndividualEmailId
                            }),
                            toDisplayString(email.Email),
                            17
                            /* TEXT, FULL_PROPS */
                          );
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["headers", "items", "options", "items-length", "loading"]),
                  createVNode(_component_chooser_component, {
                    columns: _ctx.headers,
                    presets: _ctx.presets,
                    selectedPreset: _ctx.selectedPreset,
                    onApplied: _cache[18] || (_cache[18] = ($event) => _ctx.onHeaderChangeApplied("OfficerRoleSearch", $event)),
                    onPresetLoad: _cache[19] || (_cache[19] = ($event) => $options.loadConfiguration($event))
                  }, null, 8, ["columns", "presets", "selectedPreset"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onKeyup"]);
}
const OfficerSearchComponent = /* @__PURE__ */ _export_sfc(_sfc_main$A, [["render", _sfc_render$A], ["__file", "/var/www/html/resources/js/components/Affiliate/OfficerSearchComponent.vue"]]);
const _sfc_main$z = {
  name: "ChapterDetailsComponent",
  props: {
    chapterId: {
      type: Number,
      required: false
    }
  },
  data: () => ({
    id: "",
    chapter: {},
    loading: false
  }),
  mounted() {
    this.id = this.$route.params.id;
    this.getDataFromApi();
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/chapter/" + this.id + "?scope=global";
      return axios.get(url).then((response) => {
        this.chapter = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    openDetails() {
      this.$emit("open-details");
    }
  }
};
const _hoisted_1$o = { class: "details-header" };
const _hoisted_2$n = { class: "data-container" };
const _hoisted_3$i = {
  key: 0,
  class: "data-value"
};
const _hoisted_4$g = {
  key: 1,
  class: "data-value"
};
const _hoisted_5$f = { class: "data-container" };
const _hoisted_6$e = {
  key: 0,
  class: "data-value"
};
const _hoisted_7$b = {
  key: 1,
  class: "data-value"
};
function _sfc_render$z(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VProgressLinear, {
        active: _ctx.loading,
        indeterminate: true,
        color: "#7bb8da"
      }, null, 8, ["active"]),
      createVNode(VCard, { class: "v-card--outlined v-sheet--tile px-6" }, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createBaseVNode(
                    "h3",
                    _hoisted_1$o,
                    toDisplayString(_ctx.chapter.ChapterName) + " - " + toDisplayString(_ctx.chapter.ChapterNumber),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "8"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_2$n, [
                    _cache[0] || (_cache[0] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Chapter Name:",
                      -1
                      /* HOISTED */
                    )),
                    _ctx.chapter.ChapterName ? (openBlock(), createElementBlock(
                      "span",
                      _hoisted_3$i,
                      toDisplayString(_ctx.chapter.ChapterName),
                      1
                      /* TEXT */
                    )) : (openBlock(), createElementBlock("span", _hoisted_4$g, "N/A"))
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "8"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_5$f, [
                    _cache[1] || (_cache[1] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Chapter Number:",
                      -1
                      /* HOISTED */
                    )),
                    _ctx.chapter.ChapterNumber ? (openBlock(), createElementBlock(
                      "span",
                      _hoisted_6$e,
                      toDisplayString(_ctx.chapter.ChapterNumber),
                      1
                      /* TEXT */
                    )) : (openBlock(), createElementBlock("span", _hoisted_7$b, "N/A"))
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const ChapterDetailsComponent = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["render", _sfc_render$z], ["__file", "/var/www/html/resources/js/components/Chapter/ChapterDetailsComponent.vue"]]);
const _sfc_main$y = {
  name: "ChapterListComponent",
  mixins: [dataTablesMixin],
  data: () => ({
    id: 0,
    chapterAffiliate: {},
    tableWidth: 0,
    chapterId: false,
    chapterName: "",
    totalChapters: 0,
    chapters: [],
    loading: true,
    options: {
      sortBy: [
        "ChapterName"
      ]
    },
    headers: [
      { title: "Chapter Name", value: "ChapterName" }
    ]
  }),
  beforeMount() {
    if (this.$route.params.id) {
      this.id = parseInt(this.$route.params.id);
    } else {
      this.id = this.getAffiliateId();
    }
  },
  mounted() {
    this.tableWidth = this.$refs.tableContainer.clientWidth - 50;
  },
  watch: {
    options: {
      handler() {
        this.getAffiliateDataFromApi();
        this.getDataFromApi();
      },
      deep: true,
      immediate: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      const { sortBy, sortDesc, page, itemsPerPage } = this.options;
      const sortByField = typeof sortBy[0] !== "undefined" ? sortBy[0] : "ChapterName";
      const sortDirection = sortDesc[0] ? "-" : "";
      let url = "/api/v2/chapter?page=" + page + "&per_page=" + itemsPerPage + "&sort=" + sortDirection + sortByField + "&ChapterName,ChapterNumber";
      let filter = "";
      filter += "&filter[IsStructural]=0";
      if (filter !== "") {
        url += filter;
      }
      return axios.get(url).then((response) => {
        this.chapters = response.data.data;
        this.totalChapters = response.data.meta.total;
      }).finally(() => {
        this.loading = false;
      });
    },
    getAffiliateId() {
      return this.$store.getters["user/selectedAffiliate"].AffiliateId;
    },
    getAffiliateDataFromApi() {
      this.loading = true;
      let url = "/api/v2/aggregate/affiliate/detail/" + this.id + "?scope=global";
      return axios.get(url).then((response) => {
        this.chapterAffiliate = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$n = ["href"];
function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, {
    fluid: "",
    class: "mobile-word-break"
  }, {
    default: withCtx(() => [
      createBaseVNode(
        "h2",
        null,
        "Chapters Within " + toDisplayString(_ctx.chapterAffiliate.AffiliateName) + " - " + toDisplayString(_ctx.chapterAffiliate.AffiliateNumber),
        1
        /* TEXT */
      ),
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(
            VCol,
            { ref: "tableContainer" },
            {
              default: withCtx(() => [
                createVNode(VDataTableServer, {
                  headers: _ctx.headers,
                  items: _ctx.chapters,
                  options: _ctx.options,
                  "onUpdate:options": _cache[0] || (_cache[0] = ($event) => _ctx.options = $event),
                  "items-length": _ctx.totalChapters,
                  loading: _ctx.loading,
                  style: normalizeStyle([{ "min-width": "300px" }, { width: "100%" }]),
                  "mobile-breakpoint": 992,
                  class: "elevation-1 mobile-global-card-table chapter-results-table",
                  "onUpdate:page": _cache[1] || (_cache[1] = ($event) => _ctx.scrollToBeginningOfPage())
                }, {
                  top: withCtx(({ pagination, options, updateOptions }) => [
                    createVNode(VDataTableFooter, {
                      pagination,
                      options,
                      "onUpdate:options": updateOptions,
                      "items-per-page-text": "$vuetify.dataTable.itemsPerPageText"
                    }, null, 8, ["pagination", "options", "onUpdate:options"])
                  ]),
                  loader: withCtx(() => [
                    createVNode(VProgressLinear, {
                      indeterminate: "",
                      height: "8",
                      color: "#3f98c9"
                    })
                  ]),
                  [`item.ChapterName`]: withCtx(({ item }) => [
                    createBaseVNode("div", null, [
                      createBaseVNode("a", {
                        href: "/chapters/" + item.ChapterId
                      }, toDisplayString(item.ChapterName), 9, _hoisted_1$n)
                    ])
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, 1032, ["headers", "items", "options", "items-length", "loading"])
              ]),
              _: 1
              /* STABLE */
            },
            512
            /* NEED_PATCH */
          )
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const ChapterListComponent = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["render", _sfc_render$y], ["__file", "/var/www/html/resources/js/components/Chapter/ChapterListComponent.vue"]]);
var OneSchemaLaunchError;
(function(OneSchemaLaunchError2) {
  OneSchemaLaunchError2[OneSchemaLaunchError2["MissingTemplate"] = 0] = "MissingTemplate";
  OneSchemaLaunchError2[OneSchemaLaunchError2["MissingJwt"] = 1] = "MissingJwt";
  OneSchemaLaunchError2[OneSchemaLaunchError2["MissingSessionToken"] = 2] = "MissingSessionToken";
  OneSchemaLaunchError2[OneSchemaLaunchError2["MissingTemplateGroup"] = 3] = "MissingTemplateGroup";
  OneSchemaLaunchError2[OneSchemaLaunchError2["LaunchError"] = 4] = "LaunchError";
})(OneSchemaLaunchError || (OneSchemaLaunchError = {}));
const DEFAULT_PARAMS = {
  baseUrl: "https://embed.oneschema.co",
  devMode: true,
  className: "oneschema-iframe",
  autoClose: true,
  manageDOM: true,
  saveSession: true
};
function __classPrivateFieldGet(receiver, state2, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state2 === "function" ? receiver !== state2 || !f : !state2.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state2.get(receiver);
}
function __classPrivateFieldSet(receiver, state2, value, kind, f) {
  if (typeof state2 === "function" ? receiver !== state2 || !f : !state2.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return f ? f.value = value : state2.set(receiver, value), value;
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var eventemitter3 = { exports: {} };
(function(module) {
  var has = Object.prototype.hasOwnProperty, prefix = "~";
  function Events() {
  }
  if (Object.create) {
    Events.prototype = /* @__PURE__ */ Object.create(null);
    if (!new Events().__proto__) prefix = false;
  }
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }
  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== "function") {
      throw new TypeError("The listener must be a function");
    }
    var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
    else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
    else emitter._events[evt] = [emitter._events[evt], listener];
    return emitter;
  }
  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();
    else delete emitter._events[evt];
  }
  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }
  EventEmitter.prototype.eventNames = function eventNames() {
    var names = [], events, name;
    if (this._eventsCount === 0) return names;
    for (name in events = this._events) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }
    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }
    return names;
  };
  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event, handlers = this._events[evt];
    if (!handlers) return [];
    if (handlers.fn) return [handlers.fn];
    for (var i = 0, l2 = handlers.length, ee = new Array(l2); i < l2; i++) {
      ee[i] = handlers[i].fn;
    }
    return ee;
  };
  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event, listeners = this._events[evt];
    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
  };
  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return false;
    var listeners = this._events[evt], len = arguments.length, args, i;
    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;
        case 2:
          return listeners.fn.call(listeners.context, a1), true;
        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;
        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }
      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }
      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length, j;
      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;
          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;
          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;
          case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;
          default:
            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
              args[j - 1] = arguments[j];
            }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }
    return true;
  };
  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };
  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };
  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return this;
    if (!fn) {
      clearEvent(this, evt);
      return this;
    }
    var listeners = this._events[evt];
    if (listeners.fn) {
      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
          events.push(listeners[i]);
        }
      }
      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
      else clearEvent(this, evt);
    }
    return this;
  };
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;
    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }
    return this;
  };
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;
  EventEmitter.prefixed = prefix;
  EventEmitter.EventEmitter = EventEmitter;
  {
    module.exports = EventEmitter;
  }
})(eventemitter3);
var lodash_merge = { exports: {} };
(function(module, exports) {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var HOT_COUNT = 800, HOT_SPAN = 16;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;
  var nodeUtil = function() {
    try {
      var types = freeModule && freeModule.require && freeModule.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }();
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  function getValue(object, key2) {
    return object == null ? void 0 : object[key2];
  }
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
  var coreJsData = root["__core-js_shared__"];
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  var nativeObjectToString = objectProto.toString;
  var objectCtorString = funcToString.call(Object);
  var reIsNative = RegExp(
    "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  var Buffer = moduleExports ? root.Buffer : void 0, Symbol = root.Symbol, Uint8Array = root.Uint8Array;
  Buffer ? Buffer.allocUnsafe : void 0;
  var getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, symToStringTag = Symbol ? Symbol.toStringTag : void 0;
  var defineProperty = function() {
    try {
      var func = getNative(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e) {
    }
  }();
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0, nativeMax = Math.max, nativeNow = Date.now;
  var Map2 = getNative(root, "Map"), nativeCreate = getNative(Object, "create");
  var baseCreate = /* @__PURE__ */ function() {
    function object() {
    }
    return function(proto) {
      if (!isObject(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object();
      object.prototype = void 0;
      return result;
    };
  }();
  function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }
  function hashDelete(key2) {
    var result = this.has(key2) && delete this.__data__[key2];
    this.size -= result ? 1 : 0;
    return result;
  }
  function hashGet(key2) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key2];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty.call(data, key2) ? data[key2] : void 0;
  }
  function hashHas(key2) {
    var data = this.__data__;
    return nativeCreate ? data[key2] !== void 0 : hasOwnProperty.call(data, key2);
  }
  function hashSet(key2, value) {
    var data = this.__data__;
    this.size += this.has(key2) ? 0 : 1;
    data[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  function listCacheDelete(key2) {
    var data = this.__data__, index = assocIndexOf(data, key2);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }
  function listCacheGet(key2) {
    var data = this.__data__, index = assocIndexOf(data, key2);
    return index < 0 ? void 0 : data[index][1];
  }
  function listCacheHas(key2) {
    return assocIndexOf(this.__data__, key2) > -1;
  }
  function listCacheSet(key2, value) {
    var data = this.__data__, index = assocIndexOf(data, key2);
    if (index < 0) {
      ++this.size;
      data.push([key2, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash(),
      "map": new (Map2 || ListCache)(),
      "string": new Hash()
    };
  }
  function mapCacheDelete(key2) {
    var result = getMapData(this, key2)["delete"](key2);
    this.size -= result ? 1 : 0;
    return result;
  }
  function mapCacheGet(key2) {
    return getMapData(this, key2).get(key2);
  }
  function mapCacheHas(key2) {
    return getMapData(this, key2).has(key2);
  }
  function mapCacheSet(key2, value) {
    var data = getMapData(this, key2), size = data.size;
    data.set(key2, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }
  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }
  function stackDelete(key2) {
    var data = this.__data__, result = data["delete"](key2);
    this.size = data.size;
    return result;
  }
  function stackGet(key2) {
    return this.__data__.get(key2);
  }
  function stackHas(key2) {
    return this.__data__.has(key2);
  }
  function stackSet(key2, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key2, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key2, value);
    this.size = data.size;
    return this;
  }
  Stack.prototype.clear = stackClear;
  Stack.prototype["delete"] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for (var key2 in value) {
      if (!(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
      (key2 == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key2 == "offset" || key2 == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || // Skip index properties.
      isIndex(key2, length)))) {
        result.push(key2);
      }
    }
    return result;
  }
  function assignMergeValue(object, key2, value) {
    if (value !== void 0 && !eq(object[key2], value) || value === void 0 && !(key2 in object)) {
      baseAssignValue(object, key2, value);
    }
  }
  function assignValue(object, key2, value) {
    var objValue = object[key2];
    if (!(hasOwnProperty.call(object, key2) && eq(objValue, value)) || value === void 0 && !(key2 in object)) {
      baseAssignValue(object, key2, value);
    }
  }
  function assocIndexOf(array, key2) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key2)) {
        return length;
      }
    }
    return -1;
  }
  function baseAssignValue(object, key2, value) {
    if (key2 == "__proto__" && defineProperty) {
      defineProperty(object, key2, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } else {
      object[key2] = value;
    }
  }
  var baseFor = createBaseFor();
  function baseGetTag(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }
  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object), result = [];
    for (var key2 in object) {
      if (!(key2 == "constructor" && (isProto || !hasOwnProperty.call(object, key2)))) {
        result.push(key2);
      }
    }
    return result;
  }
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor(source, function(srcValue, key2) {
      stack || (stack = new Stack());
      if (isObject(srcValue)) {
        baseMergeDeep(object, source, key2, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet(object, key2), srcValue, key2 + "", object, source, stack) : void 0;
        if (newValue === void 0) {
          newValue = srcValue;
        }
        assignMergeValue(object, key2, newValue);
      }
    }, keysIn);
  }
  function baseMergeDeep(object, source, key2, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key2), srcValue = safeGet(source, key2), stacked = stack.get(srcValue);
    if (stacked) {
      assignMergeValue(object, key2, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key2 + "", object, source, stack) : void 0;
    var isCommon = newValue === void 0;
    if (isCommon) {
      var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue);
        } else {
          newValue = [];
        }
      } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        newValue = objValue;
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject(objValue) || isFunction(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack["delete"](srcValue);
    }
    assignMergeValue(object, key2, newValue);
  }
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + "");
  }
  var baseSetToString = !defineProperty ? identity : function(func, string) {
    return defineProperty(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant(string),
      "writable": true
    });
  };
  function cloneBuffer(buffer, isDeep) {
    {
      return buffer.slice();
    }
  }
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
  }
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = cloneArrayBuffer(typedArray.buffer);
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length = props.length;
    while (++index < length) {
      var key2 = props[index];
      var newValue = void 0;
      if (newValue === void 0) {
        newValue = source[key2];
      }
      if (isNew) {
        baseAssignValue(object, key2, newValue);
      } else {
        assignValue(object, key2, newValue);
      }
    }
    return object;
  }
  function createAssigner(assigner) {
    return baseRest(function(object, sources) {
      var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
      customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? void 0 : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
      while (length--) {
        var key2 = props[++index];
        if (iteratee(iterable[key2], key2, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  function getMapData(map, key2) {
    var data = map.__data__;
    return isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
  }
  function getNative(object, key2) {
    var value = getValue(object, key2);
    return baseIsNative(value) ? value : void 0;
  }
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
      value[symToStringTag] = void 0;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
  }
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = typeof index;
    if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
      return eq(object[index], value);
    }
    return false;
  }
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
  }
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key2 in Object(object)) {
        result.push(key2);
      }
    }
    return result;
  }
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }
  function overRest(func, start, transform) {
    start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }
  function safeGet(object, key2) {
    if (key2 === "constructor" && typeof object[key2] === "function") {
      return;
    }
    if (key2 == "__proto__") {
      return;
    }
    return object[key2];
  }
  var setToString = shortOut(baseSetToString);
  function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  var isArguments = baseIsArguments(/* @__PURE__ */ function() {
    return arguments;
  }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
  };
  var isArray = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  var isBuffer = nativeIsBuffer || stubFalse;
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  function toPlainObject(value) {
    return copyObject(value, keysIn(value));
  }
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeysIn(object);
  }
  var merge2 = createAssigner(function(object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });
  function constant(value) {
    return function() {
      return value;
    };
  }
  function identity(value) {
    return value;
  }
  function stubFalse() {
    return false;
  }
  module.exports = merge2;
})(lodash_merge, lodash_merge.exports);
var merge = lodash_merge.exports;
var version = "0.4.11";
var _OneSchemaImporterClass_instances, _a, _OneSchemaImporterClass_params, _OneSchemaImporterClass_isLoaded, _OneSchemaImporterClass_hide, _OneSchemaImporterClass_show, _OneSchemaImporterClass_eventListener;
const MAX_LAUNCH_RETRY = 10;
class OneSchemaImporterClass extends eventemitter3.exports.EventEmitter {
  constructor(params) {
    super();
    _OneSchemaImporterClass_instances.add(this);
    _OneSchemaImporterClass_params.set(this, void 0);
    this._client = "Importer";
    this._version = version;
    this._resumeTokenKey = "";
    this._hasAttemptedLaunch = false;
    this._hasLaunched = false;
    this._hasCancelled = false;
    this._hasAppRecievedInitMessage = false;
    _OneSchemaImporterClass_eventListener.set(this, (event) => {
      var _b, _c, _d;
      if (event.source !== ((_b = this.iframe) === null || _b === void 0 ? void 0 : _b.contentWindow)) {
        return;
      }
      switch (event.data.messageType) {
        case "init-recieved": {
          this._hasAppRecievedInitMessage = true;
          break;
        }
        case "launched": {
          this._hasLaunched = true;
          let sessionToken = event.data.sessionToken;
          const embedId = event.data.embedId;
          if (this._resumeTokenKey && sessionToken) {
            try {
              window.localStorage.setItem(this._resumeTokenKey, sessionToken);
            } catch (_e) {
            }
          }
          if (!sessionToken) {
            sessionToken = ((_c = this._initMessage) === null || _c === void 0 ? void 0 : _c.resumeToken) || ((_d = this._initMessage) === null || _d === void 0 ? void 0 : _d.sessionToken);
          }
          this.emit("launched", {
            success: true,
            sessionToken,
            embedId
          });
          __classPrivateFieldGet(this, _OneSchemaImporterClass_instances, "m", _OneSchemaImporterClass_show).call(this);
          break;
        }
        case "launch-error": {
          this.emit("launched", {
            success: false,
            error: OneSchemaLaunchError.LaunchError
          });
          if (__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").autoClose) {
            this.close();
          }
          break;
        }
        case "complete": {
          if (event.data.data) {
            this.emit("success", event.data.data);
          } else {
            this.emit("success", {
              eventId: event.data.eventId,
              responses: event.data.responses
            });
          }
          if (this._resumeTokenKey) {
            try {
              window.localStorage.removeItem(this._resumeTokenKey);
            } catch (_f) {
            }
          }
          if (__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").autoClose) {
            this.close();
          }
          break;
        }
        case "cancel": {
          this.emit("cancel");
          if (this._resumeTokenKey) {
            try {
              window.localStorage.removeItem(this._resumeTokenKey);
            } catch (_g) {
            }
          }
          if (__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").autoClose) {
            this.close();
          }
          break;
        }
        case "error": {
          this.emit("error", event.data.message);
          if (__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").autoClose) {
            this.close();
          }
          break;
        }
        // This is temporary and will be removed when we revamp errors.
        case "nonclosing-error": {
          this.emit("error", event.data.message);
          break;
        }
      }
    });
    __classPrivateFieldSet(this, _OneSchemaImporterClass_params, merge({}, DEFAULT_PARAMS, params));
    if (typeof window === "undefined") {
      return;
    }
    if (__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").manageDOM) {
      const iframeId = "_oneschema-iframe";
      this.iframe = document.getElementById(iframeId);
      if (this.iframe) {
        this.iframe.dataset.count = `${parseInt(this.iframe.dataset.count || "0") + 1}`;
      } else {
        const iframe = document.createElement("iframe");
        iframe.id = iframeId;
        iframe.dataset.count = "1";
        this.setIframe(iframe);
      }
      let parent = document.body;
      if (__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").parentId) {
        parent = document.getElementById(__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").parentId) || parent;
      }
      this.setParent(parent);
    }
  }
  /**
   * Set the name and version of the client, used for logging/debugging
   * @param client
   * @param version
   */
  setClient(client, version2) {
    this._client = client;
    this._version = version2;
  }
  /**
   * Set the iframe to be used by the OneSchema importer
   * Should only be used in conjuction with the param of manageDOM false
   * @param iframe
   */
  setIframe(iframe) {
    if (this.iframe) {
      this.close(true);
    }
    this.iframe = iframe;
    this.iframe.setAttribute("allowtransparency", "true");
    const queryParams = [];
    queryParams.push(`embed_client_id=${__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").clientId}`);
    queryParams.push(`dev_mode=${__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").devMode}`);
    if (__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").languageCode) {
      queryParams.push(`lng=${__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").languageCode}`);
    }
    this.iframe.src = `${__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").baseUrl}/embed-launcher?${queryParams.join("&")}`;
    this.setClassName(__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").className || "");
    if (__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").styles) {
      this.setStyles(__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").styles);
    }
    __classPrivateFieldSet(OneSchemaImporterClass, _a, false, "f", _OneSchemaImporterClass_isLoaded);
    this.iframe.onload = () => {
      __classPrivateFieldSet(OneSchemaImporterClass, _a, true, "f", _OneSchemaImporterClass_isLoaded);
    };
    __classPrivateFieldGet(this, _OneSchemaImporterClass_instances, "m", _OneSchemaImporterClass_hide).call(this);
  }
  /**
   * Will change the CSS class of the iframe
   * @param className the new CSS class
   */
  setClassName(className) {
    if (this.iframe) {
      this.iframe.className = className;
    }
  }
  /**
   * Will change the styles of the iframe
   * @param styles the styles to apply
   */
  setStyles(styles) {
    if (this.iframe) {
      const display = this.iframe.style.display;
      Object.assign(this.iframe.style, styles);
      this.iframe.style.display = display;
    }
  }
  /**
   * Will change the parent container of the iframe
   * NOTE: will reload the URL
   * @param parent DOM element to append to
   */
  setParent(parent) {
    if (this.iframe) {
      parent.append(this.iframe);
    }
  }
  /**
   * Launch will show the OneSchema window and initialize the importer session
   * @param launchParams optionally pass in parameter overrides or values not passed into constructor
   */
  launch(launchParams) {
    this._hasAttemptedLaunch = true;
    const mergedParams = merge({}, __classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f"), launchParams);
    const baseMessage = {
      version: this._version,
      client: this._client,
      manualClose: true
    };
    let message;
    if (mergedParams.sessionToken) {
      message = Object.assign({ messageType: "init-session", sessionToken: mergedParams.sessionToken }, baseMessage);
    } else if (mergedParams.templateGroupKey) {
      message = Object.assign({ messageType: "init-template-group", userJwt: mergedParams.userJwt, templateGroupKey: mergedParams.templateGroupKey, importConfig: mergedParams.importConfig, customizationKey: mergedParams.customizationKey, customizationOverrides: mergedParams.customizationOverrides }, baseMessage);
      if (!message.userJwt) {
        console.error("OneSchema config error: missing userJwt");
        this.emit("launched", {
          success: false,
          error: OneSchemaLaunchError.MissingJwt
        });
        return { success: false, error: OneSchemaLaunchError.MissingJwt };
      }
    } else {
      message = Object.assign({ messageType: "init", userJwt: mergedParams.userJwt, templateKey: mergedParams.templateKey, importConfig: mergedParams.importConfig, customizationKey: mergedParams.customizationKey, customizationOverrides: mergedParams.customizationOverrides, templateOverrides: mergedParams.templateOverrides, eventWebhookKeys: mergedParams.eventWebhookKeys }, baseMessage);
      if (!message.userJwt) {
        console.error("OneSchema config error: missing userJwt");
        this.emit("launched", {
          success: false,
          error: OneSchemaLaunchError.MissingJwt
        });
        return { success: false, error: OneSchemaLaunchError.MissingJwt };
      }
      if (!message.templateKey) {
        console.error("OneSchema config error: missing templateKey");
        this.emit("launched", {
          success: false,
          error: OneSchemaLaunchError.MissingTemplate
        });
        return { success: false, error: OneSchemaLaunchError.MissingTemplate };
      }
      if (mergedParams.saveSession) {
        try {
          this._resumeTokenKey = `OneSchema-session-${mergedParams.userJwt}-${mergedParams.templateKey}`;
          const resumeToken = window.localStorage.getItem(this._resumeTokenKey);
          if (resumeToken) {
            message.resumeToken = resumeToken;
          }
        } catch (_b) {
        }
      }
    }
    if (mergedParams.importConfig && mergedParams.importConfig.type === "file-upload" && !mergedParams.importConfig.format) {
      mergedParams.importConfig.format = "csv";
    }
    this._initMessage = message;
    this._launch();
    return { success: true };
  }
  /**
   * DEPRECATED: use `launch` instead.
   * Launch session will show the OneSchema window and initialize the importer session with the given session token
   * @param launchParams optionally pass in parameter overrides or values not passed into constructor
   */
  launchSession(launchParams) {
    return this.launch(launchParams);
  }
  _launch() {
    window.addEventListener("message", __classPrivateFieldGet(this, _OneSchemaImporterClass_eventListener, "f"));
    const postInit = () => {
      this._hasCancelled = false;
      this._initWithRetry();
      __classPrivateFieldSet(OneSchemaImporterClass, _a, true, "f", _OneSchemaImporterClass_isLoaded);
    };
    if (__classPrivateFieldGet(OneSchemaImporterClass, _a, "f", _OneSchemaImporterClass_isLoaded)) {
      postInit();
    } else if (this.iframe) {
      this.iframe.onload = postInit;
    }
  }
  _initWithRetry(count = 1) {
    var _b, _c;
    if (this._hasLaunched || this._hasCancelled || this._hasAppRecievedInitMessage) {
      return;
    }
    if (count > MAX_LAUNCH_RETRY) {
      const msg = "OneSchema failed to respond for initialization";
      console.error(msg);
      if (__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").devMode) {
        __classPrivateFieldGet(this, _OneSchemaImporterClass_instances, "m", _OneSchemaImporterClass_show).call(this);
      } else {
        this.emit("error", msg);
        if (__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").autoClose) {
          this.close();
        }
      }
      return;
    }
    (_c = (_b = this.iframe) === null || _b === void 0 ? void 0 : _b.contentWindow) === null || _c === void 0 ? void 0 : _c.postMessage(this._initMessage, __classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").baseUrl || "");
    setTimeout(() => this._initWithRetry(count + 1), 500);
  }
  /**
   * Close will stop the importing session and hide the OneSchema window
   * @param clean will remove the iframe and event listeners if true
   */
  close(clean) {
    var _b;
    __classPrivateFieldGet(this, _OneSchemaImporterClass_instances, "m", _OneSchemaImporterClass_hide).call(this);
    if (this.iframe && __classPrivateFieldGet(OneSchemaImporterClass, _a, "f", _OneSchemaImporterClass_isLoaded)) {
      (_b = this.iframe.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({ messageType: "close" }, __classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").baseUrl || "");
    }
    this._hasAttemptedLaunch = false;
    this._hasAppRecievedInitMessage = false;
    this._hasLaunched = false;
    this._hasCancelled = true;
    if (clean && this.iframe) {
      if (!this.iframe.dataset.count || this.iframe.dataset.count === "1") {
        this.removeAllListeners();
        window.removeEventListener("message", __classPrivateFieldGet(this, _OneSchemaImporterClass_eventListener, "f"));
        if (__classPrivateFieldGet(this, _OneSchemaImporterClass_params, "f").manageDOM) {
          this.iframe.remove();
        }
      } else {
        this.iframe.dataset.count = `${parseInt(this.iframe.dataset.count || "1") - 1}`;
      }
    }
  }
}
_a = OneSchemaImporterClass, _OneSchemaImporterClass_params = /* @__PURE__ */ new WeakMap(), _OneSchemaImporterClass_eventListener = /* @__PURE__ */ new WeakMap(), _OneSchemaImporterClass_instances = /* @__PURE__ */ new WeakSet(), _OneSchemaImporterClass_hide = function _OneSchemaImporterClass_hide2() {
  if (this.iframe) {
    this.iframe.style.display = "none";
  }
}, _OneSchemaImporterClass_show = function _OneSchemaImporterClass_show2() {
  if (this.iframe) {
    this.iframe.style.display = "initial";
  }
};
_OneSchemaImporterClass_isLoaded = { value: false };
function oneSchemaImporter(params) {
  return new OneSchemaImporterClass(params);
}
const _sfc_main$x = {
  name: "OneSchemaFileValidationComponent",
  data() {
    return {
      importer: null,
      importerEnv: null,
      lambdaEnv: null,
      importerOptions: {},
      importerVariables: {},
      formDataEntries: null,
      launchParams: {},
      embedId: null,
      jsonArrayData: null,
      jsonColumns: null,
      orderedColumns: null,
      isFileDownloadable: false,
      buttonAlwaysDisabled: true,
      importedFileUrl: null,
      enableLauncherOptions: true,
      enableDebugging: false,
      allColumns: [],
      validationHooks: {},
      columnsToUpdate: {},
      columnsToAdd: {},
      templateOverrides: {},
      lookupListsRaw: {},
      lookupLists: {},
      lookupListsColumnMap: {}
    };
  },
  created() {
    this.lookupListsColumnMap = {
      "PrefixName": "prefix",
      "SuffixName": "suffix",
      "GenderName": "gender",
      "HomeAddressState": "stateTerritory",
      "UnionRelationshipTypeName": "unionRelationshipType",
      "HomeAddressCountry": "country",
      "IndividualDeactivationReasonName": "individualDeactivationReason"
    };
    this.fetchLookupLists();
    this.allColumns = [
      "AffiliateNumber",
      "AffiliateName",
      "EmployeeId",
      "FullName",
      "PrefixName",
      "PreferredName",
      "FirstName",
      "MiddleName",
      "LastName",
      "OriginalLastName",
      "SuffixName",
      "HomeAddress",
      "HomeAddressStreet1",
      "HomeAddressStreet2",
      "HomeAddressStreet3",
      "HomeAddressCity",
      "HomeAddressState",
      "HomeAddressZip",
      "HomeAddressZipPlus4",
      "HomeAddressCountry",
      "HomeAddressLatitude",
      "HomeAddressLongitude",
      "DateOfBirth",
      "UnionRelationshipTypeName",
      "UnionRelationshipTypeId",
      "UnionRelationshipStartDate",
      "UnionRelationshipEndDate",
      "HomePhoneNumber",
      "MobilePhoneNumber",
      "WorkPhoneNumber",
      "WorkPhoneExtension",
      "HomeEmail",
      "WorkEmail",
      "aftdb_staging_name",
      "aftdbimportstagingid",
      "fileid",
      "AffiliateId",
      "AffiliateGuid",
      "ChapterName",
      "ChapterId",
      "ChapterGuid",
      "EmployerName",
      "EmployerId",
      "EmployerGuid",
      "LocalAgreementName",
      "LocalAgreementId",
      "UnitName",
      "UnitId",
      "UnitGuid",
      "IndividualId",
      "IndividualGuid",
      "MemberId",
      "LocalUniqueId",
      "SuffixId",
      "PrefixId",
      "GenderName",
      "GenderId",
      "LocalDuesCategoryName",
      "LocalDuesCategoryId",
      "LocalDuesAmount",
      "StatePerCapitaName",
      "StatePerCapitaId",
      "NationalPerCapitaName",
      "NationalPerCapitaId",
      "PaymentMethodName",
      "PaymentMethodId",
      "PaymentFrequencyName",
      "PaymentFrequencyId",
      "IndividualHomeAddressId",
      "HomeStateTerritoryId",
      "CountyName",
      "CountyId",
      "EmploymentStartDate",
      "EmploymentEndDate",
      "EmploymentHireDate",
      "StopReason",
      "IndividualDeactivationReasonName",
      "IndividualDeactivationReasonId",
      "LocalJobClassName",
      "LocalJobClassId",
      "LocalJobClassGuid",
      "LocalJobClassCode",
      "PaidThroughDate",
      "NationalJobClassName",
      "NationalJobClassId",
      "NationalJobClassGuid",
      "JobTitleName",
      "JobTitleId",
      "JobDescription",
      "WorkLocationCode",
      "WorkLocationName",
      "WorkLocationId",
      "WorkLocationGuid",
      "WorkLocationTypeName",
      "WorkLocationTypeId",
      "WorkLocationAddressId",
      "WorkLocationAddressLine1",
      "WorkLocationAddressLine2",
      "WorkLocationCity",
      "WorkLocationStateTerritoryName",
      "WorkLocationStateTerritoryCode",
      "WorkLocationStateTerritoryId",
      "WorkLocationPostalCode",
      "WorkStructureName",
      "WorkStructureId",
      "WorkStructureGuid",
      "WorkStructureTypeName",
      "WorkStructureTypeId",
      "WorkStructureCode",
      "RoomNumber",
      "RetirementEffectiveDate",
      "SubjectName",
      "SubjectId",
      "IsPoliticallyActive",
      "IsRegisteredVoter",
      "PoliticalPartyName",
      "PoliticalPartyId",
      "CongressionalDistrict",
      "StateSenateDistrict",
      "StateHouseDistrict",
      "ResidentialSchoolDistrict",
      "IndividualComment",
      "IndividualCommentId",
      "IndividualCopeId",
      "BillHighwayId",
      "CopeAmount",
      "CopePaymentFrequencyId",
      "CopePaymentMethodId",
      "RecordType",
      "WorkLocationArea",
      "IndividualRecordType",
      "UnionRelationshipRecordType",
      "EmploymentRecordType",
      "RecordProcessStatus",
      "AffiliateAssignedId",
      "IsWorking",
      "IsPubliclyAccessible",
      "EthnicityName",
      "EthnicityId",
      "ContactRestrictionName",
      "ContactRestrictionId",
      "WorkShift",
      "HomeAddressIsPreferred",
      "unioncode",
      "DayOfBirth",
      "MonthOfBirth",
      "YearOfBirth",
      "DoNotChangeAfterDate",
      "StopMemberNotOnFile",
      "StopPotentialMemberNotOnFile",
      "LeaveEmploymentNotOnFile",
      "HelpRequestTicketNumber",
      "test_column"
    ];
    this.validationHooks = {
      completeAffiliateData: {
        checked: true,
        labelSuffix: "(UAT)",
        definition: {
          name: "completeAffiliateData",
          url: "{{api_gateway_base_url}}/muse/completeAffiliateData/",
          secret_key: "{{api_gateway_secret}}",
          batch_size: 100,
          column_keys: [
            "AffiliateNumber",
            "EmployerId",
            "EmployerName",
            "JobTitleId",
            "JobTitleName",
            "LocalDuesCategoryId",
            "LocalDuesCategoryName",
            "LocalJobClassId",
            "LocalJobClassName",
            "UnitId",
            "UnitName",
            "WorkLocationId",
            "WorkLocationName",
            "WorkStructureId",
            "WorkStructureName"
          ]
        }
      },
      applyMemberLogic: {
        checked: false,
        labelSuffix: "(Dev)",
        definition: {
          name: "applyMemberLogic",
          url: "{{api_gateway_base_url}}/muse/applyMemberLogic/",
          secret_key: "{{api_gateway_secret}}",
          batch_size: 1e3,
          column_keys: [
            "AffiliateNumber",
            "AffiliateNumber",
            "UnionRelationshipTypeName",
            "UnionRelationshipTypeId",
            "UnionRelationshipEndDate",
            // TODO: LocalDuesCategory is also handled in completeAffiliateData - reconcile to one.
            "LocalDuesCategoryName",
            "LocalDuesCategoryId",
            "LocalDuesAmount",
            "StopReason",
            "IndividualDeactivationReasonName",
            "IndividualDeactivationReasonId"
          ]
        }
      },
      // @deprecated Replaced with a code hook. Enabled for testing Lambda connectivity.
      nameParserWebhook: {
        checked: false,
        labelSuffix: "(deprecated, may be used to test Lambda connectivity without external requests to Connect API)",
        definition: {
          name: "nameParserWebhook",
          url: "{{api_gateway_base_url}}/muse/nameParserWebhook/",
          secret_key: "{{api_gateway_secret}}",
          batch_size: 5e3,
          column_keys: [
            "FullName",
            "FirstName",
            "MiddleName",
            "LastName",
            "OriginalLastName",
            "PrefixName",
            "SuffixName",
            "PreferredName"
          ]
        }
      }
    };
    this.columnsToUpdate = {
      HomeAddressState: {
        checked: true,
        labelSuffix: "(getLookupList, UAT)",
        definition: {
          key: "HomeAddressState",
          data_type: "PICKLIST",
          validation_options: {}
        }
      },
      PrefixName: {
        checked: true,
        labelSuffix: "(getLookupList, UAT)",
        definition: {
          key: "PrefixName",
          data_type: "PICKLIST",
          validation_options: {}
        }
      },
      SuffixName: {
        checked: true,
        labelSuffix: "(getLookupList, UAT)",
        definition: {
          key: "SuffixName",
          data_type: "PICKLIST",
          validation_options: {}
        }
      },
      GenderName: {
        checked: true,
        labelSuffix: "(getLookupList, UAT)",
        definition: {
          key: "GenderName",
          data_type: "PICKLIST",
          validation_options: {}
        }
      },
      UnionRelationshipTypeName: {
        checked: true,
        labelSuffix: "(getLookupList, UAT)",
        definition: {
          key: "UnionRelationshipTypeName",
          data_type: "PICKLIST",
          validation_options: {}
        }
      },
      HomeAddressCountry: {
        checked: true,
        labelSuffix: "(getLookupList, UAT)",
        definition: {
          key: "HomeAddressCountry",
          data_type: "PICKLIST",
          validation_options: {}
        }
      },
      IndividualDeactivationReasonName: {
        checked: false,
        labelSuffix: "(getLookupList, Dev)",
        definition: {
          key: "IndividualDeactivationReasonName",
          data_type: "PICKLIST",
          validation_options: {}
        }
      }
      // workLocationNamePicklistTest: {
      //     checked: false,
      //     labelSuffix: "(Dev Example)",
      //     definition: {
      //         key: "WorkLocationName",
      //         data_type: 'PICKLIST',
      //         validation_options: {
      //             values: [
      //                 "KTONE - 101 Gage KDOT",
      //                 "KTTDI - 121 W 21st",
      //                 "KTMAT - 2300 Van Buren KDOT"
      //             ]
      //         }
      //     }
      // },
      // localDuesCategoryNamePicklistTest: {
      //     checked: false,
      //     labelSuffix: "(Dev Example)",
      //     definition: {
      //         key: "LocalDuesCategoryName",
      //         data_type: 'PICKLIST',
      //         validation_options: {
      //             picklist_options: [
      //                 {
      //                     value: "Full Dues",
      //                     alternative_names: ["Full", "Nope"]
      //                 },
      //                 {
      //                     value: "Half Dues"
      //                 }
      //             ]
      //         }
      //     }
      // }
      // EmployerId: {
      //     checked: false,
      //     labelSuffix: "(Dev)",
      //     textInput: true,
      //     definition: {
      //         key: "EmployerId",
      //         // default_value: "",
      //     }
      // },
      // UnitId: {
      //     checked: false,
      //     labelSuffix: "(Dev)",
      //     textInput: true,
      //     definition: {
      //         key: "UnitId",
      //         // default_value: "",
      //     }
      // },
      // UnitName: {
      //     checked: false,
      //     labelSuffix: "(Dev)",
      //     textInput: true,
      //     definition: {
      //         key: "UnitName",
      //         // default_value: "",
      //     }
      // },
      // START: FPC controller field definitions.
      // DoNotChangeAfterDate: {
      //     checked: false,
      //     labelSuffix: "(Dev)",
      //     textInput: true,
      //     definition: {
      //         key: "DoNotChangeAfterDate",
      //         default_value: "",
      //     }
      // },
      // StopMemberNotOnFile: {
      //     checked: false,
      //     labelSuffix: "(Dev)",
      //     textInput: true,
      //     definition: {
      //         key: "StopMemberNotOnFile",
      //         data_type: 'PICKLIST',
      //         default_value: "",
      //         validation_options: {
      //             values: [
      //                 "0",
      //                 "1"
      //             ]
      //         }
      //     }
      // },
      // StopPotentialMemberNotOnFile: {
      //     checked: false,
      //     labelSuffix: "(Dev)",
      //     textInput: true,
      //     definition: {
      //         key: "StopPotentialMemberNotOnFile",
      //         data_type: 'PICKLIST',
      //         default_value: "",
      //         validation_options: {
      //             values: [
      //                 "0",
      //                 "1"
      //             ]
      //         }
      //     }
      // },
      // LeaveEmploymentNotOnFile: {
      //     checked: false,
      //     labelSuffix: "(Dev)",
      //     textInput: true,
      //     definition: {
      //         key: "LeaveEmploymentNotOnFile",
      //         data_type: 'PICKLIST',
      //         default_value: "",
      //         validation_options: {
      //             values: [
      //                 "0",
      //                 "1"
      //             ]
      //         }
      //     }
      // },
      // HelpRequestTicketNumber: {
      //     checked: false,
      //     labelSuffix: "(Dev)",
      //     textInput: true,
      //     definition: {
      //         key: "HelpRequestTicketNumber",
      //         default_value: "",
      //     }
      // },
      // END: FPC controller field definitions.
      // test_column: {
      //     checked: false,
      //     labelSuffix: "(Dev)",
      //     textInput: true,
      //     definition: {
      //         key: "test_column",
      //         default_value: "test column default value",
      //     }
      // }
    };
    this.templateOverrides = {
      validation_hooks_to_add: this.validationHooks,
      columns_to_update: this.columnsToUpdate
      // columns_to_add: this.columnsToAdd,
      // columns_to_remove: this.columnsToRemove,,
    };
    this.importerVariables = {
      importerEnv: {
        tag: "select",
        name: "importerEnv",
        id: "importerEnv",
        options: {
          default: "Default",
          // prod: "Production",
          stage: "Staging",
          dev: "Development"
        }
      },
      importMethod: {
        tag: "select",
        name: "importMethod",
        id: "importMethod",
        options: {
          default: "Default",
          webhook: "Webhook"
        }
      },
      // @todo Disabled for now. Enable if we need to select lambdaEnv from a code hook - TBD.
      // lambdaEnv: {
      //     tag: 'select',
      //     name: 'lambdaEnv',
      //     id: 'lambdaEnv',
      //     options: {
      //         // prod: "Production",
      //         stage: "Staging",
      //         dev: "Development",
      //     },
      // },
      disableTransformAmounts: {
        tag: "input",
        type: "checkbox",
        checked: false,
        value: true,
        name: "disableTransformAmounts",
        id: "disableTransformAmounts"
      },
      disableTransformPhoneNumbers: {
        tag: "input",
        type: "checkbox",
        checked: false,
        value: true,
        name: "disableTransformPhoneNumbers",
        id: "disableTransformPhoneNumbers"
      },
      disableTransformSplitNames: {
        tag: "input",
        type: "checkbox",
        checked: false,
        value: true,
        name: "disableTransformSplitNames",
        id: "disableTransformSplitNames"
      },
      disableTransformSplitFullAddress: {
        tag: "input",
        type: "checkbox",
        checked: false,
        value: true,
        name: "disableTransformSplitFullAddress",
        id: "disableTransformSplitFullAddress"
      }
    };
  },
  mounted() {
    this.buildLauncherOptionsForm();
  },
  methods: {
    /**
     * Pre-fetch the static lookup lists that do not rely on the affiliate number.
     */
    fetchLookupLists() {
      let fetchLookupListsPayload = { "returnScope": Object.values(this.lookupListsColumnMap) };
      axios$1.post("/api/v2/custom/oneschema/fetchLookupLists", fetchLookupListsPayload).then((response) => {
        this.lookupListsRaw = response.data;
        this.enableDebugging && console.log("lookupListsRaw:", this.lookupListsRaw);
        Object.entries(response.data).forEach(([scope, items]) => {
          var _a2;
          let keyName = ((_a2 = items[0]) == null ? void 0 : _a2.hasOwnProperty("code")) || scope === "suffix" ? "picklist_options" : "values";
          this.lookupLists[scope] = {};
          this.lookupLists[scope][keyName] = [];
          items.forEach((item) => {
            if (keyName === "picklist_options") {
              if (scope === "suffix") {
                let noDotName = item.name.replaceAll(".", "");
                this.lookupLists[scope][keyName].push({
                  value: item.name,
                  ...item.name !== noDotName && { alternative_names: [noDotName] }
                });
              } else {
                this.lookupLists[scope][keyName].push({
                  value: item.code,
                  alternative_names: [item.name]
                });
              }
            } else {
              this.lookupLists[scope][keyName].push(item.name);
            }
          });
        });
        this.enableDebugging && console.log("lookupLists:", this.lookupLists);
      }).catch((error) => {
        console.log("fetchLookupLists error:", error.response);
      }).finally(() => {
      });
    },
    /**
     * Add the pre-fetched lookup lists to OneSchema template overrides.
     */
    setLookupLists() {
      Object.entries(this.lookupListsColumnMap).forEach(([column, scope]) => {
        if (this.columnsToUpdate.hasOwnProperty(column) && this.lookupLists.hasOwnProperty(scope)) {
          this.columnsToUpdate[column].definition.validation_options = this.lookupLists[scope] || [];
        }
      });
      this.templateOverrides.columns_to_update = this.columnsToUpdate;
      this.enableDebugging && console.log("setLookupLists lookupLists:", this.lookupLists);
      this.enableDebugging && console.log("setLookupLists templateOverrides:", this.templateOverrides);
    },
    /**
     * Allow setting the OneSchema Importer and Lambda environments to use.
     *
     * This is primarily used to allow flexibility to developers, testers,
     * and demos to get by with minimal environments. However, it can also
     * be used on local to more easily test code changes between environments.
     */
    setImporterEnvs() {
      this.importerEnv = this.importerOptions.payload.importerEnv || "default";
      this.lambdaEnv = this.importerOptions.payload.lambdaEnv || "stage";
    },
    /**
     * Prepare options for use in Laravel and OneSchema importer launch config.
     */
    buildImporterOptions() {
      this.setImporterEnvs();
      this.importerOptions["importerEnv"] = this.importerEnv;
      if (this.formDataEntries.has("columns_to_update_UnitId_default_value")) {
        this.importerOptions.payload["UnitId"] = this.formDataEntries.get("columns_to_update_UnitId_default_value");
      }
      if (this.formDataEntries.has("columns_to_update_EmployerId_default_value")) {
        this.importerOptions.payload["EmployerId"] = this.formDataEntries.get("columns_to_update_EmployerId_default_value");
      }
    },
    /**
     * Generate the OneSchema importer with custom launch config from Laravel.
     */
    async generateOneSchemaImporter() {
      this.buildImporterOptions();
      return await axios$1.post(`/api/v2/custom/oneschema/generateImporterPayload`, this.importerOptions).then((response) => {
        this.enableDebugging && console.log("From axios", response.data);
        this.enableDebugging && console.log("importerOptions", this.importerOptions);
        this.enableDebugging && console.log("importerOptions.payload", this.importerOptions.payload);
        this.importer = oneSchemaImporter(response.data);
      }).catch((error) => {
        console.log("generateOneSchemaImporter error:", error.response);
      }).finally(() => {
      });
    },
    /**
     * Build config, launch OneSchema importer, and act on events.
     *
     * @param templateKey
     */
    async launchOneSchema(templateKey) {
      this.isFileDownloadable = false;
      this.embedId = null;
      this.enableDebugging && console.log("launchOneSchema Clicked:", templateKey);
      this.launchParams = {
        templateKey,
        templateOverrides: this.buildTemplateOverrides(templateKey)
      };
      await this.generateOneSchemaImporter();
      this.enableDebugging && console.log("launchParams: ", this.launchParams);
      this.importer.launch(this.launchParams);
      this.importer.on("launched", (data) => {
        this.enableDebugging && console.log(data);
      });
      this.importer.on("success", (data) => {
        this.enableDebugging && console.log(data);
        if (data.count > 0) {
          this.embedId = data.embed_id;
          this.jsonArrayData = data.records;
          this.jsonColumns = data.columns.map((column) => column.template_column_key);
          this.orderedColumns = this.allColumns.filter((element) => this.jsonColumns.includes(element));
          this.isFileDownloadable = true;
        }
      });
      this.importer.on("cancel", () => {
        this.importer.close(true);
      });
      this.importer.on("error", (message) => {
        console.log(message);
      });
    },
    /**
     * Build the launcher options form to allow varying the OneSchema importer launch config.
     *
     * NOTE: It may be useful to always enable developers to vary config
     * passed to OneSchema importer, however the form should be minimized
     * for most users prior to launch.
     */
    buildLauncherOptionsForm() {
      let launcherOptionsForm = document.getElementById("launcher-options");
      launcherOptionsForm.setAttribute("style", "display:flex;flex-direction:column");
      Object.entries(this.templateOverrides).forEach(([name, overrides]) => {
        let groupTitle2 = document.createElement("h3");
        groupTitle2.innerText = name;
        launcherOptionsForm.appendChild(groupTitle2);
        Object.entries(overrides).forEach(([label, override]) => {
          this.enableDebugging && console.log(name, label);
          let id = name.concat("_", label);
          let checkBox = document.createElement("input");
          checkBox.setAttribute("type", "checkbox");
          checkBox.setAttribute("name", name);
          checkBox.setAttribute("id", id);
          checkBox.setAttribute("value", label);
          if (override.checked) {
            checkBox.setAttribute("checked", "checked");
          }
          let checkBoxLabel = document.createElement("label");
          checkBoxLabel.setAttribute("for", id);
          checkBoxLabel.innerHTML = label.concat(" ", override.labelSuffix);
          checkBoxLabel.setAttribute("style", "margin-left:10px");
          let inputDiv = document.createElement("div");
          inputDiv.appendChild(checkBox);
          inputDiv.appendChild(checkBoxLabel);
          if (override.textInput) {
            let textInputId = id.concat("_", "default_value");
            let textInput = document.createElement("input");
            textInput.setAttribute("type", "text");
            textInput.setAttribute("name", textInputId);
            textInput.setAttribute("id", textInputId);
            textInput.value = override.definition.default_value || "";
            textInput.setAttribute("style", "margin-left:10px;padding:0 5px;border:1px solid #ccc;");
            inputDiv.appendChild(textInput);
          }
          launcherOptionsForm.appendChild(inputDiv);
        });
      });
      let groupTitle = document.createElement("h3");
      groupTitle.innerText = "Configuration";
      launcherOptionsForm.appendChild(groupTitle);
      Object.entries(this.importerVariables).forEach(([name, attributes]) => {
        let element = document.createElement(attributes.tag);
        if (attributes.type) {
          element.setAttribute("type", attributes.type);
        }
        if (attributes.value) {
          element.setAttribute("value", attributes.value);
        }
        element.setAttribute("id", attributes.id);
        element.setAttribute("name", attributes.name);
        element.setAttribute("style", "margin-left:10px;padding:0 5px;border:1px solid #ccc;");
        if (attributes.options) {
          Object.entries(attributes.options).forEach(([key2, value]) => {
            const option = document.createElement("option");
            option.value = key2;
            option.text = value.toString();
            element.add(option);
          });
        }
        if (attributes.checked) {
          element.setAttribute("checked", "checked");
        }
        let elementLabel = document.createElement("label");
        elementLabel.setAttribute("for", attributes.id);
        elementLabel.innerHTML = name;
        elementLabel.setAttribute("style", "margin-left:10px");
        let elementDiv = document.createElement("div");
        elementDiv.appendChild(element);
        elementDiv.appendChild(elementLabel);
        launcherOptionsForm.appendChild(elementDiv);
      });
      this.enableDebugging && console.log(launcherOptionsForm);
    },
    /**
     * Get all launcher options for use as OneSchema config and template overrides.
     *
     * @param overrides
     */
    getLauncherOptions(overrides) {
      this.importerOptions = {};
      let payload = {};
      let form_data = new FormData(document.querySelector("#launcher-options"));
      this.formDataEntries = new Map(form_data.entries());
      this.enableDebugging && console.log("formDataEntries", this.formDataEntries);
      this.enableDebugging && console.log("templateOverrides", this.templateOverrides);
      for (const [key2, value] of form_data.entries()) {
        this.enableDebugging && console.log(key2 + ": is " + value);
        if (this.importerVariables.hasOwnProperty(key2)) {
          payload[key2] = value;
        }
        if (!overrides.hasOwnProperty(key2)) {
          continue;
        }
        if (!key2.endsWith("_default_value") && this.templateOverrides[key2][value]) {
          let definition = { ...this.templateOverrides[key2][value].definition };
          let defaultTextInput = [key2, value, "default_value"].join("_");
          let defaultValue = this.formDataEntries.get(defaultTextInput);
          if (defaultValue !== void 0 && defaultValue.length > 0) {
            definition["default_value"] = defaultValue;
          } else {
            delete definition.default_value;
          }
          overrides[key2].push(definition);
        }
      }
      this.importerOptions.payload = payload;
      this.enableDebugging && console.log("importerOptions in getLauncherOptions:", this.importerOptions);
    },
    /**
     * Build the template overrides to include in OneSchema importer launch config.
     *
     * @param templateKey
     *   Currently unused, but potentially very useful if we need to vary based on template.
     */
    buildTemplateOverrides(templateKey) {
      let selectedOverrides = {
        // columns_to_add: [],
        columns_to_update: [],
        // columns_to_remove: [],
        validation_hooks_to_add: []
      };
      if (this.enableLauncherOptions) {
        this.setLookupLists();
        this.getLauncherOptions(selectedOverrides);
      }
      this.enableDebugging && console.log("selectedOverrides:", selectedOverrides);
      return selectedOverrides;
    },
    /**
     * Build a CSV from OneSchema importer success event.
     *
     * @param filename
     *
     * @deprecated Remove in cleanup.
     */
    downloadCSVFromJson(filename) {
      if (this.jsonArrayData) {
        let arrayOfJson = this.jsonArrayData;
        const replacer = (key2, value) => value === null ? "" : value;
        const header = this.orderedColumns;
        let csv = arrayOfJson.map((row) => header.map((fieldName) => JSON.stringify(row[fieldName], replacer)).join(","));
        csv.unshift(header.join(","));
        csv = csv.join("\r\n");
        let link = document.createElement("a");
        link.setAttribute("href", "data:text/csv;charset=utf-8,%EF%BB%BF" + encodeURIComponent(csv));
        link.setAttribute("download", filename);
        link.style.visibility = "hidden";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }
    },
    /**
     * Download the finalized CSV directly from OneSchema.
     */
    downloadCSVFromOneSchema() {
      if (!this.embedId) {
        this.enableDebugging && console.log("downloadCSVFromOneSchema:", "embedId not found");
        return;
      }
      axios$1.get("/api/v2/custom/oneschema/getImportedFileUrl/" + this.embedId).then((response) => {
        var _a2;
        this.importedFileUrl = ((_a2 = response.data) == null ? void 0 : _a2.url) || "";
        this.enableDebugging && console.log("importedFileUrl:", this.importedFileUrl);
        let link = document.createElement("a");
        link.setAttribute("href", this.importedFileUrl);
        link.style.visibility = "hidden";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }).catch((error) => {
        console.log("downloadCSVFromOneSchema error:", error.response);
      }).finally(() => {
      });
    }
  }
};
const _hoisted_1$m = { key: 0 };
const _hoisted_2$m = ["hidden"];
function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createBaseVNode("div", null, [
        _cache[8] || (_cache[8] = createBaseVNode(
          "h1",
          null,
          "OneSchema File Validation",
          -1
          /* HOISTED */
        )),
        _cache[9] || (_cache[9] = createTextVNode()),
        _cache[10] || (_cache[10] = createBaseVNode(
          "br",
          null,
          null,
          -1
          /* HOISTED */
        )),
        _cache[11] || (_cache[11] = createBaseVNode(
          "br",
          null,
          null,
          -1
          /* HOISTED */
        )),
        createVNode(VBtn, {
          variant: "text",
          color: "primary",
          class: "report rounded-circle",
          onClick: _cache[0] || (_cache[0] = ($event) => $options.launchOneSchema("mfu_v1"))
        }, {
          default: withCtx(() => _cache[6] || (_cache[6] = [
            createTextVNode("Launch DW-MFU Template")
          ])),
          _: 1
          /* STABLE */
        }),
        _cache[12] || (_cache[12] = createBaseVNode(
          "br",
          null,
          null,
          -1
          /* HOISTED */
        )),
        _cache[13] || (_cache[13] = createBaseVNode(
          "br",
          null,
          null,
          -1
          /* HOISTED */
        )),
        createVNode(VBtn, {
          variant: "text",
          color: "secondary",
          class: "report rounded-circle",
          onClick: _cache[1] || (_cache[1] = ($event) => $options.launchOneSchema("sheet1"))
        }, {
          default: withCtx(() => _cache[7] || (_cache[7] = [
            createTextVNode("Launch Sheet1")
          ])),
          _: 1
          /* STABLE */
        }),
        _cache[14] || (_cache[14] = createBaseVNode(
          "br",
          null,
          null,
          -1
          /* HOISTED */
        )),
        _cache[15] || (_cache[15] = createBaseVNode(
          "br",
          null,
          null,
          -1
          /* HOISTED */
        ))
      ]),
      $data.isFileDownloadable ? (openBlock(), createElementBlock("div", _hoisted_1$m, [
        _cache[18] || (_cache[18] = createBaseVNode(
          "br",
          null,
          null,
          -1
          /* HOISTED */
        )),
        createVNode(VBtn, {
          color: "primary",
          disabled: $data.buttonAlwaysDisabled,
          hidden: $data.buttonAlwaysDisabled,
          onClick: _cache[2] || (_cache[2] = ($event) => $options.downloadCSVFromJson("ExportFile.csv"))
        }, {
          default: withCtx(() => _cache[16] || (_cache[16] = [
            createTextVNode("Download Validated File")
          ])),
          _: 1
          /* STABLE */
        }, 8, ["disabled", "hidden"]),
        createVNode(VBtn, {
          color: "primary",
          disabled: !$data.isFileDownloadable,
          onClick: _cache[3] || (_cache[3] = ($event) => $options.downloadCSVFromOneSchema())
        }, {
          default: withCtx(() => _cache[17] || (_cache[17] = [
            createTextVNode("Download Imported CSV from OneSchema")
          ])),
          _: 1
          /* STABLE */
        }, 8, ["disabled"])
      ])) : createCommentVNode("v-if", true),
      createBaseVNode("div", null, [
        _cache[22] || (_cache[22] = createBaseVNode(
          "br",
          null,
          null,
          -1
          /* HOISTED */
        )),
        _cache[23] || (_cache[23] = createBaseVNode(
          "h2",
          null,
          "Launcher Options",
          -1
          /* HOISTED */
        )),
        createBaseVNode("div", null, [
          withDirectives(createBaseVNode(
            "input",
            {
              type: "checkbox",
              id: "toggleDebugging",
              "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.enableDebugging = $event)
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vModelCheckbox, $data.enableDebugging]
          ]),
          _cache[19] || (_cache[19] = createBaseVNode(
            "label",
            { for: "toggleDebugging" },
            "enable debugging",
            -1
            /* HOISTED */
          ))
        ]),
        createBaseVNode("div", null, [
          withDirectives(createBaseVNode(
            "input",
            {
              type: "checkbox",
              id: "toggleLauncherOptions",
              "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.enableLauncherOptions = $event)
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vModelCheckbox, $data.enableLauncherOptions]
          ]),
          _cache[20] || (_cache[20] = createBaseVNode(
            "label",
            { for: "toggleLauncherOptions" },
            "enable launcher options",
            -1
            /* HOISTED */
          ))
        ]),
        createBaseVNode("div", {
          hidden: !$data.enableLauncherOptions
        }, _cache[21] || (_cache[21] = [
          createBaseVNode(
            "form",
            { id: "launcher-options" },
            null,
            -1
            /* HOISTED */
          )
        ]), 8, _hoisted_2$m)
      ])
    ]),
    _: 1
    /* STABLE */
  });
}
const OneSchemaFileValidationComponent = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["render", _sfc_render$x], ["__file", "/var/www/html/resources/js/components/Common/OneSchemaFileValidationComponent.vue"]]);
const _sfc_main$w = {
  name: "EmployerAddressComponent",
  components: { StateTerritorySelectComponent },
  props: {
    employer: {
      type: Object,
      required: true
    },
    savedAddress: {
      type: Object,
      required: false
    }
  },
  computed: {
    saveButtonLabel() {
      return this.savedAddress ? "Save" : "save and close";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    savedAddress: {
      handler(data) {
        this.setEditAddress();
      },
      deep: true
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/EmployerAddressType").then((response) => {
      this.addressTypes = response.data.data;
    });
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      addressTypes: [],
      address: { ContactStatusId: 4 },
      rules: {
        required: (value) => !!value || "Required."
      },
      emptyAddress: {
        EmployerAddressTypeId: null,
        ContactStatusId: 4,
        ContactSourceId: null,
        IsPreferred: false,
        AddressLine1: null,
        AddressLine2: null,
        City: null,
        StateTerritoryId: null,
        PostalCode: null,
        EmployerId: this.employer.EmployerId
      }
    };
  },
  methods: {
    saveNewAddress() {
      this.address.EmployerId = this.employer.EmployerId;
      this.address.IsPreferred = typeof this.address.IsPreferred === "undefined" || this.address.IsPreferred === null ? false : this.address.IsPreferred;
      if (this.savedAddress) {
        axios.put("/api/v2/EmployerAddress/" + this.savedAddress.EmployerAddressId + "?include=ContactStatus,ContactSource", this.address).then((response) => {
          this.handleAddressSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/EmployerAddress?include=ContactStatus,ContactSource", this.address).then((response) => {
          this.resetAddress();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Address saved.";
          this.handleAddressSaved(response.data.data, false, true);
        });
      }
    },
    saveCloseAddress() {
      this.address.EmployerId = this.employer.EmployerId;
      this.address.IsPreferred = typeof this.address.IsPreferred === "undefined" || this.address.IsPreferred === null ? false : this.address.IsPreferred;
      if (this.savedAddress) {
        axios.put("/api/v2/EmployerAddress/" + this.savedAddress.EmployerAddressId + "?include=ContactStatus,ContactSource", this.address).then((response) => {
          this.handleAddressSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/EmployerAddress?include=ContactStatus,ContactSource", this.address).then((response) => {
          this.resetAddress();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Address saved.";
          this.handleAddressSaved(response.data.data, true, true);
        });
      }
    },
    async onSave(event) {
      const { value } = event.submitter;
      const results = await event;
      if (!results.valid) {
        return;
      }
      if (value === "continue") {
        this.saveNewAddress();
      } else if (value === "close") {
        this.saveCloseAddress();
      }
    },
    cancel() {
      this.setEditAddress();
      this.$emit("cancel-add-address");
    },
    handleAddressSaved(addressData, flip, isNew) {
      this.$emit("saved-address", { address: addressData, flip, isNew });
    },
    resetAddress() {
      for (const field in this.emptyAddress) {
        if (this.emptyAddress.hasOwnProperty(field)) {
          this.address[field] = this.emptyAddress[field];
        }
      }
    },
    setEditAddress() {
      this.address = clone(this.savedAddress) || clone(this.emptyAddress);
    }
  }
};
const _hoisted_1$l = { class: "data-container" };
const _hoisted_2$l = { class: "data-container" };
const _hoisted_3$h = { class: "data-container" };
const _hoisted_4$f = { class: "data-container" };
function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_StateTerritorySelectComponent = resolveComponent("StateTerritorySelectComponent");
  return openBlock(), createBlock(VForm, {
    ref: "form",
    modelValue: $data.valid,
    "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.valid = $event),
    "validate-on": "submit",
    onSubmit: withModifiers($options.onSave, ["prevent"])
  }, {
    default: withCtx(() => [
      createVNode(VCard, null, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => _cache[12] || (_cache[12] = [
              createTextVNode("New Address")
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              createVNode(VAlert, {
                type: $data.alertType,
                modelValue: $data.alert,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
                closable: "",
                "close-text": "Dismiss"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($data.alertText),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }, 8, ["type", "modelValue"]),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "3"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_1$l, [
                        createVNode(VSelect, {
                          items: $data.addressTypes,
                          label: "Address Type",
                          "item-value": "EmployerAddressTypeId",
                          "item-title": "EmployerAddressTypeName",
                          modelValue: $data.address.EmployerAddressTypeId,
                          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.address.EmployerAddressTypeId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "3"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_2$l, [
                        createVNode(VSelect, {
                          items: $options.contactStatus,
                          label: "Address Status",
                          "item-value": "ContactStatusId",
                          "item-title": "ContactStatusName",
                          modelValue: $data.address.ContactStatusId,
                          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.address.ContactStatusId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_3$h, [
                        createVNode(VSelect, {
                          items: $options.contactSources,
                          "item-value": "ContactSourceId",
                          "item-title": "ContactSourceName",
                          label: "Address Source",
                          modelValue: $data.address.ContactSourceId,
                          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.address.ContactSourceId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "2",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Preferred Address",
                        modelValue: $data.address.IsPreferred,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.address.IsPreferred = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "8"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Street Address",
                        rules: [$data.rules.required],
                        modelValue: $data.address.AddressLine1,
                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.address.AddressLine1 = $event),
                        variant: "underlined"
                      }, null, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Suite/Apt",
                        modelValue: $data.address.AddressLine2,
                        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.address.AddressLine2 = $event),
                        variant: "underlined"
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "City",
                        rules: [$data.rules.required],
                        modelValue: $data.address.City,
                        "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.address.City = $event),
                        variant: "underlined"
                      }, null, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_4$f, [
                        createVNode(_component_StateTerritorySelectComponent, {
                          "item-value": "StateTerritoryId",
                          "item-text": "StateTerritoryName",
                          label: "State",
                          modelValue: $data.address.StateTerritoryId,
                          "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.address.StateTerritoryId = $event)
                        }, null, 8, ["modelValue"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Zip Code",
                        rules: [$data.rules.required],
                        modelValue: $data.address.PostalCode,
                        "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.address.PostalCode = $event),
                        variant: "underlined"
                      }, null, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardActions, null, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                onClick: _cache[10] || (_cache[10] = ($event) => $options.cancel()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[13] || (_cache[13] = [
                  createTextVNode("Cancel")
                ])),
                _: 1
                /* STABLE */
              }),
              !$props.savedAddress ? (openBlock(), createBlock(VBtn, {
                key: 0,
                color: "secondary",
                type: "submit",
                variant: "elevated",
                value: "continue"
              }, {
                default: withCtx(() => _cache[14] || (_cache[14] = [
                  createTextVNode("Save and Continue Adding...")
                ])),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              createVNode(VBtn, {
                color: "success",
                type: "submit",
                variant: "elevated",
                value: "close"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($options.saveButtonLabel),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue", "onSubmit"]);
}
const EmployerAddressComponent = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["render", _sfc_render$w], ["__file", "/var/www/html/resources/js/components/Employer/Partial/Edit/Contact/EmployerAddressComponent.vue"]]);
const _sfc_main$v = {
  name: "ContactAddressListComponent",
  props: {
    addressheaders: {
      type: Array,
      required: true
    },
    addresses: {
      type: Array,
      required: true
    }
  }
};
const _hoisted_1$k = { key: 0 };
const _hoisted_2$k = { key: 0 };
function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VDataTable, {
    "hide-default-footer": true,
    headers: $props.addressheaders,
    items: $props.addresses,
    class: "mobile-global-card-table",
    "mobile-breakpoint": 992
  }, {
    [`item.Address`]: withCtx(({ item }) => [
      createBaseVNode(
        "p",
        null,
        toDisplayString(item.AddressLine1),
        1
        /* TEXT */
      ),
      createBaseVNode(
        "p",
        null,
        toDisplayString(item.AddressLine2),
        1
        /* TEXT */
      ),
      createBaseVNode(
        "p",
        null,
        toDisplayString(item.City) + ", " + toDisplayString(item.StateTerritory ? item.StateTerritory.StateTerritoryCode : "") + ", " + toDisplayString(item.PostalCode),
        1
        /* TEXT */
      )
    ]),
    [`item.ContactStatus`]: withCtx(({ item }) => [
      item.ContactStatus ? (openBlock(), createElementBlock(
        "span",
        _hoisted_1$k,
        toDisplayString(item.ContactStatus.ContactStatusName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.ContactSource`]: withCtx(({ item }) => [
      item.ContactSource ? (openBlock(), createElementBlock(
        "span",
        _hoisted_2$k,
        toDisplayString(item.ContactSource.ContactSourceName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.IsPreferred`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VCheckbox, {
          "model-value": item.IsPreferred,
          disabled: ""
        }, null, 8, ["model-value"])
      ])
    ]),
    [`item.EmployerAddressId`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VBtn, {
          onClick: ($event) => _ctx.$emit("edit-address", item)
        }, {
          default: withCtx(() => _cache[0] || (_cache[0] = [
            createTextVNode("Edit")
          ])),
          _: 2
          /* DYNAMIC */
        }, 1032, ["onClick"])
      ])
    ]),
    _: 2
    /* DYNAMIC */
  }, 1032, ["headers", "items"]);
}
const ContactAddressListComponent = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["render", _sfc_render$v], ["__file", "/var/www/html/resources/js/components/Employer/Partial/Contact/ContactAddressListComponent.vue"]]);
const _sfc_main$u = {
  name: "AddressInformationComponent",
  components: {
    EmployerAddressComponent,
    FlipCard,
    ContactAddressListComponent,
    AddressListComponent
  },
  mixins: [markAsPreferredMixin, contactsMixin],
  props: {
    employerId: {
      type: String,
      required: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/employer/" + this.employerId + "?include=employerAddresses,employerAddresses.StateTerritory,employerAddresses.ContactSource,employerAddresses.ContactStatus").then((response) => {
        this.addresses = response.data.data.employerAddresses;
        this.employer = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (!value) {
        this.getDataFromApi();
      }
    },
    getAddressesByType(typeId, ignoreTypes) {
      return this.addresses.filter((address) => {
        return ignoreTypes.length > 0 ? !address.EmployerAddressTypeId || ignoreTypes.indexOf(address.EmployerAddressTypeId) === -1 : address.EmployerAddressTypeId && address.EmployerAddressTypeId === typeId;
      });
    },
    onAddressSaved(event) {
      if (!event.address) {
        return;
      }
      if (event.isNew) {
        this.addresses.push(event.address);
      } else {
        const index = this.addresses.findIndex((address) => {
          return address.EmployerAddressId === event.address.EmployerAddressId;
        });
        if (index >= 0) {
          this.addresses[index] = event.address;
        }
      }
      this.handleIsPreferred(this.addresses, event.address, "EmployerAddressId", "EmployerAddressTypeId");
      this.addresses = [...this.addresses];
      this.alertSuccessMessageForSave("Address");
      if (event.flip) {
        this.flipped = false;
      }
    }
  },
  data() {
    return {
      addresses: [],
      employer: {},
      flipped: false,
      addressheaders: [
        { title: "Address", value: "Address" },
        { title: "Status", value: "ContactStatus" },
        { title: "Source", value: "ContactSource" },
        { title: "Preferred", value: "IsPreferred" },
        { title: "Action", value: "EmployerAddressId" }
      ],
      selected: null
    };
  }
};
function _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_contact_address_list_component = resolveComponent("contact-address-list-component");
  const _component_employer_address_component = resolveComponent("employer-address-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[2] || (_cache[2] = [
          createTextVNode(" Address ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        onClick: _ctx.onAdd
                      }, {
                        default: withCtx(() => _cache[3] || (_cache[3] = [
                          createTextVNode("Add address")
                        ])),
                        _: 1
                        /* STABLE */
                      }, 8, ["onClick"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(VAlert, {
                        type: _ctx.alertType,
                        modelValue: _ctx.alert,
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.alert = $event),
                        closable: "",
                        "close-text": "Dismiss"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(_ctx.alertText),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["type", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      _cache[4] || (_cache[4] = createBaseVNode(
                        "h4",
                        null,
                        "Main",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_address_list_component, {
                        addresses: $options.getAddressesByType(1, []),
                        addressheaders: $data.addressheaders,
                        onEditAddress: _ctx.onEdit
                      }, null, 8, ["addresses", "addressheaders", "onEditAddress"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      _cache[5] || (_cache[5] = createBaseVNode(
                        "h4",
                        null,
                        "Other",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_address_list_component, {
                        addresses: $options.getAddressesByType(2, []),
                        addressheaders: $data.addressheaders,
                        onEditAddress: _ctx.onEdit
                      }, null, 8, ["addresses", "addressheaders", "onEditAddress"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            back: withCtx(() => [
              createVNode(_component_employer_address_component, {
                employer: $data.employer,
                "saved-address": $data.selected,
                onSavedAddress: $options.onAddressSaved,
                onCancelAddAddress: _cache[1] || (_cache[1] = ($event) => $data.flipped = false)
              }, null, 8, ["employer", "saved-address", "onSavedAddress"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const AddressInformationComponent = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["render", _sfc_render$u], ["__file", "/var/www/html/resources/js/components/Employer/Partial/Contact/AddressInformationComponent.vue"]]);
const _sfc_main$t = {
  name: "EmployerEmailComponent",
  props: {
    employer: {
      type: Object,
      required: true
    },
    savedEmail: {
      type: Object,
      required: false
    }
  },
  computed: {
    saveButtonLabel() {
      return this.savedEmail ? "Save" : "Save and close";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    savedEmail: {
      handler(data) {
        this.setEditEmail();
      },
      deep: true
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/EmployerEmailType").then((response) => {
      this.emailTypes = response.data.data;
    });
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      emailTypes: [],
      email: { ContactStatusId: 4 },
      rules: {
        required: (value) => !!value || "Required.",
        email: (value) => {
          const pattern = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
          return pattern.test(value) || "Invalid e-mail.";
        }
      },
      emptyEmail: {
        EmployerEmailTypeId: null,
        ContactStatusId: 4,
        ContactSourceId: null,
        IsPreferred: false,
        CanContact: false,
        Email: null,
        EmployerId: this.employer.EmployerId
      }
    };
  },
  methods: {
    saveNewEmail() {
      this.email.EmployerId = this.employer.EmployerId;
      this.email.CanContact = typeof this.email.CanContact === "undefined" || this.email.CanContact === null ? false : this.email.CanContact;
      this.email.IsPreferred = typeof this.email.IsPreferred === "undefined" || this.email.IsPreferred === null ? false : this.email.IsPreferred;
      this.email.CanContactRestrictionId = 1;
      if (this.savedEmail) {
        axios.put("/api/v2/EmployerEmail/" + this.savedEmail.EmployerEmailId + "?include=ContactStatus,ContactSource", this.email).then((response) => {
          this.handleEmailSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/EmployerEmail?include=ContactStatus,ContactSource", this.email).then((response) => {
          this.resetEmail();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Email saved.";
          this.handleEmailSaved(response.data.data, false, true);
        });
      }
    },
    saveCloseEmail() {
      this.email.EmployerId = this.employer.EmployerId;
      this.email.CanContact = typeof this.email.CanContact === "undefined" || this.email.CanContact === null ? false : this.email.CanContact;
      this.email.IsPreferred = typeof this.email.IsPreferred === "undefined" || this.email.IsPreferred === null ? false : this.email.IsPreferred;
      this.email.CanContactRestrictionId = 1;
      if (this.savedEmail) {
        axios.put("/api/v2/EmployerEmail/" + this.savedEmail.EmployerEmailId + "?include=ContactStatus,ContactSource", this.email).then((response) => {
          this.handleEmailSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/EmployerEmail?include=ContactStatus,ContactSource", this.email).then((response) => {
          this.resetEmail();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Email saved.";
          this.handleEmailSaved(response.data.data, true, true);
        });
      }
    },
    async onSave(event) {
      const { value } = event.submitter;
      const results = await event;
      if (!results.valid) {
        return;
      }
      if (value === "continue") {
        this.saveNewEmail();
      } else if (value === "close") {
        this.saveCloseEmail();
      }
    },
    cancel() {
      this.setEditEmail();
      this.$emit("cancel-add-email");
    },
    handleEmailSaved(emailData, flip, isNew) {
      this.$emit("saved-email", { email: emailData, flip, isNew });
    },
    resetEmail() {
      for (const field in this.emptyEmail) {
        if (this.emptyEmail.hasOwnProperty(field)) {
          this.email[field] = this.emptyEmail[field];
        }
      }
    },
    setEditEmail() {
      this.email = clone(this.savedEmail) || clone(this.emptyEmail);
    }
  }
};
const _hoisted_1$j = { class: "data-container" };
const _hoisted_2$j = { class: "data-container" };
const _hoisted_3$g = { class: "data-container" };
function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VForm, {
    ref: "form",
    modelValue: $data.valid,
    "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.valid = $event),
    "validate-on": "submit",
    onSubmit: withModifiers($options.onSave, ["prevent"])
  }, {
    default: withCtx(() => [
      createVNode(VCard, null, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => _cache[9] || (_cache[9] = [
              createTextVNode("New Email")
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              createVNode(VAlert, {
                type: $data.alertType,
                modelValue: $data.alert,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
                closable: "",
                "close-text": "Dismiss"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($data.alertText),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }, 8, ["type", "modelValue"]),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_1$j, [
                        createVNode(VSelect, {
                          items: $data.emailTypes,
                          label: "Email Type",
                          "item-value": "EmployerEmailTypeId",
                          "item-title": "EmployerEmailTypeName",
                          modelValue: $data.email.EmployerEmailTypeId,
                          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.email.EmployerEmailTypeId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_2$j, [
                        createVNode(VSelect, {
                          items: $options.contactStatus,
                          label: "Email Status",
                          "item-value": "ContactStatusId",
                          "item-title": "ContactStatusName",
                          modelValue: $data.email.ContactStatusId,
                          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.email.ContactStatusId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_3$g, [
                        createVNode(VSelect, {
                          items: $options.contactSources,
                          "item-value": "ContactSourceId",
                          "item-title": "ContactSourceName",
                          label: "Email Source",
                          modelValue: $data.email.ContactSourceId,
                          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.email.ContactSourceId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Email",
                        rules: [$data.rules.required, $data.rules.email],
                        modelValue: $data.email.Email,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.email.Email = $event),
                        maxlength: 200,
                        variant: "underlined"
                      }, null, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Preferred Email",
                        modelValue: $data.email.IsPreferred,
                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.email.IsPreferred = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Can Contact",
                        modelValue: $data.email.CanContact,
                        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.email.CanContact = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardActions, null, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                onClick: _cache[7] || (_cache[7] = ($event) => $options.cancel()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[10] || (_cache[10] = [
                  createTextVNode("Cancel")
                ])),
                _: 1
                /* STABLE */
              }),
              !$props.savedEmail ? (openBlock(), createBlock(VBtn, {
                key: 0,
                color: "secondary",
                type: "submit",
                variant: "elevated",
                value: "continue"
              }, {
                default: withCtx(() => _cache[11] || (_cache[11] = [
                  createTextVNode("Save and Continue Adding...")
                ])),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              createVNode(VBtn, {
                color: "success",
                type: "submit",
                variant: "elevated",
                value: "close"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($options.saveButtonLabel),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue", "onSubmit"]);
}
const EmployerEmailComponent = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["render", _sfc_render$t], ["__file", "/var/www/html/resources/js/components/Employer/Partial/Edit/Contact/EmployerEmailComponent.vue"]]);
const _sfc_main$s = {
  name: "ContactEmailListComponent",
  props: {
    emailheaders: {
      type: Array,
      required: true
    },
    emails: {
      type: Array,
      required: true
    }
  }
};
const _hoisted_1$i = { key: 0 };
const _hoisted_2$i = { key: 0 };
function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VDataTable, {
    "hide-default-footer": true,
    headers: $props.emailheaders,
    items: $props.emails,
    class: "mobile-global-card-table",
    "mobile-breakpoint": 992
  }, {
    [`item.Email`]: withCtx(({ item }) => [
      createBaseVNode(
        "span",
        null,
        toDisplayString(item.Email),
        1
        /* TEXT */
      )
    ]),
    [`item.ContactStatus`]: withCtx(({ item }) => [
      item.ContactStatus ? (openBlock(), createElementBlock(
        "span",
        _hoisted_1$i,
        toDisplayString(item.ContactStatus.ContactStatusName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.ContactSource`]: withCtx(({ item }) => [
      item.ContactSource ? (openBlock(), createElementBlock(
        "span",
        _hoisted_2$i,
        toDisplayString(item.ContactSource.ContactSourceName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.IsPreferred`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VCheckbox, {
          "model-value": item.IsPreferred,
          disabled: ""
        }, null, 8, ["model-value"])
      ])
    ]),
    [`item.CanContact`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VCheckbox, {
          "model-value": item.CanContact,
          disabled: ""
        }, null, 8, ["model-value"])
      ])
    ]),
    [`item.EmployerEmailId`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VBtn, {
          onClick: ($event) => _ctx.$emit("edit-email", item)
        }, {
          default: withCtx(() => _cache[0] || (_cache[0] = [
            createTextVNode("Edit")
          ])),
          _: 2
          /* DYNAMIC */
        }, 1032, ["onClick"])
      ])
    ]),
    _: 2
    /* DYNAMIC */
  }, 1032, ["headers", "items"]);
}
const ContactEmailListComponent = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["render", _sfc_render$s], ["__file", "/var/www/html/resources/js/components/Employer/Partial/Contact/ContactEmailListComponent.vue"]]);
const _sfc_main$r = {
  name: "EmailInformationComponent",
  components: {
    EmployerEmailComponent,
    ContactEmailListComponent,
    FlipCard
  },
  mixins: [markAsPreferredMixin, contactsMixin],
  props: {
    employerId: {
      type: String,
      required: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/employer/" + this.employerId + "?include=employerEmails,employerEmails.ContactSource,employerEmails.ContactStatus").then((response) => {
        this.emails = response.data.data.employerEmails;
        this.employer = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (!value) {
        this.getDataFromApi();
      }
    },
    getEmailbyType(typeId, ignoreTypes) {
      return this.emails.filter((address) => {
        return ignoreTypes.length > 0 ? !address.EmployerEmailTypeId || ignoreTypes.indexOf(address.EmployerEmailTypeId) === -1 : address.EmployerEmailTypeId && address.EmployerEmailTypeId === typeId;
      });
    },
    onEmailSaved(event) {
      if (!event.email) {
        return;
      }
      if (event.isNew) {
        this.emails.push(event.email);
      } else {
        const index = this.emails.findIndex((email) => {
          return email.EmployerEmailId === event.email.EmployerEmailId;
        });
        if (index >= 0) {
          this.emails[index] = event.email;
        }
      }
      this.handleIsPreferred(this.emails, event.email, "EmployerEmailId", "EmployerEmailTypeId");
      this.emails = [...this.emails];
      this.alertSuccessMessageForSave("Email");
      if (event.flip) {
        this.flipped = false;
      }
    }
  },
  data() {
    return {
      emails: [],
      employer: {},
      flipped: false,
      emailheaders: [
        { title: "Email", value: "Email" },
        { title: "Status", value: "ContactStatus" },
        { title: "Source", value: "ContactSource" },
        { title: "Preferred", value: "IsPreferred" },
        { title: "Can Contact", value: "CanContact" },
        { title: "Action", value: "EmployerEmailId" }
      ],
      selected: null
    };
  }
};
function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_contact_email_list_component = resolveComponent("contact-email-list-component");
  const _component_employer_email_component = resolveComponent("employer-email-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[3] || (_cache[3] = [
          createTextVNode(" Emails ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.onAdd())
                      }, {
                        default: withCtx(() => _cache[4] || (_cache[4] = [
                          createTextVNode("Add email address")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(VAlert, {
                        type: _ctx.alertType,
                        modelValue: _ctx.alert,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.alert = $event),
                        closable: "",
                        "close-text": "Dismiss"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(_ctx.alertText),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["type", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      _cache[5] || (_cache[5] = createBaseVNode(
                        "h4",
                        null,
                        "Main",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_email_list_component, {
                        emails: $options.getEmailbyType(1, []),
                        emailheaders: $data.emailheaders,
                        onEditEmail: _ctx.onEdit
                      }, null, 8, ["emails", "emailheaders", "onEditEmail"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      _cache[6] || (_cache[6] = createBaseVNode(
                        "h4",
                        null,
                        "Other",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_contact_email_list_component, {
                        emails: $options.getEmailbyType(2, []),
                        emailheaders: $data.emailheaders,
                        onEditEmail: _ctx.onEdit
                      }, null, 8, ["emails", "emailheaders", "onEditEmail"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            back: withCtx(() => [
              createVNode(_component_employer_email_component, {
                employer: $data.employer,
                "saved-email": $data.selected,
                onSavedEmail: $options.onEmailSaved,
                onCancelAddEmail: _cache[2] || (_cache[2] = ($event) => $data.flipped = false)
              }, null, 8, ["employer", "saved-email", "onSavedEmail"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const EmailInformationComponent = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$r], ["__file", "/var/www/html/resources/js/components/Employer/Partial/Contact/EmailInformationComponent.vue"]]);
const _sfc_main$q = {
  name: "EmployerPhoneComponent",
  props: {
    employer: {
      type: Object,
      required: true
    },
    savedPhone: {
      type: Object,
      required: false
    }
  },
  computed: {
    saveButtonLabel() {
      return this.savedPhone ? "Save" : "save and close";
    },
    pageTitle() {
      return this.savedPhone ? "Edit Phone" : "New Phone";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    savedPhone: {
      handler(data) {
        this.setEditPhone();
      },
      deep: true
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/EmployerPhoneType").then((response) => {
      this.phoneTypes = response.data.data;
    });
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      phoneTypes: [],
      phone: { ContactStatusId: 4 },
      rules: {
        required: (value) => !!value || "Required.",
        phone: (value) => {
          const pattern = /^([0-9\(\)\/\+ \-]*)$/;
          return pattern.test(value) || "Please enter a valid phone number.";
        }
      },
      emptyPhone: {
        EmployerPhoneTypeId: null,
        ContactStatusId: 4,
        ContactSourceId: null,
        IsPreferred: false,
        isTextAllowed: false,
        CanContact: false,
        PhoneNumber: null,
        Extension: null,
        CanCallRestrictionId: null,
        EmployerId: this.employer.EmployerId
      }
    };
  },
  methods: {
    saveNewPhone() {
      this.phone.EmployerId = this.employer.EmployerId;
      this.phone.IsPreferred = typeof this.phone.IsPreferred === "undefined" || this.phone.IsPreferred === null ? false : this.phone.IsPreferred;
      this.phone.CanTextRestrictionId = this.phone.isTextAllowed === true ? 1 : 2;
      this.phone.CanCallRestrictionId = this.phone.isCallAllowed === true ? 1 : 2;
      if (this.savedPhone) {
        axios.put("/api/v2/EmployerPhone/" + this.savedPhone.EmployerPhoneId + "?include=ContactStatus,ContactSource", this.phone).then((response) => {
          this.handlePhoneSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/EmployerPhone?include=ContactStatus,ContactSource", this.phone).then((response) => {
          this.resetPhone();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Phone saved.";
          this.handlePhoneSaved(response.data.data, false, true);
        });
      }
    },
    saveClosePhone() {
      this.phone.EmployerId = this.employer.EmployerId;
      this.phone.IsPreferred = typeof this.phone.IsPreferred === "undefined" || this.phone.IsPreferred === null ? false : this.phone.IsPreferred;
      this.phone.CanTextRestrictionId = this.phone.isTextAllowed === true ? 1 : 2;
      this.phone.CanCallRestrictionId = this.phone.isCallAllowed === true ? 1 : 2;
      if (this.savedPhone) {
        axios.put("/api/v2/EmployerPhone/" + this.savedPhone.EmployerPhoneId + "?include=ContactStatus,ContactSource", this.phone).then((response) => {
          this.handlePhoneSaved(response.data.data, true, false);
        });
      } else {
        axios.post("/api/v2/EmployerPhone?include=ContactStatus,ContactSource", this.phone).then((response) => {
          this.resetPhone();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Phone saved.";
          this.handlePhoneSaved(response.data.data, true, true);
        });
      }
    },
    async onSave(event) {
      const { value } = event.submitter;
      const results = await event;
      if (!results.valid) {
        return;
      }
      if (value === "continue") {
        this.saveNewPhone();
      } else if (value === "close") {
        this.saveClosePhone();
      }
    },
    cancel() {
      this.setEditPhone();
      this.$emit("cancel-add-phone");
    },
    handlePhoneSaved(phoneData, flip, isNew) {
      this.$emit("saved-phone", { phone: phoneData, flip, isNew });
    },
    resetPhone() {
      for (const field in this.emptyPhone) {
        if (this.emptyPhone.hasOwnProperty(field)) {
          this.phone[field] = this.emptyPhone[field];
        }
      }
    },
    setEditPhone() {
      var _a2, _b;
      this.phone = clone(this.savedPhone) || clone(this.emptyPhone);
      if (this.savedPhone) {
        this.phone.isTextAllowed = ((_a2 = this.savedPhone) == null ? void 0 : _a2.CanTextRestrictionId) === 1;
        this.phone.isCallAllowed = ((_b = this.savedPhone) == null ? void 0 : _b.CanCallRestrictionId) === 1;
      }
    }
  }
};
const _hoisted_1$h = { class: "data-container" };
const _hoisted_2$h = { class: "data-container" };
const _hoisted_3$f = { class: "data-container" };
function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VForm, {
    ref: "form",
    modelValue: $data.valid,
    "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $data.valid = $event),
    "validate-on": "submit",
    onSubmit: withModifiers($options.onSave, ["prevent"])
  }, {
    default: withCtx(() => [
      createVNode(VCard, null, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($options.pageTitle),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              createVNode(VAlert, {
                type: $data.alertType,
                modelValue: $data.alert,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
                closable: "",
                "close-text": "Dismiss"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($data.alertText),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }, 8, ["type", "modelValue"]),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_1$h, [
                        createVNode(VSelect, {
                          items: $data.phoneTypes,
                          label: "Phone Type",
                          "item-value": "EmployerPhoneTypeId",
                          "item-title": "EmployerPhoneTypeName",
                          modelValue: $data.phone.EmployerPhoneTypeId,
                          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.phone.EmployerPhoneTypeId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_2$h, [
                        createVNode(VSelect, {
                          items: $options.contactStatus,
                          label: "Phone Status",
                          "item-value": "ContactStatusId",
                          "item-title": "ContactStatusName",
                          modelValue: $data.phone.ContactStatusId,
                          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.phone.ContactStatusId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", _hoisted_3$f, [
                        createVNode(VSelect, {
                          items: $options.contactSources,
                          "item-value": "ContactSourceId",
                          "item-title": "ContactSourceName",
                          label: "Phone Source",
                          modelValue: $data.phone.ContactSourceId,
                          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.phone.ContactSourceId = $event),
                          rules: [$data.rules.required],
                          variant: "underlined"
                        }, null, 8, ["items", "modelValue", "rules"])
                      ])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Phone Number",
                        rules: [$data.rules.required, $data.rules.phone],
                        modelValue: $data.phone.PhoneNumber,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.phone.PhoneNumber = $event),
                        maxlength: 20,
                        variant: "underlined"
                      }, null, 8, ["rules", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4"
                  }, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        label: "Extension",
                        modelValue: $data.phone.Extension,
                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.phone.Extension = $event),
                        maxlength: 10,
                        variant: "underlined"
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Preferred",
                        modelValue: $data.phone.IsPreferred,
                        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.phone.IsPreferred = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Text Allowed",
                        modelValue: $data.phone.isTextAllowed,
                        "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.phone.isTextAllowed = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, {
                    cols: "12",
                    lg: "4",
                    class: "switches"
                  }, {
                    default: withCtx(() => [
                      createVNode(VSwitch, {
                        color: "primary",
                        label: "Do Not Call",
                        modelValue: $data.phone.isCallAllowed,
                        "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.phone.isCallAllowed = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardActions, null, {
            default: withCtx(() => [
              createVNode(VSpacer),
              createVNode(VBtn, {
                onClick: _cache[9] || (_cache[9] = ($event) => $options.cancel()),
                variant: "elevated"
              }, {
                default: withCtx(() => _cache[11] || (_cache[11] = [
                  createTextVNode("Cancel")
                ])),
                _: 1
                /* STABLE */
              }),
              !$props.savedPhone ? (openBlock(), createBlock(VBtn, {
                key: 0,
                color: "secondary",
                type: "submit",
                variant: "elevated",
                value: "continue"
              }, {
                default: withCtx(() => _cache[12] || (_cache[12] = [
                  createTextVNode("Save and continue adding...")
                ])),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              createVNode(VBtn, {
                color: "success",
                type: "submit",
                variant: "elevated",
                value: "close"
              }, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($options.saveButtonLabel),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["modelValue", "onSubmit"]);
}
const EmployerPhoneComponent = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$q], ["__file", "/var/www/html/resources/js/components/Employer/Partial/Edit/Contact/EmployerPhoneComponent.vue"]]);
const _sfc_main$p = {
  name: "PhoneListComponent",
  props: {
    phoneHeaders: {
      type: Array,
      required: true
    },
    phones: {
      type: Array,
      required: true
    }
  }
};
const _hoisted_1$g = { key: 0 };
const _hoisted_2$g = { key: 0 };
function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VDataTable, {
    "hide-default-footer": true,
    headers: $props.phoneHeaders,
    items: $props.phones,
    class: "mobile-global-card-table",
    "mobile-breakpoint": 992
  }, {
    [`item.fullPhone`]: withCtx(({ item }) => [
      createBaseVNode(
        "span",
        null,
        toDisplayString(item.fullPhone),
        1
        /* TEXT */
      )
    ]),
    [`item.ContactStatus`]: withCtx(({ item }) => [
      item.ContactStatus ? (openBlock(), createElementBlock(
        "span",
        _hoisted_1$g,
        toDisplayString(item.ContactStatus.ContactStatusName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.ContactSource`]: withCtx(({ item }) => [
      item.ContactSource ? (openBlock(), createElementBlock(
        "span",
        _hoisted_2$g,
        toDisplayString(item.ContactSource.ContactSourceName),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)
    ]),
    [`item.CanTextRestrictionId`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VCheckbox, {
          "model-value": item.CanTextRestrictionId,
          disabled: ""
        }, null, 8, ["model-value"])
      ])
    ]),
    [`item.IsPreferred`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VCheckbox, {
          "model-value": item.IsPreferred,
          disabled: ""
        }, null, 8, ["model-value"])
      ])
    ]),
    [`item.CanCallRestrictionId`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VCheckbox, {
          "model-value": item.CanCallRestrictionId,
          disabled: ""
        }, null, 8, ["model-value"])
      ])
    ]),
    [`item.EmployerPhoneId`]: withCtx(({ item }) => [
      createBaseVNode("span", null, [
        createVNode(VBtn, {
          onClick: ($event) => _ctx.$emit("edit-phone", item)
        }, {
          default: withCtx(() => _cache[0] || (_cache[0] = [
            createTextVNode("Edit")
          ])),
          _: 2
          /* DYNAMIC */
        }, 1032, ["onClick"])
      ])
    ]),
    _: 2
    /* DYNAMIC */
  }, 1032, ["headers", "items"]);
}
const PhoneListComponent = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$p], ["__file", "/var/www/html/resources/js/components/Employer/Partial/Contact/PhoneListComponent.vue"]]);
const _sfc_main$o = {
  name: "PhoneInformationComponent",
  components: {
    EmployerPhoneComponent,
    PhoneListComponent,
    FlipCard
  },
  mixins: [markAsPreferredMixin, contactsMixin],
  props: {
    employerId: {
      type: String,
      required: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/employer/" + this.employerId + "?include=employerPhones,employerPhones.ContactSource,employerPhones.ContactStatus").then((response) => {
        this.phones = response.data.data.employerPhones;
        this.employer = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (!value) {
        this.getDataFromApi();
      }
    },
    getPhonesByType(typeId, ignoreTypes) {
      return this.phones.filter((address) => {
        return ignoreTypes.length > 0 ? !address.EmployerPhoneTypeId || ignoreTypes.indexOf(address.EmployerPhoneTypeId) === -1 : address.EmployerPhoneTypeId && address.EmployerPhoneTypeId === typeId;
      });
    },
    onPhoneSaved(event) {
      if (!event.phone) {
        return;
      }
      if (event.isNew) {
        this.phones.push(event.phone);
      } else {
        const index = this.phones.findIndex((phone) => {
          return phone.EmployerPhoneId === event.phone.EmployerPhoneId;
        });
        if (index >= 0) {
          this.phones[index] = event.phone;
        }
      }
      this.handleIsPreferred(this.phones, event.phone, "EmployerPhoneId", "EmployerPhoneTypeId");
      this.phones = [...this.phones];
      this.alertSuccessMessageForSave("Phone");
      if (event.flip) {
        this.flipped = false;
      }
    }
  },
  data() {
    return {
      phones: [],
      employer: {},
      flipped: false,
      phoneheaders: [
        { title: "Phone Number", value: "PhoneNumber" },
        { title: "Status", value: "ContactStatus" },
        { title: "Source", value: "ContactSource" },
        { title: "Preferred", value: "IsPreferred" },
        { title: "Text Allowed", value: "CanTextRestrictionId" },
        { title: "Do Not Call", value: "CanCallRestrictionId" },
        { title: "Action", value: "EmployerPhoneId" }
      ],
      selected: null
    };
  }
};
function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_phone_list_component = resolveComponent("phone-list-component");
  const _component_employer_phone_component = resolveComponent("employer-phone-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[3] || (_cache[3] = [
          createTextVNode(" Phones ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(_component_FlipCard, { flipped: $data.flipped }, {
            front: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "text-right" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        size: "small",
                        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.onAdd())
                      }, {
                        default: withCtx(() => _cache[4] || (_cache[4] = [
                          createTextVNode("Add new phone")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(VAlert, {
                        type: _ctx.alertType,
                        modelValue: _ctx.alert,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.alert = $event),
                        closable: "",
                        "close-text": "Dismiss"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(_ctx.alertText),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["type", "modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      _cache[5] || (_cache[5] = createBaseVNode(
                        "h4",
                        null,
                        "Main",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_phone_list_component, {
                        phones: $options.getPhonesByType(1, []),
                        "phone-headers": $data.phoneheaders,
                        onEditPhone: _ctx.onEdit
                      }, null, 8, ["phones", "phone-headers", "onEditPhone"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      _cache[6] || (_cache[6] = createBaseVNode(
                        "h4",
                        null,
                        "Other",
                        -1
                        /* HOISTED */
                      )),
                      createVNode(_component_phone_list_component, {
                        phones: $options.getPhonesByType(2, []),
                        "phone-headers": $data.phoneheaders,
                        onEditPhone: _ctx.onEdit
                      }, null, 8, ["phones", "phone-headers", "onEditPhone"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              _cache[7] || (_cache[7] = createBaseVNode(
                "h4",
                null,
                "Fax",
                -1
                /* HOISTED */
              )),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { cols: "12" }, {
                    default: withCtx(() => [
                      createVNode(_component_phone_list_component, {
                        phones: $options.getPhonesByType(3, []),
                        "phone-headers": $data.phoneheaders,
                        onEditPhone: _ctx.onEdit
                      }, null, 8, ["phones", "phone-headers", "onEditPhone"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            back: withCtx(() => [
              createVNode(_component_employer_phone_component, {
                employer: $data.employer,
                "saved-phone": $data.selected,
                onSavedPhone: $options.onPhoneSaved,
                onCancelAddPhone: _cache[2] || (_cache[2] = ($event) => $data.flipped = false)
              }, null, 8, ["employer", "saved-phone", "onSavedPhone"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["flipped"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const PhoneInformationComponent = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$o], ["__file", "/var/www/html/resources/js/components/Employer/Partial/Contact/PhoneInformationComponent.vue"]]);
const _sfc_main$n = {
  name: "EmployerJobClassComponent",
  data() {
    return {
      jobTitle: [],
      defaultSort: "LocalJobClassName",
      headers: [
        { title: "Local Job Class", value: "LocalJobClassName" },
        { title: "National Job Classification", value: "NationalJobClassName" },
        { title: "National Job Classification Code", value: "NationalJobClassCode" },
        { title: "Unit Name", value: "UnitName" },
        { title: "Job Title Count", value: "NumberOfJobTitles" }
      ]
    };
  },
  props: {
    employerId: {
      type: String,
      required: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/aggregate/employer/localjobclass/" + this.employerId;
      return axios.get(url).then((response) => {
        this.jobTitle = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (!value) {
        this.getDataFromApi();
      }
    }
  }
};
function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[0] || (_cache[0] = [
          createTextVNode(" Job Class ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "mobile-detail-col" }, {
                default: withCtx(() => [
                  createVNode(VDataTable, {
                    headers: $data.headers,
                    items: $data.jobTitle,
                    class: "v-outlined mobile-global-card-table",
                    "mobile-breakpoint": 992
                  }, null, 8, ["headers", "items"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const EmployerJobClassComponent = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["render", _sfc_render$n], ["__file", "/var/www/html/resources/js/components/Employer/Partial/EmployerJobClassComponent.vue"]]);
const _sfc_main$m = {
  name: "EmployerJobTitleComponent",
  data() {
    return {
      jobTitle: [],
      defaultSort: "JobTitleName",
      headers: [
        { title: "Job Title", value: "JobTitleName" },
        { title: "Local Job Class", value: "LocalJobClassName" },
        { title: "National Job Classification", value: "NationalJobClassName" },
        { title: "National Job Classification Code", value: "NationalJobClassCode" },
        { title: "Unit Name", value: "UnitName" }
      ]
    };
  },
  props: {
    employerId: {
      type: String,
      required: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/aggregate/employer/jobtitle/" + this.employerId;
      return axios.get(url).then((response) => {
        this.jobTitle = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (!value) {
        this.getDataFromApi();
      }
    }
  }
};
function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[0] || (_cache[0] = [
          createTextVNode(" Job Title ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "mobile-detail-col" }, {
                default: withCtx(() => [
                  createVNode(VDataTable, {
                    headers: $data.headers,
                    items: $data.jobTitle,
                    class: "v-outlined mobile-global-card-table",
                    "mobile-breakpoint": 992
                  }, null, 8, ["headers", "items"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const EmployerJobTitleComponent = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["render", _sfc_render$m], ["__file", "/var/www/html/resources/js/components/Employer/Partial/EmployerJobTitleComponent.vue"]]);
const _sfc_main$l = {
  name: "EmployerWorkStructureComponent",
  data() {
    return {
      loading: true,
      defaultSort: [{ key: "WorkLocationName", order: "asc" }],
      workLocation: [],
      headers: [
        { title: "Work Location Name", value: "WorkLocationName" },
        { title: "Type", value: "WorkLocationType.WorkLocationTypeName" },
        { title: "Code", value: "WorkLocationCode" },
        { title: "Area", value: "WorkLocationArea" },
        { title: "Publicly Accessible", value: "IsPubliclyAccessible" },
        { title: "Parent Work Location", value: "ParentWorkLocation.WorkLocationName" }
      ]
    };
  },
  props: {
    employerId: {
      type: String,
      required: true
    }
  },
  mounted() {
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/employer/" + this.employerId + "?include=WorkLocation.WorkLocationType,WorkLocation.ParentWorkLocation";
      return axios.get(url).then((response) => {
        this.workLocation = response.data.data.WorkLocation;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (!value) {
        this.getDataFromApi();
      }
    }
  }
};
const _hoisted_1$f = { key: 0 };
const _hoisted_2$f = { key: 1 };
function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[0] || (_cache[0] = [
          createTextVNode(" Work Location ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "mobile-detail-col" }, {
                default: withCtx(() => [
                  createVNode(VDataTable, {
                    headers: $data.headers,
                    items: $data.workLocation,
                    loading: $data.loading,
                    class: "v-outlined mobile-global-card-table",
                    "mobile-breakpoint": 992
                  }, {
                    [`item.IsPubliclyAccessible`]: withCtx(({ item }) => [
                      item.IsPubliclyAccessible == 1 ? (openBlock(), createElementBlock("span", _hoisted_1$f, "Yes")) : (openBlock(), createElementBlock("span", _hoisted_2$f, "No"))
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["headers", "items", "loading"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const EmployerWorkLocationComponent = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$l], ["__file", "/var/www/html/resources/js/components/Employer/Partial/EmployerWorkLocationComponent.vue"]]);
const _sfc_main$k = {
  name: "EmployerWorkStructureComponent",
  data() {
    return {
      totalEmployers: 0,
      defaultSort: "WorkStructureName",
      workStructure: [],
      headers: [
        { title: "Work Structure Name", value: "WorkStructureName" },
        { title: "Type", value: "WorkStructureType.WorkStructureTypeName" },
        { title: "Code", value: "WorkStructureCode" },
        { title: "Parent Work Structure", value: "ParentWorkStructure.WorkStructureName" }
      ]
    };
  },
  props: {
    employerId: {
      type: String,
      required: true
    }
  },
  mounted() {
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      let url = "/api/v2/employer/" + this.employerId + "?include=WorkStructure.WorkStructureType,WorkStructure.ParentWorkStructure";
      return axios.get(url).then((response) => {
        this.workStructure = response.data.data.WorkStructure;
      }).finally(() => {
        this.loading = false;
      });
    },
    onExpand({ value }) {
      if (!value) {
        this.getDataFromApi();
      }
    }
  }
};
function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VExpansionPanel, { "onGroup:selected": $options.onExpand }, {
    default: withCtx(() => [
      createVNode(VExpansionPanelTitle, null, {
        default: withCtx(() => _cache[0] || (_cache[0] = [
          createTextVNode(" Work Structure ")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VExpansionPanelText, null, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { class: "mobile-detail-col" }, {
                default: withCtx(() => [
                  createVNode(VDataTable, {
                    headers: $data.headers,
                    items: $data.workStructure,
                    class: "v-outlined mobile-global-card-table",
                    "mobile-breakpoint": 992
                  }, null, 8, ["headers", "items"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onGroup:selected"]);
}
const EmployerWorkStructureComponent = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$k], ["__file", "/var/www/html/resources/js/components/Employer/Partial/EmployerWorkStructureComponent.vue"]]);
const _sfc_main$j = {
  name: "EmployerDetailsComponent",
  components: {
    "address-information-component": AddressInformationComponent,
    "email-information-component": EmailInformationComponent,
    "phone-information-component": PhoneInformationComponent,
    "employer-work-structure-component": EmployerWorkStructureComponent,
    "employer-work-location-component": EmployerWorkLocationComponent,
    "employer-job-title-component": EmployerJobTitleComponent,
    "employer-job-class-component": EmployerJobClassComponent
  },
  data() {
    return {
      id: "",
      employer: {},
      loading: false,
      notAllowed: false
    };
  },
  props: {
    employerId: {
      type: Number,
      required: false
    },
    isExpandedMobileResults: {
      type: Boolean,
      default: false
    }
  },
  mounted() {
    if (this.$route.params.id) {
      this.id = this.$route.params.id;
    } else {
      this.id = this.employerId;
    }
    this.getDataFromApi();
  },
  methods: {
    preferredPhones(phones) {
      return phones.filter((phone) => phone.IsPreferred);
    },
    swipe(direction) {
      this.$emit("swipeToClose");
    },
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/employer/" + this.id + "?include=EmployerType,EmployerMainPhones.ContactSource,EmployerMainEmails,Chapter.Affiliate,ParentEmployer").then((response) => {
        this.employer = response.data.data;
      }).catch(() => {
        this.notAllowed = true;
        this.$router.push({ name: "Employers" });
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$e = { key: 0 };
const _hoisted_2$e = { key: 0 };
const _hoisted_3$e = { class: "data-container" };
const _hoisted_4$e = {
  key: 0,
  class: "data-value"
};
const _hoisted_5$e = { class: "data-container" };
const _hoisted_6$d = { class: "data-value" };
const _hoisted_7$a = { class: "data-container" };
const _hoisted_8$6 = { class: "data-value" };
const _hoisted_9$6 = { class: "data-container" };
const _hoisted_10$4 = {
  key: 0,
  class: "data-value"
};
const _hoisted_11$4 = { class: "data-container" };
const _hoisted_12$4 = { class: "data-value" };
const _hoisted_13$2 = { class: "data-container" };
const _hoisted_14$2 = {
  key: 0,
  class: "data-value"
};
const _hoisted_15$2 = { class: "data-container" };
const _hoisted_16$2 = {
  key: 0,
  class: "data-value"
};
const _hoisted_17$2 = { class: "data-container" };
const _hoisted_18$2 = {
  key: 0,
  class: "data-value"
};
const _hoisted_19$2 = { class: "pt-4" };
const _hoisted_20$1 = { key: 1 };
const _hoisted_21$1 = {
  key: 0,
  class: "mobile-link-style"
};
const _hoisted_22$1 = ["href"];
const _hoisted_23$1 = { key: 1 };
const _hoisted_24$1 = { class: "data-container" };
const _hoisted_25$1 = {
  key: 0,
  class: "data-value"
};
const _hoisted_26$1 = { class: "data-container" };
const _hoisted_27$1 = { class: "data-value" };
const _hoisted_28$1 = { class: "data-container" };
const _hoisted_29$1 = { class: "data-value" };
const _hoisted_30$1 = { class: "data-container" };
const _hoisted_31$1 = {
  key: 0,
  class: "data-value"
};
const _hoisted_32$1 = { class: "data-container" };
const _hoisted_33$1 = {
  key: 0,
  class: "data-value"
};
const _hoisted_34 = { class: "data-container" };
const _hoisted_35 = {
  key: 0,
  class: "data-value"
};
const _hoisted_36 = { class: "data-container" };
const _hoisted_37 = {
  key: 0,
  class: "data-value"
};
function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_address_information_component = resolveComponent("address-information-component");
  const _component_email_information_component = resolveComponent("email-information-component");
  const _component_phone_information_component = resolveComponent("phone-information-component");
  const _component_employer_work_structure_component = resolveComponent("employer-work-structure-component");
  const _component_employer_work_location_component = resolveComponent("employer-work-location-component");
  const _component_employer_job_title_component = resolveComponent("employer-job-title-component");
  const _component_employer_job_class_component = resolveComponent("employer-job-class-component");
  const _component_router_link = resolveComponent("router-link");
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VProgressLinear, {
        active: $data.loading,
        indeterminate: true,
        color: "#7bb8da"
      }, null, 8, ["active"]),
      createVNode(VAlert, {
        type: "error",
        modelValue: $data.notAllowed,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.notAllowed = $event)
      }, {
        default: withCtx(() => _cache[1] || (_cache[1] = [
          createTextVNode("You do not have access to this record. Please check your global filter to ensure you have the correct Affiliate selected.")
        ])),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"]),
      !$data.notAllowed ? (openBlock(), createElementBlock("div", _hoisted_1$e, [
        !$props.isExpandedMobileResults ? (openBlock(), createElementBlock("div", _hoisted_2$e, [
          createVNode(VCard, null, {
            default: withCtx(() => [
              createVNode(VCardTitle, null, {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString($data.employer.EmployerName ?? "N/A"),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCardText, null, {
                default: withCtx(() => [
                  createVNode(VRow, null, {
                    default: withCtx(() => [
                      createVNode(VCol, null, {
                        default: withCtx(() => [
                          createBaseVNode("div", _hoisted_3$e, [
                            _cache[2] || (_cache[2] = createBaseVNode(
                              "div",
                              { class: "data-tag" },
                              "Employer Type:",
                              -1
                              /* HOISTED */
                            )),
                            $data.employer.EmployerType ? (openBlock(), createElementBlock(
                              "div",
                              _hoisted_4$e,
                              toDisplayString($data.employer.EmployerType.EmployerTypeName),
                              1
                              /* TEXT */
                            )) : createCommentVNode("v-if", true)
                          ]),
                          createBaseVNode("div", _hoisted_5$e, [
                            _cache[3] || (_cache[3] = createBaseVNode(
                              "div",
                              { class: "data-tag" },
                              "Employer Code:",
                              -1
                              /* HOISTED */
                            )),
                            createBaseVNode(
                              "div",
                              _hoisted_6$d,
                              toDisplayString($data.employer.Code),
                              1
                              /* TEXT */
                            )
                          ]),
                          createBaseVNode("div", _hoisted_7$a, [
                            _cache[4] || (_cache[4] = createBaseVNode(
                              "div",
                              { class: "data-tag" },
                              "Acronym:",
                              -1
                              /* HOISTED */
                            )),
                            createBaseVNode(
                              "div",
                              _hoisted_8$6,
                              toDisplayString($data.employer.Acronym),
                              1
                              /* TEXT */
                            )
                          ]),
                          createBaseVNode("div", _hoisted_9$6, [
                            _cache[5] || (_cache[5] = createBaseVNode(
                              "div",
                              { class: "data-tag" },
                              "Parent Employer:",
                              -1
                              /* HOISTED */
                            )),
                            $data.employer.ParentEmployer ? (openBlock(), createElementBlock(
                              "div",
                              _hoisted_10$4,
                              toDisplayString($data.employer.ParentEmployer.EmployerName),
                              1
                              /* TEXT */
                            )) : createCommentVNode("v-if", true)
                          ]),
                          createBaseVNode("div", _hoisted_11$4, [
                            _cache[6] || (_cache[6] = createBaseVNode(
                              "div",
                              { class: "data-tag" },
                              "Employer Website:",
                              -1
                              /* HOISTED */
                            )),
                            createBaseVNode(
                              "div",
                              _hoisted_12$4,
                              toDisplayString($data.employer.WebsiteURL),
                              1
                              /* TEXT */
                            )
                          ])
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VCol, null, {
                        default: withCtx(() => [
                          createBaseVNode("div", _hoisted_13$2, [
                            _cache[7] || (_cache[7] = createBaseVNode(
                              "div",
                              { class: "data-tag" },
                              "Phone:",
                              -1
                              /* HOISTED */
                            )),
                            $data.employer.EmployerMainPhones && $data.employer.EmployerMainPhones.length > 0 ? (openBlock(), createElementBlock("div", _hoisted_14$2, [
                              (openBlock(true), createElementBlock(
                                Fragment,
                                null,
                                renderList($options.preferredPhones($data.employer.EmployerMainPhones), (mainPhones) => {
                                  return openBlock(), createElementBlock(
                                    "span",
                                    {
                                      key: mainPhones.EmployerPhoneId
                                    },
                                    toDisplayString(mainPhones.PhoneNumber),
                                    1
                                    /* TEXT */
                                  );
                                }),
                                128
                                /* KEYED_FRAGMENT */
                              ))
                            ])) : createCommentVNode("v-if", true)
                          ]),
                          createBaseVNode("div", _hoisted_15$2, [
                            _cache[8] || (_cache[8] = createBaseVNode(
                              "div",
                              { class: "data-tag" },
                              "Email:",
                              -1
                              /* HOISTED */
                            )),
                            $data.employer.EmployerMainEmails && $data.employer.EmployerMainEmails.length > 0 ? (openBlock(), createElementBlock(
                              "div",
                              _hoisted_16$2,
                              toDisplayString($data.employer.EmployerMainEmails[0].Email),
                              1
                              /* TEXT */
                            )) : createCommentVNode("v-if", true)
                          ]),
                          createBaseVNode("div", _hoisted_17$2, [
                            _cache[9] || (_cache[9] = createBaseVNode(
                              "div",
                              { class: "data-tag" },
                              "Associated with:",
                              -1
                              /* HOISTED */
                            )),
                            $data.employer.Chapter && $data.employer.Chapter.Affiliate ? (openBlock(), createElementBlock(
                              "div",
                              _hoisted_18$2,
                              toDisplayString($data.employer.Chapter.Affiliate.AffiliateName) + " - " + toDisplayString($data.employer.Chapter.Affiliate.AffiliateNumber),
                              1
                              /* TEXT */
                            )) : createCommentVNode("v-if", true)
                          ])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createBaseVNode("div", _hoisted_19$2, [
            createVNode(VExpansionPanels, null, {
              default: withCtx(() => [
                createVNode(_component_address_information_component, {
                  employerId: _ctx.$route.params.id
                }, null, 8, ["employerId"]),
                createVNode(_component_email_information_component, {
                  employerId: _ctx.$route.params.id
                }, null, 8, ["employerId"]),
                createVNode(_component_phone_information_component, {
                  employerId: _ctx.$route.params.id
                }, null, 8, ["employerId"]),
                createVNode(_component_employer_work_structure_component, {
                  employerId: _ctx.$route.params.id
                }, null, 8, ["employerId"]),
                createVNode(_component_employer_work_location_component, {
                  employerId: _ctx.$route.params.id
                }, null, 8, ["employerId"]),
                createVNode(_component_employer_job_title_component, {
                  employerId: _ctx.$route.params.id
                }, null, 8, ["employerId"]),
                createVNode(_component_employer_job_class_component, {
                  employerId: _ctx.$route.params.id
                }, null, 8, ["employerId"])
              ]),
              _: 1
              /* STABLE */
            })
          ])
        ])) : createCommentVNode("v-if", true),
        $props.isExpandedMobileResults ? withDirectives((openBlock(), createElementBlock("div", _hoisted_20$1, [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                class: "mobile-employer-name"
              }, {
                default: withCtx(() => [
                  $data.employer.EmployerName ? (openBlock(), createElementBlock("h3", _hoisted_21$1, [
                    createBaseVNode("a", {
                      href: "/employers/" + $data.employer.EmployerId
                    }, toDisplayString($data.employer.EmployerName), 9, _hoisted_22$1)
                  ])) : (openBlock(), createElementBlock("h3", _hoisted_23$1, "N/A"))
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          _cache[17] || (_cache[17] = createBaseVNode(
            "div",
            { class: "mobile-link-note-container" },
            [
              createBaseVNode("div", { class: "data-value" }, [
                createBaseVNode("span", null, "Click on the name to view and edit the employer record")
              ])
            ],
            -1
            /* HOISTED */
          )),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_24$1, [
                    _cache[10] || (_cache[10] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Employer Type:",
                      -1
                      /* HOISTED */
                    )),
                    $data.employer.EmployerType ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_25$1,
                      toDisplayString($data.employer.EmployerType.EmployerTypeName),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_26$1, [
                    _cache[11] || (_cache[11] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Employer Code:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode(
                      "div",
                      _hoisted_27$1,
                      toDisplayString($data.employer.Code),
                      1
                      /* TEXT */
                    )
                  ]),
                  createBaseVNode("div", _hoisted_28$1, [
                    _cache[12] || (_cache[12] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Acronym:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode(
                      "div",
                      _hoisted_29$1,
                      toDisplayString($data.employer.Acronym),
                      1
                      /* TEXT */
                    )
                  ]),
                  createBaseVNode("div", _hoisted_30$1, [
                    _cache[13] || (_cache[13] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Parent Employer:",
                      -1
                      /* HOISTED */
                    )),
                    $data.employer.ParentEmployer ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_31$1,
                      toDisplayString($data.employer.ParentEmployer.EmployerName),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_32$1, [
                    _cache[14] || (_cache[14] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Phone:",
                      -1
                      /* HOISTED */
                    )),
                    $data.employer.EmployerMainPhones && $data.employer.EmployerMainPhones.length > 0 ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_33$1,
                      toDisplayString($data.employer.EmployerMainPhones[0].PhoneNumber),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_34, [
                    _cache[15] || (_cache[15] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Email:",
                      -1
                      /* HOISTED */
                    )),
                    $data.employer.EmployerMainEmails && $data.employer.EmployerMainEmails.length > 0 ? (openBlock(), createElementBlock(
                      "div",
                      _hoisted_35,
                      toDisplayString($data.employer.EmployerMainEmails[0].Email),
                      1
                      /* TEXT */
                    )) : createCommentVNode("v-if", true)
                  ]),
                  createBaseVNode("div", _hoisted_36, [
                    _cache[16] || (_cache[16] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Associated with:",
                      -1
                      /* HOISTED */
                    )),
                    $data.employer.Chapter && $data.employer.Chapter.Affiliate ? (openBlock(), createElementBlock("div", _hoisted_37, [
                      createVNode(_component_router_link, {
                        to: { name: "AffiliateDisplay", params: { id: $data.employer.Chapter.Affiliate.AffiliateId } }
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString($data.employer.Chapter.Affiliate.AffiliateName) + " - " + toDisplayString($data.employer.Chapter.Affiliate.AffiliateNumber),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["to"])
                    ])) : createCommentVNode("v-if", true)
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ])), [
          [Touch, { right: () => $options.swipe("right") }]
        ]) : createCommentVNode("v-if", true)
      ])) : createCommentVNode("v-if", true)
    ]),
    _: 1
    /* STABLE */
  });
}
const EmployerDetailsComponent = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$j], ["__file", "/var/www/html/resources/js/components/Employer/EmployerDetailsComponent.vue"]]);
const _sfc_main$i = {
  name: "EmployerListComponent",
  mixins: [headersMixin, configurationMixin, paginationUrlMixin],
  components: {
    "chooser-component": ColumnChooserComponent,
    "basic-data-component": EmployerDetailsComponent
  },
  data: () => ({
    employerAffiliate: {},
    employerId: false,
    employerName: "",
    totalEmployers: 0,
    employers: [],
    loading: true,
    showLabel: true,
    options: {
      sortBy: [{ key: "EmployerName", order: "asc" }],
      page: 1,
      itemsPerPage: 10
    },
    filters: [],
    headers: [],
    hasSelectedItem: false,
    selectedItem: []
  }),
  created() {
    this.debounceInput = debounce(function(search, propertyName) {
      this.filters[propertyName].value = search;
      this.getDataFromApi();
    }, 500);
  },
  beforeMount() {
    if (this.$route.params.id) {
      this.id = parseInt(this.$route.params.id);
    } else {
      this.id = this.getAffiliateId();
    }
  },
  mounted() {
    this.initConfiguration();
  },
  watch: {
    options: {
      handler() {
        this.getAffiliateDataFromApi();
        this.getDataFromApi();
      },
      deep: true,
      immediate: true
    }
  },
  methods: {
    loadConfiguration(key2) {
      this.getConfiguration("employer", key2).then((response) => {
        this.headers = this.parseHiddenColumn(response.data.fields);
        this.filters = this.parseQueryParams(response.data.filters);
        this.setPresetData(response.data);
        this.showLabel = false;
      });
    },
    initConfiguration() {
      this.getConfiguration("employer", "").then((response) => {
        this.headers = this.parseHiddenColumn(response.data.fields);
        this.filters = this.parseQueryParams(response.data.filters);
        this.setPresetData(response.data);
        this.showLabel = false;
      });
    },
    displaySelectedRow(value) {
      this.hasSelectedItem = true;
      this.selectedItem = value;
    },
    getDataFromApi() {
      this.loading = true;
      const { sortBy, page, itemsPerPage } = this.options;
      const sortDefault = sortBy[0] ?? { key: "EmployerName", order: "asc" };
      let sortByField = sortDefault.key ?? "EmployerName";
      const sortDirection = sortDefault.order === "asc" ? "" : "-";
      let url = "/api/v2/employer?page=" + page + "&per_page=" + itemsPerPage + "&sort=" + sortDirection + sortByField + "&include=EmployerType,EmployerMainPhones,EmployerMainEmails,ParentEmployer,EmployerMainAddresses.StateTerritory,Chapter.Affiliate";
      let filter = "";
      filter += "&filter[Employer.IsStructural]=0";
      if (filter !== "") {
        url += filter;
      }
      this.updateQueryParams(this.options, this.filters, this.headers);
      return axios.get(url).then((response) => {
        this.employers = response.data.data;
        this.totalEmployers = response.data.meta.total;
      }).finally(() => {
        this.loading = false;
      });
    },
    getAffiliateId() {
      return this.$store.getters["user/selectedAffiliate"].AffiliateId;
    },
    getAffiliateDataFromApi() {
      this.loading = true;
      const id = this.id ?? this.getAffiliateId();
      let url = "/api/v2/aggregate/affiliate/detail/" + id + "?scope=global";
      return axios.get(url).then((response) => {
        this.employerAffiliate = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$d = { class: "hidden-md-and-down" };
const _hoisted_2$d = ["href"];
const _hoisted_3$d = { key: 0 };
const _hoisted_4$d = { key: 0 };
const _hoisted_5$d = { key: 0 };
const _hoisted_6$c = { key: 0 };
const _hoisted_7$9 = { key: 0 };
const _hoisted_8$5 = { key: 0 };
const _hoisted_9$5 = { key: 0 };
const _hoisted_10$3 = { key: 1 };
const _hoisted_11$3 = { class: "hidden-lg-and-up" };
const _hoisted_12$3 = { class: "tr-mobile-individual" };
const _hoisted_13$1 = { class: "v-data-table__mobile-row mobile-row-header td-mobile-padding custom-mobile-row" };
const _hoisted_14$1 = {
  key: 0,
  class: "v-data-table__mobile-row td-mobile-padding custom-mobile-row"
};
const _hoisted_15$1 = { key: 0 };
const _hoisted_16$1 = { key: 1 };
const _hoisted_17$1 = { class: "td-mobile-padding" };
const _hoisted_18$1 = { key: 1 };
const _hoisted_19$1 = { class: "mobile-selected-item-container" };
function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_chooser_component = resolveComponent("chooser-component");
  const _component_router_link = resolveComponent("router-link");
  const _component_basic_data_component = resolveComponent("basic-data-component");
  return openBlock(), createElementBlock("div", null, [
    createBaseVNode("div", _hoisted_1$d, [
      createVNode(VContainer, { fluid: "" }, {
        default: withCtx(() => [
          createBaseVNode(
            "h2",
            null,
            "Employers for " + toDisplayString(_ctx.employerAffiliate.AffiliateName) + " - " + toDisplayString(_ctx.employerAffiliate.AffiliateNumber),
            1
            /* TEXT */
          ),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { cols: "12" }, {
                default: withCtx(() => [
                  createVNode(VDataTableServer, {
                    headers: _ctx.getHeaders(_ctx.headers),
                    items: _ctx.employers,
                    options: _ctx.options,
                    "onUpdate:options": _cache[4] || (_cache[4] = ($event) => _ctx.options = $event),
                    "items-length": _ctx.totalEmployers,
                    loading: _ctx.loading,
                    "items-per-page-options": _ctx.getItemsPerPageOptions(),
                    class: "v-outlined employer-results-table"
                  }, {
                    top: withCtx(() => [
                      createVNode(VRow, null, {
                        default: withCtx(() => [
                          createVNode(VCol, null, {
                            default: withCtx(() => [
                              createVNode(_component_chooser_component, {
                                columns: _ctx.headers,
                                presets: _ctx.presets,
                                selectedPreset: _ctx.selectedPreset,
                                onApplied: _cache[0] || (_cache[0] = ($event) => _ctx.onHeaderChangeApplied("employer", $event)),
                                onPresetLoad: _cache[1] || (_cache[1] = ($event) => $options.loadConfiguration($event))
                              }, null, 8, ["columns", "presets", "selectedPreset"])
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, null, {
                            default: withCtx(() => [
                              createVNode(VDataTableFooter)
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    bottom: withCtx(() => [
                      createVNode(VRow, null, {
                        default: withCtx(() => [
                          createVNode(VCol, null, {
                            default: withCtx(() => [
                              createVNode(_component_chooser_component, {
                                columns: _ctx.headers,
                                presets: _ctx.presets,
                                selectedPreset: _ctx.selectedPreset,
                                onApplied: _cache[2] || (_cache[2] = ($event) => _ctx.onHeaderChangeApplied("employer", $event)),
                                onPresetLoad: _cache[3] || (_cache[3] = ($event) => $options.loadConfiguration($event))
                              }, null, 8, ["columns", "presets", "selectedPreset"])
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, null, {
                            default: withCtx(() => [
                              createVNode(VDataTableFooter)
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    loading: withCtx(() => [
                      createVNode(VProgressLinear, {
                        indeterminate: "",
                        height: "8",
                        color: "#3f98c9"
                      })
                    ]),
                    [`item.EmployerName`]: withCtx(({ item }) => [
                      createBaseVNode("div", null, [
                        createBaseVNode("a", {
                          href: "/employers/" + item.EmployerId
                        }, toDisplayString(item.EmployerName), 9, _hoisted_2$d)
                      ])
                    ]),
                    [`item.EmployerType`]: withCtx(({ item }) => [
                      item.EmployerType ? (openBlock(), createElementBlock(
                        "div",
                        _hoisted_3$d,
                        toDisplayString(item.EmployerType.EmployerTypeName),
                        1
                        /* TEXT */
                      )) : createCommentVNode("v-if", true)
                    ]),
                    [`item.EmployerMainPhones`]: withCtx(({ item }) => [
                      item.EmployerMainPhones && item.EmployerMainPhones.length > 0 ? (openBlock(), createElementBlock(
                        "div",
                        _hoisted_4$d,
                        toDisplayString(item.EmployerMainPhones[0].PhoneNumber),
                        1
                        /* TEXT */
                      )) : createCommentVNode("v-if", true)
                    ]),
                    [`item.ParentEmployer`]: withCtx(({ item }) => [
                      item.ParentEmployer ? (openBlock(), createElementBlock(
                        "div",
                        _hoisted_5$d,
                        toDisplayString(item.ParentEmployer.EmployerName),
                        1
                        /* TEXT */
                      )) : createCommentVNode("v-if", true)
                    ]),
                    [`item.Chapter.Affiliate`]: withCtx(({ item }) => [
                      item.Chapter && item.Chapter.Affiliate ? (openBlock(), createElementBlock("div", _hoisted_6$c, [
                        createVNode(_component_router_link, {
                          to: { name: "AffiliateDisplay", params: { id: item.Chapter.Affiliate.AffiliateId } }
                        }, {
                          default: withCtx(() => [
                            createTextVNode(
                              toDisplayString(item.Chapter.Affiliate.AffiliateName),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        }, 1032, ["to"])
                      ])) : createCommentVNode("v-if", true)
                    ]),
                    [`item.EmployerMainEmails`]: withCtx(({ item }) => [
                      item.EmployerMainEmails && item.EmployerMainEmails.length > 0 ? (openBlock(), createElementBlock(
                        "div",
                        _hoisted_7$9,
                        toDisplayString(item.EmployerMainEmails[0].Email),
                        1
                        /* TEXT */
                      )) : createCommentVNode("v-if", true)
                    ]),
                    [`item.EmployerMainAddresses`]: withCtx(({ item }) => [
                      item.EmployerMainAddresses && item.EmployerMainAddresses.length > 0 ? (openBlock(), createElementBlock("div", _hoisted_8$5, [
                        createTextVNode(
                          toDisplayString(item.EmployerMainAddresses[0].AddressLine1) + " ",
                          1
                          /* TEXT */
                        ),
                        item.EmployerMainAddresses[0].AddressLine2 ? (openBlock(), createElementBlock(
                          "span",
                          _hoisted_9$5,
                          ", " + toDisplayString(item.EmployerMainAddresses[0].AddressLine2),
                          1
                          /* TEXT */
                        )) : createCommentVNode("v-if", true),
                        item.EmployerMainAddresses[0].StateTerritory ? (openBlock(), createElementBlock(
                          "div",
                          _hoisted_10$3,
                          toDisplayString(item.EmployerMainAddresses[0].City) + ", " + toDisplayString(item.EmployerMainAddresses[0].StateTerritory.StateTerritoryCode) + " " + toDisplayString(item.EmployerMainAddresses[0].PostalCode),
                          1
                          /* TEXT */
                        )) : createCommentVNode("v-if", true)
                      ])) : createCommentVNode("v-if", true)
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["headers", "items", "options", "items-length", "loading", "items-per-page-options"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    createCommentVNode(" MOBILE Breakpoint "),
    createBaseVNode("div", _hoisted_11$3, [
      !_ctx.hasSelectedItem ? (openBlock(), createBlock(VCol, { key: 0 }, {
        default: withCtx(() => [
          createVNode(VDataTableServer, {
            headers: _ctx.getHeaders(_ctx.headers),
            items: _ctx.employers,
            options: _ctx.options,
            "onUpdate:options": _cache[5] || (_cache[5] = ($event) => _ctx.options = $event),
            "items-length": _ctx.totalEmployers,
            loading: _ctx.loading,
            "mobile-breakpoint": 1024,
            "hide-default-header": "",
            class: "elevation-1 mobile-word-break mobile-employer-table",
            "onClick:row": $options.displaySelectedRow,
            "items-per-page-options": _ctx.getItemsPerPageOptions()
          }, {
            item: withCtx((row) => [
              createBaseVNode("tr", _hoisted_12$3, [
                createBaseVNode(
                  "td",
                  _hoisted_13$1,
                  toDisplayString(row.item.EmployerName),
                  1
                  /* TEXT */
                ),
                row.item.EmployerMainAddresses && row.item.EmployerMainAddresses.length > 0 ? (openBlock(), createElementBlock("td", _hoisted_14$1, [
                  createTextVNode(
                    toDisplayString(row.item.EmployerMainAddresses[0].AddressLine1) + " ",
                    1
                    /* TEXT */
                  ),
                  row.item.EmployerMainAddresses[0].AddressLine2 ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_15$1,
                    ", " + toDisplayString(row.item.EmployerMainAddresses[0].AddressLine2),
                    1
                    /* TEXT */
                  )) : createCommentVNode("v-if", true),
                  row.item.EmployerMainAddresses[0].StateTerritory ? (openBlock(), createElementBlock(
                    "div",
                    _hoisted_16$1,
                    toDisplayString(row.item.EmployerMainAddresses[0].City) + ", " + toDisplayString(row.item.EmployerMainAddresses[0].StateTerritory.StateTerritoryCode) + " " + toDisplayString(row.item.EmployerMainAddresses[0].PostalCode),
                    1
                    /* TEXT */
                  )) : createCommentVNode("v-if", true)
                ])) : createCommentVNode("v-if", true),
                createBaseVNode("td", _hoisted_17$1, [
                  createVNode(VBtn, {
                    size: "small",
                    icon: "mdi:mdi-menu-down",
                    onClick: ($event) => $options.displaySelectedRow(row.item)
                  }, null, 8, ["onClick"])
                ])
              ])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["headers", "items", "options", "items-length", "loading", "onClick:row", "items-per-page-options"])
        ]),
        _: 1
        /* STABLE */
      })) : createCommentVNode("v-if", true),
      _ctx.hasSelectedItem ? (openBlock(), createElementBlock("div", _hoisted_18$1, [
        _ctx.hasSelectedItem ? (openBlock(), createBlock(VToolbar, {
          key: 0,
          density: "compact",
          elevation: "0",
          class: "hidden-lg-and-up mobile-has-selected-row"
        }, {
          default: withCtx(() => [
            createVNode(VSpacer),
            createVNode(VBtn, {
              icon: "mdi:mdi-close",
              onClick: _cache[6] || (_cache[6] = ($event) => _ctx.hasSelectedItem = false)
            })
          ]),
          _: 1
          /* STABLE */
        })) : createCommentVNode("v-if", true),
        createBaseVNode("div", _hoisted_19$1, [
          createVNode(_component_basic_data_component, {
            onSwipeToClose: _cache[7] || (_cache[7] = ($event) => _ctx.hasSelectedItem = false),
            employerId: _ctx.selectedItem.EmployerId,
            isExpandedMobileResults: true
          }, null, 8, ["employerId"])
        ])
      ])) : createCommentVNode("v-if", true)
    ])
  ]);
}
const EmployerListComponent = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$i], ["__file", "/var/www/html/resources/js/components/Employer/EmployerListComponent.vue"]]);
const _sfc_main$h = {
  name: "EmployerSearchComponent.vue",
  mixins: [headersMixin, configurationMixin, paginationUrlMixin, dataTablesMixin],
  components: { StateTerritorySelectComponent, "chooser-component": ColumnChooserComponent, AffiliateSwitchComponent },
  data: () => ({
    employers: [],
    totalEmployers: 0,
    loading: false,
    options: {
      sortBy: [{ key: "EmployerId", order: "asc" }],
      page: 1,
      itemsPerPage: 10
    },
    headers: [],
    filters: null,
    filterId: {
      EmployerName: 0,
      "Chapter.Affiliate.AffiliateName": 1,
      "Chapter.Affiliate.AffiliateNumber": 2,
      "EmployerMainAddresses.City": 3,
      "EmployerMainAddresses.StateTerritory.StateTerritoryName": 4
    }
  }),
  watch: {
    options: {
      handler() {
        if (this.filters) {
          this.search();
        }
      },
      deep: true
    }
  },
  mounted() {
    this.initConfiguration();
    const dataTable = document.querySelector(".v-data-table__wrapper");
    const topScroll = document.querySelector(".search-top-scroller");
    $(dataTable).on("scroll", function(e) {
      $(topScroll).scrollLeft($(dataTable).scrollLeft());
    });
  },
  methods: {
    loadConfiguration(key2) {
      this.getConfiguration("employerSearch", key2).then((response) => {
        this.headers = response.data.fields;
        this.configCommon(response);
        this.updateQueryParams(this.options, this.filters, this.headers);
      });
    },
    configCommon(response) {
      this.filters = this.parseQueryParams(response.data.filters);
      this.setPresetData(response.data);
      this.filters.forEach((filter, index) => {
        this.filterId[filter.name] = index;
      });
      this.search();
    },
    initConfiguration() {
      this.getConfiguration("employerSearch", "").then((response) => {
        this.headers = this.parseHiddenColumn(response.data.fields);
        this.configCommon(response);
        this.search();
      });
    },
    clear() {
      if (this.filters) this.filters.map((filter) => {
        filter.value = "";
      });
      this.search();
    },
    getFilter(field) {
      if (this.filters) {
        return this.filters.filter((filter) => filter.name === field);
      }
      return null;
    },
    search() {
      this.loading = true;
      const { sortBy, page, itemsPerPage } = this.options;
      const sortDefault = sortBy[0] ?? { key: "EmployerId", order: "asc" };
      const sortByField = sortDefault.key ?? "EmployerId";
      const sortDirection = sortDefault.order === "asc" ? "" : "-";
      let url = "/api/v2/employer?scope=global&page=" + page + "&per_page=" + itemsPerPage + "&sort=" + sortDirection + sortByField + "&include=EmployerMainAddresses,EmployerMainAddresses.StateTerritory,Chapter.Affiliate";
      let filterUrl = "";
      filterUrl += "&filter[Employer.IsStructural]=0";
      if (this.filters) this.filters.map((filter) => {
        if (filter.value !== "") {
          filterUrl += "&filter[" + filter.name + "]=" + filter.value;
        }
      });
      if (filterUrl !== "") {
        url += filterUrl;
      }
      if (this.filters) {
        this.updateQueryParams(this.options, this.filters, this.headers);
      }
      return axios.get(url).then((response) => {
        this.employers = response.data.data;
        this.totalEmployers = response.data.meta.total;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$c = { class: "filter-row" };
const _hoisted_2$c = { key: 0 };
const _hoisted_3$c = { key: 0 };
const _hoisted_4$c = { key: 0 };
const _hoisted_5$c = { key: 0 };
function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_StateTerritorySelectComponent = resolveComponent("StateTerritorySelectComponent");
  const _component_AffiliateSwitchComponent = resolveComponent("AffiliateSwitchComponent");
  const _component_router_link = resolveComponent("router-link");
  const _component_chooser_component = resolveComponent("chooser-component");
  return openBlock(), createBlock(VContainer, {
    fluid: "",
    onKeyup: withKeys($options.search, ["enter"])
  }, {
    default: withCtx(() => [
      createVNode(VCard, { class: "v-card--outlined v-sheet--tile mt-4 pa-4 mobile-search-container" }, {
        default: withCtx(() => [
          createBaseVNode("div", _hoisted_1$c, [
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, {
                  cols: "12",
                  lg: "4"
                }, {
                  default: withCtx(() => _cache[11] || (_cache[11] = [
                    createBaseVNode(
                      "h3",
                      null,
                      "Search for Employers",
                      -1
                      /* HOISTED */
                    )
                  ])),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            _ctx.filters ? (openBlock(), createBlock(VRow, { key: 0 }, {
              default: withCtx(() => [
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "underlined",
                      key: "text-first-name",
                      label: _ctx.filters[_ctx.filterId["EmployerName"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["EmployerName"]].value,
                      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.filters[_ctx.filterId["EmployerName"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "underlined",
                      key: "text-first-name",
                      label: _ctx.filters[_ctx.filterId["Chapter.Affiliate.AffiliateName"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["Chapter.Affiliate.AffiliateName"]].value,
                      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.filters[_ctx.filterId["Chapter.Affiliate.AffiliateName"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "underlined",
                      key: "text-first-name",
                      label: _ctx.filters[_ctx.filterId["Chapter.Affiliate.AffiliateNumber"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["Chapter.Affiliate.AffiliateNumber"]].value,
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.filters[_ctx.filterId["Chapter.Affiliate.AffiliateNumber"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      variant: "underlined",
                      key: "text-first-name",
                      label: _ctx.filters[_ctx.filterId["EmployerMainAddresses.City"]].label,
                      modelValue: _ctx.filters[_ctx.filterId["EmployerMainAddresses.City"]].value,
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => _ctx.filters[_ctx.filterId["EmployerMainAddresses.City"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(_component_StateTerritorySelectComponent, {
                      label: _ctx.filters[_ctx.filterId["EmployerMainAddresses.StateTerritory.StateTerritoryName"]].label,
                      "item-value": "StateTerritoryName",
                      "item-text": "StateTerritoryName",
                      modelValue: _ctx.filters[_ctx.filterId["EmployerMainAddresses.StateTerritory.StateTerritoryName"]].value,
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => _ctx.filters[_ctx.filterId["EmployerMainAddresses.StateTerritory.StateTerritoryName"]].value = $event)
                    }, null, 8, ["label", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VBtn, {
                      color: "primary",
                      class: "mb-4 btn-block elevation-0",
                      onClick: _cache[5] || (_cache[5] = ($event) => $options.search())
                    }, {
                      default: withCtx(() => _cache[12] || (_cache[12] = [
                        createTextVNode("Search")
                      ])),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VBtn, {
                      color: "default",
                      class: "mb-4 btn-block elevation-0",
                      onClick: _cache[6] || (_cache[6] = ($event) => $options.clear())
                    }, {
                      default: withCtx(() => _cache[13] || (_cache[13] = [
                        createTextVNode("Clear")
                      ])),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })) : createCommentVNode("v-if", true)
          ]),
          createVNode(VRow, { class: "employers-search" }, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createVNode(VDataTableServer, {
                    headers: _ctx.getHeaders(_ctx.headers),
                    items: _ctx.employers,
                    options: _ctx.options,
                    "onUpdate:options": _cache[7] || (_cache[7] = ($event) => _ctx.options = $event),
                    "items-length": _ctx.totalEmployers,
                    loading: _ctx.loading,
                    class: "elevation-1 mobile-search-employers",
                    "no-data-text": "No match found",
                    "mobile-breakpoint": 992,
                    "onUpdate:page": _cache[8] || (_cache[8] = ($event) => _ctx.scrollToBeginningOfPage())
                  }, {
                    top: withCtx(() => _cache[14] || (_cache[14] = [
                      createBaseVNode(
                        "div",
                        { class: "search-top-scroller" },
                        [
                          createBaseVNode("div", { class: "inner-scroll" })
                        ],
                        -1
                        /* HOISTED */
                      )
                    ])),
                    loader: withCtx(() => [
                      createVNode(VProgressLinear, {
                        indeterminate: "",
                        height: "8",
                        color: "#3f98c9"
                      })
                    ]),
                    [`item.EmployerName`]: withCtx(({ item }) => [
                      item.Chapter && item.Chapter.Affiliate ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                        key: 0,
                        "component-name": "EmployerDetails",
                        "param-name": "id",
                        "param-value": item.EmployerId,
                        "display-value": item.EmployerName,
                        "affiliate-id": item.Chapter.Affiliate.AffiliateId,
                        "affiliate-name": item.Chapter.Affiliate.AffiliateName,
                        "affiliate-number": item.Chapter.Affiliate.AffiliateNumber
                      }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : (openBlock(), createBlock(_component_router_link, {
                        key: 1,
                        to: { name: "EmployerDetails", params: { id: item.EmployerId } }
                      }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(item.EmployerName),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["to"]))
                    ]),
                    [`item.Chapter.Affiliate.AffiliateName`]: withCtx(({ item }) => [
                      item.Chapter && item.Chapter.Affiliate ? (openBlock(), createElementBlock("div", _hoisted_2$c, [
                        createVNode(_component_AffiliateSwitchComponent, {
                          "component-name": "AffiliateDisplay",
                          "param-name": "id",
                          "param-value": item.Chapter.Affiliate.AffiliateId,
                          "display-value": item.Chapter.Affiliate.AffiliateName,
                          "affiliate-id": item.Chapter.Affiliate.AffiliateId,
                          "affiliate-name": item.Chapter.Affiliate.AffiliateName,
                          "affiliate-number": item.Chapter.Affiliate.AffiliateNumber
                        }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])
                      ])) : createCommentVNode("v-if", true)
                    ]),
                    [`item.Chapter.Affiliate.AffiliateNumber`]: withCtx(({ item }) => [
                      item.Chapter && item.Chapter.Affiliate ? (openBlock(), createElementBlock("div", _hoisted_3$c, [
                        createVNode(_component_AffiliateSwitchComponent, {
                          "component-name": "AffiliateDisplay",
                          "param-name": "id",
                          "param-value": item.Chapter.Affiliate.AffiliateId,
                          "display-value": item.Chapter.Affiliate.AffiliateNumber,
                          "affiliate-id": item.Chapter.Affiliate.AffiliateId,
                          "affiliate-name": item.Chapter.Affiliate.AffiliateName,
                          "affiliate-number": item.Chapter.Affiliate.AffiliateNumber
                        }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])
                      ])) : createCommentVNode("v-if", true)
                    ]),
                    [`item.EmployerCity`]: withCtx(({ item }) => [
                      item.EmployerMainAddresses && item.EmployerMainAddresses.length > 0 ? (openBlock(), createElementBlock(
                        "span",
                        _hoisted_4$c,
                        toDisplayString(item.EmployerMainAddresses[0].City),
                        1
                        /* TEXT */
                      )) : createCommentVNode("v-if", true)
                    ]),
                    [`item.EmployerState`]: withCtx(({ item }) => [
                      item.EmployerMainAddresses && item.EmployerMainAddresses.length > 0 && item.EmployerMainAddresses[0].StateTerritory ? (openBlock(), createElementBlock(
                        "span",
                        _hoisted_5$c,
                        toDisplayString(item.EmployerMainAddresses[0].StateTerritory.StateTerritoryCode),
                        1
                        /* TEXT */
                      )) : createCommentVNode("v-if", true)
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["headers", "items", "options", "items-length", "loading"]),
                  createVNode(_component_chooser_component, {
                    columns: _ctx.headers,
                    presets: _ctx.presets,
                    selectedPreset: _ctx.selectedPreset,
                    onApplied: _cache[9] || (_cache[9] = ($event) => _ctx.onHeaderChangeApplied("employerSearch", $event)),
                    onPresetLoad: _cache[10] || (_cache[10] = ($event) => $options.loadConfiguration($event))
                  }, null, 8, ["columns", "presets", "selectedPreset"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onKeyup"]);
}
const EmployerSearchComponent = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$h], ["__file", "/var/www/html/resources/js/components/Employer/EmployerSearchComponent.vue"]]);
const _sfc_main$g = {
  name: "EditIndividualComponent",
  components: {
    "individual-basic-data-component": BasicDataComponent$1
  },
  data() {
    return {
      id: "",
      individual: {}
    };
  },
  mounted() {
    this.id = this.$route.params.id;
    this.getDataFromApi();
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/individual/" + this.id).then((response) => {
        this.individual = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_individual_basic_data_component = resolveComponent("individual-basic-data-component");
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VCard, { class: "v-card--outlined v-sheet--tile mt-4" }, {
        default: withCtx(() => [
          createVNode(_component_individual_basic_data_component, {
            individual: $data.individual,
            "edit-mode": true
          }, null, 8, ["individual"])
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const EditIndividualComponent = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$g], ["__file", "/var/www/html/resources/js/components/Individual/EditIndividualComponent.vue"]]);
const _sfc_main$f = {
  name: "IndividualAddComponent",
  mixins: [headersMixin, configurationMixin, paginationUrlMixin, dataTablesMixin],
  components: { StateTerritorySelectComponent, "chooser-component": ColumnChooserComponent, AffiliateSwitchComponent },
  props: {
    global: {
      type: Boolean,
      default: false
    }
  },
  data: () => ({
    filters: null,
    filterId: {
      firstName: 0,
      lastName: 1,
      email: 2,
      memberId: 3,
      affiliateName: 4,
      affiliateNumber: 5,
      phoneNumber: 6,
      homeCity: 7,
      homeState: 8,
      preferredName: 9,
      middleName: 10,
      previousName: 11,
      zipCode: 12
    },
    componentUpdateKey: 0,
    totalIndividuals: 0,
    individuals: [],
    loading: false,
    searched: false,
    options: {
      sortBy: [{ key: "IndividualId", order: "asc" }],
      page: 1,
      itemsPerPage: 10
    },
    headers: [],
    rules: {
      required: false
    }
  }),
  watch: {
    options: {
      handler() {
        if (this.searched) {
          this.getDataFromApi();
        }
      },
      deep: true,
      immediate: true
    }
  },
  mounted() {
    if (this.global) {
      this.initConfiguration();
    } else {
      this.headers = [
        { title: "First Name", value: "FirstName", visible: true, sortable: false },
        { title: "Middle Name", value: "MiddleName", visible: true, sortable: false },
        { title: "Last Name", value: "LastName", visible: true, sortable: false },
        { title: "Preferred Name", value: "PreferredName", visible: true, sortable: false },
        { title: "Original Last Name", value: "PreviousName", visible: true, sortable: false },
        { title: "Union Relationships", value: "individualAffiliates.UnionRelationshipType", visible: true, sortable: false },
        { title: "Local Dues Category", value: "individualAffiliates.LocalDuesCategory", visible: true, sortable: false },
        { title: "Member ID", value: "individualMembers", visible: true, sortable: false },
        { title: "Affiliate Name", value: "individualAffiliates.Affiliate.AffiliateName", visible: true, sortable: false },
        { title: "Affiliate Number", value: "individualAffiliatesAffiliate.AffiliateNumber", visible: true, sortable: false },
        { title: "Home Phone", value: "individualPhonesHome", visible: true, sortable: false },
        { title: "Mobile Phone", value: "individualPhones", visible: true, sortable: false },
        { title: "Email", value: "individualEmails", visible: true, sortable: false },
        { title: "Home Address", value: "individualAddresses", visible: true, sortable: false },
        { title: "Employer", value: "activeIndividualEmployers.EmployerName", visible: true, sortable: false },
        { title: "Individual Guid", value: "IndividualGuid", visible: true, sortable: false }
      ];
      this.filters = new Array(10);
      this.filters[this.filterId["firstName"]] = { name: "firstName", label: "First Name", value: "", type: "text", visible: true };
      this.filters[this.filterId["preferredName"]] = { name: "preferredName", label: "First Name", value: "", type: "text", visible: true };
      this.filters[this.filterId["middleName"]] = { name: "middleName", label: "First Name", value: "", type: "text", visible: true };
      this.filters[this.filterId["lastName"]] = { name: "lastName", label: "First Name", value: "", type: "text", visible: true };
      this.filters[this.filterId["email"]] = { name: "email", label: "First Name", value: "", type: "text", visible: true };
      this.filters[this.filterId["memberId"]] = { name: "memberId", label: "First Name", value: "", type: "text", visible: true };
      this.filters[this.filterId["affiliateName"]] = { name: "affiliateName", label: "First Name", value: "", type: "text", visible: true };
      this.filters[this.filterId["affiliateNumber"]] = { name: "affiliateNumber", label: "First Name", value: "", type: "text", visible: true };
      this.filters[this.filterId["phoneNumber"]] = { name: "phoneNumber", label: "First Name", value: "", type: "text", visible: true };
      this.filters[this.filterId["homeCity"]] = { name: "homeCity", label: "First Name", value: "", type: "text", visible: true };
      this.filters[this.filterId["homeState"]] = { name: "homeState", label: "First Name", value: "", type: "text", visible: true };
      this.filters[this.filterId["previousName"]] = { name: "previousName", label: "First Name", value: "", type: "text", visible: true };
      this.filters[this.filterId["zipCode"]] = { name: "zipCode", label: "Zip Code", value: "", type: "text", visible: true };
    }
  },
  methods: {
    loadConfiguration(key2) {
      this.getConfiguration("individualSearch", key2).then((response) => {
        this.headers = response.data.fields;
        this.configCommon(response);
        this.updateQueryParams(this.options, this.filters, this.headers);
      });
    },
    configCommon(response) {
      this.filters = this.parseQueryParams(response.data.filters);
      this.setPresetData(response.data);
      this.filters.forEach((filter, index) => {
        this.filterId[filter.name] = index;
      });
    },
    initConfiguration() {
      this.getConfiguration("individualSearch", "").then((response) => {
        this.headers = this.parseHiddenColumn(response.data.fields);
        this.configCommon(response);
        this.getDataFromApi();
      });
    },
    clear() {
      const filtersData = this.filters.map((obj) => ({ ...obj, value: "" }));
      this.filters = [...filtersData];
      this.componentUpdateKey++;
      this.$emit("search");
    },
    getFilter(field) {
      return this.filters.filter((filter) => filter.name === field);
    },
    searchIndividual() {
      this.options.page = 1;
      this.getDataFromApi();
    },
    getDataFromApi() {
      this.loading = true;
      const { sortBy, page, itemsPerPage } = this.options;
      const globalScope = this.global ? "&scope=global" : "";
      const sortDefault = sortBy[0] ?? { key: "IndividualId", order: "asc" };
      let sortByField = sortDefault.key ?? "IndividualId";
      const sortDirection = sortDefault.order === "asc" ? "" : "-";
      if (sortBy[0] === "FullName") {
        sortByField = "LastName," + sortDirection + "FirstName";
      }
      let url = "/api/v2/aggregate/individual/search?page=" + page + "&per_page=" + itemsPerPage + "&sort=" + sortDirection + sortByField + globalScope;
      let filterUrl = "";
      this.filters.map((filter) => {
        if (filter.value !== "") {
          filterUrl += "&" + filter.name + "=" + filter.value;
        }
      });
      if (filterUrl !== "") {
        url += filterUrl;
      }
      if (this.global) {
        this.updateQueryParams(this.options, this.filters, this.headers);
      }
      return axios.get(url).then((response) => {
        this.individuals = response.data.data;
        this.totalIndividuals = response.data.meta.total;
      }).finally(() => {
        this.loading = false;
        this.searched = true;
      });
    },
    clickNewRecord() {
      const firstName = this.filters[this.filterId["firstName"]].value;
      const preferredName = this.filters[this.filterId["preferredName"]].value;
      const middleName = this.filters[this.filterId["middleName"]].value;
      const lastName = this.filters[this.filterId["lastName"]].value;
      this.$router.push({ name: "IndividualNew", params: { firstName, preferredName, middleName, lastName } });
    },
    getAffiliate(individualAffiliate) {
      if (individualAffiliate.activeIndividualAffiliates.length > 0) {
        return individualAffiliate.activeIndividualAffiliates[0].Affiliate;
      } else if (individualAffiliate.lastDeactivatedIndividualAffiliate.length > 0) {
        return individualAffiliate.lastDeactivatedIndividualAffiliate[0].Affiliate;
      }
      return null;
    },
    getIndividualName(individualAffiliate) {
      if (individualAffiliate.MiddleName != "Null" && individualAffiliate.MiddleName != null) {
        return this.getPrefixName(individualAffiliate.Prefix) + " " + individualAffiliate.FirstName + " " + individualAffiliate.MiddleName + " " + individualAffiliate.LastName + this.getSuffixName(individualAffiliate.Suffix);
      } else {
        return this.getPrefixName(individualAffiliate.Prefix) + " " + individualAffiliate.FirstName + " " + individualAffiliate.LastName + this.getSuffixName(individualAffiliate.Suffix);
      }
    },
    getSuffixName(suffix) {
      if (typeof suffix !== "undefined" && suffix !== null) {
        return ", " + suffix.SuffixName;
      }
      return "";
    },
    getPrefixName(prefix) {
      if (typeof prefix !== "undefined" && prefix !== null) {
        return prefix.PrefixName;
      }
      return "";
    },
    firstAddress(addresses, typeName) {
      return addresses.filter((address) => address.IndividualAddressType && address.IndividualAddressType.IndividualAddressTypeName === typeName).slice(0, 1);
    },
    firstPhone(phone, typeName) {
      return phone.filter((phone2) => phone2.IndividualPhoneType && phone2.IndividualPhoneType.IndividualPhoneTypeName === typeName).slice(0, 1);
    },
    firstEmail(emails) {
      return emails.slice(0, 1);
    }
  },
  created() {
    window.addEventListener("scroll", this.handleSCroll);
  },
  destroyed() {
    window.removeEventListener("scroll", this.handleSCroll);
  }
};
const _hoisted_1$b = {
  key: 3,
  class: "lead"
};
const _hoisted_2$b = { key: 0 };
const _hoisted_3$b = { key: 0 };
const _hoisted_4$b = { key: 0 };
const _hoisted_5$b = { key: 1 };
const _hoisted_6$b = { key: 0 };
function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_StateTerritorySelectComponent = resolveComponent("StateTerritorySelectComponent");
  const _component_AffiliateSwitchComponent = resolveComponent("AffiliateSwitchComponent");
  const _component_router_link = resolveComponent("router-link");
  const _component_chooser_component = resolveComponent("chooser-component");
  return openBlock(), createBlock(VContainer, {
    fluid: "",
    onKeyup: withKeys($options.getDataFromApi, ["enter"])
  }, {
    default: withCtx(() => [
      (openBlock(), createBlock(VCard, {
        key: _ctx.componentUpdateKey,
        class: "mb-4"
      }, {
        default: withCtx(() => [
          createVNode(VCardTitle, null, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($props.global ? "Global Individual Search" : "Add an Individual - Search"),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VCardText, null, {
            default: withCtx(() => [
              $props.global && _ctx.filters ? (openBlock(), createBlock(VRow, { key: 0 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        variant: "underlined",
                        key: "text-member-id",
                        label: "Member Id",
                        modelValue: _ctx.filters[_ctx.filterId["memberId"]].value,
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.filters[_ctx.filterId["memberId"]].value = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        variant: "underlined",
                        key: "text-affiliate-name",
                        label: "Affiliate Name",
                        modelValue: _ctx.filters[_ctx.filterId["affiliateName"]].value,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.filters[_ctx.filterId["affiliateName"]].value = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        variant: "underlined",
                        key: "text-affiliate-number",
                        label: "Affiliate Number",
                        modelValue: _ctx.filters[_ctx.filterId["affiliateNumber"]].value,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.filters[_ctx.filterId["affiliateNumber"]].value = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        variant: "underlined",
                        key: "text-home-city",
                        label: "Phone Number",
                        modelValue: _ctx.filters[_ctx.filterId["phoneNumber"]].value,
                        "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => _ctx.filters[_ctx.filterId["phoneNumber"]].value = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        variant: "underlined",
                        key: "text-home-state",
                        label: "Home City",
                        modelValue: _ctx.filters[_ctx.filterId["homeCity"]].value,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => _ctx.filters[_ctx.filterId["homeCity"]].value = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(_component_StateTerritorySelectComponent, {
                        "item-value": "StateTerritoryName",
                        "item-text": "StateTerritoryName",
                        label: "Home State",
                        modelValue: _ctx.filters[_ctx.filterId["homeState"]].value,
                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => _ctx.filters[_ctx.filterId["homeState"]].value = $event),
                        rules: [_ctx.rules.required]
                      }, null, 8, ["modelValue", "rules"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        variant: "underlined",
                        key: "text-zip-code",
                        label: "Zip Code",
                        modelValue: _ctx.filters[_ctx.filterId["zipCode"]].value,
                        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => _ctx.filters[_ctx.filterId["zipCode"]].value = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              _ctx.filters ? (openBlock(), createBlock(VRow, { key: 1 }, {
                default: withCtx(() => [
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        variant: "underlined",
                        key: "text-first-name",
                        label: "First Name",
                        modelValue: _ctx.filters[_ctx.filterId["firstName"]].value,
                        "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => _ctx.filters[_ctx.filterId["firstName"]].value = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        variant: "underlined",
                        key: "text-middle-name",
                        label: "Middle Name",
                        modelValue: _ctx.filters[_ctx.filterId["middleName"]].value,
                        "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => _ctx.filters[_ctx.filterId["middleName"]].value = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        variant: "underlined",
                        key: "text-last-name",
                        label: "Last Name",
                        modelValue: _ctx.filters[_ctx.filterId["lastName"]].value,
                        "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => _ctx.filters[_ctx.filterId["lastName"]].value = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        variant: "underlined",
                        key: "text-preferred-name",
                        label: "Preferred Name",
                        modelValue: _ctx.filters[_ctx.filterId["preferredName"]].value,
                        "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => _ctx.filters[_ctx.filterId["preferredName"]].value = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        variant: "underlined",
                        key: "text-preferred-name",
                        label: "Original Last Name",
                        modelValue: _ctx.filters[_ctx.filterId["previousName"]].value,
                        "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => _ctx.filters[_ctx.filterId["previousName"]].value = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCol, null, {
                    default: withCtx(() => [
                      createVNode(VTextField, {
                        variant: "underlined",
                        key: "text-email",
                        label: "Email",
                        modelValue: _ctx.filters[_ctx.filterId["email"]].value,
                        "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => _ctx.filters[_ctx.filterId["email"]].value = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              _ctx.filters ? (openBlock(), createBlock(VRow, { key: 2 }, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "d-flex justify-end ga-2" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        color: "primary",
                        variant: "elevated",
                        onClick: _cache[13] || (_cache[13] = ($event) => $options.searchIndividual())
                      }, {
                        default: withCtx(() => _cache[19] || (_cache[19] = [
                          createTextVNode("Search")
                        ])),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VBtn, {
                        color: "default",
                        variant: "elevated",
                        onClick: _cache[14] || (_cache[14] = ($event) => $options.clear())
                      }, {
                        default: withCtx(() => _cache[20] || (_cache[20] = [
                          createTextVNode("Clear")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              _ctx.searched && _ctx.totalIndividuals === 0 ? (openBlock(), createElementBlock("p", _hoisted_1$b, "No match found.")) : createCommentVNode("v-if", true)
            ]),
            _: 1
            /* STABLE */
          }),
          !$props.global ? (openBlock(), createBlock(VCardActions, { key: 0 }, {
            default: withCtx(() => [
              createVNode(VSpacer),
              _ctx.searched ? (openBlock(), createBlock(VBtn, {
                key: 0,
                color: "primary",
                variant: "elevated",
                onClick: $options.clickNewRecord
              }, {
                default: withCtx(() => _cache[21] || (_cache[21] = [
                  createTextVNode("Add New Record")
                ])),
                _: 1
                /* STABLE */
              }, 8, ["onClick"])) : createCommentVNode("v-if", true)
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      })),
      createVNode(VDataTableServer, {
        headers: _ctx.getHeaders(_ctx.headers),
        items: _ctx.individuals,
        options: _ctx.options,
        "onUpdate:options": _cache[15] || (_cache[15] = ($event) => _ctx.options = $event),
        "items-length": _ctx.totalIndividuals,
        loading: _ctx.loading,
        "mobile-breakpoint": 992,
        class: "elevation-1 mobile-individual-search",
        "onUpdate:page": _cache[16] || (_cache[16] = ($event) => _ctx.scrollToBeginningOfPage())
      }, {
        top: withCtx(() => _cache[22] || (_cache[22] = [
          createBaseVNode(
            "div",
            { class: "search-top-scroller" },
            [
              createBaseVNode("div", { class: "inner-scroll" })
            ],
            -1
            /* HOISTED */
          )
        ])),
        loader: withCtx(() => [
          createVNode(VProgressLinear, {
            indeterminate: "",
            height: "8",
            color: "#3f98c9"
          })
        ]),
        [`item.FullName`]: withCtx(({ item }) => [
          $options.getAffiliate(item) ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
            key: 0,
            "component-name": "IndividualDetails",
            "param-name": "id",
            "param-value": item.IndividualId,
            "display-value": $options.getIndividualName(item),
            "affiliate-id": $options.getAffiliate(item).AffiliateId,
            "affiliate-name": $options.getAffiliate(item).AffiliateName,
            "affiliate-number": $options.getAffiliate(item).AffiliateNumber
          }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : (openBlock(), createBlock(_component_router_link, {
            key: 1,
            to: { name: "IndividualDetails", params: { id: item.IndividualId } }
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString(item.FirstName) + " ",
                1
                /* TEXT */
              ),
              item.MiddleName != "Null" ? (openBlock(), createElementBlock(
                "span",
                _hoisted_2$b,
                toDisplayString(item.MiddleName),
                1
                /* TEXT */
              )) : createCommentVNode("v-if", true),
              createTextVNode(
                " " + toDisplayString(item.LastName),
                1
                /* TEXT */
              )
            ]),
            _: 2
            /* DYNAMIC */
          }, 1032, ["to"]))
        ]),
        [`item.PreferredName`]: withCtx(({ item }) => [
          $options.getAffiliate(item) ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
            key: 0,
            "component-name": "IndividualDetails",
            "param-name": "id",
            "param-value": item.IndividualId,
            "display-value": item.PreferredName,
            "affiliate-id": $options.getAffiliate(item).AffiliateId,
            "affiliate-name": $options.getAffiliate(item).AffiliateName,
            "affiliate-number": $options.getAffiliate(item).AffiliateNumber
          }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : (openBlock(), createBlock(_component_router_link, {
            key: 1,
            to: { name: "IndividualDetails", params: { id: item.IndividualId } }
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString(item.PreferredName),
                1
                /* TEXT */
              )
            ]),
            _: 2
            /* DYNAMIC */
          }, 1032, ["to"]))
        ]),
        [`item.PreviousName`]: withCtx(({ item }) => [
          $options.getAffiliate(item) ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
            key: 0,
            "component-name": "IndividualDetails",
            "param-name": "id",
            "param-value": item.IndividualId,
            "display-value": item.PreviousName,
            "affiliate-id": $options.getAffiliate(item).AffiliateId,
            "affiliate-name": $options.getAffiliate(item).AffiliateName,
            "affiliate-number": $options.getAffiliate(item).AffiliateNumber
          }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : (openBlock(), createBlock(_component_router_link, {
            key: 1,
            to: { name: "IndividualDetails", params: { id: item.IndividualId } }
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString(item.PreviousName),
                1
                /* TEXT */
              )
            ]),
            _: 2
            /* DYNAMIC */
          }, 1032, ["to"]))
        ]),
        [`item.FirstName`]: withCtx(({ item }) => [
          $options.getAffiliate(item) ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
            key: 0,
            "component-name": "IndividualDetails",
            "param-name": "id",
            "param-value": item.IndividualId,
            "display-value": item.FirstName,
            "affiliate-id": $options.getAffiliate(item).AffiliateId,
            "affiliate-name": $options.getAffiliate(item).AffiliateName,
            "affiliate-number": $options.getAffiliate(item).AffiliateNumber
          }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : (openBlock(), createBlock(_component_router_link, {
            key: 1,
            to: { name: "IndividualDetails", params: { id: item.IndividualId } }
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString(item.FirstName),
                1
                /* TEXT */
              )
            ]),
            _: 2
            /* DYNAMIC */
          }, 1032, ["to"]))
        ]),
        [`item.MiddleName`]: withCtx(({ item }) => [
          item.MiddleName != "Null" ? (openBlock(), createElementBlock("span", _hoisted_3$b, [
            $options.getAffiliate(item) ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
              key: 0,
              "component-name": "IndividualDetails",
              "param-name": "id",
              "param-value": item.IndividualId,
              "display-value": item.MiddleName,
              "affiliate-id": $options.getAffiliate(item).AffiliateId,
              "affiliate-name": $options.getAffiliate(item).AffiliateName,
              "affiliate-number": $options.getAffiliate(item).AffiliateNumber
            }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : (openBlock(), createBlock(_component_router_link, {
              key: 1,
              to: { name: "IndividualDetails", params: { id: item.IndividualId } }
            }, {
              default: withCtx(() => [
                createTextVNode(
                  toDisplayString(item.MiddleName),
                  1
                  /* TEXT */
                )
              ]),
              _: 2
              /* DYNAMIC */
            }, 1032, ["to"]))
          ])) : createCommentVNode("v-if", true)
        ]),
        [`item.LastName`]: withCtx(({ item }) => [
          $options.getAffiliate(item) ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
            key: 0,
            "component-name": "IndividualDetails",
            "param-name": "id",
            "param-value": item.IndividualId,
            "display-value": item.LastName,
            "affiliate-id": $options.getAffiliate(item).AffiliateId,
            "affiliate-name": $options.getAffiliate(item).AffiliateName,
            "affiliate-number": $options.getAffiliate(item).AffiliateNumber
          }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : (openBlock(), createBlock(_component_router_link, {
            key: 1,
            to: { name: "IndividualDetails", params: { id: item.IndividualId } }
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString(item.LastName),
                1
                /* TEXT */
              )
            ]),
            _: 2
            /* DYNAMIC */
          }, 1032, ["to"]))
        ]),
        [`item.individualMembers`]: withCtx(({ item }) => [
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(item.individualMembers, (member) => {
              return openBlock(), createElementBlock(
                "span",
                mergeProps({
                  key: member.MemberIdMappingId,
                  ref_for: true
                }, member),
                toDisplayString(member.MemberId),
                17
                /* TEXT, FULL_PROPS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        [`item.individualEmails`]: withCtx(({ item }) => [
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList($options.firstEmail(item.individualEmailsOrdered), (email) => {
              return openBlock(), createElementBlock(
                "span",
                mergeProps({
                  key: email.IndividualEmailId,
                  ref_for: true
                }, email, {
                  class: item.activeIndividualAffiliates.length === 0 ? "greyed-out" : ""
                }),
                toDisplayString(email.Email),
                17
                /* TEXT, FULL_PROPS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        [`item.individualAddresses`]: withCtx(({ item }) => [
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList($options.firstAddress(item.individualAddressesOrdered, "Home"), (address) => {
              return openBlock(), createElementBlock(
                "span",
                mergeProps({
                  key: address.IndividualAddressId,
                  ref_for: true
                }, address, {
                  class: item.activeIndividualAffiliates.length === 0 ? "greyed-out" : ""
                }),
                [
                  createTextVNode(
                    toDisplayString(address.AddressLine1) + " ",
                    1
                    /* TEXT */
                  ),
                  _cache[24] || (_cache[24] = createBaseVNode(
                    "br",
                    null,
                    null,
                    -1
                    /* HOISTED */
                  )),
                  address.AddressLine2 ? (openBlock(), createElementBlock("span", _hoisted_4$b, [
                    createTextVNode(
                      toDisplayString(address.AddressLine2) + " ",
                      1
                      /* TEXT */
                    ),
                    _cache[23] || (_cache[23] = createBaseVNode(
                      "br",
                      null,
                      null,
                      -1
                      /* HOISTED */
                    ))
                  ])) : createCommentVNode("v-if", true),
                  createTextVNode(
                    " " + toDisplayString(address.City) + " ",
                    1
                    /* TEXT */
                  ),
                  address.StateTerritory ? (openBlock(), createElementBlock(
                    "span",
                    _hoisted_5$b,
                    toDisplayString(address.StateTerritory.StateTerritoryCode),
                    1
                    /* TEXT */
                  )) : createCommentVNode("v-if", true),
                  createTextVNode(
                    " " + toDisplayString(address.PostalCode),
                    1
                    /* TEXT */
                  )
                ],
                16
                /* FULL_PROPS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        [`item.individualPhones`]: withCtx(({ item }) => [
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList($options.firstPhone(item.individualPhonesOrdered, "Mobile"), (phone) => {
              return openBlock(), createElementBlock(
                "span",
                mergeProps({ ref_for: true }, phone, {
                  key: phone.IndividualPhoneId,
                  class: item.activeIndividualAffiliates.length === 0 ? "greyed-out" : ""
                }),
                toDisplayString(phone.fullPhone),
                17
                /* TEXT, FULL_PROPS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        [`item.individualPhonesHome`]: withCtx(({ item }) => [
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList($options.firstPhone(item.individualPhonesOrdered, "Home"), (phone) => {
              return openBlock(), createElementBlock(
                "span",
                mergeProps({ ref_for: true }, phone, {
                  key: phone.IndividualPhoneId,
                  class: item.activeIndividualAffiliates.length === 0 ? "greyed-out" : ""
                }),
                toDisplayString(phone.fullPhone),
                17
                /* TEXT, FULL_PROPS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        [`item.AffiliateName`]: withCtx(({ item }) => [
          item.activeIndividualAffiliates.length > 0 ? (openBlock(), createBlock(
            VContainer,
            { key: 0 },
            {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(
                  Fragment,
                  null,
                  renderList(item.activeIndividualAffiliates, (affiliate) => {
                    return openBlock(), createElementBlock(
                      "div",
                      mergeProps({ ref_for: true }, affiliate, {
                        key: affiliate.IndividualAffiliateId + "-name"
                      }),
                      [
                        affiliate.Affiliate ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                          key: 0,
                          "component-name": "AffiliateDisplay",
                          "param-name": "id",
                          "param-value": affiliate.Affiliate.AffiliateId,
                          "display-value": affiliate.Affiliate.AffiliateName,
                          "affiliate-id": affiliate.Affiliate.AffiliateId,
                          "affiliate-name": affiliate.Affiliate.AffiliateName,
                          "affiliate-number": affiliate.Affiliate.AffiliateNumber
                        }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : createCommentVNode("v-if", true)
                      ],
                      16
                      /* FULL_PROPS */
                    );
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]),
              _: 2
              /* DYNAMIC */
            },
            1024
            /* DYNAMIC_SLOTS */
          )) : item.activeIndividualAffiliates.length === 0 && item.lastDeactivatedIndividualAffiliate.length > 0 ? (openBlock(), createBlock(
            VContainer,
            { key: 1 },
            {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(
                  Fragment,
                  null,
                  renderList(item.lastDeactivatedIndividualAffiliate, (affiliate) => {
                    return openBlock(), createElementBlock(
                      "div",
                      mergeProps({ ref_for: true }, affiliate, {
                        key: affiliate.IndividualAffiliateId + "-name"
                      }),
                      [
                        affiliate.Affiliate ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                          key: 0,
                          "component-name": "AffiliateDisplay",
                          "param-name": "id",
                          "param-value": affiliate.Affiliate.AffiliateId,
                          "display-value": affiliate.Affiliate.AffiliateName,
                          "affiliate-id": affiliate.Affiliate.AffiliateId,
                          "affiliate-name": affiliate.Affiliate.AffiliateName,
                          "affiliate-number": affiliate.Affiliate.AffiliateNumber
                        }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : createCommentVNode("v-if", true)
                      ],
                      16
                      /* FULL_PROPS */
                    );
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]),
              _: 2
              /* DYNAMIC */
            },
            1024
            /* DYNAMIC_SLOTS */
          )) : createCommentVNode("v-if", true)
        ]),
        [`item.AffiliateNumber`]: withCtx(({ item }) => [
          item.activeIndividualAffiliates.length > 0 ? (openBlock(), createBlock(
            VContainer,
            { key: 0 },
            {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(
                  Fragment,
                  null,
                  renderList(item.activeIndividualAffiliates, (affiliate) => {
                    return openBlock(), createElementBlock(
                      "span",
                      mergeProps({ ref_for: true }, affiliate, {
                        key: affiliate.IndividualAffiliateId + "-id"
                      }),
                      [
                        affiliate.Affiliate ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                          key: 0,
                          "component-name": "AffiliateDisplay",
                          "param-name": "id",
                          "param-value": affiliate.Affiliate.AffiliateId,
                          "display-value": affiliate.Affiliate.AffiliateNumber,
                          "affiliate-id": affiliate.Affiliate.AffiliateId,
                          "affiliate-name": affiliate.Affiliate.AffiliateName,
                          "affiliate-number": affiliate.Affiliate.AffiliateNumber
                        }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : createCommentVNode("v-if", true)
                      ],
                      16
                      /* FULL_PROPS */
                    );
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]),
              _: 2
              /* DYNAMIC */
            },
            1024
            /* DYNAMIC_SLOTS */
          )) : item.activeIndividualAffiliates.length === 0 && item.lastDeactivatedIndividualAffiliate.length > 0 ? (openBlock(), createBlock(
            VContainer,
            { key: 1 },
            {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(
                  Fragment,
                  null,
                  renderList(item.lastDeactivatedIndividualAffiliate, (affiliate) => {
                    return openBlock(), createElementBlock(
                      "span",
                      mergeProps({ ref_for: true }, affiliate, {
                        key: affiliate.IndividualAffiliateId + "-id"
                      }),
                      [
                        affiliate.Affiliate ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                          key: 0,
                          "component-name": "AffiliateDisplay",
                          "param-name": "id",
                          "param-value": affiliate.Affiliate.AffiliateId,
                          "display-value": affiliate.Affiliate.AffiliateNumber,
                          "affiliate-id": affiliate.Affiliate.AffiliateId,
                          "affiliate-name": affiliate.Affiliate.AffiliateName,
                          "affiliate-number": affiliate.Affiliate.AffiliateNumber
                        }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : createCommentVNode("v-if", true)
                      ],
                      16
                      /* FULL_PROPS */
                    );
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]),
              _: 2
              /* DYNAMIC */
            },
            1024
            /* DYNAMIC_SLOTS */
          )) : createCommentVNode("v-if", true)
        ]),
        [`item.LocalDuesCategory`]: withCtx(({ item }) => [
          item.activeIndividualAffiliates.length > 0 ? (openBlock(), createBlock(
            VContainer,
            { key: 0 },
            {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(
                  Fragment,
                  null,
                  renderList(item.activeIndividualAffiliates, (affiliate) => {
                    return openBlock(), createElementBlock(
                      Fragment,
                      {
                        key: affiliate.IndividualAffiliateId
                      },
                      [
                        affiliate.LocalDuesCategory ? (openBlock(), createElementBlock(
                          "span",
                          mergeProps({
                            key: 0,
                            ref_for: true
                          }, affiliate),
                          toDisplayString(affiliate.LocalDuesCategory.LocalDuesCategoryName),
                          17
                          /* TEXT, FULL_PROPS */
                        )) : createCommentVNode("v-if", true)
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    );
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]),
              _: 2
              /* DYNAMIC */
            },
            1024
            /* DYNAMIC_SLOTS */
          )) : item.activeIndividualAffiliates.length === 0 && item.lastDeactivatedIndividualAffiliate.length > 0 ? (openBlock(), createBlock(
            VContainer,
            { key: 1 },
            {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(
                  Fragment,
                  null,
                  renderList(item.lastDeactivatedIndividualAffiliate, (affiliate) => {
                    return openBlock(), createElementBlock(
                      Fragment,
                      {
                        key: affiliate.IndividualAffiliateId
                      },
                      [
                        affiliate.LocalDuesCategory ? (openBlock(), createElementBlock(
                          "span",
                          mergeProps({
                            key: 0,
                            ref_for: true
                          }, affiliate, { class: "greyed-out" }),
                          toDisplayString(affiliate.LocalDuesCategory.LocalDuesCategoryName),
                          17
                          /* TEXT, FULL_PROPS */
                        )) : createCommentVNode("v-if", true)
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    );
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]),
              _: 2
              /* DYNAMIC */
            },
            1024
            /* DYNAMIC_SLOTS */
          )) : createCommentVNode("v-if", true)
        ]),
        [`item.UnionRelationshipType`]: withCtx(({ item }) => [
          item.activeIndividualAffiliates.length > 0 ? (openBlock(), createBlock(
            VContainer,
            { key: 0 },
            {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(
                  Fragment,
                  null,
                  renderList(item.activeIndividualAffiliates, (affiliate) => {
                    return openBlock(), createElementBlock(
                      Fragment,
                      {
                        key: affiliate.IndividualAffiliateId
                      },
                      [
                        affiliate.UnionRelationshipType ? (openBlock(), createElementBlock(
                          "span",
                          mergeProps({
                            key: 0,
                            ref_for: true
                          }, affiliate),
                          toDisplayString(affiliate.UnionRelationshipType.UnionRelationshipTypeName),
                          17
                          /* TEXT, FULL_PROPS */
                        )) : createCommentVNode("v-if", true)
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    );
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]),
              _: 2
              /* DYNAMIC */
            },
            1024
            /* DYNAMIC_SLOTS */
          )) : item.activeIndividualAffiliates.length === 0 && item.lastDeactivatedIndividualAffiliate.length > 0 ? (openBlock(), createBlock(
            VContainer,
            { key: 1 },
            {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(
                  Fragment,
                  null,
                  renderList(item.lastDeactivatedIndividualAffiliate, (affiliate) => {
                    return openBlock(), createElementBlock(
                      Fragment,
                      {
                        key: affiliate.IndividualAffiliateId
                      },
                      [
                        affiliate.UnionRelationshipType ? (openBlock(), createElementBlock(
                          "span",
                          mergeProps({
                            key: 0,
                            ref_for: true
                          }, affiliate, { class: "greyed-out" }),
                          toDisplayString(affiliate.UnionRelationshipType.UnionRelationshipTypeName),
                          17
                          /* TEXT, FULL_PROPS */
                        )) : createCommentVNode("v-if", true)
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    );
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]),
              _: 2
              /* DYNAMIC */
            },
            1024
            /* DYNAMIC_SLOTS */
          )) : (openBlock(), createBlock(VContainer, { key: 2 }, {
            default: withCtx(() => _cache[25] || (_cache[25] = [
              createBaseVNode(
                "span",
                { class: "greyed-out" },
                "No relationship",
                -1
                /* HOISTED */
              )
            ])),
            _: 1
            /* STABLE */
          }))
        ]),
        [`item.EmployerName`]: withCtx(({ item }) => [
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(item.activeIndividualEmployers, (employer, index) => {
              return openBlock(), createElementBlock(
                "span",
                mergeProps({ ref_for: true }, employer, {
                  key: employer.IndividualEmployerId
                }),
                [
                  index > 0 ? (openBlock(), createElementBlock("span", _hoisted_6$b, ", ")) : createCommentVNode("v-if", true),
                  employer.Employer && $options.getAffiliate(item) ? (openBlock(), createBlock(_component_AffiliateSwitchComponent, {
                    key: 1,
                    "component-name": "EmployerDetails",
                    "param-name": "id",
                    "param-value": employer.Employer.EmployerId,
                    "display-value": employer.Employer.EmployerName,
                    "affiliate-id": $options.getAffiliate(item).AffiliateId,
                    "affiliate-name": $options.getAffiliate(item).AffiliateName,
                    "affiliate-number": $options.getAffiliate(item).AffiliateNumber
                  }, null, 8, ["param-value", "display-value", "affiliate-id", "affiliate-name", "affiliate-number"])) : employer.Employer ? (openBlock(), createBlock(_component_router_link, {
                    key: 2,
                    to: { name: "EmployerDetails", params: { id: employer.Employer.EmployerId } }
                  }, {
                    default: withCtx(() => [
                      createTextVNode(
                        toDisplayString(employer.Employer.EmployerName),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["to"])) : createCommentVNode("v-if", true)
                ],
                16
                /* FULL_PROPS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        _: 2
        /* DYNAMIC */
      }, 1032, ["headers", "items", "options", "items-length", "loading"]),
      $props.global ? (openBlock(), createBlock(_component_chooser_component, {
        key: 0,
        columns: _ctx.headers,
        presets: _ctx.presets,
        selectedPreset: _ctx.selectedPreset,
        onApplied: _cache[17] || (_cache[17] = ($event) => _ctx.onHeaderChangeApplied("individualSearch", $event)),
        onPresetLoad: _cache[18] || (_cache[18] = ($event) => $options.loadConfiguration($event))
      }, null, 8, ["columns", "presets", "selectedPreset"])) : createCommentVNode("v-if", true)
    ]),
    _: 1
    /* STABLE */
  }, 8, ["onKeyup"]);
}
const IndividualAddComponent = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$f], ["__file", "/var/www/html/resources/js/components/Individual/IndividualAddComponent.vue"]]);
const _sfc_main$e = {
  name: "AddIndividualAddressComponent",
  components: { StateTerritorySelectComponent },
  props: {
    individual: {
      type: Object,
      required: true
    },
    savedAddress: {
      type: Object,
      required: false
    },
    showSaveButton: {
      type: Boolean,
      default: true
    },
    readOnly: {
      type: Boolean,
      required: true
    },
    individualAddress: {
      type: Object,
      required: true
    },
    resetSection: {
      type: Boolean,
      default: true
    }
  },
  computed: {
    newOrEditAddress() {
      if (!this.savedAddress) {
        this.resetAddress();
        return "Address";
      } else {
        return "Edit Address";
      }
    },
    saveButtonLabel() {
      return this.savedAddress ? "Save" : "save and close";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    individualAddress: {
      handler(value) {
        if (this.address && this.address.IndividualAddressId === this.individualAddress.IndividualAddressId) {
          return;
        }
        this.address = this.individualAddress && this.individualAddress.IndividualAddressId ? clone(value) : value;
        this.address.ContactStatusId = this.address.ContactStatusId ? this.address.ContactStatusId : null;
        this.address.CanContactRestrictionId = this.address.CanContactRestrictionId ? this.address.CanContactRestrictionId : null;
      }
    },
    savedAddress: {
      handler(data) {
        this.setEditAddress();
      },
      deep: true
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/IndividualAddressType").then((response) => {
      this.addressTypes = response.data.data;
    });
    axios.get("/api/v2/ContactRestriction").then((response) => {
      this.contactRestrictions = response.data.data;
    });
    this.address = this.individualAddres && this.individualAddress.IndividualAddressId ? clone(this.individualAddress) : this.individualAddress;
    this.address.ContactStatusId = this.address.ContactStatusId ? this.address.ContactStatusId : 4;
    this.address.CanContactRestrictionId = this.address.CanContactRestrictionId ? this.address.CanContactRestrictionId : 1;
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      addressTypes: [],
      contactRestrictions: [],
      address: {},
      dataUpdated: false,
      rules: [],
      required: false,
      emptyAddress: {
        IndividualAddressTypeId: null,
        ContactStatusId: null,
        ContactSourceId: null,
        IsPreferred: false,
        AddressLine1: null,
        AddressLine2: null,
        City: null,
        StateTerritoryId: null,
        PostalCode: null,
        IndividualId: this.individual.IndividualId,
        CanVisitRestrictionId: null,
        DoNotVisit: false,
        CanSendMailRestrictionId: null
      }
    };
  },
  methods: {
    dataUpdateFlag() {
      if (this.dataUpdated) {
        return;
      }
      this.rules = [
        (value) => !!value || "Required."
      ];
      this.required = true;
      this.address.ContactStatusId = 4;
      this.address.CanSendMailRestrictionId = 1;
      this.dataUpdated = true;
    },
    saveNewAddress() {
      if (!this.$refs.form.validate()) {
        return;
      }
      this.address.IndividualId = this.individual.IndividualId;
      this.address.IsPreferred = !!this.address.IsPreferred;
      this.address.CanVisitRestrictionId = this.address.DoNotVisit === true ? 2 : 1;
      if (this.savedAddress) {
        axios.put("/api/v2/IndividualAddress/" + this.savedAddress.IndividualAddressId + "?include=ContactStatus,ContactSource,StateTerritory,CanSendMailRestriction", this.address).then((response) => {
          this.handleAddressSaved(response.data.data, true, false);
        });
      } else {
        delete this.address.IndividualAddressId;
        axios.post("/api/v2/IndividualAddress?include=ContactStatus,ContactSource,StateTerritory,CanSendMailRestriction", this.address).then((response) => {
          this.resetAddress();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Address saved.";
          this.handleAddressSaved(response.data.data, false, true);
        });
      }
    },
    saveCloseAddress() {
      if (!this.$refs.form.validate()) {
        return;
      }
      this.address.IndividualId = this.individual.IndividualId;
      this.address.IsPreferred = !!this.address.IsPreferred;
      this.address.CanVisitRestrictionId = this.address.DoNotVisit === true ? 2 : 1;
      if (this.savedAddress) {
        axios.put("/api/v2/IndividualAddress/" + this.savedAddress.IndividualAddressId + "?include=ContactStatus,ContactSource,StateTerritory,CanSendMailRestriction", this.address).then((response) => {
          this.handleAddressSaved(response.data.data, true, false);
        });
      } else {
        delete this.address.IndividualAddressId;
        axios.post("/api/v2/IndividualAddress?include=ContactStatus,ContactSource,StateTerritory,CanSendMailRestriction", this.address).then((response) => {
          this.resetAddress();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Address saved.";
          this.handleAddressSaved(response.data.data, true, true);
        });
      }
    },
    cancel() {
      this.setEditAddress();
      this.$emit("cancel-add-address");
    },
    handleAddressSaved(addressData, flip, isNew) {
      this.$emit("saved-address", { address: addressData, flip, isNew });
    },
    resetAddress() {
      for (const field in this.emptyAddress) {
        if (this.emptyAddress.hasOwnProperty(field)) {
          this.address[field] = this.emptyAddress[field];
        }
      }
    },
    setEditAddress() {
      this.address = clone(this.savedAddress) || clone(this.emptyAddress);
      this.address.DoNotVisit = this.savedAddress.CanVisitRestrictionId && this.savedAddress.CanVisitRestrictionId !== 1;
    },
    resetAllAddress() {
      this.$refs.resetAddressType.reset();
      this.$refs.resetAddressStatus.reset();
      this.$refs.resetAddressSource.reset();
      this.address.IsPreferred = false;
      this.address.DoNotVisit = false;
      this.$refs.resetMailingRestriction.reset();
      this.$refs.resetAddressLine1.reset();
      this.$refs.resetAddressLine2.reset();
      this.$refs.resetCity.reset();
      this.address.StateTerritoryId = null;
      this.$refs.resetZipCode.reset();
      this.emptyAddress.StateTerritoryId = null;
      this.rules = [];
      this.required = false;
      this.dataUpdated = false;
    }
  }
};
const _hoisted_1$a = { class: "data-container" };
const _hoisted_2$a = {
  key: 0,
  class: "text-red"
};
const _hoisted_3$a = { class: "data-container" };
const _hoisted_4$a = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$a = { class: "data-container" };
const _hoisted_6$a = {
  key: 0,
  class: "text-red"
};
const _hoisted_7$8 = { class: "data-container" };
const _hoisted_8$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_9$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_10$2 = {
  key: 0,
  class: "text-red"
};
const _hoisted_11$2 = { class: "data-container" };
const _hoisted_12$2 = {
  key: 0,
  class: "text-red"
};
function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_StateTerritorySelectComponent = resolveComponent("StateTerritorySelectComponent");
  return openBlock(), createBlock(VCard, null, {
    default: withCtx(() => [
      createVNode(VCardTitle, null, {
        default: withCtx(() => [
          createTextVNode(
            toDisplayString($options.newOrEditAddress),
            1
            /* TEXT */
          )
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VCardText, null, {
        default: withCtx(() => [
          createVNode(VAlert, {
            type: $data.alertType,
            modelValue: $data.alert,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
            closable: "",
            "close-text": "Dismiss"
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($data.alertText),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }, 8, ["type", "modelValue"]),
          createBaseVNode("div", {
            onClick: _cache[12] || (_cache[12] = ($event) => $options.dataUpdateFlag())
          }, [
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_1$a, [
                      createVNode(VSelect, {
                        ref: "resetAddressType",
                        items: $data.addressTypes,
                        "item-value": "IndividualAddressTypeId",
                        "item-title": "IndividualAddressTypeName",
                        modelValue: $data.address.IndividualAddressTypeId,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.address.IndividualAddressTypeId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_2$a, "* ")) : createCommentVNode("v-if", true),
                          _cache[16] || (_cache[16] = createTextVNode("Address Type "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_3$a, [
                      createVNode(VSelect, {
                        ref: "resetAddressStatus",
                        items: $options.contactStatus,
                        "item-value": "ContactStatusId",
                        "item-title": "ContactStatusName",
                        modelValue: $data.address.ContactStatusId,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.address.ContactStatusId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_4$a, "* ")) : createCommentVNode("v-if", true),
                          _cache[17] || (_cache[17] = createTextVNode("Address Status "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_5$a, [
                      createVNode(VSelect, {
                        ref: "resetAddressSource",
                        items: $options.contactSources,
                        "item-value": "ContactSourceId",
                        "item-title": "ContactSourceName",
                        modelValue: $data.address.ContactSourceId,
                        "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.address.ContactSourceId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_6$a, "* ")) : createCommentVNode("v-if", true),
                          _cache[18] || (_cache[18] = createTextVNode("Address Source "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, {
                  cols: "4",
                  class: "switches"
                }, {
                  default: withCtx(() => [
                    createVNode(VSwitch, {
                      color: "primary",
                      ref: "resetPreferredAddress",
                      label: "Preferred Address",
                      modelValue: $data.address.IsPreferred,
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.address.IsPreferred = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, {
                  cols: "4",
                  class: "switches"
                }, {
                  default: withCtx(() => [
                    createVNode(VSwitch, {
                      color: "primary",
                      ref: "resetDoNotVisit",
                      label: "Do Not Visit",
                      modelValue: $data.address.DoNotVisit,
                      "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.address.DoNotVisit = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_7$8, [
                      createVNode(VSelect, {
                        ref: "resetMailingRestriction",
                        items: $data.contactRestrictions,
                        "item-value": "ContactRestrictionId",
                        "item-title": "ContactRestrictionName",
                        modelValue: $data.address.CanSendMailRestrictionId,
                        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.address.CanSendMailRestrictionId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_8$4, "* ")) : createCommentVNode("v-if", true),
                          _cache[19] || (_cache[19] = createTextVNode("Mailing Contact Restriction "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, { cols: "8" }, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      ref: "resetAddressLine1",
                      rules: $data.rules,
                      modelValue: $data.address.AddressLine1,
                      "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.address.AddressLine1 = $event),
                      maxlength: 200,
                      variant: "underlined"
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_9$4, "* ")) : createCommentVNode("v-if", true),
                        _cache[20] || (_cache[20] = createTextVNode("Street Address "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["rules", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      ref: "resetAddressLine2",
                      label: "Suite/Apt",
                      modelValue: $data.address.AddressLine2,
                      "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.address.AddressLine2 = $event),
                      maxlength: 200,
                      variant: "underlined"
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      ref: "resetCity",
                      rules: $data.rules,
                      modelValue: $data.address.City,
                      "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.address.City = $event),
                      maxlength: 100,
                      variant: "underlined"
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_10$2, "* ")) : createCommentVNode("v-if", true),
                        _cache[21] || (_cache[21] = createTextVNode("City "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["rules", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_11$2, [
                      createVNode(_component_StateTerritorySelectComponent, {
                        "item-value": "StateTerritoryId",
                        "item-text": "StateTerritoryName",
                        label: "State",
                        modelValue: $data.address.StateTerritoryId,
                        "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $data.address.StateTerritoryId = $event),
                        rules: $data.rules,
                        id: "stateDropdown"
                      }, null, 8, ["modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      ref: "resetZipCode",
                      rules: $data.rules,
                      modelValue: $data.address.PostalCode,
                      "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.address.PostalCode = $event),
                      maxlength: 15,
                      variant: "underlined"
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_12$2, "* ")) : createCommentVNode("v-if", true),
                        _cache[22] || (_cache[22] = createTextVNode("Zip Code "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["rules", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          !$props.readOnly && $props.resetSection && $data.required ? (openBlock(), createBlock(VRow, { key: 0 }, {
            default: withCtx(() => [
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createVNode(VBtn, {
                    color: "error",
                    class: "mr-4 px-4",
                    onClick: $options.resetAllAddress
                  }, {
                    default: withCtx(() => _cache[23] || (_cache[23] = [
                      createTextVNode(" Reset Address ")
                    ])),
                    _: 1
                    /* STABLE */
                  }, 8, ["onClick"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      }),
      !$props.readOnly && $props.showSaveButton ? (openBlock(), createBlock(VCardActions, { key: 0 }, {
        default: withCtx(() => [
          createVNode(VSpacer),
          createVNode(VBtn, {
            onClick: _cache[13] || (_cache[13] = ($event) => $options.cancel()),
            variant: "elevated"
          }, {
            default: withCtx(() => _cache[24] || (_cache[24] = [
              createTextVNode("Cancel")
            ])),
            _: 1
            /* STABLE */
          }),
          !this.savedAddress ? (openBlock(), createBlock(VBtn, {
            key: 0,
            color: "secondary",
            href: "",
            onClick: _cache[14] || (_cache[14] = ($event) => $options.saveNewAddress()),
            variant: "elevated"
          }, {
            default: withCtx(() => _cache[25] || (_cache[25] = [
              createTextVNode("Save and Continue Adding...")
            ])),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true),
          createVNode(VBtn, {
            color: "success",
            href: "",
            onClick: _cache[15] || (_cache[15] = ($event) => $options.saveCloseAddress()),
            variant: "elevated"
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($options.saveButtonLabel),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })) : createCommentVNode("v-if", true)
    ]),
    _: 1
    /* STABLE */
  });
}
const AddIndividualAddressComponent = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$e], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/AddIndividualAddressComponent.vue"]]);
const _sfc_main$d = {
  name: "AddIndividualBillingAddressComponent",
  components: { StateTerritorySelectComponent2 },
  props: {
    individual: {
      type: Object,
      required: true
    },
    savedAddress: {
      type: Object,
      required: false
    },
    showSaveButton: {
      type: Boolean,
      default: true
    },
    readOnly: {
      type: Boolean,
      required: true
    },
    individualBillingAddress: {
      type: Object,
      required: true
    },
    resetSection: {
      type: Boolean,
      default: true
    }
  },
  computed: {
    newOrEditAddress() {
      if (!this.savedAddress) {
        this.resetAddress();
        return "Billing Address";
      } else {
        return "Edit Billing Address";
      }
    },
    saveButtonLabel() {
      return this.savedAddress ? "Save" : "save and close";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    },
    stateTerritories() {
      this.stateTerritoriesList = this.$store.getters["stateTerritory/stateTerritories"];
      return this.stateTerritoriesList;
    }
  },
  watch: {
    individualBillingAddress: {
      handler(value) {
        this.address = this.individualBillingAddress.IndividualAddressId ? clone(value) : value;
        console.log("address", this.address);
        this.address.ContactStatusId = this.address.ContactStatusId ? this.address.ContactStatusId : null;
        this.address.CanContactRestrictionId = this.address.CanContactRestrictionId ? this.address.CanContactRestrictionId : null;
      }
    },
    savedAddress: {
      handler(data) {
        this.setEditAddress();
      },
      deep: true
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/IndividualAddressType").then((response) => {
      this.addressTypes = response.data.data;
    });
    axios.get("/api/v2/ContactRestriction").then((response) => {
      this.contactRestrictions = response.data.data;
    });
    this.address = this.individualBillingAddress && this.individualBillingAddress.IndividualAddressId ? clone(this.individualBillingAddress) : this.individualBillingAddress;
    console.log("address", this.address);
    this.address.ContactStatusId = this.address.ContactStatusId ? this.address.ContactStatusId : 4;
    this.address.CanContactRestrictionId = this.address.CanContactRestrictionId ? this.address.CanContactRestrictionId : 1;
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      addressTypes: [],
      contactRestrictions: [],
      address: {},
      dataUpdated: false,
      rules: [],
      required: false,
      emptyAddress: {
        IndividualAddressTypeId: null,
        ContactStatusId: null,
        ContactSourceId: null,
        IsPreferred: false,
        AddressLine1: null,
        AddressLine2: null,
        City: null,
        StateTerritoryId: null,
        PostalCode: null,
        IndividualId: this.individual.IndividualId,
        CanVisitRestrictionId: null,
        DoNotVisit: false,
        CanSendMailRestrictionId: null
      }
    };
  },
  methods: {
    dataUpdateFlag() {
      if (this.dataUpdated) {
        return;
      }
      this.rules = [
        (value) => !!value || "Required."
      ];
      this.required = true;
      this.address.ContactStatusId = 4;
      this.address.CanSendMailRestrictionId = 1;
      this.dataUpdated = true;
    },
    saveNewAddress() {
      if (!this.$refs.form.validate()) {
        return;
      }
      this.address.IndividualId = this.individual.IndividualId;
      this.address.IsPreferred = !!this.address.IsPreferred;
      this.address.CanVisitRestrictionId = this.address.DoNotVisit === true ? 2 : 1;
      if (this.savedAddress) {
        axios.put("/api/v2/IndividualAddress/" + this.savedAddress.IndividualAddressId + "?include=ContactStatus,ContactSource,StateTerritory,CanSendMailRestriction", this.address).then((response) => {
          this.handleAddressSaved(response.data.data, true, false);
        });
      } else {
        delete this.address.IndividualAddressId;
        axios.post("/api/v2/IndividualAddress?include=ContactStatus,ContactSource,StateTerritory,CanSendMailRestriction", this.address).then((response) => {
          this.resetAddress();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Address saved.";
          this.handleAddressSaved(response.data.data, false, true);
        });
      }
    },
    saveCloseAddress() {
      if (!this.$refs.form.validate()) {
        return;
      }
      this.address.IndividualId = this.individual.IndividualId;
      this.address.IsPreferred = !!this.address.IsPreferred;
      this.address.CanVisitRestrictionId = this.address.DoNotVisit === true ? 2 : 1;
      if (this.savedAddress) {
        axios.put("/api/v2/IndividualAddress/" + this.savedAddress.IndividualAddressId + "?include=ContactStatus,ContactSource,StateTerritory,CanSendMailRestriction", this.address).then((response) => {
          this.handleAddressSaved(response.data.data, true, false);
        });
      } else {
        delete this.address.IndividualAddressId;
        axios.post("/api/v2/IndividualAddress?include=ContactStatus,ContactSource,StateTerritory,CanSendMailRestriction", this.address).then((response) => {
          this.resetAddress();
          this.alert = true;
          this.alertType = "success";
          this.alertText = "Address saved.";
          this.handleAddressSaved(response.data.data, true, true);
        });
      }
    },
    cancel() {
      this.setEditAddress();
      this.$emit("cancel-add-address");
    },
    handleAddressSaved(addressData, flip, isNew) {
      this.$emit("saved-address", { address: addressData, flip, isNew });
    },
    resetAddress() {
      for (const field in this.emptyAddress) {
        if (this.emptyAddress.hasOwnProperty(field)) {
          this.address[field] = this.emptyAddress[field];
        }
      }
    },
    setEditAddress() {
      this.address = clone(this.savedAddress) || clone(this.emptyAddress);
      this.address.DoNotVisit = this.savedAddress.CanVisitRestrictionId && this.savedAddress.CanVisitRestrictionId !== 1;
    },
    resetAllAddress() {
      this.$refs.resetAddressType.reset();
      this.$refs.resetAddressStatus.reset();
      this.$refs.resetAddressSource.reset();
      this.$refs.resetPreferredAddress.reset();
      this.$refs.resetDoNotVisit.reset();
      this.$refs.resetMailingRestriction.reset();
      this.$refs.resetAddressLine1.reset();
      this.$refs.resetAddressLine2.reset();
      this.$refs.resetCity.reset();
      this.$refs.resetZipCode.reset();
      this.emptyAddress.StateTerritoryId = "null";
      this.rules = [];
      this.required = false;
      this.dataUpdated = false;
    }
  }
};
const _hoisted_1$9 = { class: "data-container" };
const _hoisted_2$9 = {
  key: 0,
  class: "text-red"
};
const _hoisted_3$9 = { class: "data-container" };
const _hoisted_4$9 = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$9 = { class: "data-container" };
const _hoisted_6$9 = {
  key: 0,
  class: "text-red"
};
const _hoisted_7$7 = { class: "data-container" };
const _hoisted_8$3 = {
  key: 0,
  class: "text-red"
};
const _hoisted_9$3 = {
  key: 0,
  class: "text-red"
};
const _hoisted_10$1 = {
  key: 0,
  class: "text-red"
};
const _hoisted_11$1 = { class: "data-container" };
const _hoisted_12$1 = {
  key: 0,
  class: "text-red"
};
function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_StateTerritorySelectComponent2 = resolveComponent("StateTerritorySelectComponent2");
  return openBlock(), createBlock(VCard, null, {
    default: withCtx(() => [
      createVNode(VCardTitle, null, {
        default: withCtx(() => [
          createTextVNode(
            toDisplayString($options.newOrEditAddress),
            1
            /* TEXT */
          )
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VCardText, null, {
        default: withCtx(() => [
          createVNode(VAlert, {
            type: $data.alertType,
            modelValue: $data.alert,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
            closable: "",
            "close-text": "Dismiss"
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($data.alertText),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }, 8, ["type", "modelValue"]),
          createBaseVNode("div", {
            onClick: _cache[12] || (_cache[12] = ($event) => $options.dataUpdateFlag())
          }, [
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_1$9, [
                      createVNode(VSelect, {
                        ref: "resetAddressType",
                        items: $data.addressTypes,
                        "item-value": "IndividualAddressTypeId",
                        "item-title": "IndividualAddressTypeName",
                        modelValue: $data.address.IndividualAddressTypeId,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.address.IndividualAddressTypeId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_2$9, "* ")) : createCommentVNode("v-if", true),
                          _cache[16] || (_cache[16] = createTextVNode("Address Type "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_3$9, [
                      createVNode(VSelect, {
                        ref: "resetAddressStatus",
                        items: $options.contactStatus,
                        "item-value": "ContactStatusId",
                        "item-title": "ContactStatusName",
                        modelValue: $data.address.ContactStatusId,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.address.ContactStatusId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_4$9, "* ")) : createCommentVNode("v-if", true),
                          _cache[17] || (_cache[17] = createTextVNode("Address Status "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_5$9, [
                      createVNode(VSelect, {
                        ref: "resetAddressSource",
                        items: $options.contactSources,
                        "item-value": "ContactSourceId",
                        "item-title": "ContactSourceName",
                        modelValue: $data.address.ContactSourceId,
                        "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.address.ContactSourceId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_6$9, "* ")) : createCommentVNode("v-if", true),
                          _cache[18] || (_cache[18] = createTextVNode("Address Source "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, {
                  cols: "4",
                  class: "switches"
                }, {
                  default: withCtx(() => [
                    createVNode(VSwitch, {
                      color: "primary",
                      ref: "resetPreferredAddress",
                      label: "Preferred Address",
                      modelValue: $data.address.IsPreferred,
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.address.IsPreferred = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, {
                  cols: "4",
                  class: "switches"
                }, {
                  default: withCtx(() => [
                    createVNode(VSwitch, {
                      color: "primary",
                      ref: "resetDoNotVisit",
                      label: "Do Not Visit",
                      modelValue: $data.address.DoNotVisit,
                      "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.address.DoNotVisit = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_7$7, [
                      createVNode(VSelect, {
                        ref: "resetMailingRestriction",
                        items: $data.contactRestrictions,
                        "item-value": "ContactRestrictionId",
                        "item-title": "ContactRestrictionName",
                        modelValue: $data.address.CanSendMailRestrictionId,
                        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.address.CanSendMailRestrictionId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_8$3, "* ")) : createCommentVNode("v-if", true),
                          _cache[19] || (_cache[19] = createTextVNode("Mailing Contact Restriction "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, { cols: "8" }, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      ref: "resetAddressLine1",
                      rules: $data.rules,
                      modelValue: $data.address.AddressLine1,
                      "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.address.AddressLine1 = $event),
                      maxlength: 200,
                      variant: "underlined"
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_9$3, "* ")) : createCommentVNode("v-if", true),
                        _cache[20] || (_cache[20] = createTextVNode("Street Address "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["rules", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      ref: "resetAddressLine2",
                      label: "Suite/Apt",
                      modelValue: $data.address.AddressLine2,
                      "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.address.AddressLine2 = $event),
                      maxlength: 200,
                      variant: "underlined"
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      ref: "resetCity",
                      rules: $data.rules,
                      modelValue: $data.address.City,
                      "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.address.City = $event),
                      maxlength: 100,
                      variant: "underlined"
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_10$1, "* ")) : createCommentVNode("v-if", true),
                        _cache[21] || (_cache[21] = createTextVNode("City "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["rules", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_11$1, [
                      createVNode(_component_StateTerritorySelectComponent2, {
                        "item-value": "StateTerritoryId",
                        "item-text": "StateTerritoryName",
                        label: "State",
                        modelValue: $data.address.StateTerritoryId,
                        "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $data.address.StateTerritoryId = $event),
                        rules: $data.rules,
                        id: "stateDropdown",
                        "state-territories": $options.stateTerritories
                      }, null, 8, ["modelValue", "rules", "state-territories"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      ref: "resetZipCode",
                      rules: $data.rules,
                      modelValue: $data.address.PostalCode,
                      "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.address.PostalCode = $event),
                      maxlength: 15,
                      variant: "underlined"
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_12$1, "* ")) : createCommentVNode("v-if", true),
                        _cache[22] || (_cache[22] = createTextVNode("Zip Code "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["rules", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          !$props.readOnly && $props.resetSection && $data.required ? (openBlock(), createBlock(VRow, { key: 0 }, {
            default: withCtx(() => [
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createVNode(VBtn, {
                    color: "error",
                    class: "mr-4 px-4",
                    onClick: $options.resetAllAddress
                  }, {
                    default: withCtx(() => _cache[23] || (_cache[23] = [
                      createTextVNode(" Reset Address ")
                    ])),
                    _: 1
                    /* STABLE */
                  }, 8, ["onClick"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      }),
      !$props.readOnly && $props.showSaveButton ? (openBlock(), createBlock(VCardActions, { key: 0 }, {
        default: withCtx(() => [
          createVNode(VSpacer),
          createVNode(VBtn, {
            onClick: _cache[13] || (_cache[13] = ($event) => $options.cancel()),
            variant: "elevated"
          }, {
            default: withCtx(() => _cache[24] || (_cache[24] = [
              createTextVNode("Cancel")
            ])),
            _: 1
            /* STABLE */
          }),
          !this.savedAddress ? (openBlock(), createBlock(VBtn, {
            key: 0,
            color: "secondary",
            onClick: _cache[14] || (_cache[14] = ($event) => $options.saveNewAddress()),
            variant: "elevated"
          }, {
            default: withCtx(() => _cache[25] || (_cache[25] = [
              createTextVNode("Save and continue Adding...")
            ])),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true),
          createVNode(VBtn, {
            color: "success",
            onClick: _cache[15] || (_cache[15] = ($event) => $options.saveCloseAddress()),
            variant: "elevated"
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($options.saveButtonLabel),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })) : createCommentVNode("v-if", true)
    ]),
    _: 1
    /* STABLE */
  });
}
const AddIndividualBillingAddressComponent = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$d], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/AddIndividualBillingAddressComponent.vue"]]);
const _sfc_main$c = {
  name: "AddIndividualEmailComponent",
  props: {
    individual: {
      type: Object,
      required: true
    },
    savedEmail: {
      type: Object,
      required: false
    },
    showSaveButton: {
      type: Boolean,
      default: true
    },
    readOnly: {
      type: Boolean,
      required: true
    },
    individualEmail: {
      type: Object,
      required: true
    }
  },
  computed: {
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    individualEmail: {
      handler(value) {
        if (this.email && this.email.IndividualEmailId === this.individualEmail.IndividualEmailId) {
          return;
        }
        this.email = this.individualEmail.IndividualEmailId ? clone(value) : value;
        this.email.ContactStatusId = this.email.ContactStatusId ? this.email.ContactStatusId : null;
        this.email.CanContactRestrictionId = this.email.CanContactRestrictionId ? this.email.CanContactRestrictionId : null;
      }
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/IndividualEmailType").then((response) => {
      this.emailTypes = response.data.data;
    });
    axios.get("/api/v2/ContactRestriction").then((response) => {
      this.contactRestrictions = response.data.data;
    });
    this.email = this.individualEmail.IndividualEmailId ? clone(this.individualEmail) : this.individualEmail;
    this.email.ContactStatusId = this.email.ContactStatusId ? this.email.ContactStatusId : null;
    this.email.CanContactRestrictionId = this.email.CanContactRestrictionId ? this.email.CanContactRestrictionId : null;
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      emailTypes: [],
      contactRestrictions: [],
      email: { ContactStatusId: 4, CanContactRestrictionId: 1 },
      dataUpdated: false,
      rules: [],
      rulesEmail: [],
      required: false,
      emptyEmail: {
        IndividualEmailTypeId: null,
        ContactStatusId: null,
        ContactSourceId: null,
        IsPreferred: false,
        CanContact: false,
        Email: null,
        CanContactRestrictionId: null,
        IndividualId: this.individual.IndividualId
      }
    };
  },
  methods: {
    dataUpdateFlag() {
      if (this.dataUpdated) {
        return;
      }
      this.rules = [
        (value) => !!value || "Required."
      ];
      this.rulesEmail = [
        (value) => !!value || "Required.",
        (value) => {
          const pattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
          return pattern.test(value) || "Invalid e-mail.";
        }
      ];
      this.required = true;
      this.email.ContactStatusId = 4;
      this.email.CanContactRestrictionId = 1;
      this.dataUpdated = true;
    },
    handleEmailSaved(emailData, flip, isNew) {
      this.$emit("saved-email", { email: emailData, flip, isNew });
    },
    resetEmail() {
      for (const field in this.emptyEmail) {
        if (this.emptyEmail.hasOwnProperty(field)) {
          this.email[field] = this.emptyEmail[field];
        }
      }
    },
    setEditEmail() {
      this.email = clone(this.savedEmail) || clone(this.emptyEmail);
    },
    resetAllEmail() {
      this.$refs.resetEmailType.reset();
      this.$refs.resetEmailStatus.reset();
      this.$refs.resetEmailSource.reset();
      this.email.isPreferred = false;
      this.$refs.resetEmailField.reset();
      this.$refs.resetContactRestriction.reset();
      this.rules = [];
      this.rulesEmail = [];
      this.required = false;
      this.dataUpdated = false;
    }
  }
};
const _hoisted_1$8 = { class: "data-container" };
const _hoisted_2$8 = {
  key: 0,
  class: "text-red"
};
const _hoisted_3$8 = { class: "data-container" };
const _hoisted_4$8 = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$8 = { class: "data-container" };
const _hoisted_6$8 = {
  key: 0,
  class: "text-red"
};
const _hoisted_7$6 = {
  key: 0,
  class: "text-red"
};
const _hoisted_8$2 = { class: "data-container" };
const _hoisted_9$2 = {
  key: 0,
  class: "text-red"
};
function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VCard, null, {
    default: withCtx(() => [
      createVNode(VCardTitle, null, {
        default: withCtx(() => _cache[8] || (_cache[8] = [
          createTextVNode("Email")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VCardText, null, {
        default: withCtx(() => [
          createVNode(VAlert, {
            type: $data.alertType,
            modelValue: $data.alert,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
            closable: "",
            "close-text": "Dismiss"
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($data.alertText),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }, 8, ["type", "modelValue"]),
          createBaseVNode("div", {
            onClick: _cache[7] || (_cache[7] = ($event) => $options.dataUpdateFlag())
          }, [
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_1$8, [
                      createVNode(VSelect, {
                        ref: "resetEmailType",
                        items: $data.emailTypes,
                        "item-value": "IndividualEmailTypeId",
                        "item-title": "IndividualEmailTypeName",
                        modelValue: $data.email.IndividualEmailTypeId,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.email.IndividualEmailTypeId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_2$8, "* ")) : createCommentVNode("v-if", true),
                          _cache[9] || (_cache[9] = createTextVNode("Email Type "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_3$8, [
                      createVNode(VSelect, {
                        ref: "resetEmailStatus",
                        items: $options.contactStatus,
                        "item-value": "ContactStatusId",
                        "item-title": "ContactStatusName",
                        modelValue: $data.email.ContactStatusId,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.email.ContactStatusId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_4$8, "* ")) : createCommentVNode("v-if", true),
                          _cache[10] || (_cache[10] = createTextVNode("Email Status "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_5$8, [
                      createVNode(VSelect, {
                        ref: "resetEmailSource",
                        items: $options.contactSources,
                        "item-value": "ContactSourceId",
                        "item-title": "ContactSourceName",
                        modelValue: $data.email.ContactSourceId,
                        "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.email.ContactSourceId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_6$8, "* ")) : createCommentVNode("v-if", true),
                          _cache[11] || (_cache[11] = createTextVNode("Email Source "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, {
                  cols: "4",
                  class: "switches"
                }, {
                  default: withCtx(() => [
                    createVNode(VSwitch, {
                      ref: "resetPreferredEmail",
                      label: "Preferred Email",
                      modelValue: $data.email.IsPreferred,
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.email.IsPreferred = $event),
                      color: "primary"
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      ref: "resetEmailField",
                      rules: $data.rulesEmail,
                      modelValue: $data.email.Email,
                      "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.email.Email = $event),
                      maxlength: 200,
                      variant: "underlined"
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_7$6, "* ")) : createCommentVNode("v-if", true),
                        _cache[12] || (_cache[12] = createTextVNode("Email "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["rules", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_8$2, [
                      createVNode(VSelect, {
                        ref: "resetContactRestriction",
                        items: $data.contactRestrictions,
                        "item-value": "ContactRestrictionId",
                        "item-title": "ContactRestrictionName",
                        modelValue: $data.email.CanContactRestrictionId,
                        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.email.CanContactRestrictionId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_9$2, "* ")) : createCommentVNode("v-if", true),
                          _cache[13] || (_cache[13] = createTextVNode("Contact Restriction "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          !$props.readOnly && $data.required ? (openBlock(), createBlock(VRow, { key: 0 }, {
            default: withCtx(() => [
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createVNode(VBtn, {
                    color: "error",
                    class: "mr-4 px-4",
                    onClick: $options.resetAllEmail,
                    variant: "elevated"
                  }, {
                    default: withCtx(() => _cache[14] || (_cache[14] = [
                      createTextVNode(" Reset Email ")
                    ])),
                    _: 1
                    /* STABLE */
                  }, 8, ["onClick"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const IndividualEmailComponent = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$c], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/AddIndividualEmailComponent.vue"]]);
const _sfc_main$b = {
  name: "AddIndividualEmailComponent",
  props: {
    individual: {
      type: Object,
      required: true
    },
    savedEmail: {
      type: Object,
      required: false
    },
    showSaveButton: {
      type: Boolean,
      default: true
    },
    readOnly: {
      type: Boolean,
      required: true
    },
    individualEmailWork: {
      type: Object,
      required: true
    }
  },
  computed: {
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    individualEmailWork: {
      handler(value) {
        this.email = value;
        this.email.ContactStatusId = this.email.ContactStatusId ? this.email.ContactStatusId : null;
        this.email.CanContactRestrictionId = this.email.CanContactRestrictionId ? this.email.CanContactRestrictionId : null;
      }
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/IndividualEmailType").then((response) => {
      this.emailTypes = response.data.data;
    });
    axios.get("/api/v2/ContactRestriction").then((response) => {
      this.contactRestrictions = response.data.data;
    });
    this.email = this.individualEmailWork;
    this.email.ContactStatusId = this.email.ContactStatusId ? this.email.ContactStatusId : null;
    this.email.CanContactRestrictionId = this.email.CanContactRestrictionId ? this.email.CanContactRestrictionId : null;
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      emailTypes: [],
      contactRestrictions: [],
      email: { ContactStatusId: 4, CanContactRestrictionId: 1 },
      dataUpdated: false,
      rules: {
        required: false,
        email: false
      },
      required: false,
      emptyEmail: {
        IndividualEmailTypeId: null,
        ContactStatusId: null,
        ContactSourceId: null,
        IsPreferred: false,
        CanContact: false,
        Email: null,
        CanContactRestrictionId: null,
        IndividualId: this.individual.IndividualId
      }
    };
  },
  methods: {
    dataUpdateFlag() {
      if (this.dataUpdated) {
        return;
      }
      this.rules = [
        (value) => !!value || "Required."
      ];
      this.rulesEmail = [
        (value) => !!value || "Required.",
        (value) => {
          const pattern = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
          return pattern.test(value) || "Invalid e-mail.";
        }
      ];
      this.required = true;
      this.dataUpdated = true;
    },
    handleEmailSaved(emailData, flip, isNew) {
      this.$emit("saved-email", { email: emailData, flip, isNew });
    }
  }
};
const _hoisted_1$7 = { class: "data-container" };
const _hoisted_2$7 = {
  key: 0,
  class: "text-red"
};
const _hoisted_3$7 = { class: "data-container" };
const _hoisted_4$7 = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$7 = { class: "data-container" };
const _hoisted_6$7 = {
  key: 0,
  class: "text-red"
};
const _hoisted_7$5 = {
  key: 0,
  class: "text-red"
};
const _hoisted_8$1 = { class: "data-container" };
const _hoisted_9$1 = {
  key: 0,
  class: "text-red"
};
function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VCard, null, {
    default: withCtx(() => [
      createVNode(VCardTitle, null, {
        default: withCtx(() => _cache[8] || (_cache[8] = [
          createTextVNode("Email")
        ])),
        _: 1
        /* STABLE */
      }),
      createVNode(VCardText, {
        onClick: _cache[7] || (_cache[7] = ($event) => $options.dataUpdateFlag())
      }, {
        default: withCtx(() => [
          createVNode(VAlert, {
            type: $data.alertType,
            modelValue: $data.alert,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
            closable: "",
            "close-text": "Dismiss"
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($data.alertText),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }, 8, ["type", "modelValue"]),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_1$7, [
                    createVNode(VSelect, {
                      items: $data.emailTypes,
                      "item-value": "IndividualEmailTypeId",
                      "item-title": "IndividualEmailTypeName",
                      modelValue: $data.email.IndividualEmailTypeId,
                      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.email.IndividualEmailTypeId = $event),
                      rules: $data.rules,
                      variant: "underlined"
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_2$7, "* ")) : createCommentVNode("v-if", true),
                        _cache[9] || (_cache[9] = createTextVNode("Email Type "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["items", "modelValue", "rules"])
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_3$7, [
                    createVNode(VSelect, {
                      items: $options.contactStatus,
                      "item-value": "ContactStatusId",
                      "item-title": "ContactStatusName",
                      modelValue: $data.email.ContactStatusId,
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.email.ContactStatusId = $event),
                      rules: $data.rules,
                      variant: "underlined"
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_4$7, "* ")) : createCommentVNode("v-if", true),
                        _cache[10] || (_cache[10] = createTextVNode("Email Status "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["items", "modelValue", "rules"])
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_5$7, [
                    createVNode(VSelect, {
                      items: $options.contactSources,
                      "item-value": "ContactSourceId",
                      "item-title": "ContactSourceName",
                      modelValue: $data.email.ContactSourceId,
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.email.ContactSourceId = $event),
                      rules: $data.rules,
                      variant: "underlined"
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_6$7, "* ")) : createCommentVNode("v-if", true),
                        _cache[11] || (_cache[11] = createTextVNode("Email Source "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["items", "modelValue", "rules"])
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "4",
                class: "switches"
              }, {
                default: withCtx(() => [
                  createVNode(VSwitch, {
                    color: "primary",
                    label: "Preferred Email",
                    modelValue: $data.email.IsPreferred,
                    "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.email.IsPreferred = $event)
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    rules: _ctx.rulesEmail,
                    modelValue: $data.email.Email,
                    "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.email.Email = $event),
                    maxlength: 200,
                    variant: "underlined"
                  }, {
                    label: withCtx(() => [
                      $data.required ? (openBlock(), createElementBlock("span", _hoisted_7$5, "* ")) : createCommentVNode("v-if", true),
                      _cache[12] || (_cache[12] = createTextVNode("Email "))
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["rules", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_8$1, [
                    createVNode(VSelect, {
                      items: $data.contactRestrictions,
                      "item-value": "ContactRestrictionId",
                      "item-title": "ContactRestrictionName",
                      modelValue: $data.email.CanContactRestrictionId,
                      "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.email.CanContactRestrictionId = $event),
                      rules: $data.rules,
                      variant: "underlined"
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_9$1, "* ")) : createCommentVNode("v-if", true),
                        _cache[13] || (_cache[13] = createTextVNode("Contact Restriction "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["items", "modelValue", "rules"])
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const IndividualEmailWorkComponent = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["render", _sfc_render$b], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/AddIndividualEmailWorkComponent.vue"]]);
var I = Object.defineProperty;
var S = (n, t, s) => t in n ? I(n, t, { enumerable: true, configurable: true, writable: true, value: s }) : n[t] = s;
var A = (n, t, s) => S(n, typeof t != "symbol" ? t + "" : t, s);
const N = {
  "#": { pattern: /[0-9]/ },
  "@": { pattern: /[a-zA-Z]/ },
  "*": { pattern: /[a-zA-Z0-9]/ }
}, R = (n, t, s) => n.replaceAll(t, "").replace(s, ".").replace("..", ".").replace(/[^.\d]/g, ""), C = (n, t, s) => {
  var e;
  return new Intl.NumberFormat(((e = s.number) == null ? void 0 : e.locale) ?? "en", {
    minimumFractionDigits: n,
    maximumFractionDigits: t,
    roundingMode: "trunc"
  });
}, P = (n, t = true, s) => {
  var k2, g, b, d;
  const e = ((k2 = s.number) == null ? void 0 : k2.unsigned) !== true && n.startsWith("-") ? "-" : "", r = ((g = s.number) == null ? void 0 : g.fraction) ?? 0;
  let a = C(0, r, s);
  const u = a.formatToParts(1000.12), p = ((b = u.find((o) => o.type === "group")) == null ? void 0 : b.value) ?? " ", f = ((d = u.find((o) => o.type === "decimal")) == null ? void 0 : d.value) ?? ".", i = R(n, p, f);
  if (Number.isNaN(parseFloat(i))) return e;
  const h = i.split(".");
  if (h[1] != null && h[1].length >= 1) {
    const o = h[1].length <= r ? h[1].length : r;
    a = C(o, r, s);
  }
  let l2 = a.format(parseFloat(i));
  return t ? r > 0 && i.endsWith(".") && !i.slice(0, -1).includes(".") && (l2 += f) : l2 = R(l2, p, f), e + l2;
};
class F {
  constructor(t = {}) {
    A(this, "opts", {});
    A(this, "memo", /* @__PURE__ */ new Map());
    const s = { ...t };
    if (s.tokens != null) {
      s.tokens = s.tokensReplace ? { ...s.tokens } : { ...N, ...s.tokens };
      for (const e of Object.values(s.tokens))
        typeof e.pattern == "string" && (e.pattern = new RegExp(e.pattern));
    } else
      s.tokens = N;
    Array.isArray(s.mask) && (s.mask.length > 1 ? s.mask = [...s.mask].sort((e, r) => e.length - r.length) : s.mask = s.mask[0] ?? ""), s.mask === "" && (s.mask = null), this.opts = s;
  }
  masked(t) {
    return this.process(String(t), this.findMask(String(t)));
  }
  unmasked(t) {
    return this.process(String(t), this.findMask(String(t)), false);
  }
  isEager() {
    return this.opts.eager === true;
  }
  isReversed() {
    return this.opts.reversed === true;
  }
  completed(t) {
    const s = this.findMask(String(t));
    if (this.opts.mask == null || s == null) return false;
    const e = this.process(String(t), s).length;
    return typeof this.opts.mask == "string" ? e >= this.opts.mask.length : e >= s.length;
  }
  findMask(t) {
    const s = this.opts.mask;
    if (s == null)
      return null;
    if (typeof s == "string")
      return s;
    if (typeof s == "function")
      return s(t);
    const e = this.process(t, s.slice(-1).pop() ?? "", false);
    return s.find((r) => this.process(t, r, false).length >= e.length) ?? "";
  }
  escapeMask(t) {
    const s = [], e = [];
    return t.split("").forEach((r, a) => {
      r === "!" && t[a - 1] !== "!" ? e.push(a - e.length) : s.push(r);
    }), { mask: s.join(""), escaped: e };
  }
  process(t, s, e = true) {
    if (this.opts.number != null) return P(t, e, this.opts);
    if (s == null) return t;
    const r = `v=${t},mr=${s},m=${e ? 1 : 0}`;
    if (this.memo.has(r)) return this.memo.get(r);
    const { mask: a, escaped: u } = this.escapeMask(s), p = [], f = this.opts.tokens != null ? this.opts.tokens : {}, i = this.isReversed() ? -1 : 1, h = this.isReversed() ? "unshift" : "push", l2 = this.isReversed() ? 0 : a.length - 1, k2 = this.isReversed() ? () => o > -1 && c2 > -1 : () => o < a.length && c2 < t.length, g = (v) => !this.isReversed() && v <= l2 || this.isReversed() && v >= l2;
    let b, d = -1, o = this.isReversed() ? a.length - 1 : 0, c2 = this.isReversed() ? t.length - 1 : 0, E = false;
    for (; k2(); ) {
      const v = a.charAt(o), m = f[v], y = (m == null ? void 0 : m.transform) != null ? m.transform(t.charAt(c2)) : t.charAt(c2);
      if (!u.includes(o) && m != null ? (y.match(m.pattern) != null ? (p[h](y), m.repeated ? (d === -1 ? d = o : o === l2 && o !== d && (o = d - i), l2 === d && (o -= i)) : m.multiple && (E = true, o -= i), o += i) : m.multiple ? E && (o += i, c2 -= i, E = false) : y === b ? b = void 0 : m.optional && (o += i, c2 -= i), c2 += i) : (e && !this.isEager() && p[h](v), y === v && !this.isEager() ? c2 += i : b = v, this.isEager() || (o += i)), this.isEager())
        for (; g(o) && (f[a.charAt(o)] == null || u.includes(o)); ) {
          if (e) {
            if (p[h](a.charAt(o)), t.charAt(c2) === a.charAt(o)) {
              o += i, c2 += i;
              continue;
            }
          } else a.charAt(o) === t.charAt(c2) && (c2 += i);
          o += i;
        }
    }
    return this.memo.set(r, p.join("")), this.memo.get(r);
  }
}
const w = (n) => JSON.parse(n.replaceAll("'", '"')), T = (n, t = {}) => {
  const s = { ...t };
  n.dataset.maska != null && n.dataset.maska !== "" && (s.mask = x(n.dataset.maska)), n.dataset.maskaEager != null && (s.eager = M(n.dataset.maskaEager)), n.dataset.maskaReversed != null && (s.reversed = M(n.dataset.maskaReversed)), n.dataset.maskaTokensReplace != null && (s.tokensReplace = M(n.dataset.maskaTokensReplace)), n.dataset.maskaTokens != null && (s.tokens = W(n.dataset.maskaTokens));
  const e = {};
  return n.dataset.maskaNumberLocale != null && (e.locale = n.dataset.maskaNumberLocale), n.dataset.maskaNumberFraction != null && (e.fraction = parseInt(n.dataset.maskaNumberFraction)), n.dataset.maskaNumberUnsigned != null && (e.unsigned = M(n.dataset.maskaNumberUnsigned)), (n.dataset.maskaNumber != null || Object.values(e).length > 0) && (s.number = e), s;
}, M = (n) => n !== "" ? !!JSON.parse(n) : true, x = (n) => n.startsWith("[") && n.endsWith("]") ? w(n) : n, W = (n) => {
  if (n.startsWith("{") && n.endsWith("}"))
    return w(n);
  const t = {};
  return n.split("|").forEach((s) => {
    const e = s.split(":");
    t[e[0]] = {
      pattern: new RegExp(e[1]),
      optional: e[2] === "optional",
      multiple: e[2] === "multiple",
      repeated: e[2] === "repeated"
    };
  }), t;
};
class V {
  constructor(t, s = {}) {
    A(this, "items", /* @__PURE__ */ new Map());
    A(this, "eventAbortController");
    A(this, "onInput", (t2) => {
      if (t2 instanceof CustomEvent && t2.type === "input" && !t2.isTrusted && !t2.bubbles)
        return;
      const s2 = t2.target, e = this.items.get(s2);
      if (e === void 0) return;
      const r = "inputType" in t2 && t2.inputType.startsWith("delete"), a = e.isEager(), u = r && a && e.unmasked(s2.value) === "" ? "" : s2.value;
      this.fixCursor(s2, r, () => this.setValue(s2, u));
    });
    this.options = s, this.eventAbortController = new AbortController(), this.init(this.getInputs(t));
  }
  update(t = {}) {
    this.options = { ...t }, this.init(Array.from(this.items.keys()));
  }
  updateValue(t) {
    var s;
    t.value !== "" && t.value !== ((s = this.processInput(t)) == null ? void 0 : s.masked) && this.setValue(t, t.value);
  }
  destroy() {
    this.eventAbortController.abort(), this.items.clear();
  }
  init(t) {
    const s = this.getOptions(this.options);
    for (const e of t) {
      if (!this.items.has(e)) {
        const { signal: a } = this.eventAbortController;
        e.addEventListener("input", this.onInput, { capture: true, signal: a });
      }
      const r = new F(T(e, s));
      this.items.set(e, r), queueMicrotask(() => this.updateValue(e)), e.selectionStart === null && r.isEager() && console.warn("Maska: input of `%s` type is not supported", e.type);
    }
  }
  getInputs(t) {
    return typeof t == "string" ? Array.from(document.querySelectorAll(t)) : "length" in t ? Array.from(t) : [t];
  }
  getOptions(t) {
    const { onMaska: s, preProcess: e, postProcess: r, ...a } = t;
    return a;
  }
  fixCursor(t, s, e) {
    var k2, g;
    const r = t.selectionStart, a = t.value;
    if (e(), r === null || r === a.length && !s) return;
    const u = t.value, p = a.slice(0, r), f = u.slice(0, r), i = (k2 = this.processInput(t, p)) == null ? void 0 : k2.unmasked, h = (g = this.processInput(t, f)) == null ? void 0 : g.unmasked;
    if (i === void 0 || h === void 0) return;
    let l2 = r;
    p !== f && (l2 += s ? u.length - a.length : i.length - h.length), t.setSelectionRange(l2, l2);
  }
  setValue(t, s) {
    const e = this.processInput(t, s);
    e !== void 0 && (t.value = e.masked, this.options.onMaska != null && (Array.isArray(this.options.onMaska) ? this.options.onMaska.forEach((r) => r(e)) : this.options.onMaska(e)), t.dispatchEvent(new CustomEvent("maska", { detail: e })), t.dispatchEvent(new CustomEvent("input", { detail: e.masked })));
  }
  processInput(t, s) {
    const e = this.items.get(t);
    if (e === void 0) return;
    let r = s ?? t.value;
    this.options.preProcess != null && (r = this.options.preProcess(r));
    let a = e.masked(r);
    return this.options.postProcess != null && (a = this.options.postProcess(a)), {
      masked: a,
      unmasked: e.unmasked(r),
      completed: e.completed(r)
    };
  }
}
const l = /* @__PURE__ */ new WeakMap(), c = (e, s) => {
  if (e.arg == null || e.instance == null) return;
  const a = "setup" in e.instance.$.type;
  e.arg in e.instance ? e.instance[e.arg] = s : a && console.warn("Maska: please expose `%s` using defineExpose", e.arg);
}, k = (e, s) => {
  var u;
  const a = e instanceof HTMLInputElement ? e : e.querySelector("input");
  if (a == null || (a == null ? void 0 : a.type) === "file") return;
  let t = {};
  if (s.value != null && (t = typeof s.value == "string" ? { mask: s.value } : { ...s.value }), s.arg != null) {
    const o = (r) => {
      const p = s.modifiers.unmasked ? r.unmasked : s.modifiers.completed ? r.completed : r.masked;
      c(s, p);
    };
    t.onMaska = t.onMaska == null ? o : Array.isArray(t.onMaska) ? [...t.onMaska, o] : [t.onMaska, o];
  }
  l.has(a) ? (u = l.get(a)) == null || u.update(t) : l.set(a, new V(a, t));
};
const _sfc_main$a = {
  name: "AddIndividualPhoneComponent",
  directives: { maska: k },
  props: {
    individual: {
      type: Object,
      required: true
    },
    showSaveButton: {
      type: Boolean,
      default: true
    },
    readOnly: {
      type: Boolean,
      required: true
    },
    individualPhone: {
      type: Object,
      required: true
    }
  },
  computed: {
    pageTitle() {
      return "Phone";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    individualPhone: {
      handler(value) {
        if (this.phone && this.phone.IndividualPhoneId === this.individualPhone.IndividualPhoneId) {
          return;
        }
        this.phone = this.individualPhone.IndividualPhoneId ? clone(value) : value;
        this.phone.ContactStatusId = this.phone.ContactStatusId ? this.phone.ContactStatusId : 4;
      }
    },
    savedPhone: {
      handler(data) {
        this.savedPhone.isTextAllowed = this.savedPhone.CanTextRestrictionId === 1 ? true : false;
        this.savedPhone.isDoNotCall = this.savedPhone.CanCallRestrictionId && this.savedPhone.CanCallRestrictionId !== 1 ? true : false;
        this.setEditPhone();
      },
      deep: true
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/IndividualPhoneType").then((response) => {
      this.phoneTypes = response.data.data;
    });
    axios.get("/api/v3/memberforms/countries").then((response) => {
      this.phoneCountries = response.data;
    });
    this.phone = this.individualPhone.IndividualPhoneId ? clone(this.individualPhone) : this.individualPhone;
    this.phone.ContactStatusId = this.phone.ContactStatusId ? this.phone.ContactStatusId : null;
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      phoneTypes: [],
      phoneCountries: [],
      phone: {},
      dataUpdated: false,
      rules: [],
      required: false,
      emptyPhone: {
        IndividualPhoneTypeId: null,
        ContactStatusId: null,
        ContactSourceId: null,
        IsPreferred: false,
        isTextAllowed: false,
        isDoNotCall: false,
        CanContact: false,
        PhoneNumber: null,
        Extension: null,
        CanCallRestrictionId: null,
        IndividualId: this.individual.IndividualId
      }
    };
  },
  methods: {
    dataUpdateFlag() {
      if (this.dataUpdated) {
        return;
      }
      this.rules = [
        (value) => !!value || "Required."
      ];
      this.required = true;
      this.phone.ContactStatusId = 4;
      this.dataUpdated = true;
    },
    handlePhoneSaved(phoneData, flip, isNew) {
      this.$emit("saved-phone", { phone: phoneData, flip, isNew });
    },
    resetPhone() {
      for (const field in this.emptyPhone) {
        if (this.emptyPhone.hasOwnProperty(field)) {
          this.phone[field] = this.emptyPhone[field];
        }
      }
    },
    setEditPhone() {
      this.phone = clone(this.savedPhone) || clone(this.emptyPhone);
    },
    resetAllPhone() {
      this.$refs.resetPhoneType.reset();
      this.$refs.resetPhoneStatus.reset();
      this.$refs.resetPhoneSource.reset();
      this.$refs.resetPhoneNumber.reset();
      this.$refs.resetExtension.reset();
      this.phone.IsPreferred = false;
      this.phone.isTextAllowed = false;
      this.phone.isDoNotCall = false;
      this.rules = [];
      this.required = false;
      this.dataUpdated = false;
      this.emptyPhone.ContactStatusId = null;
    },
    onPhoneUpdate(event) {
      this.phone.PhoneNumber = event.detail.unmasked;
    }
  }
};
const _hoisted_1$6 = { class: "data-container" };
const _hoisted_2$6 = {
  key: 0,
  class: "text-red"
};
const _hoisted_3$6 = { class: "data-container" };
const _hoisted_4$6 = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$6 = { class: "data-container" };
const _hoisted_6$6 = {
  key: 0,
  class: "text-red"
};
const _hoisted_7$4 = {
  key: 0,
  class: "text-red"
};
function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
  const _directive_maska = resolveDirective("maska");
  return openBlock(), createBlock(VCard, null, {
    default: withCtx(() => [
      createVNode(VCardTitle, null, {
        default: withCtx(() => [
          createTextVNode(
            toDisplayString($options.pageTitle),
            1
            /* TEXT */
          )
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VCardText, null, {
        default: withCtx(() => [
          createVNode(VAlert, {
            type: $data.alertType,
            modelValue: $data.alert,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
            closable: "",
            "close-text": "Dismiss"
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($data.alertText),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }, 8, ["type", "modelValue"]),
          createBaseVNode("div", {
            onClick: _cache[9] || (_cache[9] = ($event) => $options.dataUpdateFlag())
          }, [
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_1$6, [
                      createVNode(VSelect, {
                        ref: "resetPhoneType",
                        items: $data.phoneTypes,
                        "item-value": "IndividualPhoneTypeId",
                        "item-title": "IndividualPhoneTypeName",
                        modelValue: $data.phone.IndividualPhoneTypeId,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.phone.IndividualPhoneTypeId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_2$6, "* ")) : createCommentVNode("v-if", true),
                          _cache[10] || (_cache[10] = createTextVNode("Phone Type "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_3$6, [
                      createVNode(VSelect, {
                        ref: "resetPhoneStatus",
                        items: $options.contactStatus,
                        "item-value": "ContactStatusId",
                        "item-title": "ContactStatusName",
                        modelValue: $data.phone.ContactStatusId,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.phone.ContactStatusId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_4$6, "* ")) : createCommentVNode("v-if", true),
                          _cache[11] || (_cache[11] = createTextVNode("Phone Status "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_5$6, [
                      createVNode(VSelect, {
                        ref: "resetPhoneSource",
                        items: $options.contactSources,
                        "item-value": "ContactSourceId",
                        "item-title": "ContactSourceName",
                        modelValue: $data.phone.ContactSourceId,
                        "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.phone.ContactSourceId = $event),
                        rules: $data.rules,
                        variant: "underlined"
                      }, {
                        label: withCtx(() => [
                          $data.required ? (openBlock(), createElementBlock("span", _hoisted_6$6, "* ")) : createCommentVNode("v-if", true),
                          _cache[12] || (_cache[12] = createTextVNode("Phone Source "))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["items", "modelValue", "rules"])
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createVNode(VAutocomplete, {
                      items: $data.phoneCountries,
                      "item-title": "CountryCallingCodeDisplay",
                      "item-value": "CountryId",
                      modelValue: $data.phone.CountryId,
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.phone.CountryId = $event),
                      label: "Country",
                      variant: "underlined"
                    }, null, 8, ["items", "modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    withDirectives((openBlock(), createBlock(VTextField, {
                      ref: "resetPhoneNumber",
                      rules: $data.rules,
                      clearable: "",
                      variant: "underlined",
                      onMaska: $options.onPhoneUpdate
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_7$4, "* ")) : createCommentVNode("v-if", true),
                        _cache[13] || (_cache[13] = createTextVNode("Phone Number "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["rules", "onMaska"])), [
                      [
                        _directive_maska,
                        $data.phone.CountryId === 2 || $data.phone.CountryId === 4 ? "+1 (###) ###-####" : null,
                        "phnumber",
                        { unmasked: true }
                      ]
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, { cols: "4" }, {
                  default: withCtx(() => [
                    createVNode(VTextField, {
                      ref: "resetExtension",
                      label: "Extension",
                      modelValue: $data.phone.Extension,
                      "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.phone.Extension = $event),
                      maxlength: 10,
                      variant: "underlined"
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, {
                  cols: "4",
                  class: "switches"
                }, {
                  default: withCtx(() => [
                    createVNode(VSwitch, {
                      color: "primary",
                      ref: "resetPreferredNumber",
                      label: "Preferred",
                      modelValue: $data.phone.IsPreferred,
                      "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.phone.IsPreferred = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, {
                  cols: "4",
                  class: "switches"
                }, {
                  default: withCtx(() => [
                    createVNode(VSwitch, {
                      color: "primary",
                      ref: "resetTextAllowed",
                      label: "Text Allowed",
                      modelValue: $data.phone.isTextAllowed,
                      "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.phone.isTextAllowed = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VCol, {
                  cols: "4",
                  class: "switches"
                }, {
                  default: withCtx(() => [
                    createVNode(VSwitch, {
                      color: "primary",
                      ref: "resetDoNotCall",
                      label: "Do Not Call",
                      modelValue: $data.phone.isDoNotCall,
                      "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.phone.isDoNotCall = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          !$props.readOnly && $data.required ? (openBlock(), createBlock(VRow, { key: 0 }, {
            default: withCtx(() => [
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createVNode(VBtn, {
                    color: "error",
                    class: "mr-4 px-4",
                    onClick: $options.resetAllPhone,
                    variant: "elevated"
                  }, {
                    default: withCtx(() => _cache[14] || (_cache[14] = [
                      createTextVNode(" Reset Phone ")
                    ])),
                    _: 1
                    /* STABLE */
                  }, 8, ["onClick"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })) : createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const AddIndividualPhoneComponent = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$a], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/AddIndividualPhoneComponent.vue"]]);
const _sfc_main$9 = {
  name: "AddIndividualPhoneMobileComponent",
  directives: { maska: k },
  props: {
    individual: {
      type: Object,
      required: true
    },
    savedPhone: {
      type: Object,
      required: false
    },
    showSaveButton: {
      type: Boolean,
      default: true
    },
    readOnly: {
      type: Boolean,
      required: true
    },
    individualPhoneMobile: {
      type: Object,
      required: true
    }
  },
  computed: {
    pageTitle() {
      return this.savedPhone ? "Edit Phone" : "Add Phone";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    individualPhoneMobile: {
      handler(value) {
        this.phone = value;
        this.phone.ContactStatusId = this.phone.ContactStatusId ? this.phone.ContactStatusId : 4;
      }
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/IndividualPhoneType").then((response) => {
      this.phoneTypes = response.data.data;
    });
    axios.get("/api/v3/memberforms/countries").then((response) => {
      this.phoneCountries = response.data;
    });
    this.phone = this.individualPhoneMobile;
    this.phone.ContactStatusId = this.phone.ContactStatusId ? this.phone.ContactStatusId : 4;
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      phoneTypes: [],
      phoneCountries: [],
      phone: {},
      dataUpdated: false,
      rules: [],
      required: false,
      emptyPhone: {
        IndividualPhoneTypeId: null,
        ContactStatusId: null,
        ContactSourceId: null,
        IsPreferred: false,
        isTextAllowed: false,
        isDoNotCall: false,
        CanContact: false,
        PhoneNumber: null,
        Extension: null,
        CanCallRestrictionId: null,
        IndividualId: this.individual.IndividualId
      }
    };
  },
  methods: {
    dataUpdateFlag() {
      if (this.dataUpdated) {
        return;
      }
      this.rules = [
        (value) => !!value || "Required."
      ];
      this.required = true;
      this.phone.ContactStatusId = 4;
      this.dataUpdated = true;
    },
    handlePhoneSaved(phoneData, flip, isNew) {
      this.$emit("saved-phone", { phone: phoneData, flip, isNew });
    },
    resetPhone() {
      for (const field in this.emptyPhone) {
        if (this.emptyPhone.hasOwnProperty(field)) {
          this.phone[field] = this.emptyPhone[field];
        }
      }
    },
    setEditPhone() {
      this.phone = clone(this.savedPhone) || clone(this.emptyPhone);
    },
    onPhoneUpdate(event) {
      this.phone.PhoneNumber = event.detail.unmasked;
    }
  }
};
const _hoisted_1$5 = { class: "data-container" };
const _hoisted_2$5 = {
  key: 0,
  class: "text-red"
};
const _hoisted_3$5 = { class: "data-container" };
const _hoisted_4$5 = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$5 = { class: "data-container" };
const _hoisted_6$5 = {
  key: 0,
  class: "text-red"
};
const _hoisted_7$3 = {
  key: 0,
  class: "text-red"
};
function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
  const _directive_maska = resolveDirective("maska");
  return openBlock(), createBlock(VCard, null, {
    default: withCtx(() => [
      createVNode(VCardTitle, null, {
        default: withCtx(() => [
          createTextVNode(
            toDisplayString($options.pageTitle),
            1
            /* TEXT */
          )
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VCardText, {
        onClick: _cache[9] || (_cache[9] = ($event) => $options.dataUpdateFlag())
      }, {
        default: withCtx(() => [
          createVNode(VAlert, {
            type: $data.alertType,
            modelValue: $data.alert,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
            closable: "",
            "close-text": "Dismiss"
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($data.alertText),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }, 8, ["type", "modelValue"]),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_1$5, [
                    createVNode(VSelect, {
                      items: $data.phoneTypes,
                      "item-value": "IndividualPhoneTypeId",
                      "item-title": "IndividualPhoneTypeName",
                      modelValue: $data.phone.IndividualPhoneTypeId,
                      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.phone.IndividualPhoneTypeId = $event),
                      rules: $data.rules,
                      variant: "underlined"
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_2$5, "* ")) : createCommentVNode("v-if", true),
                        _cache[10] || (_cache[10] = createTextVNode("Phone Type "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["items", "modelValue", "rules"])
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_3$5, [
                    createVNode(VSelect, {
                      items: $options.contactStatus,
                      "item-value": "ContactStatusId",
                      "item-title": "ContactStatusName",
                      modelValue: $data.phone.ContactStatusId,
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.phone.ContactStatusId = $event),
                      rules: $data.rules,
                      variant: "underlined"
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_4$5, "* ")) : createCommentVNode("v-if", true),
                        _cache[11] || (_cache[11] = createTextVNode("Phone Status "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["items", "modelValue", "rules"])
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_5$5, [
                    createVNode(VSelect, {
                      items: $options.contactSources,
                      "item-value": "ContactSourceId",
                      "item-title": "ContactSourceName",
                      modelValue: $data.phone.ContactSourceId,
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.phone.ContactSourceId = $event),
                      rules: $data.rules,
                      variant: "underlined"
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_6$5, "* ")) : createCommentVNode("v-if", true),
                        _cache[12] || (_cache[12] = createTextVNode("Phone Source "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["items", "modelValue", "rules"])
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createVNode(VAutocomplete, {
                    items: $data.phoneCountries,
                    "item-title": "CountryCallingCodeDisplay",
                    "item-value": "CountryId",
                    modelValue: $data.phone.CountryId,
                    "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.phone.CountryId = $event),
                    label: "Country",
                    variant: "underlined"
                  }, null, 8, ["items", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  withDirectives((openBlock(), createBlock(VTextField, {
                    rules: $data.rules,
                    clearable: "",
                    variant: "underlined",
                    onMaska: $options.onPhoneUpdate
                  }, {
                    label: withCtx(() => [
                      $data.required ? (openBlock(), createElementBlock("span", _hoisted_7$3, "* ")) : createCommentVNode("v-if", true),
                      _cache[13] || (_cache[13] = createTextVNode("Phone Number "))
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["rules", "onMaska"])), [
                    [
                      _directive_maska,
                      $data.phone.CountryId === 2 || $data.phone.CountryId === 4 ? "+1 (###) ###-####" : null,
                      "phnumber",
                      { unmasked: true }
                    ]
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    label: "Extension",
                    modelValue: $data.phone.Extension,
                    "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.phone.Extension = $event),
                    maxlength: 10,
                    variant: "underlined"
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "4",
                class: "switches"
              }, {
                default: withCtx(() => [
                  createVNode(VSwitch, {
                    color: "primary",
                    label: "Preferred",
                    modelValue: $data.phone.IsPreferred,
                    "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.phone.IsPreferred = $event)
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "4",
                class: "switches"
              }, {
                default: withCtx(() => [
                  createVNode(VSwitch, {
                    color: "primary",
                    label: "Text Allowed",
                    modelValue: $data.phone.isTextAllowed,
                    "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.phone.isTextAllowed = $event)
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "4",
                class: "switches"
              }, {
                default: withCtx(() => [
                  createVNode(VSwitch, {
                    color: "primary",
                    label: "Do Not Call",
                    modelValue: $data.phone.isDoNotCall,
                    "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.phone.isDoNotCall = $event)
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const AddIndividualPhoneMobileComponent = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$9], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/AddIndividualPhoneMobileComponent.vue"]]);
const _sfc_main$8 = {
  name: "AddIndividualPhoneWorkComponent",
  directives: { maska: k },
  props: {
    individual: {
      type: Object,
      required: true
    },
    savedPhone: {
      type: Object,
      required: false
    },
    showSaveButton: {
      type: Boolean,
      default: true
    },
    readOnly: {
      type: Boolean,
      required: true
    },
    individualPhoneWork: {
      type: Object,
      required: true
    }
  },
  computed: {
    pageTitle() {
      return this.savedPhone ? "Edit Phone" : "Add Phone";
    },
    contactSources() {
      return this.$store.getters["contactSource/contactSources"];
    },
    contactStatus() {
      return this.$store.getters["contactStatus/contactStatuses"];
    }
  },
  watch: {
    individualPhoneWork: {
      handler(value) {
        this.phone = value;
        this.phone.ContactStatusId = this.phone.ContactStatusId ? this.phone.ContactStatusId : 4;
      }
    }
  },
  created() {
    this.$store.dispatch("contactSource/getContactSources");
    this.$store.dispatch("contactStatus/getContactStatuses");
  },
  mounted() {
    axios.get("/api/v2/IndividualPhoneType").then((response) => {
      this.phoneTypes = response.data.data;
    });
    axios.get("/api/v3/memberforms/countries").then((response) => {
      this.phoneCountries = response.data;
    });
    this.phone = this.individualPhoneWork;
    this.phone.ContactStatusId = this.phone.ContactStatusId ? this.phone.ContactStatusId : 4;
  },
  data() {
    return {
      valid: true,
      alert: false,
      alertType: "success",
      alertText: "",
      phoneTypes: [],
      phoneCountries: [],
      phone: {},
      dataUpdated: false,
      rules: [],
      required: false,
      emptyPhone: {
        IndividualPhoneTypeId: null,
        CountryId: null,
        ContactStatusId: null,
        ContactSourceId: null,
        IsPreferred: false,
        isTextAllowed: false,
        isDoNotCall: false,
        CanContact: false,
        PhoneNumber: null,
        Extension: null,
        CanCallRestrictionId: null,
        IndividualId: this.individual.IndividualId
      }
    };
  },
  methods: {
    dataUpdateFlag() {
      if (this.dataUpdated) {
        return;
      }
      this.rules = [
        (value) => !!value || "Required."
      ];
      this.required = true;
      this.dataUpdated = true;
    },
    handlePhoneSaved(phoneData, flip, isNew) {
      this.$emit("saved-phone", { phone: phoneData, flip, isNew });
    },
    resetPhone() {
      for (const field in this.emptyPhone) {
        if (this.emptyPhone.hasOwnProperty(field)) {
          this.phone[field] = this.emptyPhone[field];
        }
      }
    },
    setEditPhone() {
      this.phone = clone(this.savedPhone) || clone(this.emptyPhone);
    },
    onPhoneUpdate(event) {
      this.phone.PhoneNumber = event.detail.unmasked;
    }
  }
};
const _hoisted_1$4 = { class: "data-container" };
const _hoisted_2$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_3$4 = { class: "data-container" };
const _hoisted_4$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_5$4 = { class: "data-container" };
const _hoisted_6$4 = {
  key: 0,
  class: "text-red"
};
const _hoisted_7$2 = {
  key: 0,
  class: "text-red"
};
function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
  const _directive_maska = resolveDirective("maska");
  return openBlock(), createBlock(VCard, null, {
    default: withCtx(() => [
      createVNode(VCardTitle, null, {
        default: withCtx(() => [
          createTextVNode(
            toDisplayString($options.pageTitle),
            1
            /* TEXT */
          )
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VCardText, {
        onClick: _cache[9] || (_cache[9] = ($event) => $options.dataUpdateFlag())
      }, {
        default: withCtx(() => [
          createVNode(VAlert, {
            type: $data.alertType,
            modelValue: $data.alert,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.alert = $event),
            closable: "",
            "close-text": "Dismiss"
          }, {
            default: withCtx(() => [
              createTextVNode(
                toDisplayString($data.alertText),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }, 8, ["type", "modelValue"]),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_1$4, [
                    createVNode(VSelect, {
                      items: $data.phoneTypes,
                      "item-value": "IndividualPhoneTypeId",
                      "item-title": "IndividualPhoneTypeName",
                      modelValue: $data.phone.IndividualPhoneTypeId,
                      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.phone.IndividualPhoneTypeId = $event),
                      rules: $data.rules
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_2$4, "* ")) : createCommentVNode("v-if", true),
                        _cache[10] || (_cache[10] = createTextVNode("Phone Type "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["items", "modelValue", "rules"])
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_3$4, [
                    createVNode(VSelect, {
                      items: $options.contactStatus,
                      "item-value": "ContactStatusId",
                      "item-title": "ContactStatusName",
                      modelValue: $data.phone.ContactStatusId,
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.phone.ContactStatusId = $event),
                      rules: $data.rules
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_4$4, "* ")) : createCommentVNode("v-if", true),
                        _cache[11] || (_cache[11] = createTextVNode("Phone Status "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["items", "modelValue", "rules"])
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_5$4, [
                    createVNode(VSelect, {
                      items: $options.contactSources,
                      "item-value": "ContactSourceId",
                      "item-title": "ContactSourceName",
                      modelValue: $data.phone.ContactSourceId,
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.phone.ContactSourceId = $event),
                      rules: $data.rules
                    }, {
                      label: withCtx(() => [
                        $data.required ? (openBlock(), createElementBlock("span", _hoisted_6$4, "* ")) : createCommentVNode("v-if", true),
                        _cache[12] || (_cache[12] = createTextVNode("Phone Source "))
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["items", "modelValue", "rules"])
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createVNode(VAutocomplete, {
                    items: $data.phoneCountries,
                    "item-title": "CountryCallingCodeDisplay",
                    "item-value": "CountryId",
                    modelValue: $data.phone.CountryId,
                    "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.phone.CountryId = $event),
                    label: "Country"
                  }, null, 8, ["items", "modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  withDirectives((openBlock(), createBlock(VTextField, {
                    rules: $data.rules,
                    clearable: "",
                    variant: "underlined",
                    onMaska: $options.onPhoneUpdate
                  }, {
                    label: withCtx(() => [
                      $data.required ? (openBlock(), createElementBlock("span", _hoisted_7$2, "* ")) : createCommentVNode("v-if", true),
                      _cache[13] || (_cache[13] = createTextVNode("Phone Number "))
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["rules", "onMaska"])), [
                    [
                      _directive_maska,
                      $data.phone.CountryId === 2 || $data.phone.CountryId === 4 ? "+1 (###) ###-####" : null,
                      "phnumber",
                      { unmasked: true }
                    ]
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, { cols: "4" }, {
                default: withCtx(() => [
                  createVNode(VTextField, {
                    label: "Extension",
                    modelValue: $data.phone.Extension,
                    "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.phone.Extension = $event),
                    maxlength: 10
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "4",
                class: "switches"
              }, {
                default: withCtx(() => [
                  createVNode(VSwitch, {
                    color: "primary",
                    label: "Preferred",
                    modelValue: $data.phone.IsPreferred,
                    "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.phone.IsPreferred = $event)
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "4",
                class: "switches"
              }, {
                default: withCtx(() => [
                  createVNode(VSwitch, {
                    color: "primary",
                    label: "Text Allowed",
                    modelValue: $data.phone.isTextAllowed,
                    "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.phone.isTextAllowed = $event)
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VCol, {
                cols: "4",
                class: "switches"
              }, {
                default: withCtx(() => [
                  createVNode(VSwitch, {
                    color: "primary",
                    label: "Do Not Call",
                    modelValue: $data.phone.isDoNotCall,
                    "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.phone.isDoNotCall = $event)
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const AddIndividualPhoneWorkComponent = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$8], ["__file", "/var/www/html/resources/js/components/Individual/Partial/Contact/AddIndividualPhoneWorkComponent.vue"]]);
const _sfc_main$7 = {
  name: "IndividualAddNewComponent",
  components: {
    EditEmployerDataComponent,
    "individual-address-component": AddIndividualAddressComponent,
    "individual-billing-address-component": AddIndividualBillingAddressComponent,
    "individual-email-component": IndividualEmailComponent,
    "individual-email-work-component": IndividualEmailWorkComponent,
    "add-individual-phone-component": AddIndividualPhoneComponent,
    "add-individual-phone-mobile-component": AddIndividualPhoneMobileComponent,
    "add-individual-phone-work-component": AddIndividualPhoneWorkComponent,
    "individual-edit-basic-data-component": BasicDataComponent$1,
    "edit-demographics-data-component": EditDemographicsDataComponent
  },
  data() {
    return {
      individual: {},
      individualEmployer: {},
      individualAddress: {},
      individualBillingAddress: {},
      individualEmail: {},
      individualEmailWork: {},
      individualPhone: {},
      individualPhoneMobile: {},
      individualPhoneWork: {},
      flipped: false,
      loading: true,
      valid: true,
      submissionData: null,
      switchAffiliate: {},
      selectedEmployerId: null,
      selectedUnitId: null,
      WorkLocationId: null,
      WorkStructureId: null,
      isEduesEligible: false,
      isButtonDisabled: false,
      overlay: true
    };
  },
  computed: {
    selectedAffiliate() {
      return this.$store.getters["user/selectedAffiliate"].AffiliateId;
    }
  },
  mounted() {
    this.loading = false;
    if (this.$route.params.firstName) {
      this.individual.FirstName = this.$route.params.firstName;
    }
    if (this.$route.params.preferredName) {
      this.individual.PreferredName = this.$route.params.preferredName;
    }
    if (this.$route.params.middleName) {
      this.individual.MiddleName = this.$route.params.middleName;
    }
    if (this.$route.params.lastName) {
      this.individual.LastName = this.$route.params.lastName;
    }
    if (this.$route.query.submissionId) {
      this.isSubmissionEDuesEligible(this.$route.query.submissionId);
      this.getSubmissionDataFromApi(this.$route.query.submissionId);
    } else {
      this.overlay = false;
    }
  },
  methods: {
    removeExtraFields(type) {
      if (type === "phoneMobile") {
        this.individualPhoneMobile = {};
      }
      if (type === "phoneWork") {
        this.individualPhoneWork = {};
      }
      if (type === "emailWork") {
        this.individualEmailWork = {};
      }
      if (type === "billingAddress") {
        this.individualBillingAddress = {};
      }
    },
    afterSave(individual) {
      this.$refs.form.reset();
      this.$router.push({
        name: "IndividualDetails",
        params: {
          id: individual.IndividualId
        }
      });
    },
    async saveData(event) {
      this.loading = true;
      const results = await event;
      this.loading = false;
      if (!results.valid) {
        this.isButtonDisabled = false;
        window.scrollTo({ top: 0, behavior: "smooth" });
        return;
      }
      this.isButtonDisabled = true;
      this.individualEmployer.IsTenured = !!this.individualEmployer.IsTenured;
      this.individualEmployer.IsPartTime = !!this.individualEmployer.IsPartTime;
      this.individualEmployer.CurrentlyWorking = true;
      this.individualEmployer.StartDate = this.individualEmployer.StartDate ? this.individualEmployer.StartDate : formatISO(/* @__PURE__ */ new Date());
      this.individualEmployer.HireDate = this.individualEmployer.HireDate ? this.individualEmployer.HireDate : null;
      this.individualAddress.IndividualId = this.individual.IndividualId;
      this.individualAddress.IsPreferred = !!this.individualAddress.IsPreferred;
      this.individualAddress.CanVisitRestrictionId = this.individualAddress.CanVisitRestriction === false ? 2 : 1;
      this.individualEmail.IndividualId = this.individual.IndividualId;
      this.individualEmail.IsPreferred = typeof this.individualEmail.IsPreferred === "undefined" || this.individualEmail.IsPreferred === null ? false : this.individualEmail.IsPreferred;
      this.individualPhone.IndividualId = this.individual.IndividualId;
      this.individualPhone.IsPreferred = typeof this.individualPhone.IsPreferred === "undefined" || this.individualPhone.IsPreferred === null ? false : this.individualPhone.IsPreferred;
      this.individualPhone.CanTextRestrictionId = this.individualPhone.isTextAllowed === true ? 1 : 2;
      this.individualPhone.CanCallRestrictionId = typeof this.individualPhone.isDoNotCall != "undefined" && this.individualPhone.isDoNotCall === true ? 2 : 1;
      if (this.individualBillingAddress && this.individualBillingAddress.AddressLine1) {
        this.individualBillingAddress.IsPreferred = !!this.individualBillingAddress.IsPreferred;
        this.individualBillingAddress.CanVisitRestrictionId = this.individualBillingAddress.CanVisitRestriction === false ? 2 : 1;
      }
      if (this.individualEmailWork && this.individualEmailWork.Email) {
        this.individualEmailWork.IsPreferred = typeof this.individualEmailWork.IsPreferred === "undefined" || this.individualEmailWork.IsPreferred === null ? false : this.individualEmailWork.IsPreferred;
      }
      if (this.individualPhoneMobile && this.individualPhoneMobile.PhoneNumber) {
        this.individualPhoneMobile.IsPreferred = typeof this.individualPhoneMobile.IsPreferred === "undefined" || this.individualPhoneMobile.IsPreferred === null ? false : this.individualPhoneMobile.IsPreferred;
        this.individualPhoneMobile.CanTextRestrictionId = this.individualPhoneMobile.isTextAllowed === true ? 1 : 2;
        this.individualPhoneMobile.CanCallRestrictionId = typeof this.individualPhoneMobile.isDoNotCall != "undefined" && this.individualPhoneMobile.isDoNotCall === true ? 2 : 1;
      }
      if (this.individualPhoneWork && this.individualPhoneWork.PhoneNumber) {
        this.individualPhoneWork.IsPreferred = typeof this.individualPhoneWork.IsPreferred === "undefined" || this.individualPhoneWork.IsPreferred === null ? false : this.individualPhoneWork.IsPreferred;
        this.individualPhoneWork.CanTextRestrictionId = this.individualPhoneWork.isTextAllowed === true ? 1 : 2;
        this.individualPhoneWork.CanCallRestrictionId = typeof this.individualPhoneWork.isDoNotCall != "undefined" && this.individualPhoneWork.isDoNotCall === true ? 2 : 1;
      }
      if (this.WorkLocationId) {
        this.individualEmployer.WorkLocationId = this.WorkLocationId;
      }
      if (this.WorkStructureId) {
        this.individualEmployer.WorkStructureId = this.WorkStructureId;
      }
      axios.post("/api/v2/individual", {
        FirstName: this.individual.FirstName,
        LastName: this.individual.LastName,
        MiddleName: this.individual.MiddleName,
        PreviousName: this.individual.PreviousName,
        PreferredName: this.individual.PreferredName,
        AffiliateId: this.selectedAffiliate,
        UnionRelationshipTypeId: this.individual.selectedUnionRelationshipTypeId,
        IsCurrent: true,
        IsPoliticallyActive: false,
        IsRegisteredVoter: false,
        LocalDuesCategoryId: this.individual.selectedDuesCategory,
        ChapterId: this.individual.selectedChapter,
        StartDate: this.individual.startDate ? this.individual.startDate : formatISO(/* @__PURE__ */ new Date()),
        PaymentMethodId: this.individual.PaymentMethodId,
        PaymentFrequencyId: this.individual.PaymentFrequencyId,
        MonthOfBirth: this.individual.MonthOfBirth,
        DayOfBirth: this.individual.DayOfBirth,
        YearOfBirth: this.individual.YearOfBirth,
        GenderId: this.individual.GenderId,
        MaritalStatusId: this.individual.MaritalStatusId,
        LocalEducationLevelId: this.individual.LocalEducationLevelId,
        Dependents: this.individual.Dependents,
        IndividualEmployer: this.individualEmployer,
        IndividualAddress: this.individualAddress,
        IndividualBillingAddress: this.individualBillingAddress,
        IndividualEmail: this.individualEmail,
        IndividualWorkEmail: this.individualEmailWork,
        IndividualPhone: this.individualPhone,
        IndividualMobilePhone: this.individualPhoneMobile,
        IndividualWorkPhone: this.individualPhoneWork,
        PrefixId: this.individual.PrefixId,
        SuffixId: this.individual.SuffixId,
        IndividualCope: {
          CopePaymentMethodId: this.individual.selectedPaymentMethod,
          CopePaymentFrequencyId: this.individual.selectedPaymentFrequency,
          CopeAmount: this.individual.copeAmount
        }
      }).then((response) => {
        this.updateIndividualIdApi(this.$route.query.submissionId, response.data.data);
        if (this.isEduesEligible) {
          try {
            this.individualEDuesEnrollment(this.$route.query.submissionId, this.selectedAffiliate, response.data.data);
          } catch {
          }
        }
        this.afterSave(response.data.data);
      }).finally();
    },
    getSubmissionDataFromApi(id) {
      let url = "/api/v3/memberforms/admin/submission/" + id;
      return axios.get(url).then((response) => {
        this.submissionData = response.data.FormSubmissionData;
        const work_location_fields = response.data.Form ? response.data.Form.work_location_fields : null;
        const submissionDate = response.data.CreatedAt;
        const templateId = response.data.Form.form_template_id;
        this.individual.FirstName = this.getSubmissionValue("firstName").data_value;
        this.individual.LastName = this.getSubmissionValue("lastName").data_value;
        if (this.getSubmissionValue("middleName")) {
          this.individual.MiddleName = this.getSubmissionValue("middleName").data_value;
        }
        if (this.getSubmissionValue("preferredName")) {
          this.individual.PreferredName = this.getSubmissionValue("preferredName").data_value;
        }
        if (this.getSubmissionValue("dateOfBirth")) {
          const dateOfBirth = this.getSubmissionValue("dateOfBirth").data_value;
          var [y, m, d] = dateOfBirth.split("-");
          this.individual.YearOfBirth = parseInt(y);
          this.individual.MonthOfBirth = parseInt(m);
          this.individual.DayOfBirth = parseInt(d);
        }
        if (this.getSubmissionValue("LocalDuesCategory")) {
          this.individual.selectedDuesCategory = parseInt(this.getSubmissionValue("LocalDuesCategory").data_value);
          this.individual.PaymentMethodId = 1;
        }
        if (this.getSubmissionValue("chapter")) {
          this.individual.selectedChapter = parseInt(this.getSubmissionValue("chapter").data_value);
        }
        if (submissionDate) {
          this.individual.startDate = format(subDays(submissionDate), "yyyy-MM-dd");
        }
        if (work_location_fields && work_location_fields.chapterId) {
          this.individual.selectedChapter = work_location_fields.chapterId;
        }
        if (this.getSubmissionValue("copeAmount")) {
          this.individual.copeAmount = this.getSubmissionValue("copeAmount").data_value.replace("$", "");
          this.individual.selectedPaymentMethod = 1;
        }
        this.individual.selectedUnionRelationshipTypeId = 2;
        this.individualAddress.IndividualAddressTypeId = 1;
        this.individualAddress.ContactSourceId = 1;
        this.individualAddress.ContactStatusId = 4;
        this.individualAddress.CanSendMailRestrictionId = 1;
        this.individualAddress.IsPreferred = false;
        if (this.getSubmissionValue("addressLine1")) {
          this.individualAddress.AddressLine1 = this.getSubmissionValue("addressLine1").data_value;
        }
        if (this.getSubmissionValue("addressLine2")) {
          this.individualAddress.AddressLine2 = this.getSubmissionValue("addressLine2").data_value;
        }
        if (this.getSubmissionValue("addressHomePreferred")) {
          this.individualAddress.IsPreferred = this.getSubmissionValue("addressHomePreferred") ? this.getSubmissionValue("addressHomePreferred").data_value : false;
        }
        this.individualAddress.City = this.getSubmissionValue("city").data_value;
        this.individualAddress.StateTerritoryId = parseInt(this.getSubmissionValue("state").data_value);
        this.individualAddress.PostalCode = this.getSubmissionValue("zip").data_value;
        if (this.getSubmissionValue("billingAddressLine1")) {
          this.individualBillingAddress.IndividualAddressTypeId = 3;
          this.individualBillingAddress.ContactSourceId = 1;
          this.individualBillingAddress.ContactStatusId = 4;
          this.individualBillingAddress.CanSendMailRestrictionId = 1;
          this.individualBillingAddress.IsPreferred = false;
          if (this.getSubmissionValue("billingAddressLine1")) {
            this.individualBillingAddress.AddressLine1 = this.getSubmissionValue("billingAddressLine1").data_value;
          }
          if (this.getSubmissionValue("billingAddressLine2")) {
            this.individualBillingAddress.AddressLine2 = this.getSubmissionValue("billingAddressLine2").data_value;
          }
          if (this.getSubmissionValue("addressBillingPreferred")) {
            this.individualBillingAddress.IsPreferred = this.getSubmissionValue("addressBillingPreferred") ? this.getSubmissionValue("addressBillingPreferred").data_value : false;
          }
          this.individualBillingAddress.City = this.getSubmissionValue("billingCity").data_value;
          this.individualBillingAddress.StateTerritoryId = parseInt(this.getSubmissionValue("billingState").data_value);
          this.individualBillingAddress.PostalCode = this.getSubmissionValue("billingZip").data_value;
        }
        if (this.getSubmissionValue("phoneHome")) {
          this.individualPhone.PhoneNumber = this.getSubmissionValue("phoneHome").data_value;
          this.individualPhone.Extension = this.getSubmissionValue("phoneHomeExt") ? this.getSubmissionValue("phoneHomeExt").data_value : "";
          this.individualPhone.IndividualPhoneTypeId = 1;
          this.individualPhone.ContactSourceId = 1;
          this.individualPhone.ContactStatusId = 4;
          this.individualPhone.IsPreferred = this.getSubmissionValue("phoneHomePreferred") ? this.getSubmissionValue("phoneHomePreferred").data_value : false;
          this.individualPhone.CountryId = this.getSubmissionValue("phoneHomeCountry") ? parseInt(this.getSubmissionValue("phoneHomeCountry").data_value, 0) : 4;
        }
        if (this.getSubmissionValue("phoneMobile")) {
          this.individualPhoneMobile.PhoneNumber = this.getSubmissionValue("phoneMobile").data_value;
          this.individualPhoneMobile.Extension = this.getSubmissionValue("phoneMobileExt") ? this.getSubmissionValue("phoneMobileExt").data_value : "";
          this.individualPhoneMobile.IndividualPhoneTypeId = 3;
          this.individualPhoneMobile.ContactSourceId = 1;
          this.individualPhoneMobile.ContactStatusId = 4;
          this.individualPhoneMobile.IsPreferred = this.getSubmissionValue("phoneMobilePreferred") ? this.getSubmissionValue("phoneMobilePreferred").data_value : false;
          this.individualPhoneMobile.isTextAllowed = this.getSubmissionValue("agree") ? this.getSubmissionValue("agree").data_value : false;
          this.individualPhoneMobile.CountryId = this.getSubmissionValue("phoneMobileCountry") ? parseInt(this.getSubmissionValue("phoneMobileCountry").data_value, 0) : 4;
        }
        if (this.getSubmissionValue("phoneWork")) {
          this.individualPhoneWork.PhoneNumber = this.getSubmissionValue("phoneWork").data_value;
          this.individualPhoneWork.Extension = this.getSubmissionValue("phoneWorkExt") ? this.getSubmissionValue("phoneWorkExt").data_value : "";
          this.individualPhoneWork.IndividualPhoneTypeId = 2;
          this.individualPhoneWork.ContactSourceId = 1;
          this.individualPhoneWork.ContactStatusId = 4;
          this.individualPhoneWork.IsPreferred = this.getSubmissionValue("phoneWorkPreferred") ? this.getSubmissionValue("phoneWorkPreferred").data_value : false;
          this.individualPhoneWork.CountryId = this.getSubmissionValue("phoneWorkCountry") ? parseInt(this.getSubmissionValue("phoneWorkCountry").data_value, 0) : 4;
        }
        if (this.getSubmissionValue("email")) {
          this.individualEmail.IndividualEmailTypeId = 1;
          this.individualEmail.ContactSourceId = 1;
          this.individualEmail.ContactStatusId = 4;
          this.individualEmail.CanContactRestrictionId = 1;
          this.individualEmail.Email = this.getSubmissionValue("email").data_value;
          this.individualEmail.IsPreferred = this.getSubmissionValue("emailPersonalPreferred") ? this.getSubmissionValue("emailPersonalPreferred").data_value : false;
        }
        if (this.getSubmissionValue("emailWork")) {
          this.individualEmailWork.IndividualEmailTypeId = 2;
          this.individualEmailWork.ContactSourceId = 1;
          this.individualEmailWork.ContactStatusId = 4;
          this.individualEmailWork.CanContactRestrictionId = 1;
          this.individualEmailWork.Email = this.getSubmissionValue("emailWork").data_value;
          this.individualEmailWork.IsPreferred = this.getSubmissionValue("emailWorkPreferred") ? this.getSubmissionValue("emailWorkPreferred").data_value : false;
        }
        this.switchAffiliate = response.data.Form.affiliate;
        if (this.getSubmissionValue("employer")) {
          this.selectedEmployerId = parseInt(this.getSubmissionValue("employer").data_value);
        }
        if (this.getSubmissionValue("unit")) {
          this.selectedUnitId = parseInt(this.getSubmissionValue("unit").data_value);
        }
        if (this.getSubmissionValue("workLocation")) {
          this.WorkLocationId = parseInt(this.getSubmissionValue("workLocation").data_value);
        }
        if (this.getSubmissionValue("workStructure")) {
          this.WorkStructureId = parseInt(this.getSubmissionValue("workStructure").data_value);
        }
        if (this.getSubmissionValue("localJobClass")) {
          this.individualEmployer.LocalJobClassId = parseInt(this.getSubmissionValue("localJobClass").data_value);
        }
        if (this.getSubmissionValue("jobTitle")) {
          this.individualEmployer.JobTitleId = parseInt(this.getSubmissionValue("jobTitle").data_value);
        }
        if (this.getSubmissionValue("employeeID")) {
          this.individualEmployer.EmployeeId = this.getSubmissionValue("employeeID").data_value;
        }
        if (this.getSubmissionValue("employerHireDate")) {
          this.individualEmployer.HireDate = this.getSubmissionValue("employerHireDate").data_value;
        }
        if (this.getSubmissionValue("employerStartDate")) {
          this.individualEmployer.StartDate = this.getSubmissionValue("employerStartDate").data_value;
        } else {
          this.individualEmployer.StartDate = this.individual.startDate;
        }
        if (this.getSubmissionValue("Token")) {
          const paymentToken = JSON.parse(this.getSubmissionValue("Token").data_value);
          this.individual.PaymentMethodId = paymentToken.CardDetails ? 4 : 3;
          this.individual.selectedPaymentMethod = paymentToken.CardDetails ? 4 : 3;
        }
        if (parseInt(templateId, 10) === 7) {
          this.individual.PaymentMethodId = 2;
          this.individual.selectedPaymentMethod = 2;
        }
      }).finally(() => {
        this.loading = false;
        this.searched = true;
      });
    },
    updateIndividualIdApi(id, individual) {
      let url = "/api/v3/memberforms/admin/submission-update-individual/" + id;
      return axios.post(url, { IndividualId: individual.IndividualId }).then((response) => {
        console.log(response.data);
      }).finally(() => {
        this.loading = false;
        this.searched = true;
      });
    },
    getSubmissionValue(key2) {
      return this.submissionData.filter((data) => data.data_name === key2)[0];
    },
    isSubmissionEDuesEligible(submissionId) {
      let url = "/api/v3/memberforms/admin/is-edues-eligible/" + submissionId;
      return axios.get(url).then((response) => {
        this.isEduesEligible = response.data.isSubmissionEligibleForEDues;
      }).finally(() => {
        this.overlay = false;
      });
    },
    individualEDuesEnrollment(submissionId, affiliateId, individual) {
      let url = "/api/v3/memberforms/admin/edues-enrollment";
      return axios.post(url, {
        IndividualId: individual.IndividualId,
        AffiliateId: affiliateId,
        SubmissionId: submissionId,
        Source: "Membership Forms Portal"
      }).then((response) => {
        console.log(response.data);
      }).finally(() => {
        this.loading = false;
        this.searched = true;
      });
    }
  }
};
function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_individual_edit_basic_data_component = resolveComponent("individual-edit-basic-data-component");
  const _component_edit_demographics_data_component = resolveComponent("edit-demographics-data-component");
  const _component_edit_employer_data_component = resolveComponent("edit-employer-data-component");
  const _component_individual_address_component = resolveComponent("individual-address-component");
  const _component_individual_billing_address_component = resolveComponent("individual-billing-address-component");
  const _component_individual_email_component = resolveComponent("individual-email-component");
  const _component_individual_email_work_component = resolveComponent("individual-email-work-component");
  const _component_add_individual_phone_component = resolveComponent("add-individual-phone-component");
  const _component_add_individual_phone_mobile_component = resolveComponent("add-individual-phone-mobile-component");
  const _component_add_individual_phone_work_component = resolveComponent("add-individual-phone-work-component");
  return openBlock(), createElementBlock(
    Fragment,
    null,
    [
      createVNode(VOverlay, {
        opacity: 1,
        "model-value": $data.overlay,
        class: "align-center justify-center"
      }, {
        default: withCtx(() => [
          createVNode(VProgressCircular, {
            indeterminate: "",
            size: 70,
            color: "primary"
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["model-value"]),
      createVNode(VForm, {
        ref: "form",
        modelValue: $data.valid,
        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.valid = $event),
        "validate-on": "submit",
        onSubmit: withModifiers($options.saveData, ["prevent"])
      }, {
        default: withCtx(() => [
          createVNode(VContainer, null, {
            default: withCtx(() => [
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "d-flex flex-column ga-4" }, {
                    default: withCtx(() => [
                      withDirectives(createVNode(
                        VAlert,
                        {
                          density: "compact",
                          type: "error"
                        },
                        {
                          default: withCtx(() => _cache[5] || (_cache[5] = [
                            createTextVNode(" Please fill in all required fields ")
                          ])),
                          _: 1
                          /* STABLE */
                        },
                        512
                        /* NEED_PATCH */
                      ), [
                        [vShow, $data.valid === false]
                      ]),
                      createVNode(_component_individual_edit_basic_data_component, {
                        individual: $data.individual,
                        "edit-mode": false,
                        switchAffiliate: $data.switchAffiliate
                      }, null, 8, ["individual", "switchAffiliate"]),
                      createVNode(_component_edit_demographics_data_component, {
                        individual: $data.individual,
                        "edit-mode": false,
                        "read-only": false
                      }, null, 8, ["individual"]),
                      createVNode(_component_edit_employer_data_component, {
                        "edit-mode": false,
                        "show-save-button": false,
                        individual: $data.individual,
                        "read-only": false,
                        "individual-employer": $data.individualEmployer,
                        selectedEmployer: $data.selectedEmployerId,
                        selectedUnit: $data.selectedUnitId,
                        WorkLocation: $data.WorkLocationId,
                        WorkStructure: $data.WorkStructureId
                      }, null, 8, ["individual", "individual-employer", "selectedEmployer", "selectedUnit", "WorkLocation", "WorkStructure"]),
                      createVNode(_component_individual_address_component, {
                        "edit-mode": false,
                        "show-save-button": false,
                        individual: $data.individual,
                        "read-only": false,
                        "individual-address": $data.individualAddress,
                        "reset-section": true
                      }, null, 8, ["individual", "individual-address"]),
                      $data.isEduesEligible ? (openBlock(), createElementBlock(
                        Fragment,
                        { key: 0 },
                        [
                          createVNode(VIcon, {
                            class: "closeIcon",
                            onClick: _cache[0] || (_cache[0] = ($event) => $options.removeExtraFields("billingAddress")),
                            icon: "mdi:mdi-close"
                          }),
                          createVNode(_component_individual_billing_address_component, {
                            "edit-mode": false,
                            "show-save-button": false,
                            individual: $data.individual,
                            "read-only": false,
                            "individual-billing-address": $data.individualBillingAddress,
                            "reset-section": true
                          }, null, 8, ["individual", "individual-billing-address"])
                        ],
                        64
                        /* STABLE_FRAGMENT */
                      )) : createCommentVNode("v-if", true),
                      createVNode(_component_individual_email_component, {
                        "edit-mode": false,
                        "show-save-button": false,
                        individual: $data.individual,
                        "read-only": false,
                        "individual-email": $data.individualEmail
                      }, null, 8, ["individual", "individual-email"]),
                      $data.individualEmailWork && $data.individualEmailWork.Email !== void 0 ? (openBlock(), createElementBlock(
                        Fragment,
                        { key: 1 },
                        [
                          createVNode(VIcon, {
                            class: "closeIcon",
                            onClick: _cache[1] || (_cache[1] = ($event) => $options.removeExtraFields("emailWork")),
                            icon: "mdi:mdi-close"
                          }),
                          createVNode(_component_individual_email_work_component, {
                            "edit-mode": false,
                            "show-save-button": false,
                            individual: $data.individual,
                            "read-only": false,
                            "individual-email-work": $data.individualEmailWork
                          }, null, 8, ["individual", "individual-email-work"])
                        ],
                        64
                        /* STABLE_FRAGMENT */
                      )) : createCommentVNode("v-if", true),
                      createVNode(_component_add_individual_phone_component, {
                        "edit-mode": false,
                        "show-save-button": false,
                        individual: $data.individual,
                        "read-only": false,
                        "individual-phone": $data.individualPhone
                      }, null, 8, ["individual", "individual-phone"]),
                      $data.individualPhoneMobile && $data.individualPhoneMobile.PhoneNumber !== void 0 ? (openBlock(), createElementBlock(
                        Fragment,
                        { key: 2 },
                        [
                          createVNode(VIcon, {
                            class: "closeIcon",
                            onClick: _cache[2] || (_cache[2] = ($event) => $options.removeExtraFields("phoneMobile")),
                            icon: "mdi:mdi-close"
                          }),
                          createVNode(_component_add_individual_phone_mobile_component, {
                            "edit-mode": false,
                            "show-save-button": false,
                            individual: $data.individual,
                            "read-only": false,
                            "individual-phone-mobile": $data.individualPhoneMobile
                          }, null, 8, ["individual", "individual-phone-mobile"])
                        ],
                        64
                        /* STABLE_FRAGMENT */
                      )) : createCommentVNode("v-if", true),
                      $data.individualPhoneWork && $data.individualPhoneWork.PhoneNumber !== void 0 ? (openBlock(), createElementBlock(
                        Fragment,
                        { key: 3 },
                        [
                          createVNode(VIcon, {
                            class: "closeIcon",
                            onClick: _cache[3] || (_cache[3] = ($event) => $options.removeExtraFields("phoneWork")),
                            icon: "mdi:mdi-close"
                          }),
                          createVNode(_component_add_individual_phone_work_component, {
                            "edit-mode": false,
                            "show-save-button": false,
                            individual: $data.individual,
                            "read-only": false,
                            "individual-phone-work": $data.individualPhoneWork
                          }, null, 8, ["individual", "individual-phone-work"])
                        ],
                        64
                        /* STABLE_FRAGMENT */
                      )) : createCommentVNode("v-if", true)
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VRow, null, {
                default: withCtx(() => [
                  createVNode(VCol, { class: "d-flex justify-end ga-2" }, {
                    default: withCtx(() => [
                      createVNode(VBtn, {
                        class: "cancel-btn",
                        color: "darken-1",
                        to: { name: "IndividualAdd" }
                      }, {
                        default: withCtx(() => _cache[6] || (_cache[6] = [
                          createTextVNode("Cancel")
                        ])),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VBtn, {
                        color: "success",
                        href: "",
                        type: "submit",
                        disabled: $data.isButtonDisabled
                      }, {
                        default: withCtx(() => _cache[7] || (_cache[7] = [
                          createTextVNode("Save")
                        ])),
                        _: 1
                        /* STABLE */
                      }, 8, ["disabled"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue", "onSubmit"])
    ],
    64
    /* STABLE_FRAGMENT */
  );
}
const IndividualAddNewComponent = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$7], ["__file", "/var/www/html/resources/js/components/Individual/IndividualAddNewComponent.vue"]]);
const _sfc_main$6 = {
  name: "IndividualEduesComponent",
  components: {
    EditEduesPaymentComponent,
    FlipCard
  },
  mixins: [contactsMixin],
  data() {
    return {
      id: "",
      individualId: "",
      individual: {},
      ind: {},
      billHighwayData: {},
      bhData: [],
      indData: [],
      affiliateId: null,
      editItems: [
        { id: 1, title: "Edit Member Details", href: "#", icon: "mdi:mdi-account-edit-outline" },
        { id: 2, title: "Activate", nonActiveTitle: "Deactivate", href: "#", icon: "mdi:mdi-account-check-outline", nonActiveIcon: "mdi:mdi-account-remove-outline" },
        { id: 3, title: "Edit Payment", href: "#", icon: "mdi:mdi-credit-card" }
      ],
      editableAccount: false,
      isActive: false,
      isActiveManualPayment: false,
      activateOrDeactivate: "",
      flipped: false,
      loading: false,
      overlay: true,
      dialogConfirm: false,
      parentMenu: false,
      dialogConfirmMoveToPD: false,
      dialogConfirmResendSub: false,
      dialogConfirmCopeCancelPayment: false,
      isDisabledMove: false,
      isDisabledResendSub: false,
      isDisabledCopeCancelPayment: false,
      loadingMove: false,
      loadingResendSub: false,
      loadingCopeCancelPayment: false,
      isDisabledActive: false,
      loadingActive: false,
      menu: false,
      startDateMenu: false,
      endDateMenu: false,
      firstName: null,
      lastName: null,
      submissionDate: null,
      submissionStartDate: null,
      submissionEndDate: null,
      pageSize: 10,
      itemsPerPageOptions: [5, 10, 15, 30, 50],
      totalRecords: 0,
      visiblePages: 7,
      templateTypes: [],
      selectedTemplateId: null,
      pageNumber: 1,
      itemsShowed: {},
      offset: 0,
      limit: 0,
      numOfPages: 0,
      paginationSize: 0,
      filters: [],
      panelKey: 0,
      childAffiliates: "",
      copeOnly: null,
      copeOnlyOptions: [
        { "type": "Yes", "label": "Yes" },
        { "type": "No", "label": "No" }
      ],
      sortOptions: [
        { "type": "date_submitted", "label": "Date Submitted" },
        { "type": "last_name", "label": "Last Name" }
      ],
      sortBy: "date_submitted",
      sortOrderOptions: [
        { "type": "desc", "label": "Descending" },
        { "type": "asc", "label": "Ascending" }
      ],
      sortOrder: "desc",
      hasEdues: false,
      flippedTo: "",
      copeAmount: null,
      dialogConfirmEditCopeAmount: false,
      loadingEditCopeAmount: false,
      uniqueNo: 0
    };
  },
  created() {
    this.affiliateId = this.$store.getters["user/selectedAffiliate"].AffiliateId;
    this.getHasDues();
    this.getTemplatesApi();
  },
  computed: {
    // getIndividualData:function(){
    //     return this.individual;
    // },
    memberMatch: function() {
      return (id) => Object.values(this.billHighwayData).filter((member) => Number(member[0].individualId) === id);
    }
  },
  watch: {
    data() {
      this.loading = false;
    },
    pageSize() {
      this.getDataFromApi();
    }
  },
  mounted() {
    this.id = this.$route.params.id;
    this.getChildAffiliatesApi();
  },
  methods: {
    toggleFilter() {
      if (this.filters.length > 0) {
        this.filters = [];
      } else {
        this.filters = [this.panelKey];
      }
    },
    setItems() {
      this.offset = (this.pageNumber - 1) * this.pageSize;
      this.limit = this.offset + this.pageSize;
      this.numOfPages = Math.ceil(this.individual.length / this.pageSize);
      if (this.offset > this.individual.length) {
        this.pageNumber = this.numOfPages;
      }
    },
    setPage(n) {
      this.pageNumber = n;
      this.getDataFromApi();
    },
    forceRender(value) {
      this.getEduesDetailsApi(value);
    },
    open() {
      this.dialogConfirm = true;
    },
    clear() {
      this.firstName = null;
      this.lastName = null;
      this.submissionDate = null;
      this.submissionStartDate = null;
      this.submissionEndDate = null;
      this.selectedTemplateId = null;
      this.sortBy = "date_submitted";
      this.sortOrder = "desc";
      this.copeOnly = null;
      this.getDataFromApi();
    },
    hideEditMenu() {
      const clickable = document.querySelector(".v-menu__content");
      clickable.click(function() {
      });
    },
    formatDate(date) {
      return format(subHours(new Date(date)), "MMMM do yyyy, h:mm a");
    },
    getDataFromApi() {
      this.loading = true;
      this.overlay = true;
      let filter = "";
      if (this.firstName) {
        filter += "&FirstName=" + this.firstName;
      }
      if (this.lastName) {
        filter += "&LastName=" + this.lastName;
      }
      if (this.submissionDate) {
        filter += "&SubmissionDate=" + this.submissionDate;
      }
      if (this.submissionStartDate) {
        filter += "&SubmissionStartDate=" + this.submissionStartDate;
      }
      if (this.submissionEndDate) {
        filter += "&SubmissionEndDate=" + this.submissionEndDate;
      }
      if (this.sortBy) {
        filter += "&SortBy=" + this.sortBy;
      }
      if (this.sortOrder) {
        filter += "&SortOrder=" + this.sortOrder;
      }
      if (this.copeOnly) {
        filter += "&CopeOnly=" + this.copeOnly;
      }
      if (this.selectedTemplateId) {
        filter += "&TemplateId=" + this.selectedTemplateId;
      }
      if (this.childAffiliates) {
        filter += "&childAffiliateIds=" + this.childAffiliates;
      }
      filter += "&page=" + this.pageNumber + "&pageSize=" + this.pageSize;
      return axios.get("/api/v3/memberforms/admin/edues-submission?scope=global&affiliateId=" + this.affiliateId + filter).then((response) => {
        this.individual = response.data.results;
        if (this.individual.length > 0) {
          this.individual.forEach((item, index) => {
            this.individualId = item.IndividualId;
          });
          this.itemsShowed = response.data.results;
          this.pageNumber = response.data.current_page;
          this.paginationSize = response.data.last_page;
          this.totalRecords = response.data.total;
        } else if (this.pageNumber > 1) {
          this.pageNumber = response.data.last_page;
          this.getDataFromApi();
        }
      }).finally(() => {
        this.loading = false;
        this.overlay = false;
      });
    },
    getChildAffiliatesApi() {
      this.loading = true;
      return axios.get("/api/v3/memberforms/admin/child-affiliates?scope=global&affiliateId=" + this.affiliateId).then((response) => {
        this.childAffiliates = response.data.join(",");
        this.getDataFromApi();
      }).finally(() => {
        this.loading = false;
      });
    },
    getTemplatesApi() {
      this.loading = true;
      return axios.get("/api/v3/memberforms/admin/get-templates").then((response) => {
        this.templateTypes = response.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    getEduesDetailsApi(individualId) {
      this.flipped = false;
      this.loading = true;
      return axios.get("/api/v3/memberforms/admin/edues-submission-details/" + individualId + "/" + this.affiliateId + "?scope=global").then((response) => {
        const memberArray = Object.entries(response.data).map((arr) => ({
          bhData: arr[0],
          indData: arr[1]
        }));
        this.ind = Object.assign({}, memberArray[1].indData);
        this.billHighwayData = [[memberArray[1].indData, memberArray[2].indData]];
        this.isActive = false;
        this.activateOrDeactivate = "Activate";
        if (memberArray[2].indData.MemberStatusDesc === "Active" || memberArray[2].indData.MemberStatusCode === "RA") {
          this.Active = true;
          this.activateOrDeactivate = "Deactivate";
        } else if (memberArray[2].indData.MemberStatusDesc === "Active - Manual Payment") {
          this.Active = true;
          this.activateOrDeactivate = "Deactivate";
        }
        var singleIndiData = this.itemsShowed.find((item) => item.IndividualId == this.ind.individualId);
        singleIndiData.BHIndividualId = this.ind.BHIndividualId;
        singleIndiData.api_data.MemberStatusId = this.billHighwayData ? this.billHighwayData[0][1].MemberStatusId : "";
        singleIndiData.api_data.AutoPayStatus = this.billHighwayData ? this.billHighwayData[0][1].AutoPayStatus : "";
        singleIndiData.api_data.MemberStatusDesc = this.billHighwayData ? this.billHighwayData[0][1].MemberStatusDesc : "";
        singleIndiData.api_data.MemberStatusCode = this.billHighwayData ? this.billHighwayData[0][1].MemberStatusCode : "";
        singleIndiData.BillHighwayGroupId = this.ind.BillHighwayGroupId;
        var indIndex = this.itemsShowed.indexOf(singleIndiData);
        this.itemsShowed[indIndex] = singleIndiData;
      }).finally(() => {
        this.loading = false;
        this.uniqueNo = this.uniqueNo + 1;
      });
    },
    updatedPhoneNumber(pNum) {
      let phoneString = pNum.replace(/[^+\d]+/g, "");
      const x2 = phoneString.replace(/\D/g, "").match(/(\d{0,3})(\d{0,3})(\d{0,4})/);
      pNum = !x2[2] ? x2[1] : `(${x2[1]}) ${x2[2]}-${x2[3]}`;
      return pNum;
    },
    cancelActiveState() {
      this.dialogConfirm = false;
    },
    toggleActiveState(individualId, activateOrDeactivate, templateId) {
      this.loadingActive = true;
      this.isDisabledActive = true;
      const data = {};
      data.affiliateId = this.affiliateId;
      data.individualId = individualId;
      if (activateOrDeactivate.toLowerCase() === "deactivate") {
        data.status = templateId == "9" ? "RI" : "I";
      } else {
        data.status = templateId == "9" ? "RA" : templateId == "7" ? "A-MP" : "A";
      }
      axios.post("/api/v3/memberforms/admin/submission/update-member-status", data).then((response) => {
        this.dialogConfirm = false;
        this.loadingActive = false;
        this.isDisabledActive = false;
        this.getEduesDetailsApi(individualId);
      }).catch((error) => {
        console.log(error);
      }).finally();
    },
    onSavedIndividual(individual) {
      this.flipped = false;
      this.getDataFromApi();
    },
    moveToLocalPayrollDeduction(individualId) {
      this.isDisabledMove = true;
      this.loadingMove = true;
      axios.post(
        "/api/v2/billHighway/moveToLocalPayrollDeduction",
        { IndividualId: individualId, AffiliateId: this.affiliateId }
      ).then((response) => {
        this.dialogConfirmMoveToPD = false;
        this.hideEditMenu();
        this.isDisabledMove = false;
        this.loadingMove = false;
        this.$router.go(0);
      }).catch((error) => {
        console.log(error);
      }).finally();
    },
    resendSubmission(individualId, affiliateId, submissionId) {
      this.isDisabledResendSub = true;
      this.loadingResendSub = true;
      axios.post(
        "/api/v3/memberforms/admin/edues-enrollment",
        {
          IndividualId: individualId,
          AffiliateId: affiliateId,
          SubmissionId: submissionId,
          Source: "Membership Forms Portal"
        }
      ).then((response) => {
        this.dialogConfirmResendSub = false;
        this.hideEditMenu();
        this.isDisabledResendSub = false;
        this.loadingResendSub = false;
        this.$router.go(0);
      }).catch((error) => {
        console.log(error);
      }).finally();
    },
    updateCopeAmount(individualId, affiliateId, copeAmount) {
      this.loadingEditCopeAmount = true;
      axios.post(
        "/api/v2/billHighway/updateCopeAmount",
        {
          IndividualId: individualId,
          AffiliateId: affiliateId,
          CopeAmount: copeAmount
        }
      ).then((response) => {
        this.loadingEditCopeAmount = false;
        this.hideEditMenu();
        this.flipped = false;
        this.copeAmount = null;
        this.getEduesDetailsApi(individualId);
      }).catch((error) => {
        console.log(error);
      }).finally();
    },
    copeCancelPayment(individualId, affiliateId) {
      this.isDisabledCopeCancelPayment = true;
      this.loadingCopeCancelPayment = true;
      axios.post(
        "/api/v2/billHighway/copeCancelPayment",
        {
          IndividualId: individualId,
          AffiliateId: affiliateId,
          Source: "eDues"
        }
      ).then((response) => {
        this.dialogConfirmCopeCancelPayment = false;
        this.hideEditMenu();
        this.isDisabledCopeCancelPayment = false;
        this.loadingCopeCancelPayment = false;
        this.getEduesDetailsApi(individualId);
      }).catch((error) => {
        console.log(error);
      }).finally();
    },
    getHasDues() {
      axios.get("/api/v3/memberforms/admin/has-edues/" + this.affiliateId).then((response) => {
        this.hasEdues = response.data.hasEdues;
      });
    },
    download(id) {
      this.loading = true;
      axios.request({
        url: "/api/v3/memberforms/admin/submission/" + id + "/download",
        method: "GET",
        responseType: "blob"
      }).then((response) => {
        const cd = response.headers["content-disposition"].split("; ");
        const disposition = [];
        cd.forEach((item) => {
          const t = item.split("=");
          if (t[1]) {
            t[1] = t[1].replace(/^"(.+)"$/, "$1");
          }
          disposition[t[0]] = t[1];
        });
        const downloadUrl = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement("a");
        link.href = downloadUrl;
        link.setAttribute("download", disposition.filename);
        document.body.appendChild(link);
        link.click();
        link.remove();
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$3 = ["href"];
const _hoisted_2$3 = ["href"];
const _hoisted_3$3 = ["onClick"];
const _hoisted_4$3 = {
  key: 0,
  class: "edues-icons"
};
const _hoisted_5$3 = {
  key: 1,
  class: "edues-icons"
};
const _hoisted_6$3 = {
  key: 2,
  class: "edues-icons"
};
const _hoisted_7$1 = {
  key: 3,
  class: "edues-icons"
};
const _hoisted_8 = {
  key: 4,
  class: "edues-icons"
};
const _hoisted_9 = {
  key: 5,
  class: "edues-icons"
};
const _hoisted_10 = {
  key: 6,
  class: "edues-icons"
};
const _hoisted_11 = { class: "mb-0 edues-h4" };
const _hoisted_12 = { key: 7 };
const _hoisted_13 = {
  key: 8,
  class: "data-only"
};
const _hoisted_14 = {
  key: 9,
  class: "data-only"
};
const _hoisted_15 = {
  key: 10,
  class: "data-only"
};
const _hoisted_16 = { key: 11 };
const _hoisted_17 = {
  key: 0,
  class: "edues-icons"
};
const _hoisted_18 = {
  key: 1,
  class: "edues-icons"
};
const _hoisted_19 = {
  key: 2,
  class: "edues-icons"
};
const _hoisted_20 = { key: 3 };
const _hoisted_21 = { key: 0 };
const _hoisted_22 = { key: 1 };
const _hoisted_23 = {
  key: 0,
  class: "mb-0"
};
const _hoisted_24 = { class: "text-subtitle-1" };
const _hoisted_25 = {
  key: 1,
  class: "mb-0"
};
const _hoisted_26 = { class: "text-subtitle-1" };
const _hoisted_27 = {
  key: 0,
  class: "edues-icons"
};
const _hoisted_28 = {
  key: 1,
  class: "edues-icons"
};
const _hoisted_29 = {
  key: 2,
  class: "edues-icons"
};
const _hoisted_30 = { key: 3 };
const _hoisted_31 = { key: 0 };
const _hoisted_32 = { key: 1 };
const _hoisted_33 = { class: "text-center" };
function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_edit_edues_payment_component = resolveComponent("edit-edues-payment-component");
  const _component_FlipCard = resolveComponent("FlipCard");
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VOverlay, {
        opacity: 1,
        "model-value": $data.overlay,
        class: "align-center justify-center"
      }, {
        default: withCtx(() => [
          createVNode(VProgressCircular, {
            indeterminate: "",
            size: 70,
            color: "primary"
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["model-value"]),
      !$data.hasEdues ? (openBlock(), createBlock(VCard, { key: 0 }, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                align: "center",
                justify: "center"
              }, {
                default: withCtx(() => _cache[37] || (_cache[37] = [
                  createBaseVNode(
                    "p",
                    null,
                    "Oops! You are not authorized.",
                    -1
                    /* HOISTED */
                  )
                ])),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })) : createCommentVNode("v-if", true),
      $data.hasEdues ? (openBlock(), createBlock(VCard, {
        key: 1,
        class: "v-card--outlined v-sheet--tile pa-4 mobile-new-container"
      }, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, {
                cols: "12",
                lg: "2"
              }, {
                default: withCtx(() => [
                  createVNode(VBtn, {
                    elevation: "0",
                    color: "primary",
                    class: "btn-block",
                    onClick: $options.toggleFilter
                  }, {
                    default: withCtx(() => _cache[38] || (_cache[38] = [
                      createTextVNode(" Filters ")
                    ])),
                    _: 1
                    /* STABLE */
                  }, 8, ["onClick"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          createVNode(VExpansionPanels, {
            modelValue: $data.filters,
            "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => $data.filters = $event),
            multiple: ""
          }, {
            default: withCtx(() => [
              (openBlock(), createBlock(VExpansionPanel, { key: $data.panelKey }, {
                default: withCtx(() => [
                  createVNode(VExpansionPanelText, null, {
                    default: withCtx(() => [
                      createVNode(VRow, null, {
                        default: withCtx(() => [
                          createVNode(VCol, null, {
                            default: withCtx(() => [
                              createVNode(VTextField, {
                                key: "text-first-name",
                                label: "First Name",
                                modelValue: $data.firstName,
                                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.firstName = $event)
                              }, null, 8, ["modelValue"])
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, null, {
                            default: withCtx(() => [
                              createVNode(VTextField, {
                                key: "text-last-name",
                                label: "Last Name",
                                modelValue: $data.lastName,
                                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.lastName = $event)
                              }, null, 8, ["modelValue"])
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, null, {
                            default: withCtx(() => [
                              createVNode(VMenu, {
                                modelValue: $data.startDateMenu,
                                "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.startDateMenu = $event),
                                "close-on-content-click": false,
                                offset: 40,
                                transition: "scale-transition",
                                "min-width": "290px"
                              }, {
                                activator: withCtx(({ props }) => [
                                  createVNode(VTextField, mergeProps({
                                    modelValue: $data.submissionStartDate,
                                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.submissionStartDate = $event),
                                    hint: "YYYY-MM-DD"
                                  }, props, { label: "Submission Start Date" }), null, 16, ["modelValue"])
                                ]),
                                default: withCtx(() => [
                                  createVNode(VDatePicker, {
                                    modelValue: $data.submissionStartDate,
                                    "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.submissionStartDate = $event),
                                    onInput: _cache[4] || (_cache[4] = ($event) => $data.startDateMenu = false)
                                  }, null, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }, 8, ["modelValue"])
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, null, {
                            default: withCtx(() => [
                              createVNode(VMenu, {
                                modelValue: $data.endDateMenu,
                                "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.endDateMenu = $event),
                                "close-on-content-click": false,
                                offset: 40,
                                transition: "scale-transition",
                                "min-width": "290px"
                              }, {
                                activator: withCtx(({ props }) => [
                                  createVNode(VTextField, mergeProps({
                                    modelValue: $data.submissionEndDate,
                                    "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.submissionEndDate = $event),
                                    hint: "YYYY-MM-DD"
                                  }, props, { label: "Submission End Date" }), null, 16, ["modelValue"])
                                ]),
                                default: withCtx(() => [
                                  createVNode(VDatePicker, {
                                    modelValue: $data.submissionEndDate,
                                    "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.submissionEndDate = $event),
                                    onInput: _cache[8] || (_cache[8] = ($event) => $data.endDateMenu = false)
                                  }, null, 8, ["modelValue"])
                                ]),
                                _: 1
                                /* STABLE */
                              }, 8, ["modelValue"])
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VRow, null, {
                        default: withCtx(() => [
                          createVNode(VCol, null, {
                            default: withCtx(() => [
                              createVNode(VSelect, {
                                items: $data.sortOptions,
                                label: "Sort By",
                                "item-value": "type",
                                "item-title": "label",
                                modelValue: $data.sortBy,
                                "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $data.sortBy = $event)
                              }, null, 8, ["items", "modelValue"])
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, null, {
                            default: withCtx(() => [
                              createVNode(VSelect, {
                                items: $data.sortOrderOptions,
                                label: "Order",
                                "item-value": "type",
                                "item-title": "label",
                                modelValue: $data.sortOrder,
                                "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.sortOrder = $event)
                              }, null, 8, ["items", "modelValue"])
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, null, {
                            default: withCtx(() => [
                              createVNode(VSelect, {
                                items: $data.templateTypes,
                                label: "Template",
                                "item-value": "id",
                                "item-title": "display_name",
                                modelValue: $data.selectedTemplateId,
                                "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => $data.selectedTemplateId = $event)
                              }, null, 8, ["items", "modelValue"])
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VRow, null, {
                        default: withCtx(() => [
                          createVNode(VCol, null, {
                            default: withCtx(() => [
                              createVNode(VBtn, {
                                elevation: "0",
                                color: "primary",
                                class: "mb-4 btn-block",
                                onClick: _cache[13] || (_cache[13] = ($event) => $options.getDataFromApi())
                              }, {
                                default: withCtx(() => _cache[39] || (_cache[39] = [
                                  createTextVNode("Search")
                                ])),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VCol, null, {
                            default: withCtx(() => [
                              createVNode(VBtn, {
                                elevation: "0",
                                color: "default",
                                class: "mb-4 btn-block",
                                onClick: _cache[14] || (_cache[14] = ($event) => $options.clear())
                              }, {
                                default: withCtx(() => _cache[40] || (_cache[40] = [
                                  createTextVNode("Clear")
                                ])),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }))
            ]),
            _: 1
            /* STABLE */
          }, 8, ["modelValue"]),
          createVNode(VSpacer)
        ]),
        _: 1
        /* STABLE */
      })) : createCommentVNode("v-if", true),
      $data.hasEdues ? (openBlock(), createBlock(VCard, {
        key: 2,
        class: "v-card--outlined v-sheet--tile pa-4 mobile-new-container"
      }, {
        default: withCtx(() => [
          createVNode(VExpansionPanels, {
            variant: "accordion",
            class: "edues-expansion"
          }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(
                Fragment,
                null,
                renderList($data.itemsShowed, (member, i) => {
                  return openBlock(), createBlock(VExpansionPanel, {
                    key: i,
                    onClick: ($event) => $options.getEduesDetailsApi(member.IndividualId)
                  }, {
                    default: withCtx(() => [
                      !$data.loading ? (openBlock(), createBlock(
                        VMenu,
                        {
                          key: 0,
                          ref_for: true,
                          ref: `menu` + member.IndividualId,
                          location: "bottom left",
                          transition: "scroll-y-transition",
                          class: "edit-acct_btn"
                        },
                        {
                          activator: withCtx(({ props }) => [
                            createBaseVNode(
                              "div",
                              mergeProps({ ref_for: true }, props, { class: "edit-icon" }),
                              [..._cache[41] || (_cache[41] = [
                                createBaseVNode(
                                  "span",
                                  null,
                                  null,
                                  -1
                                  /* HOISTED */
                                )
                              ])],
                              16
                              /* FULL_PROPS */
                            )
                          ]),
                          default: withCtx(() => [
                            createVNode(
                              VList,
                              {
                                density: "compact",
                                color: "primary"
                              },
                              {
                                default: withCtx(() => [
                                  createCommentVNode(" 1st link "),
                                  member.TemplateId !== "8" ? (openBlock(), createBlock(
                                    VListItem,
                                    { key: 0 },
                                    {
                                      prepend: withCtx(() => [
                                        createVNode(VIcon, {
                                          color: "#092a5c",
                                          icon: "mdi:mdi-account-edit-outline"
                                        })
                                      ]),
                                      default: withCtx(() => [
                                        createVNode(
                                          VListItemTitle,
                                          null,
                                          {
                                            default: withCtx(() => [
                                              createBaseVNode("a", {
                                                href: `/individuals/${member.IndividualId}`
                                              }, "Edit Member Details", 8, _hoisted_1$3)
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  )) : createCommentVNode("v-if", true),
                                  createCommentVNode(" 2nd link "),
                                  !member.DeletedAt && member.BHIndividualId !== "-1" && !(member.api_data.AutoPayStatus === "Inactive" && (member.api_data.MemberStatusId == 0 || member.api_data.MemberStatusDesc == "Inactive")) ? (openBlock(), createBlock(VListItem, { key: 1 }, {
                                    prepend: withCtx(() => [
                                      createVNode(VIcon, {
                                        color: "#092a5c",
                                        icon: "mdi:mdi-account-check-outline"
                                      })
                                    ]),
                                    default: withCtx(() => [
                                      createVNode(VListItemTitle, {
                                        onClick: _cache[16] || (_cache[16] = withModifiers(($event) => ($options.hideEditMenu(), $options.open()), ["stop"]))
                                      }, {
                                        default: withCtx(() => [
                                          createBaseVNode(
                                            "span",
                                            null,
                                            toDisplayString($data.activateOrDeactivate) + " BillHighway Account",
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })) : createCommentVNode("v-if", true),
                                  createVNode(VDialog, {
                                    modelValue: $data.dialogConfirm,
                                    "onUpdate:modelValue": _cache[17] || (_cache[17] = ($event) => $data.dialogConfirm = $event),
                                    persistent: "",
                                    "max-width": "350"
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(
                                        VCard,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createVNode(VCardTitle, { class: "text-h6" }, {
                                              default: withCtx(() => [
                                                createBaseVNode(
                                                  "span",
                                                  null,
                                                  toDisplayString($data.activateOrDeactivate) + " BillHighway Account",
                                                  1
                                                  /* TEXT */
                                                )
                                              ]),
                                              _: 1
                                              /* STABLE */
                                            }),
                                            createVNode(
                                              VCardText,
                                              { class: "text-subtitle-1" },
                                              {
                                                default: withCtx(() => [
                                                  createTextVNode(
                                                    " Are you sure you would like to " + toDisplayString($data.activateOrDeactivate.toLowerCase()) + " " + toDisplayString(member.FirstName) + " " + toDisplayString(member.LastName) + "'s Billhighway account? ",
                                                    1
                                                    /* TEXT */
                                                  ),
                                                  withDirectives(createVNode(
                                                    VProgressLinear,
                                                    { indeterminate: "" },
                                                    null,
                                                    512
                                                    /* NEED_PATCH */
                                                  ), [
                                                    [vShow, $data.loadingActive]
                                                  ])
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            ),
                                            createVNode(
                                              VCardActions,
                                              null,
                                              {
                                                default: withCtx(() => [
                                                  createVNode(VSpacer),
                                                  createVNode(VBtn, {
                                                    elevation: "2",
                                                    color: "error",
                                                    class: "px-4",
                                                    disabled: $data.isDisabledActive,
                                                    onClick: $options.cancelActiveState
                                                  }, {
                                                    default: withCtx(() => [..._cache[42] || (_cache[42] = [
                                                      createTextVNode(" No ")
                                                    ])]),
                                                    _: 1
                                                    /* STABLE */
                                                  }, 8, ["disabled", "onClick"]),
                                                  createVNode(VBtn, {
                                                    elevation: "2",
                                                    color: "success",
                                                    class: "px-4",
                                                    disabled: $data.isDisabledActive,
                                                    onClick: ($event) => $options.toggleActiveState(member.IndividualId, $data.activateOrDeactivate, member.TemplateId)
                                                  }, {
                                                    default: withCtx(() => [..._cache[43] || (_cache[43] = [
                                                      createTextVNode(" Yes ")
                                                    ])]),
                                                    _: 2
                                                    /* DYNAMIC */
                                                  }, 1032, ["disabled", "onClick"])
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            )
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      )
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  }, 1032, ["modelValue"]),
                                  createCommentVNode(" 3rd link "),
                                  !member.DeletedAt && member.BHIndividualId !== "-1" && !(member.api_data.AutoPayStatus === "Inactive" && (member.api_data.MemberStatusId == 0 || member.api_data.MemberStatusDesc == "Inactive")) ? (openBlock(), createBlock(
                                    VListItem,
                                    { key: 2 },
                                    {
                                      prepend: withCtx(() => [
                                        createVNode(VIcon, {
                                          color: "#092a5c",
                                          icon: "mdi:mdi-playlist-edit"
                                        })
                                      ]),
                                      default: withCtx(() => [
                                        createVNode(
                                          VListItemTitle,
                                          null,
                                          {
                                            default: withCtx(() => [
                                              createBaseVNode("a", {
                                                href: `/individuals/${member.IndividualId}#unionRelationship`
                                              }, "Edit Dues Category", 8, _hoisted_2$3)
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  )) : createCommentVNode("v-if", true),
                                  createCommentVNode(" 4th link "),
                                  !member.DeletedAt && member.BHIndividualId !== "-1" && !(member.api_data.AutoPayStatus === "Inactive" && (member.api_data.MemberStatusId == 0 || member.api_data.MemberStatusDesc == "Inactive")) ? (openBlock(), createBlock(VListItem, { key: 3 }, {
                                    prepend: withCtx(() => [
                                      createVNode(VIcon, {
                                        color: "#092a5c",
                                        icon: "mdi:mdi-credit-card"
                                      })
                                    ]),
                                    default: withCtx(() => [
                                      createVNode(VListItemTitle, null, {
                                        default: withCtx(() => [
                                          createBaseVNode("span", {
                                            onClick: _cache[18] || (_cache[18] = ($event) => {
                                              $data.flippedTo = "EditPayment";
                                              _ctx.onEdit();
                                            })
                                          }, "Edit Payment")
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  })) : createCommentVNode("v-if", true),
                                  createCommentVNode(" 5th link "),
                                  !member.DeletedAt && member.BHIndividualId !== "-1" && !(member.api_data.AutoPayStatus === "Inactive" && (member.api_data.MemberStatusId == 0 || member.api_data.MemberStatusDesc == "Inactive")) && member.TemplateId !== "6" && member.TemplateId !== "8" ? (openBlock(), createBlock(
                                    VListItem,
                                    { key: 4 },
                                    {
                                      prepend: withCtx(() => [
                                        createVNode(VIcon, {
                                          color: "#092a5c",
                                          icon: "mdi:mdi-credit-card-remove-outline"
                                        })
                                      ]),
                                      default: withCtx(() => [
                                        createVNode(
                                          VListItemTitle,
                                          null,
                                          {
                                            default: withCtx(() => [
                                              createBaseVNode("span", {
                                                onClick: _cache[19] || (_cache[19] = withModifiers(($event) => $data.dialogConfirmMoveToPD = true, ["stop"]))
                                              }, "Move to Local Payroll Deduction"),
                                              createVNode(VDialog, {
                                                modelValue: $data.dialogConfirmMoveToPD,
                                                "onUpdate:modelValue": _cache[21] || (_cache[21] = ($event) => $data.dialogConfirmMoveToPD = $event),
                                                persistent: "",
                                                "max-width": "350"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(
                                                    VCard,
                                                    null,
                                                    {
                                                      default: withCtx(() => [
                                                        createVNode(VCardTitle, { class: "text-h6" }, {
                                                          default: withCtx(() => [..._cache[44] || (_cache[44] = [
                                                            createBaseVNode(
                                                              "span",
                                                              null,
                                                              "Move to Local Payroll Deduction",
                                                              -1
                                                              /* HOISTED */
                                                            )
                                                          ])]),
                                                          _: 1
                                                          /* STABLE */
                                                        }),
                                                        createVNode(
                                                          VCardText,
                                                          { class: "text-subtitle-1" },
                                                          {
                                                            default: withCtx(() => [
                                                              _cache[45] || (_cache[45] = createTextVNode(" This is a permanent change and you won't be able to undo this change. Do you still wish to move ")),
                                                              createBaseVNode(
                                                                "span",
                                                                null,
                                                                toDisplayString(member.FirstName) + " " + toDisplayString(member.LastName),
                                                                1
                                                                /* TEXT */
                                                              ),
                                                              _cache[46] || (_cache[46] = createTextVNode(" to Local Payroll Deduction? ")),
                                                              withDirectives(createVNode(
                                                                VProgressLinear,
                                                                { indeterminate: "" },
                                                                null,
                                                                512
                                                                /* NEED_PATCH */
                                                              ), [
                                                                [vShow, $data.loadingMove]
                                                              ])
                                                            ]),
                                                            _: 2
                                                            /* DYNAMIC */
                                                          },
                                                          1024
                                                          /* DYNAMIC_SLOTS */
                                                        ),
                                                        createVNode(
                                                          VCardActions,
                                                          null,
                                                          {
                                                            default: withCtx(() => [
                                                              createVNode(VSpacer),
                                                              createVNode(VBtn, {
                                                                elevation: "2",
                                                                color: "error",
                                                                class: "px-4",
                                                                disabled: $data.isDisabledMove,
                                                                onClick: _cache[20] || (_cache[20] = ($event) => {
                                                                  $data.dialogConfirmMoveToPD = false;
                                                                  $options.hideEditMenu();
                                                                })
                                                              }, {
                                                                default: withCtx(() => [..._cache[47] || (_cache[47] = [
                                                                  createTextVNode(" Cancel Move ")
                                                                ])]),
                                                                _: 1
                                                                /* STABLE */
                                                              }, 8, ["disabled"]),
                                                              createVNode(VBtn, {
                                                                elevation: "2",
                                                                color: "success",
                                                                class: "px-4",
                                                                disabled: $data.isDisabledMove,
                                                                onClick: ($event) => $options.moveToLocalPayrollDeduction(member.IndividualId)
                                                              }, {
                                                                default: withCtx(() => [..._cache[48] || (_cache[48] = [
                                                                  createTextVNode(" Confirm Move ")
                                                                ])]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              }, 1032, ["disabled", "onClick"])
                                                            ]),
                                                            _: 2
                                                            /* DYNAMIC */
                                                          },
                                                          1024
                                                          /* DYNAMIC_SLOTS */
                                                        )
                                                      ]),
                                                      _: 2
                                                      /* DYNAMIC */
                                                    },
                                                    1024
                                                    /* DYNAMIC_SLOTS */
                                                  )
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              }, 1032, ["modelValue"])
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  )) : createCommentVNode("v-if", true),
                                  createCommentVNode(" 6th link "),
                                  member.BHIndividualId == "-1" && !(member.api_data.AutoPayStatus === "Inactive" && (member.api_data.MemberStatusId == 0 || member.api_data.MemberStatusDesc == "Inactive")) ? (openBlock(), createBlock(
                                    VListItem,
                                    { key: 5 },
                                    {
                                      prepend: withCtx(() => [
                                        createVNode(VIcon, {
                                          color: "#092a5c",
                                          icon: "mdi:mdi-format-list-bulleted"
                                        })
                                      ]),
                                      default: withCtx(() => [
                                        createVNode(
                                          VListItemTitle,
                                          null,
                                          {
                                            default: withCtx(() => [
                                              createBaseVNode("span", {
                                                onClick: _cache[22] || (_cache[22] = withModifiers(($event) => $data.dialogConfirmResendSub = true, ["stop"]))
                                              }, "Resend Submission"),
                                              createVNode(VDialog, {
                                                modelValue: $data.dialogConfirmResendSub,
                                                "onUpdate:modelValue": _cache[24] || (_cache[24] = ($event) => $data.dialogConfirmResendSub = $event),
                                                persistent: "",
                                                "max-width": "350"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(
                                                    VCard,
                                                    null,
                                                    {
                                                      default: withCtx(() => [
                                                        createVNode(VCardTitle, { class: "text-h6" }, {
                                                          default: withCtx(() => [..._cache[49] || (_cache[49] = [
                                                            createBaseVNode(
                                                              "span",
                                                              null,
                                                              "Resend Submission",
                                                              -1
                                                              /* HOISTED */
                                                            )
                                                          ])]),
                                                          _: 1
                                                          /* STABLE */
                                                        }),
                                                        createVNode(
                                                          VCardText,
                                                          { class: "text-subtitle-1" },
                                                          {
                                                            default: withCtx(() => [
                                                              _cache[50] || (_cache[50] = createTextVNode(" Do you still wish to resend the submission for ")),
                                                              createBaseVNode(
                                                                "span",
                                                                null,
                                                                toDisplayString(member.FirstName) + " " + toDisplayString(member.LastName),
                                                                1
                                                                /* TEXT */
                                                              ),
                                                              _cache[51] || (_cache[51] = createTextVNode(" ? ")),
                                                              withDirectives(createVNode(
                                                                VProgressLinear,
                                                                { indeterminate: "" },
                                                                null,
                                                                512
                                                                /* NEED_PATCH */
                                                              ), [
                                                                [vShow, $data.loadingResendSub]
                                                              ])
                                                            ]),
                                                            _: 2
                                                            /* DYNAMIC */
                                                          },
                                                          1024
                                                          /* DYNAMIC_SLOTS */
                                                        ),
                                                        createVNode(
                                                          VCardActions,
                                                          null,
                                                          {
                                                            default: withCtx(() => [
                                                              createVNode(VSpacer),
                                                              createVNode(VBtn, {
                                                                elevation: "2",
                                                                color: "error",
                                                                class: "px-4",
                                                                disabled: $data.isDisabledResendSub,
                                                                onClick: _cache[23] || (_cache[23] = ($event) => {
                                                                  $data.dialogConfirmResendSub = false;
                                                                  $options.hideEditMenu();
                                                                })
                                                              }, {
                                                                default: withCtx(() => [..._cache[52] || (_cache[52] = [
                                                                  createTextVNode(" Cancel ")
                                                                ])]),
                                                                _: 1
                                                                /* STABLE */
                                                              }, 8, ["disabled"]),
                                                              createVNode(VBtn, {
                                                                elevation: "2",
                                                                color: "success",
                                                                class: "px-4",
                                                                disabled: $data.isDisabledResendSub,
                                                                onClick: ($event) => $options.resendSubmission(member.IndividualId, member.AffiliateId, member.SubmissionId)
                                                              }, {
                                                                default: withCtx(() => [..._cache[53] || (_cache[53] = [
                                                                  createTextVNode(" Confirm ")
                                                                ])]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              }, 1032, ["disabled", "onClick"])
                                                            ]),
                                                            _: 2
                                                            /* DYNAMIC */
                                                          },
                                                          1024
                                                          /* DYNAMIC_SLOTS */
                                                        )
                                                      ]),
                                                      _: 2
                                                      /* DYNAMIC */
                                                    },
                                                    1024
                                                    /* DYNAMIC_SLOTS */
                                                  )
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              }, 1032, ["modelValue"])
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  )) : createCommentVNode("v-if", true),
                                  createCommentVNode(" 7th link "),
                                  (member.TemplateId == 6 || member.TemplateId == 8) && member.api_data.MemberStatusDesc == "Active" && member.api_data.AutoPayStatus == "Active" ? (openBlock(), createBlock(
                                    VListItem,
                                    { key: 6 },
                                    {
                                      prepend: withCtx(() => [
                                        createVNode(VIcon, {
                                          color: "#092a5c",
                                          icon: "mdi:mdi-credit-card-remove-outline"
                                        })
                                      ]),
                                      default: withCtx(() => [
                                        createVNode(
                                          VListItemTitle,
                                          null,
                                          {
                                            default: withCtx(() => [
                                              createBaseVNode("span", {
                                                onClick: _cache[25] || (_cache[25] = withModifiers(($event) => $data.dialogConfirmCopeCancelPayment = true, ["stop"]))
                                              }, "Cancel Payment"),
                                              createVNode(VDialog, {
                                                modelValue: $data.dialogConfirmCopeCancelPayment,
                                                "onUpdate:modelValue": _cache[27] || (_cache[27] = ($event) => $data.dialogConfirmCopeCancelPayment = $event),
                                                persistent: "",
                                                "max-width": "350"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(
                                                    VCard,
                                                    null,
                                                    {
                                                      default: withCtx(() => [
                                                        createVNode(VCardTitle, { class: "text-h6" }, {
                                                          default: withCtx(() => [..._cache[54] || (_cache[54] = [
                                                            createBaseVNode(
                                                              "span",
                                                              null,
                                                              "Cancel Payment",
                                                              -1
                                                              /* HOISTED */
                                                            )
                                                          ])]),
                                                          _: 1
                                                          /* STABLE */
                                                        }),
                                                        createVNode(
                                                          VCardText,
                                                          { class: "text-subtitle-1" },
                                                          {
                                                            default: withCtx(() => [
                                                              _cache[55] || (_cache[55] = createTextVNode(" Do you wish to cancel payment for ")),
                                                              createBaseVNode(
                                                                "span",
                                                                null,
                                                                toDisplayString(member.FirstName) + " " + toDisplayString(member.LastName),
                                                                1
                                                                /* TEXT */
                                                              ),
                                                              _cache[56] || (_cache[56] = createTextVNode(" ? ")),
                                                              withDirectives(createVNode(
                                                                VProgressLinear,
                                                                { indeterminate: "" },
                                                                null,
                                                                512
                                                                /* NEED_PATCH */
                                                              ), [
                                                                [vShow, $data.loadingCopeCancelPayment]
                                                              ])
                                                            ]),
                                                            _: 2
                                                            /* DYNAMIC */
                                                          },
                                                          1024
                                                          /* DYNAMIC_SLOTS */
                                                        ),
                                                        createVNode(
                                                          VCardActions,
                                                          null,
                                                          {
                                                            default: withCtx(() => [
                                                              createVNode(VSpacer),
                                                              createVNode(VBtn, {
                                                                elevation: "2",
                                                                color: "error",
                                                                class: "px-4",
                                                                disabled: $data.isDisabledCopeCancelPayment,
                                                                onClick: _cache[26] || (_cache[26] = ($event) => {
                                                                  $data.dialogConfirmCopeCancelPayment = false;
                                                                  $options.hideEditMenu();
                                                                })
                                                              }, {
                                                                default: withCtx(() => [..._cache[57] || (_cache[57] = [
                                                                  createTextVNode(" Cancel ")
                                                                ])]),
                                                                _: 1
                                                                /* STABLE */
                                                              }, 8, ["disabled"]),
                                                              createVNode(VBtn, {
                                                                elevation: "2",
                                                                color: "success",
                                                                class: "px-4",
                                                                disabled: $data.isDisabledCopeCancelPayment,
                                                                onClick: ($event) => $options.copeCancelPayment(member.IndividualId, member.AffiliateId)
                                                              }, {
                                                                default: withCtx(() => [..._cache[58] || (_cache[58] = [
                                                                  createTextVNode(" Confirm ")
                                                                ])]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              }, 1032, ["disabled", "onClick"])
                                                            ]),
                                                            _: 2
                                                            /* DYNAMIC */
                                                          },
                                                          1024
                                                          /* DYNAMIC_SLOTS */
                                                        )
                                                      ]),
                                                      _: 2
                                                      /* DYNAMIC */
                                                    },
                                                    1024
                                                    /* DYNAMIC_SLOTS */
                                                  )
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              }, 1032, ["modelValue"])
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  )) : createCommentVNode("v-if", true),
                                  createCommentVNode(" 8th link "),
                                  createVNode(
                                    VListItem,
                                    null,
                                    {
                                      prepend: withCtx(() => [
                                        createVNode(VIcon, {
                                          color: "#092a5c",
                                          icon: "mdi:mdi-file-pdf-box-outline"
                                        })
                                      ]),
                                      default: withCtx(() => [
                                        createVNode(
                                          VListItemTitle,
                                          null,
                                          {
                                            default: withCtx(() => [
                                              createBaseVNode("a", {
                                                onClick: ($event) => $options.download(member.SubmissionId)
                                              }, "Download PDF", 8, _hoisted_3$3)
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  ),
                                  createCommentVNode(" 9th link "),
                                  !member.DeletedAt && member.BHIndividualId !== "-1" && member.api_data.MemberStatusDesc == "Active" && member.api_data.AutoPayStatus == "Active" ? (openBlock(), createBlock(
                                    VListItem,
                                    { key: 7 },
                                    {
                                      prepend: withCtx(() => [
                                        createVNode(VIcon, {
                                          color: "#092a5c",
                                          icon: "mdi:mdi-playlist-edit"
                                        })
                                      ]),
                                      default: withCtx(() => [
                                        createVNode(
                                          VListItemTitle,
                                          null,
                                          {
                                            default: withCtx(() => [
                                              createBaseVNode("span", {
                                                onClick: _cache[28] || (_cache[28] = ($event) => {
                                                  $data.flippedTo = "EditCopeAmount";
                                                  _ctx.onEdit();
                                                })
                                              }, "Edit Cope Amount"),
                                              createVNode(VDialog, {
                                                modelValue: $data.dialogConfirmEditCopeAmount,
                                                "onUpdate:modelValue": _cache[30] || (_cache[30] = ($event) => $data.dialogConfirmEditCopeAmount = $event),
                                                persistent: "",
                                                "max-width": "350"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(
                                                    VCard,
                                                    null,
                                                    {
                                                      default: withCtx(() => [
                                                        createVNode(VCardTitle, { class: "text-h6" }, {
                                                          default: withCtx(() => [..._cache[59] || (_cache[59] = [
                                                            createBaseVNode(
                                                              "span",
                                                              null,
                                                              "Edit COPE Amount",
                                                              -1
                                                              /* HOISTED */
                                                            )
                                                          ])]),
                                                          _: 1
                                                          /* STABLE */
                                                        }),
                                                        createVNode(
                                                          VCardText,
                                                          { class: "text-subtitle-1" },
                                                          {
                                                            default: withCtx(() => [
                                                              _cache[60] || (_cache[60] = createTextVNode(" Do you wish to update the cope amount for ")),
                                                              createBaseVNode(
                                                                "span",
                                                                null,
                                                                toDisplayString(member.FirstName) + " " + toDisplayString(member.LastName),
                                                                1
                                                                /* TEXT */
                                                              ),
                                                              _cache[61] || (_cache[61] = createTextVNode("? ")),
                                                              withDirectives(createVNode(
                                                                VProgressLinear,
                                                                { indeterminate: "" },
                                                                null,
                                                                512
                                                                /* NEED_PATCH */
                                                              ), [
                                                                [vShow, $data.loadingEditCopeAmount]
                                                              ])
                                                            ]),
                                                            _: 2
                                                            /* DYNAMIC */
                                                          },
                                                          1024
                                                          /* DYNAMIC_SLOTS */
                                                        ),
                                                        createVNode(
                                                          VCardActions,
                                                          null,
                                                          {
                                                            default: withCtx(() => [
                                                              createVNode(VSpacer),
                                                              createVNode(VBtn, {
                                                                elevation: "2",
                                                                color: "error",
                                                                class: "px-4",
                                                                onClick: _cache[29] || (_cache[29] = ($event) => {
                                                                  $data.dialogConfirmEditCopeAmount = false;
                                                                  $options.hideEditMenu();
                                                                })
                                                              }, {
                                                                default: withCtx(() => [..._cache[62] || (_cache[62] = [
                                                                  createTextVNode(" Cancel ")
                                                                ])]),
                                                                _: 1
                                                                /* STABLE */
                                                              }),
                                                              createVNode(VBtn, {
                                                                elevation: "2",
                                                                color: "success",
                                                                class: "px-4",
                                                                onClick: ($event) => $options.updateCopeAmount(member.IndividualId, member.AffiliateId, $data.copeAmount)
                                                              }, {
                                                                default: withCtx(() => [..._cache[63] || (_cache[63] = [
                                                                  createTextVNode(" Confirm ")
                                                                ])]),
                                                                _: 2
                                                                /* DYNAMIC */
                                                              }, 1032, ["onClick"])
                                                            ]),
                                                            _: 2
                                                            /* DYNAMIC */
                                                          },
                                                          1024
                                                          /* DYNAMIC_SLOTS */
                                                        )
                                                      ]),
                                                      _: 2
                                                      /* DYNAMIC */
                                                    },
                                                    1024
                                                    /* DYNAMIC_SLOTS */
                                                  )
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              }, 1032, ["modelValue"])
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  )) : createCommentVNode("v-if", true)
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1536
                        /* NEED_PATCH, DYNAMIC_SLOTS */
                      )) : createCommentVNode("v-if", true),
                      createVNode(
                        VExpansionPanelTitle,
                        null,
                        {
                          default: withCtx(() => [
                            member.BHIndividualId === "-1" ? (openBlock(), createElementBlock("div", _hoisted_4$3, [..._cache[64] || (_cache[64] = [
                              createBaseVNode(
                                "svg",
                                {
                                  xmlns: "http://www.w3.org/2000/svg",
                                  height: "16",
                                  width: "2",
                                  viewBox: "0 0 64 512"
                                },
                                [
                                  createBaseVNode("path", {
                                    fill: "#e84117",
                                    d: "M64 64c0-17.7-14.3-32-32-32S0 46.3 0 64V320c0 17.7 14.3 32 32 32s32-14.3 32-32V64zM32 480a40 40 0 1 0 0-80 40 40 0 1 0 0 80z"
                                  })
                                ],
                                -1
                                /* HOISTED */
                              )
                            ])])) : member.api_data.AutoPayStatus === "Inactive" && member.api_data.MemberStatusDesc == "Active" || (member.TemplateId == 6 || member.TemplateId == 8) && member.api_data.AutoPayStatus === "Inactive" && member.api_data.MemberStatusDesc == "Inactive" ? (openBlock(), createElementBlock("div", _hoisted_5$3, [..._cache[65] || (_cache[65] = [
                              createBaseVNode(
                                "img",
                                {
                                  src: "/vendor/memberforms/images/noun-no-cash-3437719.svg",
                                  alt: "no-cash",
                                  style: { "width": "22px", "margin-right": "3px" }
                                },
                                null,
                                -1
                                /* HOISTED */
                              )
                            ])])) : member.api_data.AutoPayStatus === "Inactive" && (member.api_data.MemberStatusId == 0 || member.api_data.MemberStatusDesc == "Inactive") ? (openBlock(), createElementBlock("div", _hoisted_6$3, [..._cache[66] || (_cache[66] = [
                              createBaseVNode(
                                "svg",
                                {
                                  xmlns: "http://www.w3.org/2000/svg",
                                  height: "16",
                                  width: "16",
                                  viewBox: "0 0 512 512"
                                },
                                [
                                  createBaseVNode("path", {
                                    fill: "#e6a71e",
                                    d: "M256 32c14.2 0 27.3 7.5 34.5 19.8l216 368c7.3 12.4 7.3 27.7 .2 40.1S486.3 480 472 480H40c-14.3 0-27.6-7.7-34.7-20.1s-7-27.8 .2-40.1l216-368C228.7 39.5 241.8 32 256 32zm0 128c-13.3 0-24 10.7-24 24V296c0 13.3 10.7 24 24 24s24-10.7 24-24V184c0-13.3-10.7-24-24-24zm32 224a32 32 0 1 0 -64 0 32 32 0 1 0 64 0z"
                                  })
                                ],
                                -1
                                /* HOISTED */
                              )
                            ])])) : member.api_data.AutoPayStatus === "Inactive" && member.api_data.MemberStatusDesc == "Active" && member.BillHighwayGroupId === -1 ? (openBlock(), createElementBlock("div", _hoisted_7$1, [..._cache[67] || (_cache[67] = [
                              createBaseVNode(
                                "svg",
                                {
                                  xmlns: "http://www.w3.org/2000/svg",
                                  height: "16",
                                  width: "2",
                                  viewBox: "0 0 64 512"
                                },
                                [
                                  createBaseVNode("path", {
                                    fill: "#e63e14",
                                    d: "M64 64c0-17.7-14.3-32-32-32S0 46.3 0 64V320c0 17.7 14.3 32 32 32s32-14.3 32-32V64zM32 480a40 40 0 1 0 0-80 40 40 0 1 0 0 80z"
                                  })
                                ],
                                -1
                                /* HOISTED */
                              )
                            ])])) : member.is_member === 1 && member.api_data.MemberStatusDesc == "Inactive" ? (openBlock(), createElementBlock("div", _hoisted_8, [..._cache[68] || (_cache[68] = [
                              createBaseVNode(
                                "svg",
                                {
                                  xmlns: "http://www.w3.org/2000/svg",
                                  height: "16",
                                  width: "2",
                                  viewBox: "0 0 64 512"
                                },
                                [
                                  createBaseVNode("path", {
                                    fill: "#e84117",
                                    d: "M64 64c0-17.7-14.3-32-32-32S0 46.3 0 64V320c0 17.7 14.3 32 32 32s32-14.3 32-32V64zM32 480a40 40 0 1 0 0-80 40 40 0 1 0 0 80z"
                                  })
                                ],
                                -1
                                /* HOISTED */
                              )
                            ])])) : member.is_retired_member === 1 && member.api_data.MemberStatusCode == "RI" ? (openBlock(), createElementBlock("div", _hoisted_9, [..._cache[69] || (_cache[69] = [
                              createBaseVNode(
                                "svg",
                                {
                                  xmlns: "http://www.w3.org/2000/svg",
                                  height: "16",
                                  width: "2",
                                  viewBox: "0 0 64 512"
                                },
                                [
                                  createBaseVNode("path", {
                                    fill: "#e84117",
                                    d: "M64 64c0-17.7-14.3-32-32-32S0 46.3 0 64V320c0 17.7 14.3 32 32 32s32-14.3 32-32V64zM32 480a40 40 0 1 0 0-80 40 40 0 1 0 0 80z"
                                  })
                                ],
                                -1
                                /* HOISTED */
                              )
                            ])])) : (openBlock(), createElementBlock("div", _hoisted_10, [..._cache[70] || (_cache[70] = [
                              createBaseVNode(
                                "img",
                                {
                                  src: "/vendor/memberforms/images/check-solid.svg",
                                  alt: "no-cash",
                                  style: { "width": "20px" }
                                },
                                null,
                                -1
                                /* HOISTED */
                              )
                            ])])),
                            createBaseVNode(
                              "h4",
                              _hoisted_11,
                              toDisplayString(member.FirstName) + " " + toDisplayString(member.LastName),
                              1
                              /* TEXT */
                            ),
                            member.DeletedAt ? (openBlock(), createElementBlock("div", _hoisted_12, "[Moved to Local Payroll Deduction]")) : member.TemplateId == 7 ? (openBlock(), createElementBlock("div", _hoisted_13, " - Data only")) : member.TemplateId == 6 ? (openBlock(), createElementBlock("div", _hoisted_14, " - Recurring COPE only")) : member.TemplateId == 8 ? (openBlock(), createElementBlock(
                              "div",
                              _hoisted_15,
                              " - Local # " + toDisplayString(member.affillateNumber ? member.affillateNumber : "") + " Recurring COPE only",
                              1
                              /* TEXT */
                            )) : createCommentVNode("v-if", true),
                            member.DeletedAt ? (openBlock(), createElementBlock("div", _hoisted_16, "Moved to Local Payroll Deduction")) : createCommentVNode("v-if", true)
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      ),
                      createVNode(
                        VExpansionPanelText,
                        null,
                        {
                          default: withCtx(() => [
                            createVNode(_component_FlipCard, { flipped: $data.flipped }, {
                              front: withCtx(() => [
                                withDirectives(createVNode(
                                  VProgressLinear,
                                  { indeterminate: "" },
                                  null,
                                  512
                                  /* NEED_PATCH */
                                ), [
                                  [vShow, $data.loading]
                                ]),
                                (openBlock(true), createElementBlock(
                                  Fragment,
                                  null,
                                  renderList($options.memberMatch(Number(member.IndividualId)), (user, j) => {
                                    return openBlock(), createElementBlock("div", { key: j }, [
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createVNode(
                                              VCol,
                                              { class: "text-left" },
                                              {
                                                default: withCtx(() => [
                                                  member.BHIndividualId === "-1" ? (openBlock(), createElementBlock("div", _hoisted_17, [..._cache[71] || (_cache[71] = [
                                                    createBaseVNode(
                                                      "h5",
                                                      { class: "message-display" },
                                                      "Unable to verify the data. Please resolve any conflicts associated to submission.",
                                                      -1
                                                      /* HOISTED */
                                                    )
                                                  ])])) : createCommentVNode("v-if", true),
                                                  member.api_data.AutoPayStatus === "Inactive" && (member.api_data.MemberStatusId == 0 || member.api_data.MemberStatusDesc == "Inactive") ? (openBlock(), createElementBlock("div", _hoisted_18, [..._cache[72] || (_cache[72] = [
                                                    createBaseVNode(
                                                      "h5",
                                                      { class: "message-display" },
                                                      "This member is a non-member union relationship status. In Connect please update the union relationship.",
                                                      -1
                                                      /* HOISTED */
                                                    )
                                                  ])])) : createCommentVNode("v-if", true),
                                                  member.api_data.AutoPayStatus === "Inactive" && member.api_data.MemberStatusDesc == "Active" ? (openBlock(), createElementBlock("div", _hoisted_19, [..._cache[73] || (_cache[73] = [
                                                    createBaseVNode(
                                                      "h5",
                                                      { class: "message-display" },
                                                      "Dues are no longer being collected from this member",
                                                      -1
                                                      /* HOISTED */
                                                    )
                                                  ])])) : createCommentVNode("v-if", true),
                                                  member.is_member === 1 && member.api_data.MemberStatusDesc == "Inactive" ? (openBlock(), createElementBlock("div", _hoisted_20, [..._cache[74] || (_cache[74] = [
                                                    createBaseVNode(
                                                      "h5",
                                                      { class: "message-display" },
                                                      "Conflict: custom header message",
                                                      -1
                                                      /* HOISTED */
                                                    )
                                                  ])])) : createCommentVNode("v-if", true)
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            )
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(VDivider),
                                      _cache[91] || (_cache[91] = createBaseVNode(
                                        "h5",
                                        { class: "mt-10 bhTitle" },
                                        "BillHighway Status: ",
                                        -1
                                        /* HOISTED */
                                      )),
                                      createVNode(
                                        VCard,
                                        {
                                          class: "d-flex justify-space-around mb-4 mt-6 pb-4 stat-card",
                                          flat: ""
                                        },
                                        {
                                          default: withCtx(() => [
                                            createVNode(
                                              VCard,
                                              {
                                                class: "pa-2",
                                                border: "",
                                                color: "transparent",
                                                flat: ""
                                              },
                                              {
                                                default: withCtx(() => [
                                                  _cache[75] || (_cache[75] = createTextVNode(" Record Status ")),
                                                  createBaseVNode(
                                                    "span",
                                                    {
                                                      class: normalizeClass(user[1].MemberStatusDesc === "Inactive" || user[1].MemberStatusCode === "RI" ? "stat-error" : "")
                                                    },
                                                    toDisplayString(user[1].MemberStatusDesc),
                                                    3
                                                    /* TEXT, CLASS */
                                                  )
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            ),
                                            user[1].AutoPayInfo ? (openBlock(), createBlock(
                                              VCard,
                                              {
                                                key: 0,
                                                class: "pa-2",
                                                border: "",
                                                color: "transparent",
                                                flat: ""
                                              },
                                              {
                                                default: withCtx(() => [
                                                  _cache[76] || (_cache[76] = createTextVNode(" Payment (Last 4) ")),
                                                  user[1].AutoPayInfo.PaymentMethod === "Credit Card" ? (openBlock(), createElementBlock(
                                                    "span",
                                                    _hoisted_21,
                                                    toDisplayString(user[1].AutoPayInfo.CardNumberLastFour),
                                                    1
                                                    /* TEXT */
                                                  )) : (openBlock(), createElementBlock(
                                                    "span",
                                                    _hoisted_22,
                                                    toDisplayString(user[1].AutoPayInfo.AccountNumberLastFour),
                                                    1
                                                    /* TEXT */
                                                  ))
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            )) : createCommentVNode("v-if", true),
                                            createVNode(
                                              VCard,
                                              {
                                                class: "pa-2",
                                                border: "",
                                                color: "transparent",
                                                flat: ""
                                              },
                                              {
                                                default: withCtx(() => [
                                                  _cache[77] || (_cache[77] = createTextVNode(" Billing Type ID ")),
                                                  createBaseVNode(
                                                    "span",
                                                    null,
                                                    toDisplayString(user[1].BillingTypeId),
                                                    1
                                                    /* TEXT */
                                                  )
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            ),
                                            createVNode(
                                              VCard,
                                              {
                                                class: "pa-2",
                                                border: "",
                                                color: "transparent",
                                                flat: ""
                                              },
                                              {
                                                default: withCtx(() => [
                                                  _cache[78] || (_cache[78] = createTextVNode(" AutoPay ")),
                                                  createBaseVNode(
                                                    "span",
                                                    {
                                                      class: normalizeClass({ "stat-error": user[1].AutoPayStatus !== "Active" })
                                                    },
                                                    toDisplayString(user[1].AutoPayStatus),
                                                    3
                                                    /* TEXT, CLASS */
                                                  )
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            ),
                                            createVNode(
                                              VCard,
                                              {
                                                class: "pa-2",
                                                border: "",
                                                color: "transparent",
                                                flat: ""
                                              },
                                              {
                                                default: withCtx(() => [
                                                  _cache[79] || (_cache[79] = createTextVNode(" Current balance ")),
                                                  createBaseVNode(
                                                    "span",
                                                    {
                                                      class: normalizeClass({ "stat-error": user[1].CurrentBalance > 0 })
                                                    },
                                                    "$" + toDisplayString(user[1].CurrentBalance),
                                                    3
                                                    /* TEXT, CLASS */
                                                  )
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            )
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      _cache[92] || (_cache[92] = createBaseVNode(
                                        "h5",
                                        { class: "mt-10" },
                                        "Submission Information:",
                                        -1
                                        /* HOISTED */
                                      )),
                                      createVNode(
                                        VCard,
                                        {
                                          class: "d-flex mb-2 mt-2 pa-2 sub-info",
                                          flat: ""
                                        },
                                        {
                                          default: withCtx(() => [
                                            createVNode(
                                              VRow,
                                              { class: "d-flex flex-wrap" },
                                              {
                                                default: withCtx(() => [
                                                  createVNode(
                                                    VCol,
                                                    {
                                                      cols: "12",
                                                      lg: "6"
                                                    },
                                                    {
                                                      default: withCtx(() => [
                                                        _cache[80] || (_cache[80] = createBaseVNode(
                                                          "h5",
                                                          null,
                                                          "AFT GUID",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        createBaseVNode(
                                                          "span",
                                                          null,
                                                          toDisplayString(user[1].UserId),
                                                          1
                                                          /* TEXT */
                                                        )
                                                      ]),
                                                      _: 2
                                                      /* DYNAMIC */
                                                    },
                                                    1024
                                                    /* DYNAMIC_SLOTS */
                                                  ),
                                                  createCommentVNode(' <v-col\n                                                cols="12"\n                                                lg="6"\n                                            >\n                                                <h5>Billhighway Payment Reference</h5>\n                                                <span>{{ user[1].MemberTypeDesc }}</span>\n                                            </v-col> '),
                                                  createVNode(
                                                    VCol,
                                                    {
                                                      cols: "12",
                                                      lg: "6"
                                                    },
                                                    {
                                                      default: withCtx(() => [
                                                        _cache[81] || (_cache[81] = createBaseVNode(
                                                          "h5",
                                                          null,
                                                          "Billhighway ID",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        createBaseVNode(
                                                          "span",
                                                          null,
                                                          toDisplayString(user[1].BhUserId),
                                                          1
                                                          /* TEXT */
                                                        )
                                                      ]),
                                                      _: 2
                                                      /* DYNAMIC */
                                                    },
                                                    1024
                                                    /* DYNAMIC_SLOTS */
                                                  ),
                                                  createVNode(
                                                    VCol,
                                                    {
                                                      cols: "12",
                                                      lg: "6"
                                                    },
                                                    {
                                                      default: withCtx(() => [
                                                        _cache[82] || (_cache[82] = createBaseVNode(
                                                          "h5",
                                                          null,
                                                          "Billing Type",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        createBaseVNode(
                                                          "span",
                                                          null,
                                                          toDisplayString(user[1].BillingTypeId) + " - " + toDisplayString(user[1].BillingTypeName),
                                                          1
                                                          /* TEXT */
                                                        )
                                                      ]),
                                                      _: 2
                                                      /* DYNAMIC */
                                                    },
                                                    1024
                                                    /* DYNAMIC_SLOTS */
                                                  ),
                                                  user[0].IndividualEmails ? (openBlock(), createBlock(
                                                    VCol,
                                                    {
                                                      key: 0,
                                                      cols: "12",
                                                      lg: "6"
                                                    },
                                                    {
                                                      default: withCtx(() => [
                                                        _cache[83] || (_cache[83] = createBaseVNode(
                                                          "h5",
                                                          null,
                                                          "Email",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        createBaseVNode(
                                                          "span",
                                                          null,
                                                          toDisplayString(user[0].IndividualEmails.Email),
                                                          1
                                                          /* TEXT */
                                                        )
                                                      ]),
                                                      _: 2
                                                      /* DYNAMIC */
                                                    },
                                                    1024
                                                    /* DYNAMIC_SLOTS */
                                                  )) : createCommentVNode("v-if", true),
                                                  user[0].IndividualPhones ? (openBlock(), createBlock(
                                                    VCol,
                                                    {
                                                      key: 1,
                                                      cols: "12",
                                                      lg: "6"
                                                    },
                                                    {
                                                      default: withCtx(() => [
                                                        _cache[84] || (_cache[84] = createBaseVNode(
                                                          "h5",
                                                          null,
                                                          "Phone Number",
                                                          -1
                                                          /* HOISTED */
                                                        )),
                                                        createBaseVNode(
                                                          "span",
                                                          null,
                                                          toDisplayString($options.updatedPhoneNumber(user[0].IndividualPhones.Number)),
                                                          1
                                                          /* TEXT */
                                                        )
                                                      ]),
                                                      _: 2
                                                      /* DYNAMIC */
                                                    },
                                                    1024
                                                    /* DYNAMIC_SLOTS */
                                                  )) : createCommentVNode("v-if", true)
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            )
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VCard,
                                        {
                                          class: "d-flex justify-space-around mb-6 pa-2 date-sub",
                                          flat: ""
                                        },
                                        {
                                          default: withCtx(() => [
                                            createVNode(
                                              VRow,
                                              { class: "d-flex justify-end" },
                                              {
                                                default: withCtx(() => [
                                                  createVNode(
                                                    VCol,
                                                    {
                                                      cols: "12",
                                                      lg: "6",
                                                      class: "date-submitted"
                                                    },
                                                    {
                                                      default: withCtx(() => [
                                                        user[0].Source ? (openBlock(), createElementBlock("h5", _hoisted_23, [
                                                          _cache[85] || (_cache[85] = createTextVNode(" Source: ")),
                                                          createBaseVNode(
                                                            "span",
                                                            _hoisted_24,
                                                            toDisplayString(user[0].Source),
                                                            1
                                                            /* TEXT */
                                                          )
                                                        ])) : createCommentVNode("v-if", true),
                                                        user[0].SubmittedDate ? (openBlock(), createElementBlock("h5", _hoisted_25, [
                                                          _cache[86] || (_cache[86] = createTextVNode(" Date Submitted: ")),
                                                          createBaseVNode(
                                                            "span",
                                                            _hoisted_26,
                                                            toDisplayString($options.formatDate(user[0].SubmittedDate)) + " EST ",
                                                            1
                                                            /* TEXT */
                                                          )
                                                        ])) : createCommentVNode("v-if", true)
                                                      ]),
                                                      _: 2
                                                      /* DYNAMIC */
                                                    },
                                                    1024
                                                    /* DYNAMIC_SLOTS */
                                                  )
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            )
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      ),
                                      createVNode(
                                        VRow,
                                        null,
                                        {
                                          default: withCtx(() => [
                                            createVNode(
                                              VCol,
                                              { class: "text-left" },
                                              {
                                                default: withCtx(() => [
                                                  member.BHIndividualId === "-1" ? (openBlock(), createElementBlock("div", _hoisted_27, [..._cache[87] || (_cache[87] = [
                                                    createBaseVNode(
                                                      "h5",
                                                      { class: "message-display" },
                                                      "Bill Highway Conflict:(Display the error msg that is received via API). For assistance, Please contact AFT.",
                                                      -1
                                                      /* HOISTED */
                                                    )
                                                  ])])) : createCommentVNode("v-if", true),
                                                  member.api_data.AutoPayStatus === "Inactive" && (member.api_data.MemberStatusId == 0 || member.api_data.MemberStatusDesc == "Inactive") ? (openBlock(), createElementBlock("div", _hoisted_28, [..._cache[88] || (_cache[88] = [
                                                    createBaseVNode(
                                                      "h5",
                                                      { class: "message-display" },
                                                      "This member is a non-member union relationship status. In Connect please update the union relationship.",
                                                      -1
                                                      /* HOISTED */
                                                    )
                                                  ])])) : createCommentVNode("v-if", true),
                                                  member.api_data.AutoPayStatus === "Inactive" && member.api_data.MemberStatusDesc == "Active" ? (openBlock(), createElementBlock("div", _hoisted_29, [..._cache[89] || (_cache[89] = [
                                                    createBaseVNode(
                                                      "h5",
                                                      { class: "message-display" },
                                                      "please click on the menu and select an option to resolve.",
                                                      -1
                                                      /* HOISTED */
                                                    )
                                                  ])])) : createCommentVNode("v-if", true),
                                                  member.is_member === 1 && member.api_data.MemberStatusDesc == "Inactive" ? (openBlock(), createElementBlock("div", _hoisted_30, [..._cache[90] || (_cache[90] = [
                                                    createBaseVNode(
                                                      "h5",
                                                      { class: "message-display" },
                                                      "Conflict: custom footer message",
                                                      -1
                                                      /* HOISTED */
                                                    )
                                                  ])])) : createCommentVNode("v-if", true)
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              },
                                              1024
                                              /* DYNAMIC_SLOTS */
                                            )
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        },
                                        1024
                                        /* DYNAMIC_SLOTS */
                                      )
                                    ]);
                                  }),
                                  128
                                  /* KEYED_FRAGMENT */
                                ))
                              ]),
                              back: withCtx(() => [
                                $data.flippedTo === "EditPayment" ? (openBlock(), createElementBlock("span", _hoisted_31, [
                                  (openBlock(), createBlock(_component_edit_edues_payment_component, {
                                    key: $data.uniqueNo,
                                    individual: $data.ind,
                                    "bill-highway-data": $data.billHighwayData,
                                    required: true,
                                    onCancelEditPayment: _cache[31] || (_cache[31] = ($event) => $data.flipped = false),
                                    onClickedForceRender: $options.forceRender
                                  }, null, 8, ["individual", "bill-highway-data", "onClickedForceRender"]))
                                ])) : $data.flippedTo === "EditCopeAmount" ? (openBlock(), createElementBlock("span", _hoisted_32, [
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { class: "text-left" }, {
                                        default: withCtx(() => [
                                          _cache[93] || (_cache[93] = createTextVNode(" Current COPE contribution: ")),
                                          createBaseVNode(
                                            "strong",
                                            null,
                                            "$" + toDisplayString($data.ind.CopeAmount),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  createVNode(
                                    VRow,
                                    null,
                                    {
                                      default: withCtx(() => [
                                        createVNode(
                                          VCol,
                                          { class: "text-left" },
                                          {
                                            default: withCtx(() => [
                                              createTextVNode(
                                                " Update " + toDisplayString(member.FirstName) + " " + toDisplayString(member.LastName) + "'s COPE contribution: ",
                                                1
                                                /* TEXT */
                                              ),
                                              createVNode(VTextField, {
                                                prefix: "$",
                                                disabled: $data.ind.CopeAmount == 0,
                                                modelValue: $data.copeAmount,
                                                "onUpdate:modelValue": _cache[32] || (_cache[32] = ($event) => $data.copeAmount = $event)
                                              }, null, 8, ["disabled", "modelValue"])
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  ),
                                  createVNode(VRow, null, {
                                    default: withCtx(() => [
                                      createVNode(VCol, { class: "text-right hidden-md-and-down" }, {
                                        default: withCtx(() => [
                                          createVNode(VBtn, {
                                            class: "px-4",
                                            onClick: _cache[33] || (_cache[33] = ($event) => $data.flipped = false)
                                          }, {
                                            default: withCtx(() => [..._cache[94] || (_cache[94] = [
                                              createTextVNode("Cancel")
                                            ])]),
                                            _: 1
                                            /* STABLE */
                                          }),
                                          createVNode(VBtn, {
                                            color: "success",
                                            class: "px-4",
                                            disabled: $data.ind.CopeAmount == 0,
                                            onClick: _cache[34] || (_cache[34] = ($event) => $data.dialogConfirmEditCopeAmount = true)
                                          }, {
                                            default: withCtx(() => [..._cache[95] || (_cache[95] = [
                                              createTextVNode(" Update COPE contribution ")
                                            ])]),
                                            _: 1
                                            /* STABLE */
                                          }, 8, ["disabled"])
                                        ]),
                                        _: 1
                                        /* STABLE */
                                      })
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }),
                                  $data.ind.CopeAmount == 0 ? (openBlock(), createBlock(
                                    VRow,
                                    {
                                      key: 0,
                                      style: { "color": "#ff0000" }
                                    },
                                    {
                                      default: withCtx(() => [
                                        createTextVNode(
                                          toDisplayString(member.FirstName) + " " + toDisplayString(member.LastName) + " needs to submit form with cope contribution to allow updating the cope amount. ",
                                          1
                                          /* TEXT */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  )) : createCommentVNode("v-if", true)
                                ])) : createCommentVNode("v-if", true)
                              ]),
                              _: 2
                              /* DYNAMIC */
                            }, 1032, ["flipped"])
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ]),
            _: 1
            /* STABLE */
          }),
          createBaseVNode("div", _hoisted_33, [
            createVNode(VRow, null, {
              default: withCtx(() => [
                createVNode(VCol, null, {
                  default: withCtx(() => [
                    createVNode(VSelect, {
                      label: "Rows per page",
                      style: { "width": "120px" },
                      modelValue: $data.pageSize,
                      "onUpdate:modelValue": _cache[35] || (_cache[35] = ($event) => $data.pageSize = $event),
                      items: $data.itemsPerPageOptions
                    }, null, 8, ["modelValue", "items"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                $data.paginationSize > 1 ? (openBlock(), createBlock(VCol, { key: 0 }, {
                  default: withCtx(() => [
                    createTextVNode(
                      toDisplayString($data.pageSize * $data.pageNumber - $data.pageSize + 1) + "-" + toDisplayString($data.pageSize * $data.pageNumber > $data.totalRecords ? $data.totalRecords : $data.pageSize * $data.pageNumber) + " of " + toDisplayString($data.totalRecords),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 1
                  /* STABLE */
                })) : createCommentVNode("v-if", true),
                $data.paginationSize > 1 ? (openBlock(), createBlock(VCol, { key: 1 }, {
                  default: withCtx(() => [
                    createVNode(VPagination, {
                      modelValue: $data.pageNumber,
                      "onUpdate:modelValue": [
                        _cache[36] || (_cache[36] = ($event) => $data.pageNumber = $event),
                        $options.setPage
                      ],
                      length: $data.paginationSize,
                      "total-visible": $data.visiblePages
                    }, null, 8, ["modelValue", "length", "total-visible", "onUpdate:modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                })) : createCommentVNode("v-if", true)
              ]),
              _: 1
              /* STABLE */
            })
          ])
        ]),
        _: 1
        /* STABLE */
      })) : createCommentVNode("v-if", true)
    ]),
    _: 1
    /* STABLE */
  });
}
const IndividualEduesComponent = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$6], ["__scopeId", "data-v-b965b536"], ["__file", "/var/www/html/resources/js/components/Individual/IndividualEduesComponent.vue"]]);
const _sfc_main$5 = {
  name: "IndividualSearchComponent",
  components: { IndividualAddComponent },
  data: () => ({
    global: true
  })
};
function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_IndividualAddComponent = resolveComponent("IndividualAddComponent");
  return openBlock(), createBlock(_component_IndividualAddComponent, { global: "global" });
}
const IndividualSearchComponent = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$5], ["__file", "/var/www/html/resources/js/components/Individual/IndividualSearchComponent.vue"]]);
const _sfc_main$4 = {
  name: "LookerDashboardComponent",
  data() {
    return {
      dashboardList: [],
      embedUrl: null,
      error: false,
      errorMessage: "",
      listError: false,
      listErrorMessage: "",
      search: false,
      selectedDashboardId: null
    };
  },
  mounted() {
    this.fetchDashboardList();
  },
  methods: {
    async fetchDashboardList() {
      const url = "/api/v2/looker/search-dashboard";
      try {
        const response = await axios.get(url, {
          params: { folder_id: 25 }
        });
        if (response.data && response.data.status === "success" && response.data.url) {
          this.dashboardList = response.data.url;
        } else {
          throw new Error(response.data.message || "Invalid response format");
        }
      } catch (error) {
        this.listError = true;
        this.listErrorMessage = "Error fetching dashboard List";
        console.error("Error details:", error);
      }
    },
    async fetchEmbedUrl(dashboardId) {
      var _a2, _b;
      this.search = true;
      this.selectedDashboardId = dashboardId;
      const url = "/api/v2/looker/embed-url";
      try {
        const response = await axios.get(url, {
          params: { dashboard_id: dashboardId }
        });
        if (response.data && response.data.status === "success" && response.data.url) {
          this.embedUrl = response.data.url;
        } else {
          throw new Error(response.data.message || "Invalid response format");
        }
      } catch (error) {
        this.error = true;
        this.errorMessage = "Error fetching embed URL: " + (((_b = (_a2 = error.response) == null ? void 0 : _a2.data) == null ? void 0 : _b.message) || error.message);
        console.error("Error details:", error);
      }
    }
  }
};
const _hoisted_1$2 = { key: 0 };
const _hoisted_2$2 = ["innerHTML"];
const _hoisted_3$2 = { key: 1 };
const _hoisted_4$2 = { key: 3 };
const _hoisted_5$2 = { key: 1 };
const _hoisted_6$2 = ["src"];
function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_v_flex = resolveComponent("v-flex");
  return openBlock(), createBlock(VContainer, { fluid: "" }, {
    default: withCtx(() => [
      _cache[0] || (_cache[0] = createBaseVNode(
        "h2",
        null,
        "Reports (Choose a report to view)",
        -1
        /* HOISTED */
      )),
      $data.dashboardList.length ? (openBlock(), createElementBlock("div", _hoisted_1$2, [
        createVNode(_component_v_flex, {
          column: "",
          "d-flex": ""
        }, {
          default: withCtx(() => [
            createVNode(VLayout, { wrap: "" }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(
                  Fragment,
                  null,
                  renderList($data.dashboardList, (dashboard, index) => {
                    return openBlock(), createBlock(
                      _component_v_flex,
                      {
                        key: index,
                        md4: ""
                      },
                      {
                        default: withCtx(() => [
                          createBaseVNode("div", {
                            innerHTML: dashboard.thumbnailImage,
                            style: { "overflow": "hidden !important", "height": "180px", "padding-left": "90px" },
                            class: "dashboard-img"
                          }, null, 8, _hoisted_2$2),
                          createVNode(VCard, {
                            class: normalizeClass(["mx-auto card-container d-flex align-center justify-center", $data.selectedDashboardId == dashboard.id ? "green" : ""]),
                            color: "#3490dc",
                            "min-height": "200",
                            width: "300",
                            onClick: ($event) => $options.fetchEmbedUrl(dashboard.id)
                          }, {
                            default: withCtx(() => [
                              createBaseVNode("div", null, [
                                createCommentVNode(' <v-img\n                                    :src=dashboard.thumbnailImage\n                                    :aspect-ratio="undefined"\n                                /> '),
                                createVNode(
                                  VCardTitle,
                                  { class: "text-white text-center" },
                                  {
                                    default: withCtx(() => [
                                      createTextVNode(
                                        toDisplayString(dashboard.title),
                                        1
                                        /* TEXT */
                                      )
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  },
                                  1024
                                  /* DYNAMIC_SLOTS */
                                ),
                                createVNode(
                                  VCardText,
                                  { class: "text-white text-center text-caption" },
                                  {
                                    default: withCtx(() => [
                                      createTextVNode(
                                        " views: " + toDisplayString(dashboard.view_count),
                                        1
                                        /* TEXT */
                                      )
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  },
                                  1024
                                  /* DYNAMIC_SLOTS */
                                )
                              ])
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["onClick", "class"])
                        ]),
                        _: 2
                        /* DYNAMIC */
                      },
                      1024
                      /* DYNAMIC_SLOTS */
                    );
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          _: 1
          /* STABLE */
        })
      ])) : $data.listError ? (openBlock(), createElementBlock("div", _hoisted_3$2, [
        createVNode(VAlert, {
          type: "error",
          closable: ""
        }, {
          default: withCtx(() => [
            createTextVNode(
              toDisplayString($data.listErrorMessage),
              1
              /* TEXT */
            )
          ]),
          _: 1
          /* STABLE */
        })
      ])) : (openBlock(), createBlock(VProgressCircular, {
        key: 2,
        indeterminate: "",
        color: "primary"
      })),
      $data.search ? (openBlock(), createElementBlock("div", _hoisted_4$2, [
        $data.error ? (openBlock(), createBlock(VAlert, {
          key: 0,
          type: "error",
          closable: ""
        }, {
          default: withCtx(() => [
            createTextVNode(
              toDisplayString($data.errorMessage),
              1
              /* TEXT */
            )
          ]),
          _: 1
          /* STABLE */
        })) : (openBlock(), createElementBlock("div", _hoisted_5$2, [
          createVNode(VCard, { class: "v-card--outlined v-sheet--tile px-6" }, {
            default: withCtx(() => [
              $data.embedUrl ? (openBlock(), createElementBlock("iframe", {
                key: 0,
                src: $data.embedUrl,
                frameborder: "0"
              }, null, 8, _hoisted_6$2)) : (openBlock(), createBlock(VProgressCircular, {
                key: 1,
                indeterminate: "",
                color: "primary"
              }))
            ]),
            _: 1
            /* STABLE */
          })
        ]))
      ])) : createCommentVNode("v-if", true)
    ]),
    _: 1
    /* STABLE */
  });
}
const LookerDashboardComponent = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$4], ["__scopeId", "data-v-dabb08a9"], ["__file", "/var/www/html/resources/js/components/Looker/LookerDashboardComponent.vue"]]);
const _sfc_main$3 = {
  name: "UnitListComponent",
  mixins: [dataTablesMixin],
  data: () => ({
    id: 0,
    unitAffiliate: {},
    tableWidth: 0,
    unitId: false,
    uniteName: "",
    totalUnits: 0,
    units: [],
    loading: true,
    options: {
      sortBy: [
        "UnitName"
      ],
      sortDesc: "asc",
      page: "1",
      itemsPerPage: "10"
    },
    headers: [
      { title: "Employer Name", value: "LocalAgreement.Employer.EmployerName", sortable: true },
      { title: "Unit Name", value: "UnitName", sortable: true },
      { title: "Division Name", value: "Division.DivisionName", sortable: true },
      { title: "Agreement/Contract", value: "LocalAgreement.LocalAgreementName", sortable: true },
      { title: "Affiliate Number", value: "LocalAgreement.Employer.Chapter.Affiliate.AffiliateNumber", sortable: true }
    ]
  }),
  beforeMount() {
    if (this.$route.params.id) {
      this.id = parseInt(this.$route.params.id);
    } else {
      this.id = this.getAffiliateId();
    }
    if (this.$store.getters["user/selectedAffiliate"].hasChapters) {
      this.headers.push(
        { title: "Chapter", value: "LocalAgreement.Employer.Chapter.ChapterName" }
      );
    }
  },
  mounted() {
    this.tableWidth = this.$refs.tableContainer.clientWidth - 50;
    this.getAffiliateDataFromApi();
  },
  watch: {
    options: {
      handler() {
        this.getDataFromApi();
      },
      deep: true,
      immediate: true
    }
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      const { sortBy, sortDesc, page, itemsPerPage } = this.options;
      const sortByField = sortBy[0] ?? "UnitName";
      const sortDirection = sortDesc === "asc" ? "" : "-";
      let url = "/api/v2/unit?page=" + page + "&per_page=" + itemsPerPage + "&sort=" + sortDirection + sortByField + "&include=Division,LocalAgreement.Employer.Chapter.Affiliate";
      let filter = "";
      filter += "&filter[Unit.IsStructural]=0";
      if (filter !== "") {
        url += filter;
      }
      return axios.get(url).then((response) => {
        this.units = response.data.data;
        this.totalUnits = response.data.meta.total;
      }).finally(() => {
        this.loading = false;
      });
    },
    getAffiliateId() {
      return this.$store.getters["user/selectedAffiliate"].AffiliateId;
    },
    getAffiliateDataFromApi() {
      this.loading = true;
      let url = "/api/v2/aggregate/affiliate/detail/" + this.id + "?scope=global";
      return axios.get(url).then((response) => {
        this.unitAffiliate = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    },
    openCreateUnit() {
    },
    onEdit() {
    }
  }
};
function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_router_link = resolveComponent("router-link");
  return openBlock(), createBlock(VContainer, {
    fluid: "",
    class: "mobile-word-break"
  }, {
    default: withCtx(() => [
      createBaseVNode(
        "h2",
        null,
        "Units Within " + toDisplayString(_ctx.unitAffiliate.AffiliateName) + " - " + toDisplayString(_ctx.unitAffiliate.AffiliateNumber),
        1
        /* TEXT */
      ),
      createVNode(VRow, null, {
        default: withCtx(() => [
          createVNode(
            VCol,
            { ref: "tableContainer" },
            {
              default: withCtx(() => [
                createVNode(VDataTableServer, {
                  headers: _ctx.headers,
                  items: _ctx.units,
                  options: _ctx.options,
                  "onUpdate:options": _cache[0] || (_cache[0] = ($event) => _ctx.options = $event),
                  "items-length": _ctx.totalUnits,
                  loading: _ctx.loading,
                  "mobile-breakpoint": 992,
                  style: { width: "100%" },
                  class: "elevation-1 mobile-units-card-table units-results-table",
                  "onUpdate:page": _cache[1] || (_cache[1] = ($event) => _ctx.scrollToBeginningOfPage())
                }, {
                  top: withCtx(() => [
                    createVNode(VDataTableFooter, { "items-per-page-text": "Rows per page" })
                  ]),
                  loader: withCtx(() => [
                    createVNode(VProgressLinear, {
                      indeterminate: "",
                      height: "8",
                      color: "#3f98c9"
                    })
                  ]),
                  [`item.LocalAgreement.Employer.EmployerName`]: withCtx(({ item }) => [
                    item.LocalAgreement && item.LocalAgreement.Employer ? (openBlock(), createBlock(_component_router_link, {
                      key: 0,
                      to: { name: "EmployerDetails", params: { id: item.LocalAgreement.Employer.EmployerId } }
                    }, {
                      default: withCtx(() => [
                        createTextVNode(
                          toDisplayString(item.LocalAgreement.Employer.EmployerName),
                          1
                          /* TEXT */
                        )
                      ]),
                      _: 2
                      /* DYNAMIC */
                    }, 1032, ["to"])) : createCommentVNode("v-if", true)
                  ]),
                  [`item.LocalAgreement.Employer.Chapter.Affiliate.AffiliateNumber`]: withCtx(({ item }) => [
                    item.LocalAgreement && item.LocalAgreement.Employer && item.LocalAgreement.Employer.Chapter && item.LocalAgreement.Employer.Chapter.Affiliate ? (openBlock(), createBlock(_component_router_link, {
                      key: 0,
                      to: { name: "AffiliateDisplay", params: { id: item.LocalAgreement.Employer.Chapter.Affiliate.AffiliateId } }
                    }, {
                      default: withCtx(() => [
                        createTextVNode(
                          toDisplayString(item.LocalAgreement.Employer.Chapter.Affiliate.AffiliateNumber),
                          1
                          /* TEXT */
                        )
                      ]),
                      _: 2
                      /* DYNAMIC */
                    }, 1032, ["to"])) : createCommentVNode("v-if", true)
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, 1032, ["headers", "items", "options", "items-length", "loading"])
              ]),
              _: 1
              /* STABLE */
            },
            512
            /* NEED_PATCH */
          )
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const UnitListComponent = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$3], ["__file", "/var/www/html/resources/js/components/Units/UnitListComponent.vue"]]);
const _sfc_main$2 = {
  name: "MyAccountComponent",
  data() {
    return {
      "useraccount": {}
    };
  },
  mounted() {
    this.getDataFromApi();
  },
  methods: {
    getDataFromApi() {
      this.loading = true;
      return axios.get("/api/v2/user").then((response) => {
        this.useraccount = response.data.data;
      }).finally(() => {
        this.loading = false;
      });
    }
  }
};
const _hoisted_1$1 = { class: "data-container" };
const _hoisted_2$1 = { class: "data-value" };
const _hoisted_3$1 = { class: "data-container" };
const _hoisted_4$1 = { class: "data-value" };
const _hoisted_5$1 = { class: "data-container" };
const _hoisted_6$1 = { class: "data-value" };
function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(VContainer, null, {
    default: withCtx(() => [
      createVNode(VCard, { class: "v-card--outlined v-sheet--tile px-6" }, {
        default: withCtx(() => [
          createVNode(VRow, null, {
            default: withCtx(() => [
              createVNode(VCol, null, {
                default: withCtx(() => [
                  createBaseVNode("div", _hoisted_1$1, [
                    _cache[0] || (_cache[0] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Name:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode(
                      "div",
                      _hoisted_2$1,
                      toDisplayString($data.useraccount.name),
                      1
                      /* TEXT */
                    )
                  ]),
                  createBaseVNode("div", _hoisted_3$1, [
                    _cache[1] || (_cache[1] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Email:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode(
                      "div",
                      _hoisted_4$1,
                      toDisplayString($data.useraccount.email),
                      1
                      /* TEXT */
                    )
                  ]),
                  createBaseVNode("div", _hoisted_5$1, [
                    _cache[2] || (_cache[2] = createBaseVNode(
                      "div",
                      { class: "data-tag" },
                      "Account created on:",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode(
                      "div",
                      _hoisted_6$1,
                      toDisplayString(_ctx.$filters.formatDate($data.useraccount.CreatedAt)),
                      1
                      /* TEXT */
                    )
                  ])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _: 1
    /* STABLE */
  });
}
const MyAccountComponent = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$2], ["__file", "/var/www/html/resources/js/components/User/MyAccountComponent.vue"]]);
const router = createRouter({
  base: "/",
  history: createWebHistory(),
  routes: [
    {
      path: "/",
      name: "Dashboard",
      component: HomeComponent
    },
    {
      path: "/dashboard",
      redirect: { name: "Dashboard", query: {} }
    },
    {
      path: "/user/login",
      redirect: { name: "Dashboard", query: {} }
    },
    {
      path: "/home",
      name: "Home",
      component: HomeComponent
    },
    {
      path: "/affiliate",
      name: "Affiliate",
      component: AffiliateDisplayComponent
    },
    {
      path: "/affiliates/admin",
      name: "AffiliatesAdmin",
      component: AffiliateListComponent
    },
    {
      path: "/affiliates/search",
      name: "AffiliatesSearch",
      component: AffiliatesSearchComponent
    },
    {
      path: "/affiliates/create",
      name: "AffiliateCreate",
      component: AffiliateCreateComponent
    },
    {
      path: "/affiliates/:id",
      name: "AffiliateDisplay",
      component: AffiliateDisplayComponent
    },
    {
      path: "/affiliates/:id/edit",
      name: "AffiliateEdit",
      component: AffiliateEditMainComponent
    },
    {
      path: "/employers",
      name: "Employers",
      component: EmployerListComponent
    },
    {
      path: "/employers/search",
      name: "EmployersSearch",
      component: EmployerSearchComponent
    },
    {
      path: "/employers/:id",
      name: "EmployerDetails",
      component: EmployerDetailsComponent
    },
    {
      path: "/individuals",
      name: "Individuals",
      component: IndividualListComponent
    },
    {
      path: "/individuals/add",
      name: "IndividualAdd",
      component: IndividualAddComponent
    },
    {
      path: "/individuals/search",
      name: "IndividualSearch",
      component: IndividualSearchComponent
    },
    {
      path: "/individuals/search/officer",
      name: "OfficerSearch",
      component: OfficerSearchComponent
    },
    {
      path: "/individuals/new/:firstName?/:preferredName?/:middleName?/:lastName?",
      name: "IndividualNew",
      component: IndividualAddNewComponent
    },
    {
      path: "/individuals/new/",
      name: "IndividualNew2",
      component: IndividualAddNewComponent
    },
    {
      path: "/individuals/:id",
      name: "IndividualDetails",
      component: IndividualDetailsComponent
    },
    {
      path: "/compare-individual/:id",
      name: "CompareIndividual",
      component: CompareIndividualComponent
    },
    {
      path: "/individuals/:id/edit",
      name: "EditIndividual",
      component: EditIndividualComponent
    },
    {
      path: "/chapters",
      name: "Chapters",
      component: ChapterListComponent
    },
    {
      path: "/edues",
      name: "eDues",
      component: IndividualEduesComponent
    },
    {
      path: "/chapters/:id",
      name: "ChapterDetails",
      component: ChapterDetailsComponent
    },
    {
      path: "/oldreports",
      name: "Old Reports",
      component: ReportsComponent
    },
    {
      path: "/reports",
      name: "Reports",
      component: NewReportsComponent
    },
    {
      path: "/unit-report",
      name: "UnitReport",
      component: UnitReportComponent
    },
    {
      path: "/add-drop-report",
      name: "AddDropReport",
      component: AddDropReportComponent
    },
    {
      path: "/officer-report",
      name: "OfficerReport",
      component: OfficerReportComponent
    },
    {
      path: "/assessment-report",
      name: "AssessmentReport",
      component: AssessmentReportComponent
    },
    {
      path: "/cope-report",
      name: "CopeReport",
      component: CopeReportComponent
    },
    {
      path: "/whatsnew",
      name: "WhatsNew",
      component: WhatsNewComponent
    },
    {
      path: "/releasenotes",
      name: "Release Notes",
      component: ReleaseNotesComponent
    },
    {
      path: "/units",
      name: "Units",
      component: UnitListComponent
    },
    {
      path: "/user/myaccount",
      name: "MyAccount",
      component: MyAccountComponent
    },
    {
      path: "/activity",
      name: "Activity",
      component: ActivityListComponent
    },
    {
      path: "/oneschema",
      name: "OneSchema",
      component: OneSchemaFileValidationComponent
    },
    {
      path: "/:pathMatch(.*)*",
      name: "Page Not Found",
      component: NotFoundComponent
    },
    {
      path: "/looker-dashboard",
      name: "LookerDashboard",
      component: LookerDashboardComponent
    }
  ]
});
const state$4 = {
  user: {}
};
const getters$4 = {
  selectedEntity: (state2) => {
    return {
      type: state2.user.profile.selected_entity.entity_type,
      id: state2.user.profile.selected_entity.entity_id
    };
  },
  selectedAffiliate: (state2) => {
    return state2.user.selectedAffiliate;
  },
  userAbilities: (state2) => {
    let abilities = state2.user.AuthUserAbilities;
    if (state2.user.type === "admin") {
      abilities.unshift({ AuthAbility: { name: "Access Site Administration", type: "admin", order: -1 }, order: -1 });
      return abilities;
    }
    return abilities;
  }
};
const actions$4 = {
  async getUser({ commit }) {
    return new Promise((resolve, reject) => {
      axios.get("/api/v2/user").then((response) => {
        commit("setUser", response.data.data);
        resolve();
      });
    });
  },
  async setUserSelectedEntity({ commit }, entityId) {
    return new Promise((resolve, reject) => {
      axios.post("/api/v2/user/select-entity?scope=global", {
        entityId
      }).then((response) => {
        commit("setUser", response.data.data);
        resolve();
      });
    });
  }
};
const mutations$4 = {
  setUser(state2, payload) {
    state2.user = payload;
  }
};
const userModule = {
  namespaced: true,
  state: state$4,
  getters: getters$4,
  actions: actions$4,
  mutations: mutations$4
};
const state$3 = {
  contactSources: []
};
const getters$3 = {
  contactSources: (state2) => state2.contactSources
};
const actions$3 = {
  getContactSources({ commit, state: state2 }) {
    if (state2.contactSources.length === 0) {
      axios.get("/api/v2/ContactSource?sort=DisplayOrder&per_page=1000").then((response) => {
        commit("setContactSources", response.data.data);
      });
    }
  }
};
const mutations$3 = {
  setContactSources(state2, sources) {
    state2.contactSources = sources;
  }
};
const contactSource = {
  namespaced: true,
  state: state$3,
  getters: getters$3,
  actions: actions$3,
  mutations: mutations$3
};
const state$2 = {
  contactStatuses: []
};
const getters$2 = {
  contactStatuses: (state2) => state2.contactStatuses
};
const actions$2 = {
  getContactStatuses({ commit, state: state2 }) {
    if (state2.contactStatuses.length === 0) {
      axios.get("/api/v2/ContactStatus").then((response) => {
        commit("setContactStatuses", response.data.data);
      });
    }
  }
};
const mutations$2 = {
  setContactStatuses(state2, sources) {
    state2.contactStatuses = sources;
  }
};
const contactStatus = {
  namespaced: true,
  state: state$2,
  getters: getters$2,
  actions: actions$2,
  mutations: mutations$2
};
const state$1 = {
  stateTerritories: []
};
const getters$1 = {
  stateTerritories: (state2) => state2.stateTerritories
};
const actions$1 = {
  getStateTerritories({ commit, state: state2 }) {
    if (state2.stateTerritories.length === 0) {
      axios.get("/api/v2/StateTerritory?per_page=70").then((response) => {
        commit("setStateTerritories", response.data.data);
      });
    }
  }
};
const mutations$1 = {
  setStateTerritories(state2, sources) {
    state2.stateTerritories = sources;
  }
};
const stateTerritory = {
  namespaced: true,
  state: state$1,
  getters: getters$1,
  actions: actions$1,
  mutations: mutations$1
};
const state = {
  items: {}
};
const getters = {
  itemsByUrl: (state2) => (url) => {
    return state2.items.hasOwnProperty(url) ? state2.items[url] : [];
  }
};
const actions = {
  async getItems({ commit, state: state2 }, url) {
    return new Promise((resolve, reject) => {
      if (!state2.items.hasOwnProperty(url)) {
        axios.get(url).then((response) => {
          commit("setItems", { url, items: response.data.data });
          resolve();
        });
      }
      resolve();
    });
  }
};
const mutations = {
  setItems(state2, { url, items }) {
    if (!state2.items.hasOwnProperty(url)) {
      state2.items[url] = items;
    }
  }
};
const gridFilter = {
  namespaced: true,
  state,
  getters,
  actions,
  mutations
};
const store = createStore({
  modules: {
    user: userModule,
    contactSource,
    contactStatus,
    stateTerritory,
    filters: gridFilter
  },
  state: {
    //
  },
  getters: {
    //
  },
  actions: {
    //
  },
  mutations: {
    //
  }
});
const _sfc_main$1 = {
  name: "HeaderComponent",
  data: () => ({
    selectedAffiliateId: null,
    createNavItems: [{ title: "Add Individual", link: "/individuals/add" }],
    userNavItems: [
      { title: "My Account", linkName: "MyAccount" },
      { title: "Admin Affiliate Listing", linkName: "AffiliatesAdmin" }
    ],
    searchNavItems: [
      { title: "Search for Individuals", linkName: "IndividualSearch" },
      { title: "Search for Officers", linkName: "OfficerSearch" },
      { title: "Search for Affiliates", linkName: "AffiliatesSearch" },
      { title: "Search for Employers", linkName: "EmployersSearch" }
    ],
    appNavItems: [
      { title: "Connect Admin Panel", link: "/admin", ability: "admin" },
      { title: "Connect Staff Portal", link: "/app/staff", ability: "staffportal" },
      { title: "Membership Forms Portal", link: "/app/memberforms/admin", ability: "memberforms" }
    ],
    user: [],
    affiliates: [],
    affiliatesSearchText: null,
    mobileAffiliateSearchText: null,
    affiliatesSearchLoading: false,
    drawer: false,
    group: null,
    hasEdues: false
  }),
  computed: {
    token() {
      const token = document.head.querySelector('meta[name="csrf-token"]');
      return token.content;
    },
    affiliateText() {
      if (this.selectedAffiliate) {
        return this.selectedAffiliate.AffiliateNumber + " - " + this.selectedAffiliate.AffiliateName;
      }
      return "Selected Affiliate";
    },
    selectedAffiliate() {
      const affiliate = this.$store.getters["user/selectedAffiliate"];
      if (affiliate) {
        this.selectedAffiliateId = affiliate.AffiliateId;
        this.getHasDues();
      }
      return affiliate;
    }
  },
  beforeMount() {
    const userAbilities = this.$store.getters["user/userAbilities"].map((ability) => {
      var _a2;
      return (_a2 = ability == null ? void 0 : ability.AuthAbility) == null ? void 0 : _a2.type;
    }).filter((ability) => ability);
    this.appNavItems = this.appNavItems.filter((item) => {
      return userAbilities.includes(item.ability);
    });
    this.selectedAffiliateId = this.$store.getters["user/selectedAffiliate"] ? this.$store.getters["user/selectedAffiliate"].AffiliateId : null;
  },
  mounted() {
    if (this.affiliates.length === 0 && this.selectedAffiliate) {
      this.affiliates.push({
        AffiliateId: this.selectedAffiliate.AffiliateId,
        AffiliateName: this.selectedAffiliate.AffiliateName,
        AffiliateNumber: this.selectedAffiliate.AffiliateNumber
      });
    }
  },
  created() {
    this.debounceInput = debounce(function(search) {
      if (this.selectedAffiliate && search === this.selectedAffiliate.AffiliateName) {
        return;
      }
      this.affiliatesSearchLoading = true;
      axios.post("/api/v2/search/affiliate?scope=global", {
        search
      }).then((response) => {
        this.affiliates = response.data.data;
        if (response.data.meta.last_page > 1) {
          this.affiliates.push({ AffiliateName: '<strong style="color:#092a5c;">Click to see all affiliates here >></strong>', AffiliateNumber: "", AffiliateId: -1 });
        }
        this.affiliatesSearchLoading = false;
      });
    }, 500);
  },
  methods: {
    mergeProps,
    logout() {
      document.getElementById("logout-form").submit();
    },
    selectAffiliate(affiliateId) {
      if (affiliateId > 0) {
        this.$store.dispatch("user/setUserSelectedEntity", affiliateId).then((res) => {
          switch (this.$route.name) {
            case "Individuals":
              this.$router.go(0).catch((err) => {
              });
              break;
            case "IndividualDetails":
              this.$router.push({ name: "Individuals" }).catch((err) => {
              });
              break;
            case "EmployerDetails":
              this.$router.push({ name: "Employers" }).catch((err) => {
              });
              break;
            default:
              window.location.reload();
              break;
          }
        });
      } else {
        this.$nextTick(() => {
          this.selectedAffiliateId = this.$store.getters["user/selectedAffiliate"] ? this.$store.getters["user/selectedAffiliate"].AffiliateId : null;
        });
        this.$router.push({ name: "AffiliatesAdmin" }).catch((err) => {
        });
      }
    },
    loadDefaultAffiliates() {
      if (this.affiliates.length === 1 && this.affiliates.pop().AffiliateName === this.selectedAffiliate.AffiliateName) {
        axios.post("/api/v2/search/affiliate?scope=global", {
          search: ""
        }).then((response) => {
          if (this.affiliates.indexOf((affiliate) => {
            return affiliate.AffiliateName === this.selectedAffiliate.AffiliateName;
          }) !== -1) {
            this.affiliates = [];
          }
          this.affiliates = this.affiliates.concat(response.data.data);
          if (response.data.meta.last_page > 1) {
            this.affiliates.push({ AffiliateName: '<strong style="color:#092a5c;">Click to see all affiliates here >></strong>', AffiliateNumber: "", AffiliateId: -1 });
          }
        });
      }
    },
    searchAffiliates(itemTitle, queryText, item) {
      const searchText = queryText.toLowerCase();
      const id = item.raw.AffiliateId;
      if (id < 0) {
        return true;
      }
      const title = itemTitle.toLowerCase();
      const number = item.raw.AffiliateNumber.toLowerCase();
      return title.indexOf(searchText) > -1 || number.indexOf(searchText) > -1;
    },
    getAffiliateLabel(item) {
      return `${item.raw.AffiliateName}${item.raw.AffiliateId > 0 ? ` (${item.raw.AffiliateNumber})` : ""}`;
    },
    getHasDues() {
      axios.get("/api/v3/memberforms/admin/has-edues/" + this.selectedAffiliateId).then((response) => {
        this.hasEdues = response.data.hasEdues;
      });
    }
  },
  watch: {
    affiliatesSearchText(text) {
      this.debounceInput(text);
    },
    group() {
      this.drawer = false;
    }
  }
};
const _hoisted_1 = { class: "select-affiliate pt-3" };
const _hoisted_2 = { class: "icons" };
const _hoisted_3 = {
  id: "logout-form",
  action: "/logout",
  method: "POST",
  style: { "display": "none" }
};
const _hoisted_4 = ["value"];
const _hoisted_5 = { class: "hidden-lg-and-up mb-14" };
const _hoisted_6 = {
  id: "logout-form",
  action: "/logout",
  method: "POST",
  style: { "display": "none" }
};
const _hoisted_7 = ["value"];
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, [
    createVNode(VToolbar, {
      color: "primary",
      class: "main-menu hidden-md-and-down",
      id: "main-header-menu"
    }, {
      default: withCtx(() => [
        createVNode(VContainer, { class: "d-flex" }, {
          default: withCtx(() => [
            createVNode(VToolbarTitle, { class: "d-flex align-center" }, {
              default: withCtx(() => _cache[15] || (_cache[15] = [
                createBaseVNode(
                  "a",
                  {
                    class: "navbar-brand",
                    href: "/"
                  },
                  [
                    createBaseVNode("img", { src: "/images/logos/AFTConnectLogo.png" })
                  ],
                  -1
                  /* HOISTED */
                )
              ])),
              _: 1
              /* STABLE */
            }),
            createVNode(VToolbarItems, { class: "px-2" }, {
              default: withCtx(() => [
                createVNode(VBtn, {
                  variant: "text",
                  to: "/individuals",
                  class: "menu-link"
                }, {
                  default: withCtx(() => _cache[16] || (_cache[16] = [
                    createTextVNode("Individuals")
                  ])),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VBtn, {
                  variant: "text",
                  class: "menu-link",
                  to: "/units"
                }, {
                  default: withCtx(() => _cache[17] || (_cache[17] = [
                    createTextVNode("Units")
                  ])),
                  _: 1
                  /* STABLE */
                }),
                $options.selectedAffiliate && $options.selectedAffiliate.hasChapters ? (openBlock(), createBlock(VBtn, {
                  key: 0,
                  variant: "text",
                  class: "menu-link",
                  to: "/chapters"
                }, {
                  default: withCtx(() => _cache[18] || (_cache[18] = [
                    createTextVNode(" Chapters ")
                  ])),
                  _: 1
                  /* STABLE */
                })) : createCommentVNode("v-if", true),
                createVNode(VBtn, {
                  variant: "text",
                  to: "/employers",
                  class: "menu-link"
                }, {
                  default: withCtx(() => _cache[19] || (_cache[19] = [
                    createTextVNode("Employers")
                  ])),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VBtn, {
                  variant: "text",
                  to: "/affiliate",
                  class: "menu-link"
                }, {
                  default: withCtx(() => _cache[20] || (_cache[20] = [
                    createTextVNode("Affiliate")
                  ])),
                  _: 1
                  /* STABLE */
                }),
                createVNode(VBtn, {
                  variant: "text",
                  to: "/reports",
                  class: "menu-link"
                }, {
                  default: withCtx(() => _cache[21] || (_cache[21] = [
                    createTextVNode("Reports")
                  ])),
                  _: 1
                  /* STABLE */
                }),
                _ctx.hasEdues ? (openBlock(), createBlock(VBtn, {
                  key: 1,
                  variant: "text",
                  to: "/edues",
                  class: "menu-link"
                }, {
                  default: withCtx(() => _cache[22] || (_cache[22] = [
                    createTextVNode("eDues")
                  ])),
                  _: 1
                  /* STABLE */
                })) : createCommentVNode("v-if", true),
                createCommentVNode('                   <v-btn variant="text">'),
                createCommentVNode('                       <router-link class="menu-link" to="/looker-dashboard">Looker</router-link>'),
                createCommentVNode("                   </v-btn>")
              ]),
              _: 1
              /* STABLE */
            }),
            createBaseVNode("div", _hoisted_1, [
              createVNode(VAutocomplete, {
                label: "Selected Affiliate",
                modelValue: _ctx.selectedAffiliateId,
                "onUpdate:modelValue": [
                  _cache[0] || (_cache[0] = ($event) => _ctx.selectedAffiliateId = $event),
                  $options.selectAffiliate
                ],
                "base-color": "rgba(255,255,255,1)",
                items: _ctx.affiliates,
                customFilter: $options.searchAffiliates,
                search: _ctx.affiliatesSearchText,
                "onUpdate:search": _cache[1] || (_cache[1] = ($event) => _ctx.affiliatesSearchText = $event),
                loading: _ctx.affiliatesSearchLoading,
                "item-title": "AffiliateName",
                "item-value": "AffiliateId",
                placeholder: $options.affiliateText,
                "persistent-hint": "",
                "hide-no-data": "",
                variant: "underlined",
                onClick: $options.loadDefaultAffiliates,
                class: "text-white"
              }, {
                item: withCtx(({ props, item }) => [
                  createVNode(VListItem, mergeProps(props, {
                    title: $options.getAffiliateLabel(item)
                  }), null, 16, ["title"])
                ]),
                loader: withCtx(({ affiliatesSearchLoading }) => [
                  createVNode(VProgressLinear, {
                    active: affiliatesSearchLoading,
                    indeterminate: "",
                    height: "5",
                    color: "#3f98c9",
                    absolute: ""
                  }, null, 8, ["active"])
                ]),
                _: 1
                /* STABLE */
              }, 8, ["modelValue", "items", "customFilter", "search", "loading", "placeholder", "onUpdate:modelValue", "onClick"])
            ]),
            createVNode(VSpacer),
            createBaseVNode("div", _hoisted_2, [
              createVNode(VMenu, null, {
                activator: withCtx(({ props }) => [
                  createVNode(
                    VBtn,
                    mergeProps({
                      icon: "fa-plus",
                      size: "small"
                    }, props, { class: "menu-icons" }),
                    null,
                    16
                    /* FULL_PROPS */
                  )
                ]),
                default: withCtx(() => [
                  createVNode(VList, null, {
                    default: withCtx(() => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(_ctx.createNavItems, (item, index) => {
                          return openBlock(), createBlock(VListItem, {
                            key: index,
                            to: `${item.link}`
                          }, {
                            default: withCtx(() => [
                              createVNode(
                                VListItemTitle,
                                null,
                                {
                                  default: withCtx(() => [
                                    createTextVNode(
                                      toDisplayString(item.title),
                                      1
                                      /* TEXT */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1024
                                /* DYNAMIC_SLOTS */
                              )
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["to"]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VMenu, null, {
                activator: withCtx(({ props }) => [
                  createVNode(
                    VBtn,
                    mergeProps({
                      icon: "fa-search",
                      variant: "text",
                      size: "small"
                    }, props, { class: "menu-icons" }),
                    null,
                    16
                    /* FULL_PROPS */
                  )
                ]),
                default: withCtx(() => [
                  createVNode(VList, null, {
                    default: withCtx(() => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(_ctx.searchNavItems, (item, index) => {
                          return openBlock(), createBlock(VListItem, {
                            key: index + "-search",
                            to: { name: item.linkName }
                          }, {
                            default: withCtx(() => [
                              createVNode(
                                VListItemTitle,
                                null,
                                {
                                  default: withCtx(() => [
                                    createTextVNode(
                                      toDisplayString(item.title),
                                      1
                                      /* TEXT */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1024
                                /* DYNAMIC_SLOTS */
                              )
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["to"]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              _ctx.appNavItems && _ctx.appNavItems.length !== 0 ? (openBlock(), createBlock(VMenu, { key: 0 }, {
                activator: withCtx(({ props }) => [
                  createVNode(
                    VBtn,
                    mergeProps({
                      variant: "text",
                      size: "small"
                    }, props, {
                      icon: "fa-paper-plane",
                      class: "menu-icons"
                    }),
                    null,
                    16
                    /* FULL_PROPS */
                  )
                ]),
                default: withCtx(() => [
                  createVNode(VList, null, {
                    default: withCtx(() => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(_ctx.appNavItems, (item, index) => {
                          return openBlock(), createBlock(VListItem, {
                            key: index + "-app",
                            href: item.link
                          }, {
                            default: withCtx(() => [
                              createVNode(
                                VListItemTitle,
                                null,
                                {
                                  default: withCtx(() => [
                                    createTextVNode(
                                      toDisplayString(item.title),
                                      1
                                      /* TEXT */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1024
                                /* DYNAMIC_SLOTS */
                              )
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["href"]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      )),
                      createCommentVNode(`                            <v-list-item :key="'edues'" v-if="hasEdues">`),
                      createCommentVNode("                                <v-list-item-title>"),
                      createCommentVNode('                                    <router-link to="/edues">Edues</router-link>'),
                      createCommentVNode("                                </v-list-item-title>"),
                      createCommentVNode("                            </v-list-item>")
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              createVNode(VMenu, null, {
                activator: withCtx(({ props }) => [
                  createVNode(
                    VBtn,
                    mergeProps({ size: "small" }, props, {
                      icon: "fa-user-o",
                      class: "menu-icons"
                    }),
                    null,
                    16
                    /* FULL_PROPS */
                  )
                ]),
                default: withCtx(() => [
                  createVNode(VList, null, {
                    default: withCtx(() => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(_ctx.userNavItems, (item, index) => {
                          return openBlock(), createBlock(VListItem, {
                            key: index + "-user-menu",
                            to: { name: item.linkName }
                          }, {
                            default: withCtx(() => [
                              createVNode(
                                VListItemTitle,
                                null,
                                {
                                  default: withCtx(() => [
                                    createTextVNode(
                                      toDisplayString(item.title),
                                      1
                                      /* TEXT */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1024
                                /* DYNAMIC_SLOTS */
                              )
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["to"]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      )),
                      createVNode(VListItem, {
                        href: "https://awa.knack.aft.org/aftdatasupport#connect-feedback/",
                        target: "_blank"
                      }, {
                        default: withCtx(() => [
                          createVNode(VListItemTitle, null, {
                            default: withCtx(() => _cache[23] || (_cache[23] = [
                              createTextVNode("Feedback")
                            ])),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      createVNode(VListItem, { onClick: $options.logout }, {
                        default: withCtx(() => [
                          createVNode(VListItemTitle, null, {
                            default: withCtx(() => _cache[24] || (_cache[24] = [
                              createTextVNode("Logout")
                            ])),
                            _: 1
                            /* STABLE */
                          }),
                          createBaseVNode("form", _hoisted_3, [
                            createBaseVNode("input", {
                              type: "hidden",
                              name: "_token",
                              value: $options.token
                            }, null, 8, _hoisted_4)
                          ])
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["onClick"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ])
          ]),
          _: 1
          /* STABLE */
        })
      ]),
      _: 1
      /* STABLE */
    }),
    createBaseVNode("div", _hoisted_5, [
      createVNode(VAppBar, {
        color: "primary",
        class: "mobile-app-bar"
      }, {
        default: withCtx(() => [
          createVNode(VAppBarNavIcon, {
            icon: "mdi:mdi-menu",
            onClick: _cache[2] || (_cache[2] = withModifiers(($event) => _ctx.drawer = !_ctx.drawer, ["stop"])),
            color: "white",
            class: "mobile-menu-icons"
          }),
          createVNode(VSpacer),
          createVNode(VToolbarTitle, null, {
            default: withCtx(() => _cache[25] || (_cache[25] = [
              createBaseVNode(
                "a",
                {
                  class: "navbar-brand",
                  href: "/"
                },
                [
                  createBaseVNode("img", {
                    class: "mobile-logo",
                    src: "/images/logos/AFTConnectLogo.png"
                  })
                ],
                -1
                /* HOISTED */
              )
            ])),
            _: 1
            /* STABLE */
          }),
          createVNode(VSpacer),
          createVNode(VMenu, null, {
            activator: withCtx(({ props }) => [
              createVNode(
                VBtn,
                mergeProps({
                  icon: "mdi:mdi-plus",
                  color: "white"
                }, props, { class: "mobile-menu-icons rounded-circle" }),
                null,
                16
                /* FULL_PROPS */
              )
            ]),
            default: withCtx(() => [
              createVNode(VList, { class: "bg-light-blue-darken-2" }, {
                default: withCtx(() => [
                  (openBlock(), createBlock(VListItem, {
                    "v-for": (_ctx.item, _ctx.index) in _ctx.createNavItems,
                    key: _ctx.index,
                    to: `${_ctx.item.link}`
                  }, {
                    default: withCtx(() => [
                      createVNode(VListItemTitle, { class: "" }, {
                        default: withCtx(() => [
                          createTextVNode(
                            toDisplayString(_ctx.item.title),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["v-for", "to"]))
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      createVNode(VNavigationDrawer, {
        modelValue: _ctx.drawer,
        "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => _ctx.drawer = $event),
        absolute: "",
        temporary: "",
        class: "mobile-primary-navigation"
      }, {
        default: withCtx(() => [
          createVNode(VList, {
            nav: "",
            density: "compact",
            class: "mobile-v-list",
            modelValue: _ctx.group,
            "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => _ctx.group = $event)
          }, {
            default: withCtx(() => [
              createVNode(VListItem, { class: "navigation-drawer-icons" }, {
                default: withCtx(() => [
                  createVNode(VBtn, {
                    variant: "text",
                    color: "white",
                    icon: "fa-question",
                    size: "large",
                    class: "mobile-menu-icons rounded-circle",
                    to: "/releasenotes"
                  }),
                  createVNode(VMenu, null, {
                    activator: withCtx(({ props }) => [
                      createVNode(
                        VBtn,
                        mergeProps({ variant: "text" }, props, {
                          color: "white",
                          icon: "fa-search",
                          size: "large",
                          class: "mobile-menu-icons rounded-circle",
                          onClick: _cache[3] || (_cache[3] = withModifiers(($event) => _ctx.drawer = true, ["stop"]))
                        }),
                        null,
                        16
                        /* FULL_PROPS */
                      )
                    ]),
                    default: withCtx(() => [
                      createVNode(VList, null, {
                        default: withCtx(() => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(_ctx.searchNavItems, (item, index) => {
                              return openBlock(), createBlock(VListItem, {
                                key: index + "-search",
                                to: { name: item.linkName }
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(
                                    toDisplayString(item.title),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              }, 1032, ["to"]);
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  _ctx.appNavItems && _ctx.appNavItems.length !== 0 ? (openBlock(), createBlock(VMenu, { key: 0 }, {
                    activator: withCtx(({ props }) => [
                      createVNode(
                        VBtn,
                        mergeProps({ variant: "text" }, props, {
                          color: "white",
                          icon: "fa-paper-plane",
                          size: "large",
                          class: "mobile-menu-icons",
                          onClick: _cache[4] || (_cache[4] = withModifiers(($event) => _ctx.drawer = true, ["stop"]))
                        }),
                        null,
                        16
                        /* FULL_PROPS */
                      )
                    ]),
                    default: withCtx(() => [
                      createVNode(VList, null, {
                        default: withCtx(() => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(_ctx.appNavItems, (item, index) => {
                              return openBlock(), createBlock(VListItem, {
                                key: index + "-app",
                                href: item.link
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(
                                    toDisplayString(item.title),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              }, 1032, ["href"]);
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          )),
                          createCommentVNode(`                                    <v-list-item :key="'edues'" v-if="hasEdues">`),
                          createCommentVNode("                                        <v-list-item-title>"),
                          createCommentVNode('                                            <router-link to="/edues">Edues</router-link>'),
                          createCommentVNode("                                        </v-list-item-title>"),
                          createCommentVNode("                                    </v-list-item>")
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })) : createCommentVNode("v-if", true),
                  createVNode(VMenu, {
                    onClick: _cache[6] || (_cache[6] = withModifiers(($event) => _ctx.drawer = true, ["stop"]))
                  }, {
                    activator: withCtx(({ props }) => [
                      createVNode(
                        VBtn,
                        mergeProps({ variant: "text" }, props, {
                          color: "white",
                          icon: "fa-user-o",
                          size: "large",
                          class: "mobile-menu-icons",
                          onClick: _cache[5] || (_cache[5] = withModifiers(($event) => _ctx.drawer = true, ["stop"]))
                        }),
                        null,
                        16
                        /* FULL_PROPS */
                      )
                    ]),
                    default: withCtx(() => [
                      createVNode(VList, null, {
                        default: withCtx(() => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(_ctx.userNavItems, (item, index) => {
                              return openBlock(), createBlock(VListItem, {
                                key: index + "-user-menu",
                                to: { name: item.linkName }
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(
                                    toDisplayString(item.title),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              }, 1032, ["to"]);
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          )),
                          createVNode(VListItem, {
                            href: "https://awa.knack.aft.org/aftdatasupport#connect-feedback/",
                            target: "_blank"
                          }, {
                            default: withCtx(() => _cache[26] || (_cache[26] = [
                              createTextVNode(" Feedback ")
                            ])),
                            _: 1
                            /* STABLE */
                          }),
                          createVNode(VListItem, { onClick: $options.logout }, {
                            default: withCtx(() => [
                              _cache[27] || (_cache[27] = createTextVNode(" Logout ")),
                              createBaseVNode("form", _hoisted_6, [
                                createBaseVNode("input", {
                                  type: "hidden",
                                  name: "_token",
                                  value: $options.token
                                }, null, 8, _hoisted_7)
                              ])
                            ]),
                            _: 1
                            /* STABLE */
                          }, 8, ["onClick"])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VDivider, { class: "mobile-v-divider" }),
              createVNode(VListItem, null, {
                default: withCtx(() => [
                  createVNode(VRow, {
                    "no-gutters": "",
                    onClick: _cache[12] || (_cache[12] = withModifiers(($event) => _ctx.drawer = true, ["stop"]))
                  }, {
                    default: withCtx(() => [
                      createVNode(VMenu, {
                        onClick: _cache[11] || (_cache[11] = withModifiers(($event) => _ctx.drawer = true, ["stop"])),
                        class: "text-white"
                      }, {
                        activator: withCtx(({ props: menu }) => [
                          createVNode(
                            VTooltip,
                            {
                              location: "top",
                              "open-on-click": ""
                            },
                            {
                              activator: withCtx(({ props: tooltip }) => [
                                createVNode(
                                  VBtn,
                                  mergeProps($options.mergeProps(menu, tooltip), {
                                    variant: "text",
                                    "prepend-icon": "mdi:mdi-chevron-down",
                                    class: "mobile-select-affiliate",
                                    color: "white",
                                    title: "Selected Affiliate",
                                    block: ""
                                  }),
                                  {
                                    default: withCtx(() => [
                                      createTextVNode(
                                        toDisplayString($options.affiliateText),
                                        1
                                        /* TEXT */
                                      )
                                    ]),
                                    _: 2
                                    /* DYNAMIC */
                                  },
                                  1040
                                  /* FULL_PROPS, DYNAMIC_SLOTS */
                                )
                              ]),
                              default: withCtx(() => [
                                _cache[28] || (_cache[28] = createBaseVNode(
                                  "span",
                                  null,
                                  "Selected Affiliate",
                                  -1
                                  /* HOISTED */
                                ))
                              ]),
                              _: 2
                              /* DYNAMIC */
                            },
                            1024
                            /* DYNAMIC_SLOTS */
                          )
                        ]),
                        default: withCtx(() => [
                          createVNode(VList, {
                            onClick: _cache[10] || (_cache[10] = withModifiers(($event) => _ctx.drawer = true, ["stop"]))
                          }, {
                            default: withCtx(() => [
                              createVNode(VCardText, {
                                onClick: _cache[9] || (_cache[9] = withModifiers(($event) => _ctx.drawer = true, ["stop"]))
                              }, {
                                default: withCtx(() => [
                                  createVNode(VAutocomplete, {
                                    label: "Selected Affiliate",
                                    modelValue: _ctx.selectedAffiliateId,
                                    "onUpdate:modelValue": [
                                      _cache[7] || (_cache[7] = ($event) => _ctx.selectedAffiliateId = $event),
                                      $options.selectAffiliate
                                    ],
                                    items: _ctx.affiliates,
                                    customFilter: $options.searchAffiliates,
                                    search: _ctx.affiliatesSearchText,
                                    "onUpdate:search": _cache[8] || (_cache[8] = ($event) => _ctx.affiliatesSearchText = $event),
                                    loading: _ctx.affiliatesSearchLoading,
                                    "item-title": "AffiliateName",
                                    "item-value": "AffiliateId",
                                    "persistent-hint": "",
                                    "hide-no-data": "",
                                    variant: "underlined",
                                    onClick: $options.loadDefaultAffiliates
                                  }, {
                                    item: withCtx(({ props, item }) => [
                                      createVNode(VListItem, mergeProps(props, {
                                        title: $options.getAffiliateLabel(item),
                                        class: "mobile-affiliate-search-item"
                                      }), null, 16, ["title"])
                                    ]),
                                    loader: withCtx(({ affiliatesSearchLoading }) => [
                                      createVNode(VProgressLinear, {
                                        active: affiliatesSearchLoading,
                                        indeterminate: "",
                                        height: "5",
                                        color: "#3f98c9",
                                        absolute: ""
                                      }, null, 8, ["active"])
                                    ]),
                                    _: 1
                                    /* STABLE */
                                  }, 8, ["modelValue", "items", "customFilter", "search", "loading", "onUpdate:modelValue", "onClick"])
                                ]),
                                _: 1
                                /* STABLE */
                              })
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(VDivider, { class: "mobile-v-divider" }),
              createVNode(VListItem, {
                class: "mobile-menu-link",
                to: "/individuals"
              }, {
                default: withCtx(() => _cache[29] || (_cache[29] = [
                  createTextVNode("Individuals")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VListItem, {
                class: "mobile-menu-link",
                to: "/affiliate"
              }, {
                default: withCtx(() => _cache[30] || (_cache[30] = [
                  createTextVNode("Affiliate")
                ])),
                _: 1
                /* STABLE */
              }),
              $options.selectedAffiliate && $options.selectedAffiliate.hasChapters ? (openBlock(), createBlock(VListItem, {
                key: 0,
                class: "mobile-menu-link",
                to: "/chapters"
              }, {
                default: withCtx(() => _cache[31] || (_cache[31] = [
                  createTextVNode(" Chapters ")
                ])),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              createVNode(VListItem, {
                class: "mobile-menu-link",
                to: "/units"
              }, {
                default: withCtx(() => _cache[32] || (_cache[32] = [
                  createTextVNode("Units")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VListItem, {
                class: "mobile-menu-link",
                to: "/employers"
              }, {
                default: withCtx(() => _cache[33] || (_cache[33] = [
                  createTextVNode("Employers")
                ])),
                _: 1
                /* STABLE */
              }),
              createVNode(VListItem, {
                class: "mobile-menu-link",
                to: "/reports"
              }, {
                default: withCtx(() => _cache[34] || (_cache[34] = [
                  createTextVNode("Reports")
                ])),
                _: 1
                /* STABLE */
              }),
              _ctx.hasEdues ? (openBlock(), createBlock(VListItem, {
                key: 1,
                class: "mobile-menu-link",
                to: "/edues"
              }, {
                default: withCtx(() => _cache[35] || (_cache[35] = [
                  createTextVNode("Edues")
                ])),
                _: 1
                /* STABLE */
              })) : createCommentVNode("v-if", true),
              createVNode(VDivider, { class: "mobile-v-divider" })
            ]),
            _: 1
            /* STABLE */
          }, 8, ["modelValue"])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"])
    ])
  ]);
}
const HeaderComponent = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1], ["__file", "/var/www/html/resources/js/components/Common/HeaderComponent.vue"]]);
const _sfc_main = {
  name: "App",
  components: {
    HeaderComponent,
    FooterComponent
  },
  data: () => ({
    dialogSessionTimeout: false
  }),
  created: function() {
    const token = document.head.querySelector('meta[name="csrf-token"]');
    if (!token) {
      window.location = "/login";
      return;
    }
    window.axios.interceptors.response.use(null, (error) => {
      if (error.response && error.response.status == 401) {
        this.dialogSessionTimeout = true;
        return;
      }
      return Promise.reject(error);
    });
    const me = this;
    window.axios.interceptors.request.use(function(config) {
      const affiliate = me.$store.getters["user/selectedAffiliate"];
      if (affiliate && window.scope === "affiliate" && typeof affiliate.AffiliateId !== "undefined" && config.url.indexOf("scope=global") === -1) {
        config.url += (config.url.indexOf("?") > 0 ? "&" : "?") + "affiliates=" + affiliate.AffiliateId;
      }
      return config;
    });
  },
  methods: {
    gotoLogin() {
      window.location = "/login";
    }
  }
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_HeaderComponent = resolveComponent("HeaderComponent");
  const _component_router_view = resolveComponent("router-view");
  const _component_FooterComponent = resolveComponent("FooterComponent");
  return openBlock(), createBlock(VApp, null, {
    default: withCtx(() => [
      createVNode(_component_HeaderComponent),
      createBaseVNode(
        "main",
        {
          class: normalizeClass(["py-4", { "mt-12": _ctx.$vuetify.display.mdAndUp }]),
          id: "main-container"
        },
        [
          createVNode(_component_router_view),
          createVNode(VDialog, {
            modelValue: _ctx.dialogSessionTimeout,
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.dialogSessionTimeout = $event),
            persistent: "",
            "max-width": "290"
          }, {
            default: withCtx(() => [
              createVNode(VCard, null, {
                default: withCtx(() => [
                  createVNode(VCardTitle, { class: "text-h5" }, {
                    default: withCtx(() => _cache[2] || (_cache[2] = [
                      createTextVNode(" Session Timed Out ")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCardText, null, {
                    default: withCtx(() => _cache[3] || (_cache[3] = [
                      createTextVNode(" Your session has timed out due to inactivity. Please login to continue. ")
                    ])),
                    _: 1
                    /* STABLE */
                  }),
                  createVNode(VCardActions, null, {
                    default: withCtx(() => [
                      createVNode(VSpacer),
                      createVNode(VBtn, {
                        color: "primary-darken-1",
                        variant: "text",
                        onClick: _cache[0] || (_cache[0] = ($event) => $options.gotoLogin())
                      }, {
                        default: withCtx(() => _cache[4] || (_cache[4] = [
                          createTextVNode(" Login ")
                        ])),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }, 8, ["modelValue"])
        ],
        2
        /* CLASS */
      ),
      createVNode(_component_FooterComponent)
    ]),
    _: 1
    /* STABLE */
  });
}
const myApp = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "/var/www/html/resources/js/myApp.vue"]]);
const app = createApp(myApp);
app.use(router);
app.use(store);
app.use(vuetify);
app.config.globalProperties.$filters = {
  formatDate(value) {
    if (!value) return "";
    value = value.replace("Z", "");
    return format(new Date(value), "MMM dd, yyyy");
  },
  formatDateTime(value) {
    if (!value) return "";
    value = value.replace("Z", "");
    return format(new Date(value), "MMM dd, yyyy, h:mm a");
  }
};
store.dispatch("user/getUser").then(
  (res) => {
    app.mount("#app");
  }
);
//# sourceMappingURL=app-DGMJliBG.js.map
