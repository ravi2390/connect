---
docker-compose-yaml: docker-compose.yml
project: connect-laravel
ssh: ssh.lagoon.sharemylesson.com:2201
api: https://api.lagoon.sharemylesson.com/graphql

environment_variables:
  git_sha: 'true'

tasks:
  build:
    - run:
        name: Build with cache
        command: |
          docker build --cache-from ${REGISTRY}/${LAGOON_PROJECT}-cache:latest \
                      --cache-to ${REGISTRY}/${LAGOON_PROJECT}-cache:latest \
                      -t ${REGISTRY}/${LAGOON_PROJECT}:${LAGOON_GIT_SHA} .
        service: cli
  pre-rollout:
    - run:
        name: Pull Docker cache
        command: |
          docker pull ${REGISTRY}/${LAGOON_PROJECT}-cache:latest || true
        service: cli
#    - run:
#        name: drush sql-dump
#        command: mkdir -p /app/web/sites/default/files/private/ && drush sql-dump --ordered-dump --gzip --result-file=/app/web/sites/default/files/private/pre-deploy-dump.sql.gz
#        service: cli
  post-rollout:
    - run:
        name: Prepare storage directory
        command: |
          mkdir -p storage/framework/{sessions,views,cache}
          chmod -R 775 storage/framework
          mkdir -p storage/app/{public,private}
          chmod -R 775 storage/app
          mkdir -p storage/logs
          chmod -R 775 storage/logs
          mkdir -p storage/aftdb/{cache,schema}
          chmod -R 775 storage/aftdb
        service: cli
        shell: bash
    - run:
        name: artisan post-install-cmd
        command: |
          rsync -rltD /tmp/aftdb /app/storage/
          php artisan aftdb:clean
          php artisan aftdb:create
          php artisan migrate --force
          php artisan storage:link
          php artisan passport:keys || true
          php artisan db:seed
          php artisan muse:set-secret --from-env
          php artisan cache:clear
          php artisan view:clear
          php artisan config:clear
          php artisan route:clear
          #php composer dump
        service: cli
        shell: bash
    - run:
        name: Set New Relic deployment marker
        command: '[ -n "$NR_ENV_GUID" ] && newrelic entity deployment create --guid ${NR_ENV_GUID} --version ${LAGOON_GIT_BRANCH} --commit ${LAGOON_GIT_SHA} --deploymentType BASIC --profile default || echo "No NR_ENV_GUID set. Not sending a deploy event to New Relic."'
        service: cli
        shell: bash
#    - run:
#        name: artisan test
#        command: php artisan test
#        service: cli
#        shell: bash

routes:
  autogenerate:
    insecure: Redirect

environments:
  production:
    routes:
      - nginx:
        - "connect.aft.org":
            tls-acme: true
            insecure: Redirect
            annotations:
              kubernetes.io/tls-acme: "true"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "100"
        - "connect.mda-lagoon.aft.org":
            tls-acme: true
            insecure: Redirect
            annotations:
              kubernetes.io/tls-acme: "true"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "100"
    cronjob:
      - name: Billhighway data update
        schedule: "0 * * * *"
        command: php artisan bh:sync 24
        service: cli

  staging:
    routes:
      - nginx:
        - "stage.aftmda.org":
            tls-acme: true
            insecure: Redirect
            annotations:
              kubernetes.io/tls-acme: "true"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "100"
        - "connect-staging.mda-lagoon.aft.org":
            tls-acme: true
            insecure: Redirect
            annotations:
              kubernetes.io/tls-acme: "true"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "100"
    cronjob:
      - name: Billhighway data update
        schedule: "0 * * * *"
        command: php artisan bh:sync 24
        service: cli

  development:
    routes:
      - nginx:
        - "dev-new.aftmda.org":
            tls-acme: true
            insecure: Redirect
            annotations:
              kubernetes.io/tls-acme: "true"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "100"
        - "connect-dev.mda-lagoon.aft.org":
            tls-acme: true
            insecure: Redirect
            annotations:
              kubernetes.io/tls-acme: "true"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "100"
        - "dev.aftmda.org":
            tls-acme: true
            insecure: Redirect
            annotations:
              kubernetes.io/tls-acme: "true"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "100"

#  "*":
#    routes:
#      - nginx:
#        - "*":
#            extra_config: |
#              add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' https://*.googleapis.com https://*.gstatic.com https://d1ss0mttpod7h1.cloudfront.net data:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; frame-src 'self' 'unsafe-inline' 'unsafe-eval' https://*.oneschema.co https://*.cloud.looker.com; object-src 'none';";
#              add_header Permissions-Policy "accelerometer=(self)";
#              add_header X-Frame-Options "SAMEORIGIN";
#              add_header X-Content-Type-Options "nosniff";
#              add_header Referrer-Policy "strict-origin-when-cross-origin";
#              add_header X-Robots-Tag "noindex, nofollow";

#    types:
#      mariadb: mariadb
#    templates:
#      mariadb: mariadb.main.deployment.yml
#    rollouts:
#      mariadb: statefulset
#    cronjobs:
#      - name: drush cron
#        schedule: "M * * * *" # This will run the cron once per hour.
#        command: drush cron
#        service: cli
#  staging:
#      cronjobs:
#      - name: drush cron
#        schedule: "M * * * *" # This will run the cron once per hour.
#        command: drush cron
#        service: cli
#  feature/feature-branch:
#      cronjobs:
#      - name: drush cron
#        schedule: "H * * * *" # This will run the cron once per hour.
#        command: drush cron
#        service: cli

lagoon-sync:
  mariadb:
    config:
      hostname: "${MARIADB_HOST:-mariadb}"
      username: "${MARIADB_USERNAME:-laravel}"
      password: "${MARIADB_PASSWORD:-laravel}"
      port: "${MARIADB_PORT:-3306}"
      database: "${MARIADB_DATABASE:-laravel}"
  files:
    config:
      sync-directory: "/app/storage"

build-deploy:
  config:
    build-args:
      - LAGOON_ENVIRONMENT_TYPE=${LAGOON_ENVIRONMENT_TYPE}
