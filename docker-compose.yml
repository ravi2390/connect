x-lagoon-project:
  # Lagoon project name (leave `&lagoon-project` when you edit this)
  &lagoon-project connect-laravel

x-volumes:
  &default-volumes
    # Define all volumes you would like to have real-time mounted into the docker containers
    volumes:
      - .:/app:delegated
        #- files:/app/storage

x-environment:
  &default-environment
    LAGOON_PROJECT: *lagoon-project
    # Route that should be used locally, if you are using pygmy, this route *must* end with .docker.amazee.io
    LAGOON_ROUTE: &default-url http://${COMPOSE_PROJECT_NAME}.docker
    # Uncomment if you want to have the system behave as it will in production
    #LAGOON_ENVIRONMENT_TYPE: production
    # Uncomment to enable Xdebug and then restart via `docker compose up -d`
    XDEBUG_ENABLE: "true"

x-user:
  &default-user
    # The default user under which the containers should run. Change this if you are on linux and run with another user than ID `1000`
    user: 'root'

volumes:
  files:
    {}
  db:
    {}

services:
  cli: # cli container, will be used for executing composer and any local commands (drush, drupal, etc.)
    build:
      context: .
      dockerfile: lagoon/cli.dockerfile
    image: &cli-image ${COMPOSE_PROJECT_NAME:-laravel-base}-cli # this image will be reused as `CLI_IMAGE` in subsequent Docker builds
    labels:
      lagoon.resources.requests.cpu: 20m
      lagoon.resources.limits.cpu: 1000m
      lagoon.resources.requests.memory: 200Mi
      lagoon.resources.limits.memory: 1Gi
      # Lagoon Labels
      lagoon.type: cli-persistent
      lagoon.persistent.name: nginx # mount the persistent storage of nginx into this container
      lagoon.persistent: /app/storage/ # location where the persistent storage should be mounted
      lando.type: php-cli-drupal
    << : *default-volumes # loads the defined volumes from the top
    user: root
    environment:
      << : *default-environment # loads the defined environment variables from the top

  nginx:
    build:
      context: .
      dockerfile: lagoon/nginx.dockerfile
      args:
        CLI_IMAGE: *cli-image # Inject the name of the cli image
    labels:
      lagoon.resources.requests.cpu: 20m
      lagoon.resources.limits.cpu: 500m
      lagoon.resources.requests.memory: 200Mi
      lagoon.resources.limits.memory: 2Gi

      # Override in production
      lagoon.resources.override-branch.production.requests.cpu: 200m
      lagoon.resources.override-branch.production.limits.cpu: 500m
      lagoon.resources.override-branch.production.requests.memory: 1Gi
      lagoon.resources.override-branch.production.limits.memory: 4Gi

      lagoon.type: nginx-php-persistent
      lagoon.name: nginx
      lagoon.persistent: /app/storage/ # define where the persistent storage should be mounted too
      lando.type: nginx-laravel
    ports:
      - "8080" # exposes the port 8080 with a random local port, find it with `docker-compose port nginx 8080`
    << : [*default-volumes, *default-user]
    depends_on:
      - cli # basically just tells docker-compose to build the cli image first
    environment:
      << : *default-environment # loads the defined environment variables from the top
      LAGOON_LOCALDEV_URL: *default-url

  php:
    build:
      context: .
      dockerfile: lagoon/php.dockerfile
      args:
        CLI_IMAGE: *cli-image # Inject the name of the cli imag
    labels:
      lagoon.resources.requests.cpu: 200m
      lagoon.resources.limits.cpu: 500m
      lagoon.resources.requests.memory: 400Mi
      lagoon.resources.limits.memory: 1Gi

      # Override in production
      lagoon.resources.override-branch.production.requests.cpu: 200m
      lagoon.resources.override-branch.production.limits.cpu: 1000m
      lagoon.resources.override-branch.production.requests.memory: 1Gi
      lagoon.resources.override-branch.production.limits.memory: 4Gi

      lagoon.type: nginx-php-persistent
      lagoon.name: nginx # we want this service be part of the nginx pod in Lagoon
      lagoon.persistent: /app/storage/ # define where the persistent storage should be mounted too
      lando.type: php-fpm
    << : [*default-volumes, *default-user]
    depends_on:
      - cli # basically just tells docker-compose to build the cli image first
    environment:
      << : *default-environment # loads the defined environment variables from the top

  redis:
    build:
      context: .
      dockerfile: lagoon/redis.dockerfile
    labels:
      lagoon.resources.requests.cpu: 20m
      lagoon.resources.limits.cpu: 500m
      lagoon.resources.requests.memory: 100Mi
      lagoon.resources.limits.memory: 1Gi

      lagoon.type: redis
    << : *default-user # Uses the defined user from top.
    environment:
      << : *default-environment
