---
- hosts: "webservers"
  become: yes
  become_user: deploy
  any_errors_fatal: yes
  handlers:
    - name: "restart php-fpm"
      become_user: root
      service:
        name: php7.4-fpm
        state: restarted

  tasks:
    - name: "Create release subdir"
      file:
        path: "/var/www/{{ app_name }}/releases"
        state: directory

    - name: "Clean-up old releases"
      include_tasks: cleanup.yaml
      when: clean | bool

    - name: "Check for git checkout"
      stat:
        path: "/var/www/{{ app_name }}/releases/{{ version }}-deploy/.git"
      register: git

    - name: "Clone git repo"
      git:
        accept_hostkey: yes
        repo: "https://x-token-auth:{{ bitbucket_token }}@{{ bitbucket_repo }}"
        dest: "/var/www/{{ app_name }}/releases/{{ version }}-deploy"
        version: "{{ version }}-deploy"
      when: not git.stat.exists

    - name: "Check for packages/aft directory"
      stat:
        path: "/var/www/{{ app_name }}/releases/{{ version }}-deploy/packages/aft"
      register: packages

    - name: "Check for vendor directory"
      stat:
        path: "/var/www/{{ app_name }}/releases/{{ version }}-deploy/vendor"
      register: vendor

    - name: "Check for second laravel vendor directory"
      stat:
        path: "/var/www/{{ app_name }}/releases/{{ version }}-deploy/public/vendor"
      register: laravel_vendor

    - name: "Assert that all expected build directories exist"
      assert:
        that:
          - packages.stat.exists and packages.stat.isdir
          - vendor.stat.exists and vendor.stat.isdir
          - laravel_vendor.stat.exists and laravel_vendor.stat.isdir
        fail_msg: "Missing build directories. Aborting..."
        success_msg: "All build directories OK..."
      when: not ansible_check_mode

    - name: "Template .env settings"
      template:
        src: env.j2
        dest: "/var/www/{{ app_name }}/releases/{{ version }}-deploy/.env"
        mode: "0440"

    - name: "Check for storage symlink"
      stat:
        path: "/var/www/{{ app_name }}/releases/{{ version }}-deploy/storage"
      register: storage

    - name: "Delete vestigial data from git repo"
      file:
        state: absent
        path: "/var/www/{{ app_name }}/releases/{{ version }}-deploy/storage"
      when:
        - not storage.stat.islnk
        - storage.stat.isdir

    - name: "Symlink storage subdirectory to EFS"
      file:
        force: yes
        state: link
        src: /mnt/nfs/{{ app_name }}/{{ env }}/storage
        dest: "/var/www/{{ app_name }}/releases/{{ version }}-deploy/storage"

    - name: "Add write permissions to necessary directories"
      become_user: root
      file:
        path: "/var/www/{{ app_name }}/releases/{{ version }}-deploy/bootstrap/cache"
        owner: www-data
        group: deploy
        mode: "0775"
        state: directory
        recurse: no

    # Make sure laravel log files are writable by apache and deploy script
    - name: "Update permissions on log files"
      become_user: root
      file:
        state: directory
        owner: www-data
        group: deploy
        mode: "0664"
        recurse: yes
        path: /mnt/nfs/{{ app_name }}/{{ env }}/storage/logs

    # Also allow the deploy script to create a new log file
    - name: "Update permissions on log directory"
      become_user: root
      file:
        state: directory
        mode: "0775"
        recurse: no
        path: /mnt/nfs/{{ app_name }}/{{ env }}/storage/logs

    - name: Run artisan commands
      block:
      - name: "Run artisan aftdb:create"
        args:
          chdir: "/var/www/{{ app_name }}/releases/{{ version }}-deploy"
        shell: "php artisan aftdb:create"

      - name: "Run artisan migrate"
        args:
          chdir: "/var/www/{{ app_name }}/releases/{{ version }}-deploy"
        shell: 'php artisan migrate --force'
        run_once: yes

      - name: "Run artisan storage:link"
        args:
          chdir: "/var/www/{{ app_name }}/releases/{{ version }}-deploy"
        shell: "php artisan storage:link"

      - name: "Run custom artisan commands"
        args:
          chdir: "/var/www/{{ app_name }}/releases/{{ version }}-deploy"
        shell: "{{ item }}"
        loop: "{{ artisan_commands }}"
        run_once: true
        when: artisan_commands is defined
      always:
        # If a new log file is created by deploy user, make it writable by apache as well
        - name: "Update permissions on new log files"
          become_user: root
          file:
            state: directory
            owner: www-data
            group: deploy
            mode: "0664"
            recurse: yes
            path: /mnt/nfs/{{ app_name }}/{{ env }}/storage/logs

        # Also allow the deploy script to create a new log file
        - name: "Update permissions on log directory (again)"
          become_user: root
          file:
            state: directory
            mode: "0775"
            recurse: no
            path: /mnt/nfs/{{ app_name }}/{{ env }}/storage/logs

    - name: "Start up test server"
      become_user: www-data
      shell: php artisan serve --port 8000
      async: 30
      poll: 0
      args:
        chdir: "/var/www/{{ app_name }}/releases/{{ version }}-deploy/"
      when: not (force | default(false))

    - name: "Attempt to load page with curl"
      uri:
        url: http://localhost:8000/login
        method: GET
        return_content: yes
      retries: 3
      delay: 3
      register: curl
      when: not (force | default(false))

    - name: "assert that laravel returns 200 and the landing page loads"
      assert:
        that:
          - curl.status == 200
          - laravel.app_name in curl.content
      when: not (force | default(false))

    - name: "Update symlink to make new deployment live"
      file:
        state: link
        src: "/var/www/{{ app_name }}/releases/{{ version }}-deploy/public"
        dest: "/var/www/{{ app_name }}/current"
      notify: restart php-fpm

    - name: "Clear debugbar cache"
      shell: redis-cli -h {{ cache.host }} DEL {{ cache.prefix }}phpdebugbar:data {{ cache.prefix }}phpdebugbar:meta
      run_once: yes
      when: laravel.app_env != "production"
